
radiosonda_m20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b28  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c5c  08004c5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c5c  08004c5c  00014c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c64  08004c64  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c64  08004c64  00014c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c68  08004c68  00014c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000000c  08004c78  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08004c78  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000104b3  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002572  00000000  00000000  0003052a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb0  00000000  00000000  00032aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b7a  00000000  00000000  00033950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013612  00000000  00000000  000344ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f1f  00000000  00000000  00047adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078cf8  00000000  00000000  000589fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003508  00000000  00000000  000d16f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d4bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004bd0 	.word	0x08004bd0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004bd0 	.word	0x08004bd0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8d8 	bl	8000490 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8d3 	bl	8000490 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzsi2>:
 8000454:	211c      	movs	r1, #28
 8000456:	2301      	movs	r3, #1
 8000458:	041b      	lsls	r3, r3, #16
 800045a:	4298      	cmp	r0, r3
 800045c:	d301      	bcc.n	8000462 <__clzsi2+0xe>
 800045e:	0c00      	lsrs	r0, r0, #16
 8000460:	3910      	subs	r1, #16
 8000462:	0a1b      	lsrs	r3, r3, #8
 8000464:	4298      	cmp	r0, r3
 8000466:	d301      	bcc.n	800046c <__clzsi2+0x18>
 8000468:	0a00      	lsrs	r0, r0, #8
 800046a:	3908      	subs	r1, #8
 800046c:	091b      	lsrs	r3, r3, #4
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__clzsi2+0x22>
 8000472:	0900      	lsrs	r0, r0, #4
 8000474:	3904      	subs	r1, #4
 8000476:	a202      	add	r2, pc, #8	; (adr r2, 8000480 <__clzsi2+0x2c>)
 8000478:	5c10      	ldrb	r0, [r2, r0]
 800047a:	1840      	adds	r0, r0, r1
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	02020304 	.word	0x02020304
 8000484:	01010101 	.word	0x01010101
	...

08000490 <__clzdi2>:
 8000490:	b510      	push	{r4, lr}
 8000492:	2900      	cmp	r1, #0
 8000494:	d103      	bne.n	800049e <__clzdi2+0xe>
 8000496:	f7ff ffdd 	bl	8000454 <__clzsi2>
 800049a:	3020      	adds	r0, #32
 800049c:	e002      	b.n	80004a4 <__clzdi2+0x14>
 800049e:	0008      	movs	r0, r1
 80004a0:	f7ff ffd8 	bl	8000454 <__clzsi2>
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <myspi>:

	HAL_Delay(100);
}

void myspi(uint32_t data)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	//uint32_t delay = 0;
	HAL_GPIO_WritePin(ADF_LE_GPIO_Port, ADF_LE_Pin, GPIO_PIN_RESET);
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	482f      	ldr	r0, [pc, #188]	; (8000574 <myspi+0xcc>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	0019      	movs	r1, r3
 80004ba:	f001 fcb9 	bl	8001e30 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ADF_Data_GPIO_Port, ADF_Data_Pin, GPIO_PIN_RESET);
 80004be:	2380      	movs	r3, #128	; 0x80
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	482c      	ldr	r0, [pc, #176]	; (8000574 <myspi+0xcc>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	0019      	movs	r1, r3
 80004c8:	f001 fcb2 	bl	8001e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADF_CLK_GPIO_Port, ADF_CLK_Pin, GPIO_PIN_RESET);
 80004cc:	4b29      	ldr	r3, [pc, #164]	; (8000574 <myspi+0xcc>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	2180      	movs	r1, #128	; 0x80
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 fcac 	bl	8001e30 <HAL_GPIO_WritePin>
	//HAL_Delay(delay);
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004d8:	4b27      	ldr	r3, [pc, #156]	; (8000578 <myspi+0xd0>)
 80004da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004dc:	4b26      	ldr	r3, [pc, #152]	; (8000578 <myspi+0xd0>)
 80004de:	2101      	movs	r1, #1
 80004e0:	430a      	orrs	r2, r1
 80004e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80004e4:	4b24      	ldr	r3, [pc, #144]	; (8000578 <myspi+0xd0>)
 80004e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e8:	2201      	movs	r2, #1
 80004ea:	4013      	ands	r3, r2
 80004ec:	60bb      	str	r3, [r7, #8]
 80004ee:	68bb      	ldr	r3, [r7, #8]
	for (int i = 0; i < 32; i++) {
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	e023      	b.n	800053e <myspi+0x96>
		HAL_GPIO_WritePin(ADF_CLK_GPIO_Port, ADF_CLK_Pin, GPIO_PIN_RESET);
 80004f6:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <myspi+0xcc>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	2180      	movs	r1, #128	; 0x80
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 fc97 	bl	8001e30 <HAL_GPIO_WritePin>
		if (data & 0b10000000000000000000000000000000)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2b00      	cmp	r3, #0
 8000506:	da07      	bge.n	8000518 <myspi+0x70>
		{
			HAL_GPIO_WritePin(ADF_Data_GPIO_Port, ADF_Data_Pin, GPIO_PIN_SET);
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	4819      	ldr	r0, [pc, #100]	; (8000574 <myspi+0xcc>)
 800050e:	2201      	movs	r2, #1
 8000510:	0019      	movs	r1, r3
 8000512:	f001 fc8d 	bl	8001e30 <HAL_GPIO_WritePin>
 8000516:	e006      	b.n	8000526 <myspi+0x7e>
		} else {
			HAL_GPIO_WritePin(ADF_Data_GPIO_Port, ADF_Data_Pin, GPIO_PIN_RESET);
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	4815      	ldr	r0, [pc, #84]	; (8000574 <myspi+0xcc>)
 800051e:	2200      	movs	r2, #0
 8000520:	0019      	movs	r1, r3
 8000522:	f001 fc85 	bl	8001e30 <HAL_GPIO_WritePin>
		}
		//HAL_Delay(delay);
		HAL_GPIO_WritePin(ADF_CLK_GPIO_Port, ADF_CLK_Pin, GPIO_PIN_SET);
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <myspi+0xcc>)
 8000528:	2201      	movs	r2, #1
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	0018      	movs	r0, r3
 800052e:	f001 fc7f 	bl	8001e30 <HAL_GPIO_WritePin>
		data = data << 1;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 32; i++) {
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	3301      	adds	r3, #1
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	2b1f      	cmp	r3, #31
 8000542:	ddd8      	ble.n	80004f6 <myspi+0x4e>
	}
	HAL_GPIO_WritePin(ADF_LE_GPIO_Port, ADF_LE_Pin, GPIO_PIN_SET);
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	480a      	ldr	r0, [pc, #40]	; (8000574 <myspi+0xcc>)
 800054a:	2201      	movs	r2, #1
 800054c:	0019      	movs	r1, r3
 800054e:	f001 fc6f 	bl	8001e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADF_LE_GPIO_Port, ADF_LE_Pin, GPIO_PIN_RESET);
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4807      	ldr	r0, [pc, #28]	; (8000574 <myspi+0xcc>)
 8000558:	2200      	movs	r2, #0
 800055a:	0019      	movs	r1, r3
 800055c:	f001 fc68 	bl	8001e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADF_CLK_GPIO_Port, ADF_CLK_Pin, GPIO_PIN_RESET);
 8000560:	4b04      	ldr	r3, [pc, #16]	; (8000574 <myspi+0xcc>)
 8000562:	2200      	movs	r2, #0
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	0018      	movs	r0, r3
 8000568:	f001 fc62 	bl	8001e30 <HAL_GPIO_WritePin>

}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b004      	add	sp, #16
 8000572:	bd80      	pop	{r7, pc}
 8000574:	50000800 	.word	0x50000800
 8000578:	40021000 	.word	0x40021000

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint8_t onebyte[1];
	int count = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fda3 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f8ab 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fab3 	bl	8000af8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000592:	f000 fa93 	bl	8000abc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000596:	f000 f9a5 	bl	80008e4 <MX_LPUART1_UART_Init>
  MX_ADC_Init();
 800059a:	f000 f91f 	bl	80007dc <MX_ADC_Init>
  MX_USART1_UART_Init();
 800059e:	f000 f9cf 	bl	8000940 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80005a2:	f000 f9fd 	bl	80009a0 <MX_SPI1_Init>
  MX_TIM21_Init();
 80005a6:	f000 fa33 	bl	8000a10 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(DC_boost_GPIO_Port, DC_boost_Pin, GPIO_PIN_SET);
 80005aa:	2380      	movs	r3, #128	; 0x80
 80005ac:	0159      	lsls	r1, r3, #5
 80005ae:	23a0      	movs	r3, #160	; 0xa0
 80005b0:	05db      	lsls	r3, r3, #23
 80005b2:	2201      	movs	r2, #1
 80005b4:	0018      	movs	r0, r3
 80005b6:	f001 fc3b 	bl	8001e30 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80005ba:	20c8      	movs	r0, #200	; 0xc8
 80005bc:	f000 fdf8 	bl	80011b0 <HAL_Delay>
 //HAL_GPIO_WritePin(Battery_on_GPIO_Port, Battery_on_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(RADIO_EN_GPIO_Port, RADIO_EN_Pin, GPIO_PIN_RESET);
 80005c0:	2380      	movs	r3, #128	; 0x80
 80005c2:	021b      	lsls	r3, r3, #8
 80005c4:	483e      	ldr	r0, [pc, #248]	; (80006c0 <main+0x144>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	0019      	movs	r1, r3
 80005ca:	f001 fc31 	bl	8001e30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPS_ON_GPIO_Port, GPS_ON_Pin, GPIO_PIN_SET);
 80005ce:	2380      	movs	r3, #128	; 0x80
 80005d0:	01db      	lsls	r3, r3, #7
 80005d2:	483b      	ldr	r0, [pc, #236]	; (80006c0 <main+0x144>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	0019      	movs	r1, r3
 80005d8:	f001 fc2a 	bl	8001e30 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80005dc:	20c8      	movs	r0, #200	; 0xc8
 80005de:	f000 fde7 	bl	80011b0 <HAL_Delay>

  	//activeMode++;

  myspi(0b00000000000000000010000000100010);
 80005e2:	4b38      	ldr	r3, [pc, #224]	; (80006c4 <main+0x148>)
 80005e4:	0018      	movs	r0, r3
 80005e6:	f7ff ff5f 	bl	80004a8 <myspi>
  myspi(0b00000000011101000001100010101111);
 80005ea:	4b37      	ldr	r3, [pc, #220]	; (80006c8 <main+0x14c>)
 80005ec:	0018      	movs	r0, r3
 80005ee:	f7ff ff5b 	bl	80004a8 <myspi>
  myspi(0b00000011110001000010000001001100);
 80005f2:	4b36      	ldr	r3, [pc, #216]	; (80006cc <main+0x150>)
 80005f4:	0018      	movs	r0, r3
 80005f6:	f7ff ff57 	bl	80004a8 <myspi>
  myspi(0b00000000000011011111000011001101);
 80005fa:	4b35      	ldr	r3, [pc, #212]	; (80006d0 <main+0x154>)
 80005fc:	0018      	movs	r0, r3
 80005fe:	f7ff ff53 	bl	80004a8 <myspi>

  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000602:	2380      	movs	r3, #128	; 0x80
 8000604:	01db      	lsls	r3, r3, #7
 8000606:	4a33      	ldr	r2, [pc, #204]	; (80006d4 <main+0x158>)
 8000608:	0019      	movs	r1, r3
 800060a:	0010      	movs	r0, r2
 800060c:	f001 fc2d 	bl	8001e6a <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 8000610:	20c8      	movs	r0, #200	; 0xc8
 8000612:	f000 fdcd 	bl	80011b0 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000616:	2380      	movs	r3, #128	; 0x80
 8000618:	01db      	lsls	r3, r3, #7
 800061a:	4a2e      	ldr	r2, [pc, #184]	; (80006d4 <main+0x158>)
 800061c:	0019      	movs	r1, r3
 800061e:	0010      	movs	r0, r2
 8000620:	f001 fc23 	bl	8001e6a <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 8000624:	20c8      	movs	r0, #200	; 0xc8
 8000626:	f000 fdc3 	bl	80011b0 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800062a:	2380      	movs	r3, #128	; 0x80
 800062c:	01db      	lsls	r3, r3, #7
 800062e:	4a29      	ldr	r2, [pc, #164]	; (80006d4 <main+0x158>)
 8000630:	0019      	movs	r1, r3
 8000632:	0010      	movs	r0, r2
 8000634:	f001 fc19 	bl	8001e6a <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 8000638:	20c8      	movs	r0, #200	; 0xc8
 800063a:	f000 fdb9 	bl	80011b0 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800063e:	2380      	movs	r3, #128	; 0x80
 8000640:	01db      	lsls	r3, r3, #7
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <main+0x158>)
 8000644:	0019      	movs	r1, r3
 8000646:	0010      	movs	r0, r2
 8000648:	f001 fc0f 	bl	8001e6a <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 800064c:	20c8      	movs	r0, #200	; 0xc8
 800064e:	f000 fdaf 	bl	80011b0 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	01db      	lsls	r3, r3, #7
 8000656:	4a1f      	ldr	r2, [pc, #124]	; (80006d4 <main+0x158>)
 8000658:	0019      	movs	r1, r3
 800065a:	0010      	movs	r0, r2
 800065c:	f001 fc05 	bl	8001e6a <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 8000660:	20c8      	movs	r0, #200	; 0xc8
 8000662:	f000 fda5 	bl	80011b0 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000666:	2380      	movs	r3, #128	; 0x80
 8000668:	01db      	lsls	r3, r3, #7
 800066a:	4a1a      	ldr	r2, [pc, #104]	; (80006d4 <main+0x158>)
 800066c:	0019      	movs	r1, r3
 800066e:	0010      	movs	r0, r2
 8000670:	f001 fbfb 	bl	8001e6a <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 8000674:	20c8      	movs	r0, #200	; 0xc8
 8000676:	f000 fd9b 	bl	80011b0 <HAL_Delay>
  HAL_UART_Transmit_IT(&huart1, "START\n", 6);
 800067a:	4917      	ldr	r1, [pc, #92]	; (80006d8 <main+0x15c>)
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <main+0x160>)
 800067e:	2206      	movs	r2, #6
 8000680:	0018      	movs	r0, r3
 8000682:	f003 f95b 	bl	800393c <HAL_UART_Transmit_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(HAL_OK == HAL_UART_Receive(&hlpuart1,onebyte,1,10)){
 8000686:	0039      	movs	r1, r7
 8000688:	4815      	ldr	r0, [pc, #84]	; (80006e0 <main+0x164>)
 800068a:	230a      	movs	r3, #10
 800068c:	2201      	movs	r2, #1
 800068e:	f003 f86f 	bl	8003770 <HAL_UART_Receive>
 8000692:	1e03      	subs	r3, r0, #0
 8000694:	d1f7      	bne.n	8000686 <main+0x10a>
		  HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin);
 8000696:	2380      	movs	r3, #128	; 0x80
 8000698:	01db      	lsls	r3, r3, #7
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <main+0x158>)
 800069c:	0019      	movs	r1, r3
 800069e:	0010      	movs	r0, r2
 80006a0:	f001 fbe3 	bl	8001e6a <HAL_GPIO_TogglePin>
		  HAL_UART_Transmit(&huart1, onebyte, 1,10);
 80006a4:	0039      	movs	r1, r7
 80006a6:	480d      	ldr	r0, [pc, #52]	; (80006dc <main+0x160>)
 80006a8:	230a      	movs	r3, #10
 80006aa:	2201      	movs	r2, #1
 80006ac:	f002 ffc0 	bl	8003630 <HAL_UART_Transmit>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	01db      	lsls	r3, r3, #7
 80006b4:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <main+0x158>)
 80006b6:	0019      	movs	r1, r3
 80006b8:	0010      	movs	r0, r2
 80006ba:	f001 fbd6 	bl	8001e6a <HAL_GPIO_TogglePin>
	  if(HAL_OK == HAL_UART_Receive(&hlpuart1,onebyte,1,10)){
 80006be:	e7e2      	b.n	8000686 <main+0x10a>
 80006c0:	50000400 	.word	0x50000400
 80006c4:	00002022 	.word	0x00002022
 80006c8:	007418af 	.word	0x007418af
 80006cc:	03c4204c 	.word	0x03c4204c
 80006d0:	000df0cd 	.word	0x000df0cd
 80006d4:	50000800 	.word	0x50000800
 80006d8:	08004be8 	.word	0x08004be8
 80006dc:	2000010c 	.word	0x2000010c
 80006e0:	20000084 	.word	0x20000084

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b09b      	sub	sp, #108	; 0x6c
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	2434      	movs	r4, #52	; 0x34
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	0018      	movs	r0, r3
 80006f0:	2334      	movs	r3, #52	; 0x34
 80006f2:	001a      	movs	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f004 fa3e 	bl	8004b76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fa:	2320      	movs	r3, #32
 80006fc:	18fb      	adds	r3, r7, r3
 80006fe:	0018      	movs	r0, r3
 8000700:	2314      	movs	r3, #20
 8000702:	001a      	movs	r2, r3
 8000704:	2100      	movs	r1, #0
 8000706:	f004 fa36 	bl	8004b76 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	0018      	movs	r0, r3
 800070e:	231c      	movs	r3, #28
 8000710:	001a      	movs	r2, r3
 8000712:	2100      	movs	r1, #0
 8000714:	f004 fa2f 	bl	8004b76 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <SystemClock_Config+0xf0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a2e      	ldr	r2, [pc, #184]	; (80007d8 <SystemClock_Config+0xf4>)
 800071e:	401a      	ands	r2, r3
 8000720:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <SystemClock_Config+0xf0>)
 8000722:	2180      	movs	r1, #128	; 0x80
 8000724:	0109      	lsls	r1, r1, #4
 8000726:	430a      	orrs	r2, r1
 8000728:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800072a:	0021      	movs	r1, r4
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2201      	movs	r2, #1
 8000730:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	0252      	lsls	r2, r2, #9
 8000738:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2202      	movs	r2, #2
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2280      	movs	r2, #128	; 0x80
 8000744:	0252      	lsls	r2, r2, #9
 8000746:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2200      	movs	r2, #0
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	0412      	lsls	r2, r2, #16
 8000754:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	187b      	adds	r3, r7, r1
 8000758:	0018      	movs	r0, r3
 800075a:	f001 fba1 	bl	8001ea0 <HAL_RCC_OscConfig>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000762:	f000 fabf 	bl	8000ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000766:	2120      	movs	r1, #32
 8000768:	187b      	adds	r3, r7, r1
 800076a:	220f      	movs	r2, #15
 800076c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2203      	movs	r2, #3
 8000772:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2100      	movs	r1, #0
 800078a:	0018      	movs	r0, r3
 800078c:	f001 fef2 	bl	8002574 <HAL_RCC_ClockConfig>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000794:	f000 faa6 	bl	8000ce4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2205      	movs	r2, #5
 800079c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	0018      	movs	r0, r3
 80007ae:	f002 f9b3 	bl	8002b18 <HAL_RCCEx_PeriphCLKConfig>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80007b6:	f000 fa95 	bl	8000ce4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80007ba:	2380      	movs	r3, #128	; 0x80
 80007bc:	045b      	lsls	r3, r3, #17
 80007be:	2200      	movs	r2, #0
 80007c0:	0019      	movs	r1, r3
 80007c2:	2000      	movs	r0, #0
 80007c4:	f002 f81e 	bl	8002804 <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80007c8:	f002 f8a0 	bl	800290c <HAL_RCC_EnableCSS>
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b01b      	add	sp, #108	; 0x6c
 80007d2:	bd90      	pop	{r4, r7, pc}
 80007d4:	40007000 	.word	0x40007000
 80007d8:	ffffe7ff 	.word	0xffffe7ff

080007dc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007e2:	003b      	movs	r3, r7
 80007e4:	0018      	movs	r0, r3
 80007e6:	2308      	movs	r3, #8
 80007e8:	001a      	movs	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	f004 f9c3 	bl	8004b76 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80007f0:	4b37      	ldr	r3, [pc, #220]	; (80008d0 <MX_ADC_Init+0xf4>)
 80007f2:	4a38      	ldr	r2, [pc, #224]	; (80008d4 <MX_ADC_Init+0xf8>)
 80007f4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80007f6:	4b36      	ldr	r3, [pc, #216]	; (80008d0 <MX_ADC_Init+0xf4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80007fc:	4b34      	ldr	r3, [pc, #208]	; (80008d0 <MX_ADC_Init+0xf4>)
 80007fe:	22c0      	movs	r2, #192	; 0xc0
 8000800:	0612      	lsls	r2, r2, #24
 8000802:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000804:	4b32      	ldr	r3, [pc, #200]	; (80008d0 <MX_ADC_Init+0xf4>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800080a:	4b31      	ldr	r3, [pc, #196]	; (80008d0 <MX_ADC_Init+0xf4>)
 800080c:	2200      	movs	r2, #0
 800080e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000810:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <MX_ADC_Init+0xf4>)
 8000812:	2201      	movs	r2, #1
 8000814:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000816:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <MX_ADC_Init+0xf4>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800081c:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <MX_ADC_Init+0xf4>)
 800081e:	2220      	movs	r2, #32
 8000820:	2100      	movs	r1, #0
 8000822:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000824:	4b2a      	ldr	r3, [pc, #168]	; (80008d0 <MX_ADC_Init+0xf4>)
 8000826:	2221      	movs	r2, #33	; 0x21
 8000828:	2100      	movs	r1, #0
 800082a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800082c:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <MX_ADC_Init+0xf4>)
 800082e:	2200      	movs	r2, #0
 8000830:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000832:	4b27      	ldr	r3, [pc, #156]	; (80008d0 <MX_ADC_Init+0xf4>)
 8000834:	22c2      	movs	r2, #194	; 0xc2
 8000836:	32ff      	adds	r2, #255	; 0xff
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800083a:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <MX_ADC_Init+0xf4>)
 800083c:	222c      	movs	r2, #44	; 0x2c
 800083e:	2100      	movs	r1, #0
 8000840:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000842:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <MX_ADC_Init+0xf4>)
 8000844:	2204      	movs	r2, #4
 8000846:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000848:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <MX_ADC_Init+0xf4>)
 800084a:	2200      	movs	r2, #0
 800084c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800084e:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <MX_ADC_Init+0xf4>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <MX_ADC_Init+0xf4>)
 8000856:	2200      	movs	r2, #0
 8000858:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_ADC_Init+0xf4>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_ADC_Init+0xf4>)
 8000862:	0018      	movs	r0, r3
 8000864:	f000 fcc8 	bl	80011f8 <HAL_ADC_Init>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800086c:	f000 fa3a 	bl	8000ce4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000870:	003b      	movs	r3, r7
 8000872:	4a19      	ldr	r2, [pc, #100]	; (80008d8 <MX_ADC_Init+0xfc>)
 8000874:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000876:	003b      	movs	r3, r7
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	0152      	lsls	r2, r2, #5
 800087c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800087e:	003a      	movs	r2, r7
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_ADC_Init+0xf4>)
 8000882:	0011      	movs	r1, r2
 8000884:	0018      	movs	r0, r3
 8000886:	f000 fe2b 	bl	80014e0 <HAL_ADC_ConfigChannel>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800088e:	f000 fa29 	bl	8000ce4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000892:	003b      	movs	r3, r7
 8000894:	4a11      	ldr	r2, [pc, #68]	; (80008dc <MX_ADC_Init+0x100>)
 8000896:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000898:	003a      	movs	r2, r7
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <MX_ADC_Init+0xf4>)
 800089c:	0011      	movs	r1, r2
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 fe1e 	bl	80014e0 <HAL_ADC_ConfigChannel>
 80008a4:	1e03      	subs	r3, r0, #0
 80008a6:	d001      	beq.n	80008ac <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80008a8:	f000 fa1c 	bl	8000ce4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80008ac:	003b      	movs	r3, r7
 80008ae:	4a0c      	ldr	r2, [pc, #48]	; (80008e0 <MX_ADC_Init+0x104>)
 80008b0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008b2:	003a      	movs	r2, r7
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_ADC_Init+0xf4>)
 80008b6:	0011      	movs	r1, r2
 80008b8:	0018      	movs	r0, r3
 80008ba:	f000 fe11 	bl	80014e0 <HAL_ADC_ConfigChannel>
 80008be:	1e03      	subs	r3, r0, #0
 80008c0:	d001      	beq.n	80008c6 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 80008c2:	f000 fa0f 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b002      	add	sp, #8
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	20000028 	.word	0x20000028
 80008d4:	40012400 	.word	0x40012400
 80008d8:	24000200 	.word	0x24000200
 80008dc:	34002000 	.word	0x34002000
 80008e0:	38004000 	.word	0x38004000

080008e4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_LPUART1_UART_Init+0x54>)
 80008ea:	4a14      	ldr	r2, [pc, #80]	; (800093c <MX_LPUART1_UART_Init+0x58>)
 80008ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 38400;
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_LPUART1_UART_Init+0x54>)
 80008f0:	2296      	movs	r2, #150	; 0x96
 80008f2:	0212      	lsls	r2, r2, #8
 80008f4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_LPUART1_UART_Init+0x54>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_LPUART1_UART_Init+0x54>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <MX_LPUART1_UART_Init+0x54>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_LPUART1_UART_Init+0x54>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <MX_LPUART1_UART_Init+0x54>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_LPUART1_UART_Init+0x54>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091a:	4b07      	ldr	r3, [pc, #28]	; (8000938 <MX_LPUART1_UART_Init+0x54>)
 800091c:	2200      	movs	r2, #0
 800091e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <MX_LPUART1_UART_Init+0x54>)
 8000922:	0018      	movs	r0, r3
 8000924:	f002 fe30 	bl	8003588 <HAL_UART_Init>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d001      	beq.n	8000930 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800092c:	f000 f9da 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	20000084 	.word	0x20000084
 800093c:	40004800 	.word	0x40004800

08000940 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_USART1_UART_Init+0x58>)
 8000946:	4a15      	ldr	r2, [pc, #84]	; (800099c <MX_USART1_UART_Init+0x5c>)
 8000948:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_USART1_UART_Init+0x58>)
 800094c:	22e1      	movs	r2, #225	; 0xe1
 800094e:	0252      	lsls	r2, r2, #9
 8000950:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_USART1_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_USART1_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USART1_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_USART1_UART_Init+0x58>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_USART1_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_USART1_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_USART1_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_USART1_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <MX_USART1_UART_Init+0x58>)
 8000984:	0018      	movs	r0, r3
 8000986:	f002 fdff 	bl	8003588 <HAL_UART_Init>
 800098a:	1e03      	subs	r3, r0, #0
 800098c:	d001      	beq.n	8000992 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800098e:	f000 f9a9 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000010c 	.word	0x2000010c
 800099c:	40013800 	.word	0x40013800

080009a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_SPI1_Init+0x68>)
 80009a6:	4a19      	ldr	r2, [pc, #100]	; (8000a0c <MX_SPI1_Init+0x6c>)
 80009a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_SPI1_Init+0x68>)
 80009ac:	2282      	movs	r2, #130	; 0x82
 80009ae:	0052      	lsls	r2, r2, #1
 80009b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_SPI1_Init+0x68>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_SPI1_Init+0x68>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009be:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_SPI1_Init+0x68>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c4:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_SPI1_Init+0x68>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_SPI1_Init+0x68>)
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	02d2      	lsls	r2, r2, #11
 80009d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <MX_SPI1_Init+0x68>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_SPI1_Init+0x68>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <MX_SPI1_Init+0x68>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_SPI1_Init+0x68>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009ea:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <MX_SPI1_Init+0x68>)
 80009ec:	2207      	movs	r2, #7
 80009ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <MX_SPI1_Init+0x68>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f002 f9ca 	bl	8002d8c <HAL_SPI_Init>
 80009f8:	1e03      	subs	r3, r0, #0
 80009fa:	d001      	beq.n	8000a00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009fc:	f000 f972 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	200001dc 	.word	0x200001dc
 8000a0c:	40013000 	.word	0x40013000

08000a10 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a16:	2308      	movs	r3, #8
 8000a18:	18fb      	adds	r3, r7, r3
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	2310      	movs	r3, #16
 8000a1e:	001a      	movs	r2, r3
 8000a20:	2100      	movs	r1, #0
 8000a22:	f004 f8a8 	bl	8004b76 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a26:	003b      	movs	r3, r7
 8000a28:	0018      	movs	r0, r3
 8000a2a:	2308      	movs	r3, #8
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	2100      	movs	r1, #0
 8000a30:	f004 f8a1 	bl	8004b76 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000a34:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <MX_TIM21_Init+0xa0>)
 8000a36:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <MX_TIM21_Init+0xa4>)
 8000a38:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <MX_TIM21_Init+0xa0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_TIM21_Init+0xa0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_TIM21_Init+0xa0>)
 8000a48:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <MX_TIM21_Init+0xa8>)
 8000a4a:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_TIM21_Init+0xa0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_TIM21_Init+0xa0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_TIM21_Init+0xa0>)
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f002 fa2a 	bl	8002eb4 <HAL_TIM_Base_Init>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000a64:	f000 f93e 	bl	8000ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a68:	2108      	movs	r1, #8
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2280      	movs	r2, #128	; 0x80
 8000a6e:	0152      	lsls	r2, r2, #5
 8000a70:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000a72:	187a      	adds	r2, r7, r1
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_TIM21_Init+0xa0>)
 8000a76:	0011      	movs	r1, r2
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f002 fb43 	bl	8003104 <HAL_TIM_ConfigClockSource>
 8000a7e:	1e03      	subs	r3, r0, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 8000a82:	f000 f92f 	bl	8000ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a86:	003b      	movs	r3, r7
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8c:	003b      	movs	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000a92:	003a      	movs	r2, r7
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_TIM21_Init+0xa0>)
 8000a96:	0011      	movs	r1, r2
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f002 fd1d 	bl	80034d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9e:	1e03      	subs	r3, r0, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8000aa2:	f000 f91f 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b006      	add	sp, #24
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	20000234 	.word	0x20000234
 8000ab4:	40010800 	.word	0x40010800
 8000ab8:	0000ffff 	.word	0x0000ffff

08000abc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_DMA_Init+0x38>)
 8000ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_DMA_Init+0x38>)
 8000ac8:	2101      	movs	r1, #1
 8000aca:	430a      	orrs	r2, r1
 8000acc:	631a      	str	r2, [r3, #48]	; 0x30
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_DMA_Init+0x38>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	200a      	movs	r0, #10
 8000ae0:	f000 fe50 	bl	8001784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000ae4:	200a      	movs	r0, #10
 8000ae6:	f000 fe62 	bl	80017ae <HAL_NVIC_EnableIRQ>

}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b002      	add	sp, #8
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	40021000 	.word	0x40021000

08000af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b08b      	sub	sp, #44	; 0x2c
 8000afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	2414      	movs	r4, #20
 8000b00:	193b      	adds	r3, r7, r4
 8000b02:	0018      	movs	r0, r3
 8000b04:	2314      	movs	r3, #20
 8000b06:	001a      	movs	r2, r3
 8000b08:	2100      	movs	r1, #0
 8000b0a:	f004 f834 	bl	8004b76 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0e:	4b6e      	ldr	r3, [pc, #440]	; (8000cc8 <MX_GPIO_Init+0x1d0>)
 8000b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b12:	4b6d      	ldr	r3, [pc, #436]	; (8000cc8 <MX_GPIO_Init+0x1d0>)
 8000b14:	2104      	movs	r1, #4
 8000b16:	430a      	orrs	r2, r1
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b1a:	4b6b      	ldr	r3, [pc, #428]	; (8000cc8 <MX_GPIO_Init+0x1d0>)
 8000b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1e:	2204      	movs	r2, #4
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b26:	4b68      	ldr	r3, [pc, #416]	; (8000cc8 <MX_GPIO_Init+0x1d0>)
 8000b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b2a:	4b67      	ldr	r3, [pc, #412]	; (8000cc8 <MX_GPIO_Init+0x1d0>)
 8000b2c:	2180      	movs	r1, #128	; 0x80
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b32:	4b65      	ldr	r3, [pc, #404]	; (8000cc8 <MX_GPIO_Init+0x1d0>)
 8000b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b36:	2280      	movs	r2, #128	; 0x80
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b62      	ldr	r3, [pc, #392]	; (8000cc8 <MX_GPIO_Init+0x1d0>)
 8000b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b42:	4b61      	ldr	r3, [pc, #388]	; (8000cc8 <MX_GPIO_Init+0x1d0>)
 8000b44:	2101      	movs	r1, #1
 8000b46:	430a      	orrs	r2, r1
 8000b48:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b4a:	4b5f      	ldr	r3, [pc, #380]	; (8000cc8 <MX_GPIO_Init+0x1d0>)
 8000b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b4e:	2201      	movs	r2, #1
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	4b5c      	ldr	r3, [pc, #368]	; (8000cc8 <MX_GPIO_Init+0x1d0>)
 8000b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b5a:	4b5b      	ldr	r3, [pc, #364]	; (8000cc8 <MX_GPIO_Init+0x1d0>)
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b62:	4b59      	ldr	r3, [pc, #356]	; (8000cc8 <MX_GPIO_Init+0x1d0>)
 8000b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b66:	2202      	movs	r2, #2
 8000b68:	4013      	ands	r3, r2
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6e:	4b56      	ldr	r3, [pc, #344]	; (8000cc8 <MX_GPIO_Init+0x1d0>)
 8000b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b72:	4b55      	ldr	r3, [pc, #340]	; (8000cc8 <MX_GPIO_Init+0x1d0>)
 8000b74:	2108      	movs	r1, #8
 8000b76:	430a      	orrs	r2, r1
 8000b78:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b7a:	4b53      	ldr	r3, [pc, #332]	; (8000cc8 <MX_GPIO_Init+0x1d0>)
 8000b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7e:	2208      	movs	r2, #8
 8000b80:	4013      	ands	r3, r2
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|EXPANSION_1_Pin|EXPANSION_2_Pin|Temp_EN_Pin
 8000b86:	4951      	ldr	r1, [pc, #324]	; (8000ccc <MX_GPIO_Init+0x1d4>)
 8000b88:	4b51      	ldr	r3, [pc, #324]	; (8000cd0 <MX_GPIO_Init+0x1d8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f001 f94f 	bl	8001e30 <HAL_GPIO_WritePin>
                          |ADF_CLK_Pin|ADF_Data_Pin|ADF_LE_Pin|Heater_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EXPANSION_4_Pin|EXPANSION_PS_Pin|DC_boost_Pin, GPIO_PIN_RESET);
 8000b92:	4950      	ldr	r1, [pc, #320]	; (8000cd4 <MX_GPIO_Init+0x1dc>)
 8000b94:	23a0      	movs	r3, #160	; 0xa0
 8000b96:	05db      	lsls	r3, r3, #23
 8000b98:	2200      	movs	r2, #0
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f001 f948 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RF_Boost_Pin|ADF_TX_Data_Pin|GPS_ON_Pin|RADIO_EN_Pin
 8000ba0:	494d      	ldr	r1, [pc, #308]	; (8000cd8 <MX_GPIO_Init+0x1e0>)
 8000ba2:	4b4e      	ldr	r3, [pc, #312]	; (8000cdc <MX_GPIO_Init+0x1e4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f001 f942 	bl	8001e30 <HAL_GPIO_WritePin>
                          |Trmp_R4_Pin|Temp_R2_Pin|Temp_R1_Pin|EXPANSION_3_Pin
                          |Temp_R5_Pin|Temp_R3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Battery_on_GPIO_Port, Battery_on_Pin, GPIO_PIN_RESET);
 8000bac:	4b4c      	ldr	r3, [pc, #304]	; (8000ce0 <MX_GPIO_Init+0x1e8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f001 f93c 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_Pin TL555_in_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|TL555_in_Pin;
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	2281      	movs	r2, #129	; 0x81
 8000bbc:	0192      	lsls	r2, r2, #6
 8000bbe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	193b      	adds	r3, r7, r4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bcc:	193b      	adds	r3, r7, r4
 8000bce:	4a40      	ldr	r2, [pc, #256]	; (8000cd0 <MX_GPIO_Init+0x1d8>)
 8000bd0:	0019      	movs	r1, r3
 8000bd2:	0010      	movs	r0, r2
 8000bd4:	f000 ffb6 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin EXPANSION_1_Pin EXPANSION_2_Pin Temp_EN_Pin
                           ADF_CLK_Pin ADF_Data_Pin ADF_LE_Pin Heater_Pin */
  GPIO_InitStruct.Pin = LED_Pin|EXPANSION_1_Pin|EXPANSION_2_Pin|Temp_EN_Pin
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	4a3c      	ldr	r2, [pc, #240]	; (8000ccc <MX_GPIO_Init+0x1d4>)
 8000bdc:	601a      	str	r2, [r3, #0]
                          |ADF_CLK_Pin|ADF_Data_Pin|ADF_LE_Pin|Heater_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	193b      	adds	r3, r7, r4
 8000be0:	2201      	movs	r2, #1
 8000be2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf0:	193b      	adds	r3, r7, r4
 8000bf2:	4a37      	ldr	r2, [pc, #220]	; (8000cd0 <MX_GPIO_Init+0x1d8>)
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	0010      	movs	r0, r2
 8000bf8:	f000 ffa4 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_RX_Pin */
  GPIO_InitStruct.Pin = IR_RX_Pin;
 8000bfc:	193b      	adds	r3, r7, r4
 8000bfe:	2202      	movs	r2, #2
 8000c00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c02:	193b      	adds	r3, r7, r4
 8000c04:	2200      	movs	r2, #0
 8000c06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	193b      	adds	r3, r7, r4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IR_RX_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	193a      	adds	r2, r7, r4
 8000c10:	23a0      	movs	r3, #160	; 0xa0
 8000c12:	05db      	lsls	r3, r3, #23
 8000c14:	0011      	movs	r1, r2
 8000c16:	0018      	movs	r0, r3
 8000c18:	f000 ff94 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXPANSION_4_Pin EXPANSION_PS_Pin DC_boost_Pin */
  GPIO_InitStruct.Pin = EXPANSION_4_Pin|EXPANSION_PS_Pin|DC_boost_Pin;
 8000c1c:	193b      	adds	r3, r7, r4
 8000c1e:	4a2d      	ldr	r2, [pc, #180]	; (8000cd4 <MX_GPIO_Init+0x1dc>)
 8000c20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	2201      	movs	r2, #1
 8000c26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	2200      	movs	r2, #0
 8000c32:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	193a      	adds	r2, r7, r4
 8000c36:	23a0      	movs	r3, #160	; 0xa0
 8000c38:	05db      	lsls	r3, r3, #23
 8000c3a:	0011      	movs	r1, r2
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f000 ff81 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_Boost_Pin ADF_TX_Data_Pin GPS_ON_Pin RADIO_EN_Pin
                           Trmp_R4_Pin Temp_R2_Pin Temp_R1_Pin EXPANSION_3_Pin
                           Temp_R5_Pin Temp_R3_Pin */
  GPIO_InitStruct.Pin = RF_Boost_Pin|ADF_TX_Data_Pin|GPS_ON_Pin|RADIO_EN_Pin
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	4a24      	ldr	r2, [pc, #144]	; (8000cd8 <MX_GPIO_Init+0x1e0>)
 8000c46:	601a      	str	r2, [r3, #0]
                          |Trmp_R4_Pin|Temp_R2_Pin|Temp_R1_Pin|EXPANSION_3_Pin
                          |Temp_R5_Pin|Temp_R3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	193b      	adds	r3, r7, r4
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	4a1f      	ldr	r2, [pc, #124]	; (8000cdc <MX_GPIO_Init+0x1e4>)
 8000c5e:	0019      	movs	r1, r3
 8000c60:	0010      	movs	r0, r2
 8000c62:	f000 ff6f 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c66:	0021      	movs	r1, r4
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2280      	movs	r2, #128	; 0x80
 8000c6c:	0052      	lsls	r2, r2, #1
 8000c6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	000c      	movs	r4, r1
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	2202      	movs	r2, #2
 8000c76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	193a      	adds	r2, r7, r4
 8000c8c:	23a0      	movs	r3, #160	; 0xa0
 8000c8e:	05db      	lsls	r3, r3, #23
 8000c90:	0011      	movs	r1, r2
 8000c92:	0018      	movs	r0, r3
 8000c94:	f000 ff56 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : Battery_on_Pin */
  GPIO_InitStruct.Pin = Battery_on_Pin;
 8000c98:	0021      	movs	r1, r4
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Battery_on_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <MX_GPIO_Init+0x1e8>)
 8000cb6:	0019      	movs	r1, r3
 8000cb8:	0010      	movs	r0, r2
 8000cba:	f000 ff43 	bl	8001b44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b00b      	add	sp, #44	; 0x2c
 8000cc4:	bd90      	pop	{r4, r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	000053a3 	.word	0x000053a3
 8000cd0:	50000800 	.word	0x50000800
 8000cd4:	0000100c 	.word	0x0000100c
 8000cd8:	0000f3f0 	.word	0x0000f3f0
 8000cdc:	50000400 	.word	0x50000400
 8000ce0:	50000c00 	.word	0x50000c00

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce8:	b672      	cpsid	i
}
 8000cea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cec:	e7fe      	b.n	8000cec <Error_Handler+0x8>
	...

08000cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <HAL_MspInit+0x24>)
 8000cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_MspInit+0x24>)
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <HAL_MspInit+0x24>)
 8000d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <HAL_MspInit+0x24>)
 8000d06:	2180      	movs	r1, #128	; 0x80
 8000d08:	0549      	lsls	r1, r1, #21
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40021000 	.word	0x40021000

08000d18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b08b      	sub	sp, #44	; 0x2c
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	2414      	movs	r4, #20
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	0018      	movs	r0, r3
 8000d26:	2314      	movs	r3, #20
 8000d28:	001a      	movs	r2, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	f003 ff23 	bl	8004b76 <memset>
  if(hadc->Instance==ADC1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a22      	ldr	r2, [pc, #136]	; (8000dc0 <HAL_ADC_MspInit+0xa8>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d13d      	bne.n	8000db6 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d3a:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <HAL_ADC_MspInit+0xac>)
 8000d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <HAL_ADC_MspInit+0xac>)
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	0089      	lsls	r1, r1, #2
 8000d44:	430a      	orrs	r2, r1
 8000d46:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d48:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <HAL_ADC_MspInit+0xac>)
 8000d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d4c:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <HAL_ADC_MspInit+0xac>)
 8000d4e:	2104      	movs	r1, #4
 8000d50:	430a      	orrs	r2, r1
 8000d52:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <HAL_ADC_MspInit+0xac>)
 8000d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d58:	2204      	movs	r2, #4
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <HAL_ADC_MspInit+0xac>)
 8000d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d64:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <HAL_ADC_MspInit+0xac>)
 8000d66:	2102      	movs	r1, #2
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_ADC_MspInit+0xac>)
 8000d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d70:	2202      	movs	r2, #2
 8000d72:	4013      	ands	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC3     ------> ADC_IN13
    PC4     ------> ADC_IN14
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = Heater_ADC_2_Pin|Temp_ADC_Pin;
 8000d78:	193b      	adds	r3, r7, r4
 8000d7a:	2218      	movs	r2, #24
 8000d7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7e:	193b      	adds	r3, r7, r4
 8000d80:	2203      	movs	r2, #3
 8000d82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	193b      	adds	r3, r7, r4
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <HAL_ADC_MspInit+0xb0>)
 8000d8e:	0019      	movs	r1, r3
 8000d90:	0010      	movs	r0, r2
 8000d92:	f000 fed7 	bl	8001b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Heater_ADC_1_Pin;
 8000d96:	0021      	movs	r1, r4
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2203      	movs	r2, #3
 8000da2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Heater_ADC_1_GPIO_Port, &GPIO_InitStruct);
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_ADC_MspInit+0xb4>)
 8000dae:	0019      	movs	r1, r3
 8000db0:	0010      	movs	r0, r2
 8000db2:	f000 fec7 	bl	8001b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b00b      	add	sp, #44	; 0x2c
 8000dbc:	bd90      	pop	{r4, r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	40012400 	.word	0x40012400
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	50000800 	.word	0x50000800
 8000dcc:	50000400 	.word	0x50000400

08000dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b08b      	sub	sp, #44	; 0x2c
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	2414      	movs	r4, #20
 8000dda:	193b      	adds	r3, r7, r4
 8000ddc:	0018      	movs	r0, r3
 8000dde:	2314      	movs	r3, #20
 8000de0:	001a      	movs	r2, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	f003 fec7 	bl	8004b76 <memset>
  if(huart->Instance==LPUART1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a49      	ldr	r2, [pc, #292]	; (8000f14 <HAL_UART_MspInit+0x144>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d12a      	bne.n	8000e48 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000df2:	4b49      	ldr	r3, [pc, #292]	; (8000f18 <HAL_UART_MspInit+0x148>)
 8000df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000df6:	4b48      	ldr	r3, [pc, #288]	; (8000f18 <HAL_UART_MspInit+0x148>)
 8000df8:	2180      	movs	r1, #128	; 0x80
 8000dfa:	02c9      	lsls	r1, r1, #11
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e00:	4b45      	ldr	r3, [pc, #276]	; (8000f18 <HAL_UART_MspInit+0x148>)
 8000e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e04:	4b44      	ldr	r3, [pc, #272]	; (8000f18 <HAL_UART_MspInit+0x148>)
 8000e06:	2104      	movs	r1, #4
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e0c:	4b42      	ldr	r3, [pc, #264]	; (8000f18 <HAL_UART_MspInit+0x148>)
 8000e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e10:	2204      	movs	r2, #4
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PC10     ------> LPUART1_TX
    PC11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e18:	193b      	adds	r3, r7, r4
 8000e1a:	22c0      	movs	r2, #192	; 0xc0
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	0021      	movs	r1, r4
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2202      	movs	r2, #2
 8000e26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2203      	movs	r2, #3
 8000e32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_LPUART1;
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	4a37      	ldr	r2, [pc, #220]	; (8000f1c <HAL_UART_MspInit+0x14c>)
 8000e3e:	0019      	movs	r1, r3
 8000e40:	0010      	movs	r0, r2
 8000e42:	f000 fe7f 	bl	8001b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e46:	e060      	b.n	8000f0a <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a34      	ldr	r2, [pc, #208]	; (8000f20 <HAL_UART_MspInit+0x150>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d15b      	bne.n	8000f0a <HAL_UART_MspInit+0x13a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e52:	4b31      	ldr	r3, [pc, #196]	; (8000f18 <HAL_UART_MspInit+0x148>)
 8000e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e56:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <HAL_UART_MspInit+0x148>)
 8000e58:	2180      	movs	r1, #128	; 0x80
 8000e5a:	01c9      	lsls	r1, r1, #7
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <HAL_UART_MspInit+0x148>)
 8000e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e64:	4b2c      	ldr	r3, [pc, #176]	; (8000f18 <HAL_UART_MspInit+0x148>)
 8000e66:	2101      	movs	r1, #1
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e6c:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <HAL_UART_MspInit+0x148>)
 8000e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e70:	2201      	movs	r2, #1
 8000e72:	4013      	ands	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e78:	2114      	movs	r1, #20
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	22c0      	movs	r2, #192	; 0xc0
 8000e7e:	00d2      	lsls	r2, r2, #3
 8000e80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2202      	movs	r2, #2
 8000e86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2203      	movs	r2, #3
 8000e92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2204      	movs	r2, #4
 8000e98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	187a      	adds	r2, r7, r1
 8000e9c:	23a0      	movs	r3, #160	; 0xa0
 8000e9e:	05db      	lsls	r3, r3, #23
 8000ea0:	0011      	movs	r1, r2
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f000 fe4e 	bl	8001b44 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000ea8:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <HAL_UART_MspInit+0x154>)
 8000eaa:	4a1f      	ldr	r2, [pc, #124]	; (8000f28 <HAL_UART_MspInit+0x158>)
 8000eac:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8000eae:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <HAL_UART_MspInit+0x154>)
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <HAL_UART_MspInit+0x154>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_UART_MspInit+0x154>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <HAL_UART_MspInit+0x154>)
 8000ec2:	2280      	movs	r2, #128	; 0x80
 8000ec4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <HAL_UART_MspInit+0x154>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_UART_MspInit+0x154>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_UART_MspInit+0x154>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_UART_MspInit+0x154>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_UART_MspInit+0x154>)
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f000 fc81 	bl	80017e8 <HAL_DMA_Init>
 8000ee6:	1e03      	subs	r3, r0, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_UART_MspInit+0x11e>
      Error_Handler();
 8000eea:	f7ff fefb 	bl	8000ce4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a0c      	ldr	r2, [pc, #48]	; (8000f24 <HAL_UART_MspInit+0x154>)
 8000ef2:	675a      	str	r2, [r3, #116]	; 0x74
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_UART_MspInit+0x154>)
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	201b      	movs	r0, #27
 8000f00:	f000 fc40 	bl	8001784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f04:	201b      	movs	r0, #27
 8000f06:	f000 fc52 	bl	80017ae <HAL_NVIC_EnableIRQ>
}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b00b      	add	sp, #44	; 0x2c
 8000f10:	bd90      	pop	{r4, r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	40004800 	.word	0x40004800
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	50000800 	.word	0x50000800
 8000f20:	40013800 	.word	0x40013800
 8000f24:	20000194 	.word	0x20000194
 8000f28:	40020030 	.word	0x40020030

08000f2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	240c      	movs	r4, #12
 8000f36:	193b      	adds	r3, r7, r4
 8000f38:	0018      	movs	r0, r3
 8000f3a:	2314      	movs	r3, #20
 8000f3c:	001a      	movs	r2, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	f003 fe19 	bl	8004b76 <memset>
  if(hspi->Instance==SPI1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a18      	ldr	r2, [pc, #96]	; (8000fac <HAL_SPI_MspInit+0x80>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d129      	bne.n	8000fa2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_SPI_MspInit+0x84>)
 8000f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_SPI_MspInit+0x84>)
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	0149      	lsls	r1, r1, #5
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_SPI_MspInit+0x84>)
 8000f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <HAL_SPI_MspInit+0x84>)
 8000f62:	2101      	movs	r1, #1
 8000f64:	430a      	orrs	r2, r1
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_SPI_MspInit+0x84>)
 8000f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4013      	ands	r3, r2
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f74:	0021      	movs	r1, r4
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	22f0      	movs	r2, #240	; 0xf0
 8000f7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	2202      	movs	r2, #2
 8000f80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	187a      	adds	r2, r7, r1
 8000f96:	23a0      	movs	r3, #160	; 0xa0
 8000f98:	05db      	lsls	r3, r3, #23
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f000 fdd1 	bl	8001b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b009      	add	sp, #36	; 0x24
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	40013000 	.word	0x40013000
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <HAL_TIM_Base_MspInit+0x38>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d10d      	bne.n	8000fe2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_TIM_Base_MspInit+0x3c>)
 8000fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <HAL_TIM_Base_MspInit+0x3c>)
 8000fcc:	2104      	movs	r1, #4
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	635a      	str	r2, [r3, #52]	; 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2014      	movs	r0, #20
 8000fd8:	f000 fbd4 	bl	8001784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8000fdc:	2014      	movs	r0, #20
 8000fde:	f000 fbe6 	bl	80017ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b002      	add	sp, #8
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000ff8:	f001 fd72 	bl	8002ae0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <NMI_Handler+0x8>

08000ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <HardFault_Handler+0x4>

08001004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001008:	46c0      	nop			; (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101c:	f000 f8ac 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <DMA1_Channel2_3_IRQHandler+0x14>)
 800102e:	0018      	movs	r0, r3
 8001030:	f000 fcd9 	bl	80019e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	20000194 	.word	0x20000194

08001040 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <TIM21_IRQHandler+0x14>)
 8001046:	0018      	movs	r0, r3
 8001048:	f001 ff74 	bl	8002f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 800104c:	46c0      	nop			; (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	20000234 	.word	0x20000234

08001058 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <USART1_IRQHandler+0x14>)
 800105e:	0018      	movs	r0, r3
 8001060:	f002 fcdc 	bl	8003a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	2000010c 	.word	0x2000010c

08001070 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800107e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001080:	f7ff fff6 	bl	8001070 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <LoopForever+0xe>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	; (80010c8 <LoopForever+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010aa:	f003 fd6d 	bl	8004b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ae:	f7ff fa65 	bl	800057c <main>

080010b2 <LoopForever>:

LoopForever:
    b LoopForever
 80010b2:	e7fe      	b.n	80010b2 <LoopForever>
   ldr   r0, =_estack
 80010b4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010c0:	08004c6c 	.word	0x08004c6c
  ldr r2, =_sbss
 80010c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010c8:	20000278 	.word	0x20000278

080010cc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_COMP_IRQHandler>
	...

080010d0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_Init+0x3c>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_Init+0x3c>)
 80010e2:	2140      	movs	r1, #64	; 0x40
 80010e4:	430a      	orrs	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e8:	2003      	movs	r0, #3
 80010ea:	f000 f811 	bl	8001110 <HAL_InitTick>
 80010ee:	1e03      	subs	r3, r0, #0
 80010f0:	d003      	beq.n	80010fa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	e001      	b.n	80010fe <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010fa:	f7ff fdf9 	bl	8000cf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	781b      	ldrb	r3, [r3, #0]
}
 8001102:	0018      	movs	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	b002      	add	sp, #8
 8001108:	bd80      	pop	{r7, pc}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	40022000 	.word	0x40022000

08001110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <HAL_InitTick+0x5c>)
 800111a:	681c      	ldr	r4, [r3, #0]
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <HAL_InitTick+0x60>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	0019      	movs	r1, r3
 8001122:	23fa      	movs	r3, #250	; 0xfa
 8001124:	0098      	lsls	r0, r3, #2
 8001126:	f7fe ffef 	bl	8000108 <__udivsi3>
 800112a:	0003      	movs	r3, r0
 800112c:	0019      	movs	r1, r3
 800112e:	0020      	movs	r0, r4
 8001130:	f7fe ffea 	bl	8000108 <__udivsi3>
 8001134:	0003      	movs	r3, r0
 8001136:	0018      	movs	r0, r3
 8001138:	f000 fb49 	bl	80017ce <HAL_SYSTICK_Config>
 800113c:	1e03      	subs	r3, r0, #0
 800113e:	d001      	beq.n	8001144 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e00f      	b.n	8001164 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b03      	cmp	r3, #3
 8001148:	d80b      	bhi.n	8001162 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	2301      	movs	r3, #1
 800114e:	425b      	negs	r3, r3
 8001150:	2200      	movs	r2, #0
 8001152:	0018      	movs	r0, r3
 8001154:	f000 fb16 	bl	8001784 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_InitTick+0x64>)
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	0018      	movs	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	b003      	add	sp, #12
 800116a:	bd90      	pop	{r4, r7, pc}
 800116c:	20000000 	.word	0x20000000
 8001170:	20000008 	.word	0x20000008
 8001174:	20000004 	.word	0x20000004

08001178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_IncTick+0x1c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	001a      	movs	r2, r3
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_IncTick+0x20>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	18d2      	adds	r2, r2, r3
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_IncTick+0x20>)
 800118a:	601a      	str	r2, [r3, #0]
}
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	20000008 	.word	0x20000008
 8001198:	20000274 	.word	0x20000274

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b02      	ldr	r3, [pc, #8]	; (80011ac <HAL_GetTick+0x10>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	20000274 	.word	0x20000274

080011b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff fff0 	bl	800119c <HAL_GetTick>
 80011bc:	0003      	movs	r3, r0
 80011be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	3301      	adds	r3, #1
 80011c8:	d005      	beq.n	80011d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_Delay+0x44>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	001a      	movs	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	189b      	adds	r3, r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	f7ff ffe0 	bl	800119c <HAL_GetTick>
 80011dc:	0002      	movs	r2, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f7      	bhi.n	80011d8 <HAL_Delay+0x28>
  {
  }
}
 80011e8:	46c0      	nop			; (mov r8, r8)
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b004      	add	sp, #16
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	20000008 	.word	0x20000008

080011f8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e159      	b.n	80014be <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10a      	bne.n	8001228 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2250      	movs	r2, #80	; 0x50
 800121c:	2100      	movs	r1, #0
 800121e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	0018      	movs	r0, r3
 8001224:	f7ff fd78 	bl	8000d18 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122c:	2210      	movs	r2, #16
 800122e:	4013      	ands	r3, r2
 8001230:	2b10      	cmp	r3, #16
 8001232:	d005      	beq.n	8001240 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2204      	movs	r2, #4
 800123c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800123e:	d00b      	beq.n	8001258 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001244:	2210      	movs	r2, #16
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2250      	movs	r2, #80	; 0x50
 8001250:	2100      	movs	r1, #0
 8001252:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e132      	b.n	80014be <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125c:	4a9a      	ldr	r2, [pc, #616]	; (80014c8 <HAL_ADC_Init+0x2d0>)
 800125e:	4013      	ands	r3, r2
 8001260:	2202      	movs	r2, #2
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2203      	movs	r2, #3
 8001270:	4013      	ands	r3, r2
 8001272:	2b01      	cmp	r3, #1
 8001274:	d108      	bne.n	8001288 <HAL_ADC_Init+0x90>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2201      	movs	r2, #1
 800127e:	4013      	ands	r3, r2
 8001280:	2b01      	cmp	r3, #1
 8001282:	d101      	bne.n	8001288 <HAL_ADC_Init+0x90>
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <HAL_ADC_Init+0x92>
 8001288:	2300      	movs	r3, #0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d149      	bne.n	8001322 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	23c0      	movs	r3, #192	; 0xc0
 8001294:	061b      	lsls	r3, r3, #24
 8001296:	429a      	cmp	r2, r3
 8001298:	d00b      	beq.n	80012b2 <HAL_ADC_Init+0xba>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	05db      	lsls	r3, r3, #23
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d005      	beq.n	80012b2 <HAL_ADC_Init+0xba>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	061b      	lsls	r3, r3, #24
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d111      	bne.n	80012d6 <HAL_ADC_Init+0xde>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	0092      	lsls	r2, r2, #2
 80012be:	0892      	lsrs	r2, r2, #2
 80012c0:	611a      	str	r2, [r3, #16]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6919      	ldr	r1, [r3, #16]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	611a      	str	r2, [r3, #16]
 80012d4:	e014      	b.n	8001300 <HAL_ADC_Init+0x108>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	691a      	ldr	r2, [r3, #16]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	0092      	lsls	r2, r2, #2
 80012e2:	0892      	lsrs	r2, r2, #2
 80012e4:	611a      	str	r2, [r3, #16]
 80012e6:	4b79      	ldr	r3, [pc, #484]	; (80014cc <HAL_ADC_Init+0x2d4>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b78      	ldr	r3, [pc, #480]	; (80014cc <HAL_ADC_Init+0x2d4>)
 80012ec:	4978      	ldr	r1, [pc, #480]	; (80014d0 <HAL_ADC_Init+0x2d8>)
 80012ee:	400a      	ands	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	4b76      	ldr	r3, [pc, #472]	; (80014cc <HAL_ADC_Init+0x2d4>)
 80012f4:	6819      	ldr	r1, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	4b74      	ldr	r3, [pc, #464]	; (80014cc <HAL_ADC_Init+0x2d4>)
 80012fc:	430a      	orrs	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2118      	movs	r1, #24
 800130c:	438a      	bics	r2, r1
 800130e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68d9      	ldr	r1, [r3, #12]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001322:	4b6a      	ldr	r3, [pc, #424]	; (80014cc <HAL_ADC_Init+0x2d4>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4b69      	ldr	r3, [pc, #420]	; (80014cc <HAL_ADC_Init+0x2d4>)
 8001328:	496a      	ldr	r1, [pc, #424]	; (80014d4 <HAL_ADC_Init+0x2dc>)
 800132a:	400a      	ands	r2, r1
 800132c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800132e:	4b67      	ldr	r3, [pc, #412]	; (80014cc <HAL_ADC_Init+0x2d4>)
 8001330:	6819      	ldr	r1, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001336:	065a      	lsls	r2, r3, #25
 8001338:	4b64      	ldr	r3, [pc, #400]	; (80014cc <HAL_ADC_Init+0x2d4>)
 800133a:	430a      	orrs	r2, r1
 800133c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	055b      	lsls	r3, r3, #21
 8001348:	4013      	ands	r3, r2
 800134a:	d108      	bne.n	800135e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	0549      	lsls	r1, r1, #21
 800135a:	430a      	orrs	r2, r1
 800135c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	495b      	ldr	r1, [pc, #364]	; (80014d8 <HAL_ADC_Init+0x2e0>)
 800136a:	400a      	ands	r2, r1
 800136c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68d9      	ldr	r1, [r3, #12]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d101      	bne.n	8001384 <HAL_ADC_Init+0x18c>
 8001380:	2304      	movs	r3, #4
 8001382:	e000      	b.n	8001386 <HAL_ADC_Init+0x18e>
 8001384:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001386:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2020      	movs	r0, #32
 800138c:	5c1b      	ldrb	r3, [r3, r0]
 800138e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001390:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	202c      	movs	r0, #44	; 0x2c
 8001396:	5c1b      	ldrb	r3, [r3, r0]
 8001398:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800139a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80013a0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80013a8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80013b0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013be:	23c2      	movs	r3, #194	; 0xc2
 80013c0:	33ff      	adds	r3, #255	; 0xff
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d00b      	beq.n	80013de <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68d9      	ldr	r1, [r3, #12]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80013d4:	431a      	orrs	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2221      	movs	r2, #33	; 0x21
 80013e2:	5c9b      	ldrb	r3, [r3, r2]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d11a      	bne.n	800141e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2220      	movs	r2, #32
 80013ec:	5c9b      	ldrb	r3, [r3, r2]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d109      	bne.n	8001406 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	0249      	lsls	r1, r1, #9
 8001400:	430a      	orrs	r2, r1
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	e00b      	b.n	800141e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800140a:	2220      	movs	r2, #32
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001416:	2201      	movs	r2, #1
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001422:	2b01      	cmp	r3, #1
 8001424:	d11f      	bne.n	8001466 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	691a      	ldr	r2, [r3, #16]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	492a      	ldr	r1, [pc, #168]	; (80014dc <HAL_ADC_Init+0x2e4>)
 8001432:	400a      	ands	r2, r1
 8001434:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6919      	ldr	r1, [r3, #16]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001444:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800144a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	691a      	ldr	r2, [r3, #16]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2101      	movs	r1, #1
 8001460:	430a      	orrs	r2, r1
 8001462:	611a      	str	r2, [r3, #16]
 8001464:	e00e      	b.n	8001484 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	2201      	movs	r2, #1
 800146e:	4013      	ands	r3, r2
 8001470:	2b01      	cmp	r3, #1
 8001472:	d107      	bne.n	8001484 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2101      	movs	r1, #1
 8001480:	438a      	bics	r2, r1
 8001482:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2107      	movs	r1, #7
 8001490:	438a      	bics	r2, r1
 8001492:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6959      	ldr	r1, [r3, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b0:	2203      	movs	r2, #3
 80014b2:	4393      	bics	r3, r2
 80014b4:	2201      	movs	r2, #1
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	0018      	movs	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b002      	add	sp, #8
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	fffffefd 	.word	0xfffffefd
 80014cc:	40012708 	.word	0x40012708
 80014d0:	ffc3ffff 	.word	0xffc3ffff
 80014d4:	fdffffff 	.word	0xfdffffff
 80014d8:	fffe0219 	.word	0xfffe0219
 80014dc:	fffffc03 	.word	0xfffffc03

080014e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2250      	movs	r2, #80	; 0x50
 80014ee:	5c9b      	ldrb	r3, [r3, r2]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d101      	bne.n	80014f8 <HAL_ADC_ConfigChannel+0x18>
 80014f4:	2302      	movs	r3, #2
 80014f6:	e06c      	b.n	80015d2 <HAL_ADC_ConfigChannel+0xf2>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2250      	movs	r2, #80	; 0x50
 80014fc:	2101      	movs	r1, #1
 80014fe:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2204      	movs	r2, #4
 8001508:	4013      	ands	r3, r2
 800150a:	d00b      	beq.n	8001524 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001510:	2220      	movs	r2, #32
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2250      	movs	r2, #80	; 0x50
 800151c:	2100      	movs	r1, #0
 800151e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e056      	b.n	80015d2 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	4a2c      	ldr	r2, [pc, #176]	; (80015dc <HAL_ADC_ConfigChannel+0xfc>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d028      	beq.n	8001580 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	035b      	lsls	r3, r3, #13
 800153a:	0b5a      	lsrs	r2, r3, #13
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	02db      	lsls	r3, r3, #11
 800154c:	4013      	ands	r3, r2
 800154e:	d009      	beq.n	8001564 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001550:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <HAL_ADC_ConfigChannel+0x100>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <HAL_ADC_ConfigChannel+0x100>)
 8001556:	2180      	movs	r1, #128	; 0x80
 8001558:	0409      	lsls	r1, r1, #16
 800155a:	430a      	orrs	r2, r1
 800155c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800155e:	200a      	movs	r0, #10
 8001560:	f000 f844 	bl	80015ec <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	029b      	lsls	r3, r3, #10
 800156c:	4013      	ands	r3, r2
 800156e:	d02b      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <HAL_ADC_ConfigChannel+0x100>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <HAL_ADC_ConfigChannel+0x100>)
 8001576:	2180      	movs	r1, #128	; 0x80
 8001578:	03c9      	lsls	r1, r1, #15
 800157a:	430a      	orrs	r2, r1
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	e023      	b.n	80015c8 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	035b      	lsls	r3, r3, #13
 800158c:	0b5b      	lsrs	r3, r3, #13
 800158e:	43d9      	mvns	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	400a      	ands	r2, r1
 8001596:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	02db      	lsls	r3, r3, #11
 80015a0:	4013      	ands	r3, r2
 80015a2:	d005      	beq.n	80015b0 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <HAL_ADC_ConfigChannel+0x100>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <HAL_ADC_ConfigChannel+0x100>)
 80015aa:	490e      	ldr	r1, [pc, #56]	; (80015e4 <HAL_ADC_ConfigChannel+0x104>)
 80015ac:	400a      	ands	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	029b      	lsls	r3, r3, #10
 80015b8:	4013      	ands	r3, r2
 80015ba:	d005      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_ADC_ConfigChannel+0x100>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <HAL_ADC_ConfigChannel+0x100>)
 80015c2:	4909      	ldr	r1, [pc, #36]	; (80015e8 <HAL_ADC_ConfigChannel+0x108>)
 80015c4:	400a      	ands	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2250      	movs	r2, #80	; 0x50
 80015cc:	2100      	movs	r1, #0
 80015ce:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	0018      	movs	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b002      	add	sp, #8
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	00001001 	.word	0x00001001
 80015e0:	40012708 	.word	0x40012708
 80015e4:	ff7fffff 	.word	0xff7fffff
 80015e8:	ffbfffff 	.word	0xffbfffff

080015ec <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <ADC_DelayMicroSecond+0x38>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	490b      	ldr	r1, [pc, #44]	; (8001628 <ADC_DelayMicroSecond+0x3c>)
 80015fa:	0018      	movs	r0, r3
 80015fc:	f7fe fd84 	bl	8000108 <__udivsi3>
 8001600:	0003      	movs	r3, r0
 8001602:	001a      	movs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4353      	muls	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800160a:	e002      	b.n	8001612 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3b01      	subs	r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f9      	bne.n	800160c <ADC_DelayMicroSecond+0x20>
  }
}
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	46bd      	mov	sp, r7
 800161e:	b004      	add	sp, #16
 8001620:	bd80      	pop	{r7, pc}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	20000000 	.word	0x20000000
 8001628:	000f4240 	.word	0x000f4240

0800162c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	0002      	movs	r2, r0
 8001634:	1dfb      	adds	r3, r7, #7
 8001636:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001638:	1dfb      	adds	r3, r7, #7
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b7f      	cmp	r3, #127	; 0x7f
 800163e:	d809      	bhi.n	8001654 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001640:	1dfb      	adds	r3, r7, #7
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	001a      	movs	r2, r3
 8001646:	231f      	movs	r3, #31
 8001648:	401a      	ands	r2, r3
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <__NVIC_EnableIRQ+0x30>)
 800164c:	2101      	movs	r1, #1
 800164e:	4091      	lsls	r1, r2
 8001650:	000a      	movs	r2, r1
 8001652:	601a      	str	r2, [r3, #0]
  }
}
 8001654:	46c0      	nop			; (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	b002      	add	sp, #8
 800165a:	bd80      	pop	{r7, pc}
 800165c:	e000e100 	.word	0xe000e100

08001660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	0002      	movs	r2, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b7f      	cmp	r3, #127	; 0x7f
 8001674:	d828      	bhi.n	80016c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001676:	4a2f      	ldr	r2, [pc, #188]	; (8001734 <__NVIC_SetPriority+0xd4>)
 8001678:	1dfb      	adds	r3, r7, #7
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	b25b      	sxtb	r3, r3
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	33c0      	adds	r3, #192	; 0xc0
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	589b      	ldr	r3, [r3, r2]
 8001686:	1dfa      	adds	r2, r7, #7
 8001688:	7812      	ldrb	r2, [r2, #0]
 800168a:	0011      	movs	r1, r2
 800168c:	2203      	movs	r2, #3
 800168e:	400a      	ands	r2, r1
 8001690:	00d2      	lsls	r2, r2, #3
 8001692:	21ff      	movs	r1, #255	; 0xff
 8001694:	4091      	lsls	r1, r2
 8001696:	000a      	movs	r2, r1
 8001698:	43d2      	mvns	r2, r2
 800169a:	401a      	ands	r2, r3
 800169c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	019b      	lsls	r3, r3, #6
 80016a2:	22ff      	movs	r2, #255	; 0xff
 80016a4:	401a      	ands	r2, r3
 80016a6:	1dfb      	adds	r3, r7, #7
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	0018      	movs	r0, r3
 80016ac:	2303      	movs	r3, #3
 80016ae:	4003      	ands	r3, r0
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016b4:	481f      	ldr	r0, [pc, #124]	; (8001734 <__NVIC_SetPriority+0xd4>)
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	430a      	orrs	r2, r1
 80016c0:	33c0      	adds	r3, #192	; 0xc0
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016c6:	e031      	b.n	800172c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016c8:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <__NVIC_SetPriority+0xd8>)
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	0019      	movs	r1, r3
 80016d0:	230f      	movs	r3, #15
 80016d2:	400b      	ands	r3, r1
 80016d4:	3b08      	subs	r3, #8
 80016d6:	089b      	lsrs	r3, r3, #2
 80016d8:	3306      	adds	r3, #6
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	18d3      	adds	r3, r2, r3
 80016de:	3304      	adds	r3, #4
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	1dfa      	adds	r2, r7, #7
 80016e4:	7812      	ldrb	r2, [r2, #0]
 80016e6:	0011      	movs	r1, r2
 80016e8:	2203      	movs	r2, #3
 80016ea:	400a      	ands	r2, r1
 80016ec:	00d2      	lsls	r2, r2, #3
 80016ee:	21ff      	movs	r1, #255	; 0xff
 80016f0:	4091      	lsls	r1, r2
 80016f2:	000a      	movs	r2, r1
 80016f4:	43d2      	mvns	r2, r2
 80016f6:	401a      	ands	r2, r3
 80016f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	019b      	lsls	r3, r3, #6
 80016fe:	22ff      	movs	r2, #255	; 0xff
 8001700:	401a      	ands	r2, r3
 8001702:	1dfb      	adds	r3, r7, #7
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	0018      	movs	r0, r3
 8001708:	2303      	movs	r3, #3
 800170a:	4003      	ands	r3, r0
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001710:	4809      	ldr	r0, [pc, #36]	; (8001738 <__NVIC_SetPriority+0xd8>)
 8001712:	1dfb      	adds	r3, r7, #7
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	001c      	movs	r4, r3
 8001718:	230f      	movs	r3, #15
 800171a:	4023      	ands	r3, r4
 800171c:	3b08      	subs	r3, #8
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	430a      	orrs	r2, r1
 8001722:	3306      	adds	r3, #6
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	18c3      	adds	r3, r0, r3
 8001728:	3304      	adds	r3, #4
 800172a:	601a      	str	r2, [r3, #0]
}
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	b003      	add	sp, #12
 8001732:	bd90      	pop	{r4, r7, pc}
 8001734:	e000e100 	.word	0xe000e100
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	1e5a      	subs	r2, r3, #1
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	045b      	lsls	r3, r3, #17
 800174c:	429a      	cmp	r2, r3
 800174e:	d301      	bcc.n	8001754 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001750:	2301      	movs	r3, #1
 8001752:	e010      	b.n	8001776 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <SysTick_Config+0x44>)
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	3a01      	subs	r2, #1
 800175a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175c:	2301      	movs	r3, #1
 800175e:	425b      	negs	r3, r3
 8001760:	2103      	movs	r1, #3
 8001762:	0018      	movs	r0, r3
 8001764:	f7ff ff7c 	bl	8001660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <SysTick_Config+0x44>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <SysTick_Config+0x44>)
 8001770:	2207      	movs	r2, #7
 8001772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001774:	2300      	movs	r3, #0
}
 8001776:	0018      	movs	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	b002      	add	sp, #8
 800177c:	bd80      	pop	{r7, pc}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	e000e010 	.word	0xe000e010

08001784 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	210f      	movs	r1, #15
 8001790:	187b      	adds	r3, r7, r1
 8001792:	1c02      	adds	r2, r0, #0
 8001794:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	187b      	adds	r3, r7, r1
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b25b      	sxtb	r3, r3
 800179e:	0011      	movs	r1, r2
 80017a0:	0018      	movs	r0, r3
 80017a2:	f7ff ff5d 	bl	8001660 <__NVIC_SetPriority>
}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b004      	add	sp, #16
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	0002      	movs	r2, r0
 80017b6:	1dfb      	adds	r3, r7, #7
 80017b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ba:	1dfb      	adds	r3, r7, #7
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	0018      	movs	r0, r3
 80017c2:	f7ff ff33 	bl	800162c <__NVIC_EnableIRQ>
}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b002      	add	sp, #8
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	0018      	movs	r0, r3
 80017da:	f7ff ffaf 	bl	800173c <SysTick_Config>
 80017de:	0003      	movs	r3, r0
}
 80017e0:	0018      	movs	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b002      	add	sp, #8
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e061      	b.n	80018be <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a32      	ldr	r2, [pc, #200]	; (80018c8 <HAL_DMA_Init+0xe0>)
 8001800:	4694      	mov	ip, r2
 8001802:	4463      	add	r3, ip
 8001804:	2114      	movs	r1, #20
 8001806:	0018      	movs	r0, r3
 8001808:	f7fe fc7e 	bl	8000108 <__udivsi3>
 800180c:	0003      	movs	r3, r0
 800180e:	009a      	lsls	r2, r3, #2
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a2d      	ldr	r2, [pc, #180]	; (80018cc <HAL_DMA_Init+0xe4>)
 8001818:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2225      	movs	r2, #37	; 0x25
 800181e:	2102      	movs	r1, #2
 8001820:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4a28      	ldr	r2, [pc, #160]	; (80018d0 <HAL_DMA_Init+0xe8>)
 800182e:	4013      	ands	r3, r2
 8001830:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800183a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001846:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001852:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4313      	orrs	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	01db      	lsls	r3, r3, #7
 8001870:	429a      	cmp	r2, r3
 8001872:	d018      	beq.n	80018a6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <HAL_DMA_Init+0xec>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	211c      	movs	r1, #28
 800187e:	400b      	ands	r3, r1
 8001880:	210f      	movs	r1, #15
 8001882:	4099      	lsls	r1, r3
 8001884:	000b      	movs	r3, r1
 8001886:	43d9      	mvns	r1, r3
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_DMA_Init+0xec>)
 800188a:	400a      	ands	r2, r1
 800188c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <HAL_DMA_Init+0xec>)
 8001890:	6819      	ldr	r1, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	201c      	movs	r0, #28
 800189c:	4003      	ands	r3, r0
 800189e:	409a      	lsls	r2, r3
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <HAL_DMA_Init+0xec>)
 80018a2:	430a      	orrs	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2225      	movs	r2, #37	; 0x25
 80018b0:	2101      	movs	r1, #1
 80018b2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2224      	movs	r2, #36	; 0x24
 80018b8:	2100      	movs	r1, #0
 80018ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	0018      	movs	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b004      	add	sp, #16
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	bffdfff8 	.word	0xbffdfff8
 80018cc:	40020000 	.word	0x40020000
 80018d0:	ffff800f 	.word	0xffff800f
 80018d4:	400200a8 	.word	0x400200a8

080018d8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e0:	230f      	movs	r3, #15
 80018e2:	18fb      	adds	r3, r7, r3
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2225      	movs	r2, #37	; 0x25
 80018ec:	5c9b      	ldrb	r3, [r3, r2]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d008      	beq.n	8001906 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2204      	movs	r2, #4
 80018f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2224      	movs	r2, #36	; 0x24
 80018fe:	2100      	movs	r1, #0
 8001900:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e024      	b.n	8001950 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	210e      	movs	r1, #14
 8001912:	438a      	bics	r2, r1
 8001914:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2101      	movs	r1, #1
 8001922:	438a      	bics	r2, r1
 8001924:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	221c      	movs	r2, #28
 800192c:	401a      	ands	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	2101      	movs	r1, #1
 8001934:	4091      	lsls	r1, r2
 8001936:	000a      	movs	r2, r1
 8001938:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2225      	movs	r2, #37	; 0x25
 800193e:	2101      	movs	r1, #1
 8001940:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2224      	movs	r2, #36	; 0x24
 8001946:	2100      	movs	r1, #0
 8001948:	5499      	strb	r1, [r3, r2]

    return status;
 800194a:	230f      	movs	r3, #15
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b004      	add	sp, #16
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001960:	210f      	movs	r1, #15
 8001962:	187b      	adds	r3, r7, r1
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2225      	movs	r2, #37	; 0x25
 800196c:	5c9b      	ldrb	r3, [r3, r2]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d006      	beq.n	8001982 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2204      	movs	r2, #4
 8001978:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800197a:	187b      	adds	r3, r7, r1
 800197c:	2201      	movs	r2, #1
 800197e:	701a      	strb	r2, [r3, #0]
 8001980:	e02a      	b.n	80019d8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	210e      	movs	r1, #14
 800198e:	438a      	bics	r2, r1
 8001990:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2101      	movs	r1, #1
 800199e:	438a      	bics	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	221c      	movs	r2, #28
 80019a8:	401a      	ands	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	2101      	movs	r1, #1
 80019b0:	4091      	lsls	r1, r2
 80019b2:	000a      	movs	r2, r1
 80019b4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2225      	movs	r2, #37	; 0x25
 80019ba:	2101      	movs	r1, #1
 80019bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2224      	movs	r2, #36	; 0x24
 80019c2:	2100      	movs	r1, #0
 80019c4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d004      	beq.n	80019d8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	0010      	movs	r0, r2
 80019d6:	4798      	blx	r3
    }
  }
  return status;
 80019d8:	230f      	movs	r3, #15
 80019da:	18fb      	adds	r3, r7, r3
 80019dc:	781b      	ldrb	r3, [r3, #0]
}
 80019de:	0018      	movs	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b004      	add	sp, #16
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b084      	sub	sp, #16
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	221c      	movs	r2, #28
 8001a04:	4013      	ands	r3, r2
 8001a06:	2204      	movs	r2, #4
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	0013      	movs	r3, r2
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d026      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x7a>
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2204      	movs	r2, #4
 8001a16:	4013      	ands	r3, r2
 8001a18:	d022      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2220      	movs	r2, #32
 8001a22:	4013      	ands	r3, r2
 8001a24:	d107      	bne.n	8001a36 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2104      	movs	r1, #4
 8001a32:	438a      	bics	r2, r1
 8001a34:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	221c      	movs	r2, #28
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	2104      	movs	r1, #4
 8001a44:	4091      	lsls	r1, r2
 8001a46:	000a      	movs	r2, r1
 8001a48:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d100      	bne.n	8001a54 <HAL_DMA_IRQHandler+0x6e>
 8001a52:	e071      	b.n	8001b38 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	0010      	movs	r0, r2
 8001a5c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001a5e:	e06b      	b.n	8001b38 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a64:	221c      	movs	r2, #28
 8001a66:	4013      	ands	r3, r2
 8001a68:	2202      	movs	r2, #2
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	0013      	movs	r3, r2
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	4013      	ands	r3, r2
 8001a72:	d02d      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0xea>
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2202      	movs	r2, #2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d029      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2220      	movs	r2, #32
 8001a84:	4013      	ands	r3, r2
 8001a86:	d10b      	bne.n	8001aa0 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	210a      	movs	r1, #10
 8001a94:	438a      	bics	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2225      	movs	r2, #37	; 0x25
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa4:	221c      	movs	r2, #28
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	2102      	movs	r1, #2
 8001aae:	4091      	lsls	r1, r2
 8001ab0:	000a      	movs	r2, r1
 8001ab2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2224      	movs	r2, #36	; 0x24
 8001ab8:	2100      	movs	r1, #0
 8001aba:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d039      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	0010      	movs	r0, r2
 8001acc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ace:	e033      	b.n	8001b38 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad4:	221c      	movs	r2, #28
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2208      	movs	r2, #8
 8001ada:	409a      	lsls	r2, r3
 8001adc:	0013      	movs	r3, r2
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d02a      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x154>
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2208      	movs	r2, #8
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d026      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	210e      	movs	r1, #14
 8001af8:	438a      	bics	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b00:	221c      	movs	r2, #28
 8001b02:	401a      	ands	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	2101      	movs	r1, #1
 8001b0a:	4091      	lsls	r1, r2
 8001b0c:	000a      	movs	r2, r1
 8001b0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2225      	movs	r2, #37	; 0x25
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2224      	movs	r2, #36	; 0x24
 8001b22:	2100      	movs	r1, #0
 8001b24:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d005      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	0010      	movs	r0, r2
 8001b36:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b38:	46c0      	nop			; (mov r8, r8)
 8001b3a:	46c0      	nop			; (mov r8, r8)
}
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b004      	add	sp, #16
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b5a:	e14f      	b.n	8001dfc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2101      	movs	r1, #1
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	4091      	lsls	r1, r2
 8001b66:	000a      	movs	r2, r1
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d100      	bne.n	8001b74 <HAL_GPIO_Init+0x30>
 8001b72:	e140      	b.n	8001df6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2203      	movs	r2, #3
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d005      	beq.n	8001b8c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2203      	movs	r2, #3
 8001b86:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d130      	bne.n	8001bee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	0013      	movs	r3, r2
 8001b9c:	43da      	mvns	r2, r3
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	409a      	lsls	r2, r3
 8001bae:	0013      	movs	r3, r2
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	0013      	movs	r3, r2
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	2201      	movs	r2, #1
 8001bda:	401a      	ands	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	409a      	lsls	r2, r3
 8001be0:	0013      	movs	r3, r2
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d017      	beq.n	8001c2a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	2203      	movs	r2, #3
 8001c06:	409a      	lsls	r2, r3
 8001c08:	0013      	movs	r3, r2
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	409a      	lsls	r2, r3
 8001c1c:	0013      	movs	r3, r2
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2203      	movs	r2, #3
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d123      	bne.n	8001c7e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	08da      	lsrs	r2, r3, #3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3208      	adds	r2, #8
 8001c3e:	0092      	lsls	r2, r2, #2
 8001c40:	58d3      	ldr	r3, [r2, r3]
 8001c42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2207      	movs	r2, #7
 8001c48:	4013      	ands	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	220f      	movs	r2, #15
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	0013      	movs	r3, r2
 8001c52:	43da      	mvns	r2, r3
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	691a      	ldr	r2, [r3, #16]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2107      	movs	r1, #7
 8001c62:	400b      	ands	r3, r1
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	409a      	lsls	r2, r3
 8001c68:	0013      	movs	r3, r2
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	08da      	lsrs	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3208      	adds	r2, #8
 8001c78:	0092      	lsls	r2, r2, #2
 8001c7a:	6939      	ldr	r1, [r7, #16]
 8001c7c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	0013      	movs	r3, r2
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	0013      	movs	r3, r2
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	23c0      	movs	r3, #192	; 0xc0
 8001cb8:	029b      	lsls	r3, r3, #10
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d100      	bne.n	8001cc0 <HAL_GPIO_Init+0x17c>
 8001cbe:	e09a      	b.n	8001df6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc0:	4b54      	ldr	r3, [pc, #336]	; (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc4:	4b53      	ldr	r3, [pc, #332]	; (8001e14 <HAL_GPIO_Init+0x2d0>)
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ccc:	4a52      	ldr	r2, [pc, #328]	; (8001e18 <HAL_GPIO_Init+0x2d4>)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	089b      	lsrs	r3, r3, #2
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	589b      	ldr	r3, [r3, r2]
 8001cd8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2203      	movs	r2, #3
 8001cde:	4013      	ands	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	220f      	movs	r2, #15
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	0013      	movs	r3, r2
 8001ce8:	43da      	mvns	r2, r3
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	23a0      	movs	r3, #160	; 0xa0
 8001cf4:	05db      	lsls	r3, r3, #23
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d019      	beq.n	8001d2e <HAL_GPIO_Init+0x1ea>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a47      	ldr	r2, [pc, #284]	; (8001e1c <HAL_GPIO_Init+0x2d8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d013      	beq.n	8001d2a <HAL_GPIO_Init+0x1e6>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a46      	ldr	r2, [pc, #280]	; (8001e20 <HAL_GPIO_Init+0x2dc>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d00d      	beq.n	8001d26 <HAL_GPIO_Init+0x1e2>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a45      	ldr	r2, [pc, #276]	; (8001e24 <HAL_GPIO_Init+0x2e0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d007      	beq.n	8001d22 <HAL_GPIO_Init+0x1de>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a44      	ldr	r2, [pc, #272]	; (8001e28 <HAL_GPIO_Init+0x2e4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d101      	bne.n	8001d1e <HAL_GPIO_Init+0x1da>
 8001d1a:	2305      	movs	r3, #5
 8001d1c:	e008      	b.n	8001d30 <HAL_GPIO_Init+0x1ec>
 8001d1e:	2306      	movs	r3, #6
 8001d20:	e006      	b.n	8001d30 <HAL_GPIO_Init+0x1ec>
 8001d22:	2303      	movs	r3, #3
 8001d24:	e004      	b.n	8001d30 <HAL_GPIO_Init+0x1ec>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e002      	b.n	8001d30 <HAL_GPIO_Init+0x1ec>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_GPIO_Init+0x1ec>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	2103      	movs	r1, #3
 8001d34:	400a      	ands	r2, r1
 8001d36:	0092      	lsls	r2, r2, #2
 8001d38:	4093      	lsls	r3, r2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d40:	4935      	ldr	r1, [pc, #212]	; (8001e18 <HAL_GPIO_Init+0x2d4>)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	3302      	adds	r3, #2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d4e:	4b37      	ldr	r3, [pc, #220]	; (8001e2c <HAL_GPIO_Init+0x2e8>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	43da      	mvns	r2, r3
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	035b      	lsls	r3, r3, #13
 8001d66:	4013      	ands	r3, r2
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d72:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <HAL_GPIO_Init+0x2e8>)
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d78:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <HAL_GPIO_Init+0x2e8>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	43da      	mvns	r2, r3
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	039b      	lsls	r3, r3, #14
 8001d90:	4013      	ands	r3, r2
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d9c:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <HAL_GPIO_Init+0x2e8>)
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001da2:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <HAL_GPIO_Init+0x2e8>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	43da      	mvns	r2, r3
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	029b      	lsls	r3, r3, #10
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dc6:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_GPIO_Init+0x2e8>)
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dcc:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <HAL_GPIO_Init+0x2e8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	43da      	mvns	r2, r3
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	025b      	lsls	r3, r3, #9
 8001de4:	4013      	ands	r3, r2
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001df0:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <HAL_GPIO_Init+0x2e8>)
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	40da      	lsrs	r2, r3
 8001e04:	1e13      	subs	r3, r2, #0
 8001e06:	d000      	beq.n	8001e0a <HAL_GPIO_Init+0x2c6>
 8001e08:	e6a8      	b.n	8001b5c <HAL_GPIO_Init+0x18>
  }
}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	46c0      	nop			; (mov r8, r8)
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b006      	add	sp, #24
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40010000 	.word	0x40010000
 8001e1c:	50000400 	.word	0x50000400
 8001e20:	50000800 	.word	0x50000800
 8001e24:	50000c00 	.word	0x50000c00
 8001e28:	50001c00 	.word	0x50001c00
 8001e2c:	40010400 	.word	0x40010400

08001e30 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	0008      	movs	r0, r1
 8001e3a:	0011      	movs	r1, r2
 8001e3c:	1cbb      	adds	r3, r7, #2
 8001e3e:	1c02      	adds	r2, r0, #0
 8001e40:	801a      	strh	r2, [r3, #0]
 8001e42:	1c7b      	adds	r3, r7, #1
 8001e44:	1c0a      	adds	r2, r1, #0
 8001e46:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e48:	1c7b      	adds	r3, r7, #1
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d004      	beq.n	8001e5a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e50:	1cbb      	adds	r3, r7, #2
 8001e52:	881a      	ldrh	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001e58:	e003      	b.n	8001e62 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001e5a:	1cbb      	adds	r3, r7, #2
 8001e5c:	881a      	ldrh	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b002      	add	sp, #8
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	000a      	movs	r2, r1
 8001e74:	1cbb      	adds	r3, r7, #2
 8001e76:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e7e:	1cbb      	adds	r3, r7, #2
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4013      	ands	r3, r2
 8001e86:	041a      	lsls	r2, r3, #16
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	1cb9      	adds	r1, r7, #2
 8001e8e:	8809      	ldrh	r1, [r1, #0]
 8001e90:	400b      	ands	r3, r1
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	619a      	str	r2, [r3, #24]
}
 8001e98:	46c0      	nop			; (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b004      	add	sp, #16
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea0:	b5b0      	push	{r4, r5, r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d102      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	f000 fb5a 	bl	8002568 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eb4:	4bce      	ldr	r3, [pc, #824]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	220c      	movs	r2, #12
 8001eba:	4013      	ands	r3, r2
 8001ebc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ebe:	4bcc      	ldr	r3, [pc, #816]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	025b      	lsls	r3, r3, #9
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d100      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x36>
 8001ed4:	e07c      	b.n	8001fd0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d007      	beq.n	8001eec <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	2b0c      	cmp	r3, #12
 8001ee0:	d111      	bne.n	8001f06 <HAL_RCC_OscConfig+0x66>
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	025b      	lsls	r3, r3, #9
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d10c      	bne.n	8001f06 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	4bc0      	ldr	r3, [pc, #768]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	029b      	lsls	r3, r3, #10
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d100      	bne.n	8001efa <HAL_RCC_OscConfig+0x5a>
 8001ef8:	e069      	b.n	8001fce <HAL_RCC_OscConfig+0x12e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d165      	bne.n	8001fce <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e330      	b.n	8002568 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	025b      	lsls	r3, r3, #9
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d107      	bne.n	8001f22 <HAL_RCC_OscConfig+0x82>
 8001f12:	4bb7      	ldr	r3, [pc, #732]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4bb6      	ldr	r3, [pc, #728]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8001f18:	2180      	movs	r1, #128	; 0x80
 8001f1a:	0249      	lsls	r1, r1, #9
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	e027      	b.n	8001f72 <HAL_RCC_OscConfig+0xd2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	23a0      	movs	r3, #160	; 0xa0
 8001f28:	02db      	lsls	r3, r3, #11
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d10e      	bne.n	8001f4c <HAL_RCC_OscConfig+0xac>
 8001f2e:	4bb0      	ldr	r3, [pc, #704]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4baf      	ldr	r3, [pc, #700]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8001f34:	2180      	movs	r1, #128	; 0x80
 8001f36:	02c9      	lsls	r1, r1, #11
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	4bac      	ldr	r3, [pc, #688]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4bab      	ldr	r3, [pc, #684]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8001f42:	2180      	movs	r1, #128	; 0x80
 8001f44:	0249      	lsls	r1, r1, #9
 8001f46:	430a      	orrs	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	e012      	b.n	8001f72 <HAL_RCC_OscConfig+0xd2>
 8001f4c:	4ba8      	ldr	r3, [pc, #672]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4ba7      	ldr	r3, [pc, #668]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8001f52:	49a8      	ldr	r1, [pc, #672]	; (80021f4 <HAL_RCC_OscConfig+0x354>)
 8001f54:	400a      	ands	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	4ba5      	ldr	r3, [pc, #660]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	025b      	lsls	r3, r3, #9
 8001f60:	4013      	ands	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4ba2      	ldr	r3, [pc, #648]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	4ba1      	ldr	r3, [pc, #644]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8001f6c:	49a2      	ldr	r1, [pc, #648]	; (80021f8 <HAL_RCC_OscConfig+0x358>)
 8001f6e:	400a      	ands	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d014      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7a:	f7ff f90f 	bl	800119c <HAL_GetTick>
 8001f7e:	0003      	movs	r3, r0
 8001f80:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f84:	f7ff f90a 	bl	800119c <HAL_GetTick>
 8001f88:	0002      	movs	r2, r0
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e2e8      	b.n	8002568 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f96:	4b96      	ldr	r3, [pc, #600]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	029b      	lsls	r3, r3, #10
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0xe4>
 8001fa2:	e015      	b.n	8001fd0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7ff f8fa 	bl	800119c <HAL_GetTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fae:	f7ff f8f5 	bl	800119c <HAL_GetTick>
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b64      	cmp	r3, #100	; 0x64
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e2d3      	b.n	8002568 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fc0:	4b8b      	ldr	r3, [pc, #556]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	029b      	lsls	r3, r3, #10
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d1f0      	bne.n	8001fae <HAL_RCC_OscConfig+0x10e>
 8001fcc:	e000      	b.n	8001fd0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d100      	bne.n	8001fdc <HAL_RCC_OscConfig+0x13c>
 8001fda:	e08b      	b.n	80020f4 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	2b0c      	cmp	r3, #12
 8001fec:	d13e      	bne.n	800206c <HAL_RCC_OscConfig+0x1cc>
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d13b      	bne.n	800206c <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001ff4:	4b7e      	ldr	r3, [pc, #504]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d004      	beq.n	8002008 <HAL_RCC_OscConfig+0x168>
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e2af      	b.n	8002568 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002008:	4b79      	ldr	r3, [pc, #484]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	4a7b      	ldr	r2, [pc, #492]	; (80021fc <HAL_RCC_OscConfig+0x35c>)
 800200e:	4013      	ands	r3, r2
 8002010:	0019      	movs	r1, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	021a      	lsls	r2, r3, #8
 8002018:	4b75      	ldr	r3, [pc, #468]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 800201a:	430a      	orrs	r2, r1
 800201c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800201e:	4b74      	ldr	r3, [pc, #464]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2209      	movs	r2, #9
 8002024:	4393      	bics	r3, r2
 8002026:	0019      	movs	r1, r3
 8002028:	4b71      	ldr	r3, [pc, #452]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	430a      	orrs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002030:	f000 fc7a 	bl	8002928 <HAL_RCC_GetSysClockFreq>
 8002034:	0001      	movs	r1, r0
 8002036:	4b6e      	ldr	r3, [pc, #440]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	220f      	movs	r2, #15
 800203e:	4013      	ands	r3, r2
 8002040:	4a6f      	ldr	r2, [pc, #444]	; (8002200 <HAL_RCC_OscConfig+0x360>)
 8002042:	5cd3      	ldrb	r3, [r2, r3]
 8002044:	000a      	movs	r2, r1
 8002046:	40da      	lsrs	r2, r3
 8002048:	4b6e      	ldr	r3, [pc, #440]	; (8002204 <HAL_RCC_OscConfig+0x364>)
 800204a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800204c:	4b6e      	ldr	r3, [pc, #440]	; (8002208 <HAL_RCC_OscConfig+0x368>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2513      	movs	r5, #19
 8002052:	197c      	adds	r4, r7, r5
 8002054:	0018      	movs	r0, r3
 8002056:	f7ff f85b 	bl	8001110 <HAL_InitTick>
 800205a:	0003      	movs	r3, r0
 800205c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800205e:	197b      	adds	r3, r7, r5
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d046      	beq.n	80020f4 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8002066:	197b      	adds	r3, r7, r5
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	e27d      	b.n	8002568 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d027      	beq.n	80020c2 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002072:	4b5f      	ldr	r3, [pc, #380]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2209      	movs	r2, #9
 8002078:	4393      	bics	r3, r2
 800207a:	0019      	movs	r1, r3
 800207c:	4b5c      	ldr	r3, [pc, #368]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	430a      	orrs	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7ff f88a 	bl	800119c <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800208e:	f7ff f885 	bl	800119c <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e263      	b.n	8002568 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020a0:	4b53      	ldr	r3, [pc, #332]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2204      	movs	r2, #4
 80020a6:	4013      	ands	r3, r2
 80020a8:	d0f1      	beq.n	800208e <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020aa:	4b51      	ldr	r3, [pc, #324]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4a53      	ldr	r2, [pc, #332]	; (80021fc <HAL_RCC_OscConfig+0x35c>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	0019      	movs	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	021a      	lsls	r2, r3, #8
 80020ba:	4b4d      	ldr	r3, [pc, #308]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 80020bc:	430a      	orrs	r2, r1
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	e018      	b.n	80020f4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c2:	4b4b      	ldr	r3, [pc, #300]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	4b4a      	ldr	r3, [pc, #296]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 80020c8:	2101      	movs	r1, #1
 80020ca:	438a      	bics	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7ff f865 	bl	800119c <HAL_GetTick>
 80020d2:	0003      	movs	r3, r0
 80020d4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d8:	f7ff f860 	bl	800119c <HAL_GetTick>
 80020dc:	0002      	movs	r2, r0
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e23e      	b.n	8002568 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020ea:	4b41      	ldr	r3, [pc, #260]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2204      	movs	r2, #4
 80020f0:	4013      	ands	r3, r2
 80020f2:	d1f1      	bne.n	80020d8 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2210      	movs	r2, #16
 80020fa:	4013      	ands	r3, r2
 80020fc:	d100      	bne.n	8002100 <HAL_RCC_OscConfig+0x260>
 80020fe:	e0a1      	b.n	8002244 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d140      	bne.n	8002188 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002106:	4b3a      	ldr	r3, [pc, #232]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4013      	ands	r3, r2
 8002110:	d005      	beq.n	800211e <HAL_RCC_OscConfig+0x27e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e224      	b.n	8002568 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800211e:	4b34      	ldr	r3, [pc, #208]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4a3a      	ldr	r2, [pc, #232]	; (800220c <HAL_RCC_OscConfig+0x36c>)
 8002124:	4013      	ands	r3, r2
 8002126:	0019      	movs	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1a      	ldr	r2, [r3, #32]
 800212c:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 800212e:	430a      	orrs	r2, r1
 8002130:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002132:	4b2f      	ldr	r3, [pc, #188]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	0a19      	lsrs	r1, r3, #8
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	061a      	lsls	r2, r3, #24
 8002140:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8002142:	430a      	orrs	r2, r1
 8002144:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	0b5b      	lsrs	r3, r3, #13
 800214c:	3301      	adds	r3, #1
 800214e:	2280      	movs	r2, #128	; 0x80
 8002150:	0212      	lsls	r2, r2, #8
 8002152:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002154:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	210f      	movs	r1, #15
 800215c:	400b      	ands	r3, r1
 800215e:	4928      	ldr	r1, [pc, #160]	; (8002200 <HAL_RCC_OscConfig+0x360>)
 8002160:	5ccb      	ldrb	r3, [r1, r3]
 8002162:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002164:	4b27      	ldr	r3, [pc, #156]	; (8002204 <HAL_RCC_OscConfig+0x364>)
 8002166:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002168:	4b27      	ldr	r3, [pc, #156]	; (8002208 <HAL_RCC_OscConfig+0x368>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2513      	movs	r5, #19
 800216e:	197c      	adds	r4, r7, r5
 8002170:	0018      	movs	r0, r3
 8002172:	f7fe ffcd 	bl	8001110 <HAL_InitTick>
 8002176:	0003      	movs	r3, r0
 8002178:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800217a:	197b      	adds	r3, r7, r5
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d060      	beq.n	8002244 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8002182:	197b      	adds	r3, r7, r5
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	e1ef      	b.n	8002568 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d03f      	beq.n	8002210 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002190:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 8002196:	2180      	movs	r1, #128	; 0x80
 8002198:	0049      	lsls	r1, r1, #1
 800219a:	430a      	orrs	r2, r1
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219e:	f7fe fffd 	bl	800119c <HAL_GetTick>
 80021a2:	0003      	movs	r3, r0
 80021a4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021a8:	f7fe fff8 	bl	800119c <HAL_GetTick>
 80021ac:	0002      	movs	r2, r0
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e1d6      	b.n	8002568 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4013      	ands	r3, r2
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4a10      	ldr	r2, [pc, #64]	; (800220c <HAL_RCC_OscConfig+0x36c>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	0019      	movs	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1a      	ldr	r2, [r3, #32]
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 80021d6:	430a      	orrs	r2, r1
 80021d8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	0a19      	lsrs	r1, r3, #8
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	061a      	lsls	r2, r3, #24
 80021e8:	4b01      	ldr	r3, [pc, #4]	; (80021f0 <HAL_RCC_OscConfig+0x350>)
 80021ea:	430a      	orrs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	e029      	b.n	8002244 <HAL_RCC_OscConfig+0x3a4>
 80021f0:	40021000 	.word	0x40021000
 80021f4:	fffeffff 	.word	0xfffeffff
 80021f8:	fffbffff 	.word	0xfffbffff
 80021fc:	ffffe0ff 	.word	0xffffe0ff
 8002200:	08004bf0 	.word	0x08004bf0
 8002204:	20000000 	.word	0x20000000
 8002208:	20000004 	.word	0x20000004
 800220c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002210:	4bbe      	ldr	r3, [pc, #760]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4bbd      	ldr	r3, [pc, #756]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 8002216:	49be      	ldr	r1, [pc, #760]	; (8002510 <HAL_RCC_OscConfig+0x670>)
 8002218:	400a      	ands	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe ffbe 	bl	800119c <HAL_GetTick>
 8002220:	0003      	movs	r3, r0
 8002222:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002226:	f7fe ffb9 	bl	800119c <HAL_GetTick>
 800222a:	0002      	movs	r2, r0
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e197      	b.n	8002568 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002238:	4bb4      	ldr	r3, [pc, #720]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	2380      	movs	r3, #128	; 0x80
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4013      	ands	r3, r2
 8002242:	d1f0      	bne.n	8002226 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2208      	movs	r2, #8
 800224a:	4013      	ands	r3, r2
 800224c:	d036      	beq.n	80022bc <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d019      	beq.n	800228a <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002256:	4bad      	ldr	r3, [pc, #692]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 8002258:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800225a:	4bac      	ldr	r3, [pc, #688]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 800225c:	2101      	movs	r1, #1
 800225e:	430a      	orrs	r2, r1
 8002260:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002262:	f7fe ff9b 	bl	800119c <HAL_GetTick>
 8002266:	0003      	movs	r3, r0
 8002268:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800226c:	f7fe ff96 	bl	800119c <HAL_GetTick>
 8002270:	0002      	movs	r2, r0
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e174      	b.n	8002568 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800227e:	4ba3      	ldr	r3, [pc, #652]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 8002280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002282:	2202      	movs	r2, #2
 8002284:	4013      	ands	r3, r2
 8002286:	d0f1      	beq.n	800226c <HAL_RCC_OscConfig+0x3cc>
 8002288:	e018      	b.n	80022bc <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800228a:	4ba0      	ldr	r3, [pc, #640]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 800228c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800228e:	4b9f      	ldr	r3, [pc, #636]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 8002290:	2101      	movs	r1, #1
 8002292:	438a      	bics	r2, r1
 8002294:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002296:	f7fe ff81 	bl	800119c <HAL_GetTick>
 800229a:	0003      	movs	r3, r0
 800229c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a0:	f7fe ff7c 	bl	800119c <HAL_GetTick>
 80022a4:	0002      	movs	r2, r0
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e15a      	b.n	8002568 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022b2:	4b96      	ldr	r3, [pc, #600]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 80022b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b6:	2202      	movs	r2, #2
 80022b8:	4013      	ands	r3, r2
 80022ba:	d1f1      	bne.n	80022a0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2204      	movs	r2, #4
 80022c2:	4013      	ands	r3, r2
 80022c4:	d100      	bne.n	80022c8 <HAL_RCC_OscConfig+0x428>
 80022c6:	e0ae      	b.n	8002426 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c8:	2027      	movs	r0, #39	; 0x27
 80022ca:	183b      	adds	r3, r7, r0
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d0:	4b8e      	ldr	r3, [pc, #568]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 80022d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	055b      	lsls	r3, r3, #21
 80022d8:	4013      	ands	r3, r2
 80022da:	d109      	bne.n	80022f0 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022dc:	4b8b      	ldr	r3, [pc, #556]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 80022de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022e0:	4b8a      	ldr	r3, [pc, #552]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 80022e2:	2180      	movs	r1, #128	; 0x80
 80022e4:	0549      	lsls	r1, r1, #21
 80022e6:	430a      	orrs	r2, r1
 80022e8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80022ea:	183b      	adds	r3, r7, r0
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	4b88      	ldr	r3, [pc, #544]	; (8002514 <HAL_RCC_OscConfig+0x674>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4013      	ands	r3, r2
 80022fa:	d11a      	bne.n	8002332 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022fc:	4b85      	ldr	r3, [pc, #532]	; (8002514 <HAL_RCC_OscConfig+0x674>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b84      	ldr	r3, [pc, #528]	; (8002514 <HAL_RCC_OscConfig+0x674>)
 8002302:	2180      	movs	r1, #128	; 0x80
 8002304:	0049      	lsls	r1, r1, #1
 8002306:	430a      	orrs	r2, r1
 8002308:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800230a:	f7fe ff47 	bl	800119c <HAL_GetTick>
 800230e:	0003      	movs	r3, r0
 8002310:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002314:	f7fe ff42 	bl	800119c <HAL_GetTick>
 8002318:	0002      	movs	r2, r0
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	; 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e120      	b.n	8002568 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002326:	4b7b      	ldr	r3, [pc, #492]	; (8002514 <HAL_RCC_OscConfig+0x674>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4013      	ands	r3, r2
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	429a      	cmp	r2, r3
 800233c:	d107      	bne.n	800234e <HAL_RCC_OscConfig+0x4ae>
 800233e:	4b73      	ldr	r3, [pc, #460]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 8002340:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002342:	4b72      	ldr	r3, [pc, #456]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 8002344:	2180      	movs	r1, #128	; 0x80
 8002346:	0049      	lsls	r1, r1, #1
 8002348:	430a      	orrs	r2, r1
 800234a:	651a      	str	r2, [r3, #80]	; 0x50
 800234c:	e031      	b.n	80023b2 <HAL_RCC_OscConfig+0x512>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0x4d0>
 8002356:	4b6d      	ldr	r3, [pc, #436]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 8002358:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800235a:	4b6c      	ldr	r3, [pc, #432]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 800235c:	496c      	ldr	r1, [pc, #432]	; (8002510 <HAL_RCC_OscConfig+0x670>)
 800235e:	400a      	ands	r2, r1
 8002360:	651a      	str	r2, [r3, #80]	; 0x50
 8002362:	4b6a      	ldr	r3, [pc, #424]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 8002364:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002366:	4b69      	ldr	r3, [pc, #420]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 8002368:	496b      	ldr	r1, [pc, #428]	; (8002518 <HAL_RCC_OscConfig+0x678>)
 800236a:	400a      	ands	r2, r1
 800236c:	651a      	str	r2, [r3, #80]	; 0x50
 800236e:	e020      	b.n	80023b2 <HAL_RCC_OscConfig+0x512>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	23a0      	movs	r3, #160	; 0xa0
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	429a      	cmp	r2, r3
 800237a:	d10e      	bne.n	800239a <HAL_RCC_OscConfig+0x4fa>
 800237c:	4b63      	ldr	r3, [pc, #396]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 800237e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002380:	4b62      	ldr	r3, [pc, #392]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 8002382:	2180      	movs	r1, #128	; 0x80
 8002384:	00c9      	lsls	r1, r1, #3
 8002386:	430a      	orrs	r2, r1
 8002388:	651a      	str	r2, [r3, #80]	; 0x50
 800238a:	4b60      	ldr	r3, [pc, #384]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 800238c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800238e:	4b5f      	ldr	r3, [pc, #380]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 8002390:	2180      	movs	r1, #128	; 0x80
 8002392:	0049      	lsls	r1, r1, #1
 8002394:	430a      	orrs	r2, r1
 8002396:	651a      	str	r2, [r3, #80]	; 0x50
 8002398:	e00b      	b.n	80023b2 <HAL_RCC_OscConfig+0x512>
 800239a:	4b5c      	ldr	r3, [pc, #368]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 800239c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800239e:	4b5b      	ldr	r3, [pc, #364]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 80023a0:	495b      	ldr	r1, [pc, #364]	; (8002510 <HAL_RCC_OscConfig+0x670>)
 80023a2:	400a      	ands	r2, r1
 80023a4:	651a      	str	r2, [r3, #80]	; 0x50
 80023a6:	4b59      	ldr	r3, [pc, #356]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 80023a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023aa:	4b58      	ldr	r3, [pc, #352]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 80023ac:	495a      	ldr	r1, [pc, #360]	; (8002518 <HAL_RCC_OscConfig+0x678>)
 80023ae:	400a      	ands	r2, r1
 80023b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d015      	beq.n	80023e6 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ba:	f7fe feef 	bl	800119c <HAL_GetTick>
 80023be:	0003      	movs	r3, r0
 80023c0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023c2:	e009      	b.n	80023d8 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c4:	f7fe feea 	bl	800119c <HAL_GetTick>
 80023c8:	0002      	movs	r2, r0
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	4a53      	ldr	r2, [pc, #332]	; (800251c <HAL_RCC_OscConfig+0x67c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e0c7      	b.n	8002568 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023d8:	4b4c      	ldr	r3, [pc, #304]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 80023da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4013      	ands	r3, r2
 80023e2:	d0ef      	beq.n	80023c4 <HAL_RCC_OscConfig+0x524>
 80023e4:	e014      	b.n	8002410 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e6:	f7fe fed9 	bl	800119c <HAL_GetTick>
 80023ea:	0003      	movs	r3, r0
 80023ec:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023ee:	e009      	b.n	8002404 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f0:	f7fe fed4 	bl	800119c <HAL_GetTick>
 80023f4:	0002      	movs	r2, r0
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	4a48      	ldr	r2, [pc, #288]	; (800251c <HAL_RCC_OscConfig+0x67c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e0b1      	b.n	8002568 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002404:	4b41      	ldr	r3, [pc, #260]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 8002406:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4013      	ands	r3, r2
 800240e:	d1ef      	bne.n	80023f0 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002410:	2327      	movs	r3, #39	; 0x27
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d105      	bne.n	8002426 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800241a:	4b3c      	ldr	r3, [pc, #240]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 800241c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800241e:	4b3b      	ldr	r3, [pc, #236]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 8002420:	493f      	ldr	r1, [pc, #252]	; (8002520 <HAL_RCC_OscConfig+0x680>)
 8002422:	400a      	ands	r2, r1
 8002424:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	2b00      	cmp	r3, #0
 800242c:	d100      	bne.n	8002430 <HAL_RCC_OscConfig+0x590>
 800242e:	e09a      	b.n	8002566 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	2b0c      	cmp	r3, #12
 8002434:	d064      	beq.n	8002500 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	2b02      	cmp	r3, #2
 800243c:	d145      	bne.n	80024ca <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b33      	ldr	r3, [pc, #204]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	4b32      	ldr	r3, [pc, #200]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 8002444:	4937      	ldr	r1, [pc, #220]	; (8002524 <HAL_RCC_OscConfig+0x684>)
 8002446:	400a      	ands	r2, r1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7fe fea7 	bl	800119c <HAL_GetTick>
 800244e:	0003      	movs	r3, r0
 8002450:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002454:	f7fe fea2 	bl	800119c <HAL_GetTick>
 8002458:	0002      	movs	r2, r0
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e080      	b.n	8002568 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002466:	4b29      	ldr	r3, [pc, #164]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	049b      	lsls	r3, r3, #18
 800246e:	4013      	ands	r3, r2
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002472:	4b26      	ldr	r3, [pc, #152]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	4a2c      	ldr	r2, [pc, #176]	; (8002528 <HAL_RCC_OscConfig+0x688>)
 8002478:	4013      	ands	r3, r2
 800247a:	0019      	movs	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	431a      	orrs	r2, r3
 800248c:	4b1f      	ldr	r3, [pc, #124]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 800248e:	430a      	orrs	r2, r1
 8002490:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002492:	4b1e      	ldr	r3, [pc, #120]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	4b1d      	ldr	r3, [pc, #116]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 8002498:	2180      	movs	r1, #128	; 0x80
 800249a:	0449      	lsls	r1, r1, #17
 800249c:	430a      	orrs	r2, r1
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe fe7c 	bl	800119c <HAL_GetTick>
 80024a4:	0003      	movs	r3, r0
 80024a6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024aa:	f7fe fe77 	bl	800119c <HAL_GetTick>
 80024ae:	0002      	movs	r2, r0
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e055      	b.n	8002568 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	049b      	lsls	r3, r3, #18
 80024c4:	4013      	ands	r3, r2
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x60a>
 80024c8:	e04d      	b.n	8002566 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	4b0f      	ldr	r3, [pc, #60]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 80024d0:	4914      	ldr	r1, [pc, #80]	; (8002524 <HAL_RCC_OscConfig+0x684>)
 80024d2:	400a      	ands	r2, r1
 80024d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7fe fe61 	bl	800119c <HAL_GetTick>
 80024da:	0003      	movs	r3, r0
 80024dc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e0:	f7fe fe5c 	bl	800119c <HAL_GetTick>
 80024e4:	0002      	movs	r2, r0
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e03a      	b.n	8002568 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_RCC_OscConfig+0x66c>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	049b      	lsls	r3, r3, #18
 80024fa:	4013      	ands	r3, r2
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x640>
 80024fe:	e032      	b.n	8002566 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	2b01      	cmp	r3, #1
 8002506:	d111      	bne.n	800252c <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e02d      	b.n	8002568 <HAL_RCC_OscConfig+0x6c8>
 800250c:	40021000 	.word	0x40021000
 8002510:	fffffeff 	.word	0xfffffeff
 8002514:	40007000 	.word	0x40007000
 8002518:	fffffbff 	.word	0xfffffbff
 800251c:	00001388 	.word	0x00001388
 8002520:	efffffff 	.word	0xefffffff
 8002524:	feffffff 	.word	0xfeffffff
 8002528:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800252c:	4b10      	ldr	r3, [pc, #64]	; (8002570 <HAL_RCC_OscConfig+0x6d0>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	69fa      	ldr	r2, [r7, #28]
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	025b      	lsls	r3, r3, #9
 8002538:	401a      	ands	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	429a      	cmp	r2, r3
 8002540:	d10f      	bne.n	8002562 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002542:	69fa      	ldr	r2, [r7, #28]
 8002544:	23f0      	movs	r3, #240	; 0xf0
 8002546:	039b      	lsls	r3, r3, #14
 8002548:	401a      	ands	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d107      	bne.n	8002562 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002552:	69fa      	ldr	r2, [r7, #28]
 8002554:	23c0      	movs	r3, #192	; 0xc0
 8002556:	041b      	lsls	r3, r3, #16
 8002558:	401a      	ands	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	0018      	movs	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	b00a      	add	sp, #40	; 0x28
 800256e:	bdb0      	pop	{r4, r5, r7, pc}
 8002570:	40021000 	.word	0x40021000

08002574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002574:	b5b0      	push	{r4, r5, r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e128      	b.n	80027da <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002588:	4b96      	ldr	r3, [pc, #600]	; (80027e4 <HAL_RCC_ClockConfig+0x270>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2201      	movs	r2, #1
 800258e:	4013      	ands	r3, r2
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d91e      	bls.n	80025d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b93      	ldr	r3, [pc, #588]	; (80027e4 <HAL_RCC_ClockConfig+0x270>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2201      	movs	r2, #1
 800259c:	4393      	bics	r3, r2
 800259e:	0019      	movs	r1, r3
 80025a0:	4b90      	ldr	r3, [pc, #576]	; (80027e4 <HAL_RCC_ClockConfig+0x270>)
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025a8:	f7fe fdf8 	bl	800119c <HAL_GetTick>
 80025ac:	0003      	movs	r3, r0
 80025ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b0:	e009      	b.n	80025c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b2:	f7fe fdf3 	bl	800119c <HAL_GetTick>
 80025b6:	0002      	movs	r2, r0
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	4a8a      	ldr	r2, [pc, #552]	; (80027e8 <HAL_RCC_ClockConfig+0x274>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e109      	b.n	80027da <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b87      	ldr	r3, [pc, #540]	; (80027e4 <HAL_RCC_ClockConfig+0x270>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2201      	movs	r2, #1
 80025cc:	4013      	ands	r3, r2
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d1ee      	bne.n	80025b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2202      	movs	r2, #2
 80025da:	4013      	ands	r3, r2
 80025dc:	d009      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025de:	4b83      	ldr	r3, [pc, #524]	; (80027ec <HAL_RCC_ClockConfig+0x278>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	22f0      	movs	r2, #240	; 0xf0
 80025e4:	4393      	bics	r3, r2
 80025e6:	0019      	movs	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	4b7f      	ldr	r3, [pc, #508]	; (80027ec <HAL_RCC_ClockConfig+0x278>)
 80025ee:	430a      	orrs	r2, r1
 80025f0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2201      	movs	r2, #1
 80025f8:	4013      	ands	r3, r2
 80025fa:	d100      	bne.n	80025fe <HAL_RCC_ClockConfig+0x8a>
 80025fc:	e089      	b.n	8002712 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d107      	bne.n	8002616 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002606:	4b79      	ldr	r3, [pc, #484]	; (80027ec <HAL_RCC_ClockConfig+0x278>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	029b      	lsls	r3, r3, #10
 800260e:	4013      	ands	r3, r2
 8002610:	d120      	bne.n	8002654 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e0e1      	b.n	80027da <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b03      	cmp	r3, #3
 800261c:	d107      	bne.n	800262e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800261e:	4b73      	ldr	r3, [pc, #460]	; (80027ec <HAL_RCC_ClockConfig+0x278>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	049b      	lsls	r3, r3, #18
 8002626:	4013      	ands	r3, r2
 8002628:	d114      	bne.n	8002654 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e0d5      	b.n	80027da <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d106      	bne.n	8002644 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002636:	4b6d      	ldr	r3, [pc, #436]	; (80027ec <HAL_RCC_ClockConfig+0x278>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2204      	movs	r2, #4
 800263c:	4013      	ands	r3, r2
 800263e:	d109      	bne.n	8002654 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0ca      	b.n	80027da <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002644:	4b69      	ldr	r3, [pc, #420]	; (80027ec <HAL_RCC_ClockConfig+0x278>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4013      	ands	r3, r2
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0c2      	b.n	80027da <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002654:	4b65      	ldr	r3, [pc, #404]	; (80027ec <HAL_RCC_ClockConfig+0x278>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	2203      	movs	r2, #3
 800265a:	4393      	bics	r3, r2
 800265c:	0019      	movs	r1, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	4b62      	ldr	r3, [pc, #392]	; (80027ec <HAL_RCC_ClockConfig+0x278>)
 8002664:	430a      	orrs	r2, r1
 8002666:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002668:	f7fe fd98 	bl	800119c <HAL_GetTick>
 800266c:	0003      	movs	r3, r0
 800266e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d111      	bne.n	800269c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002678:	e009      	b.n	800268e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267a:	f7fe fd8f 	bl	800119c <HAL_GetTick>
 800267e:	0002      	movs	r2, r0
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	4a58      	ldr	r2, [pc, #352]	; (80027e8 <HAL_RCC_ClockConfig+0x274>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d901      	bls.n	800268e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e0a5      	b.n	80027da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800268e:	4b57      	ldr	r3, [pc, #348]	; (80027ec <HAL_RCC_ClockConfig+0x278>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	220c      	movs	r2, #12
 8002694:	4013      	ands	r3, r2
 8002696:	2b08      	cmp	r3, #8
 8002698:	d1ef      	bne.n	800267a <HAL_RCC_ClockConfig+0x106>
 800269a:	e03a      	b.n	8002712 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d111      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a4:	e009      	b.n	80026ba <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a6:	f7fe fd79 	bl	800119c <HAL_GetTick>
 80026aa:	0002      	movs	r2, r0
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	4a4d      	ldr	r2, [pc, #308]	; (80027e8 <HAL_RCC_ClockConfig+0x274>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e08f      	b.n	80027da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ba:	4b4c      	ldr	r3, [pc, #304]	; (80027ec <HAL_RCC_ClockConfig+0x278>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	220c      	movs	r2, #12
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b0c      	cmp	r3, #12
 80026c4:	d1ef      	bne.n	80026a6 <HAL_RCC_ClockConfig+0x132>
 80026c6:	e024      	b.n	8002712 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d11b      	bne.n	8002708 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026d0:	e009      	b.n	80026e6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d2:	f7fe fd63 	bl	800119c <HAL_GetTick>
 80026d6:	0002      	movs	r2, r0
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	4a42      	ldr	r2, [pc, #264]	; (80027e8 <HAL_RCC_ClockConfig+0x274>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e079      	b.n	80027da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026e6:	4b41      	ldr	r3, [pc, #260]	; (80027ec <HAL_RCC_ClockConfig+0x278>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	220c      	movs	r2, #12
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d1ef      	bne.n	80026d2 <HAL_RCC_ClockConfig+0x15e>
 80026f2:	e00e      	b.n	8002712 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f4:	f7fe fd52 	bl	800119c <HAL_GetTick>
 80026f8:	0002      	movs	r2, r0
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	4a3a      	ldr	r2, [pc, #232]	; (80027e8 <HAL_RCC_ClockConfig+0x274>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e068      	b.n	80027da <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002708:	4b38      	ldr	r3, [pc, #224]	; (80027ec <HAL_RCC_ClockConfig+0x278>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	220c      	movs	r2, #12
 800270e:	4013      	ands	r3, r2
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002712:	4b34      	ldr	r3, [pc, #208]	; (80027e4 <HAL_RCC_ClockConfig+0x270>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2201      	movs	r2, #1
 8002718:	4013      	ands	r3, r2
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d21e      	bcs.n	800275e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002720:	4b30      	ldr	r3, [pc, #192]	; (80027e4 <HAL_RCC_ClockConfig+0x270>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2201      	movs	r2, #1
 8002726:	4393      	bics	r3, r2
 8002728:	0019      	movs	r1, r3
 800272a:	4b2e      	ldr	r3, [pc, #184]	; (80027e4 <HAL_RCC_ClockConfig+0x270>)
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002732:	f7fe fd33 	bl	800119c <HAL_GetTick>
 8002736:	0003      	movs	r3, r0
 8002738:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	e009      	b.n	8002750 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800273c:	f7fe fd2e 	bl	800119c <HAL_GetTick>
 8002740:	0002      	movs	r2, r0
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	4a28      	ldr	r2, [pc, #160]	; (80027e8 <HAL_RCC_ClockConfig+0x274>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e044      	b.n	80027da <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002750:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <HAL_RCC_ClockConfig+0x270>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2201      	movs	r2, #1
 8002756:	4013      	ands	r3, r2
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d1ee      	bne.n	800273c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2204      	movs	r2, #4
 8002764:	4013      	ands	r3, r2
 8002766:	d009      	beq.n	800277c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002768:	4b20      	ldr	r3, [pc, #128]	; (80027ec <HAL_RCC_ClockConfig+0x278>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4a20      	ldr	r2, [pc, #128]	; (80027f0 <HAL_RCC_ClockConfig+0x27c>)
 800276e:	4013      	ands	r3, r2
 8002770:	0019      	movs	r1, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_RCC_ClockConfig+0x278>)
 8002778:	430a      	orrs	r2, r1
 800277a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2208      	movs	r2, #8
 8002782:	4013      	ands	r3, r2
 8002784:	d00a      	beq.n	800279c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002786:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_RCC_ClockConfig+0x278>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	4a1a      	ldr	r2, [pc, #104]	; (80027f4 <HAL_RCC_ClockConfig+0x280>)
 800278c:	4013      	ands	r3, r2
 800278e:	0019      	movs	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	00da      	lsls	r2, r3, #3
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <HAL_RCC_ClockConfig+0x278>)
 8002798:	430a      	orrs	r2, r1
 800279a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800279c:	f000 f8c4 	bl	8002928 <HAL_RCC_GetSysClockFreq>
 80027a0:	0001      	movs	r1, r0
 80027a2:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_RCC_ClockConfig+0x278>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	220f      	movs	r2, #15
 80027aa:	4013      	ands	r3, r2
 80027ac:	4a12      	ldr	r2, [pc, #72]	; (80027f8 <HAL_RCC_ClockConfig+0x284>)
 80027ae:	5cd3      	ldrb	r3, [r2, r3]
 80027b0:	000a      	movs	r2, r1
 80027b2:	40da      	lsrs	r2, r3
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_RCC_ClockConfig+0x288>)
 80027b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027b8:	4b11      	ldr	r3, [pc, #68]	; (8002800 <HAL_RCC_ClockConfig+0x28c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	250b      	movs	r5, #11
 80027be:	197c      	adds	r4, r7, r5
 80027c0:	0018      	movs	r0, r3
 80027c2:	f7fe fca5 	bl	8001110 <HAL_InitTick>
 80027c6:	0003      	movs	r3, r0
 80027c8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80027ca:	197b      	adds	r3, r7, r5
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80027d2:	197b      	adds	r3, r7, r5
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	e000      	b.n	80027da <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	0018      	movs	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	b004      	add	sp, #16
 80027e0:	bdb0      	pop	{r4, r5, r7, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	40022000 	.word	0x40022000
 80027e8:	00001388 	.word	0x00001388
 80027ec:	40021000 	.word	0x40021000
 80027f0:	fffff8ff 	.word	0xfffff8ff
 80027f4:	ffffc7ff 	.word	0xffffc7ff
 80027f8:	08004bf0 	.word	0x08004bf0
 80027fc:	20000000 	.word	0x20000000
 8002800:	20000004 	.word	0x20000004

08002804 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b08d      	sub	sp, #52	; 0x34
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0};
 8002810:	241c      	movs	r4, #28
 8002812:	193b      	adds	r3, r7, r4
 8002814:	0018      	movs	r0, r3
 8002816:	2314      	movs	r3, #20
 8002818:	001a      	movs	r2, r3
 800281a:	2100      	movs	r1, #0
 800281c:	f002 f9ab 	bl	8004b76 <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002820:	0020      	movs	r0, r4
 8002822:	183b      	adds	r3, r7, r0
 8002824:	2202      	movs	r2, #2
 8002826:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002828:	183b      	adds	r3, r7, r0
 800282a:	2202      	movs	r2, #2
 800282c:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 800282e:	183b      	adds	r3, r7, r0
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  if(RCC_MCOx == RCC_MCO1)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d11a      	bne.n	8002870 <HAL_RCC_MCOConfig+0x6c>
  {
    gpio.Pin       = MCO1_PIN;
 800283a:	183b      	adds	r3, r7, r0
 800283c:	2280      	movs	r2, #128	; 0x80
 800283e:	0052      	lsls	r2, r2, #1
 8002840:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8002842:	183b      	adds	r3, r7, r0
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8002848:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <HAL_RCC_MCOConfig+0xfc>)
 800284a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284c:	4b2c      	ldr	r3, [pc, #176]	; (8002900 <HAL_RCC_MCOConfig+0xfc>)
 800284e:	2101      	movs	r1, #1
 8002850:	430a      	orrs	r2, r1
 8002852:	62da      	str	r2, [r3, #44]	; 0x2c
 8002854:	4b2a      	ldr	r3, [pc, #168]	; (8002900 <HAL_RCC_MCOConfig+0xfc>)
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	2201      	movs	r2, #1
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002860:	183a      	adds	r2, r7, r0
 8002862:	23a0      	movs	r3, #160	; 0xa0
 8002864:	05db      	lsls	r3, r3, #23
 8002866:	0011      	movs	r1, r2
 8002868:	0018      	movs	r0, r3
 800286a:	f7ff f96b 	bl	8001b44 <HAL_GPIO_Init>
 800286e:	e038      	b.n	80028e2 <HAL_RCC_MCOConfig+0xde>
  }
#if defined(RCC_MCO3_SUPPORT)
  else if (RCC_MCOx == RCC_MCO3)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d11a      	bne.n	80028ac <HAL_RCC_MCOConfig+0xa8>
  {
    gpio.Pin       = MCO3_PIN;
 8002876:	201c      	movs	r0, #28
 8002878:	183b      	adds	r3, r7, r0
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	0192      	lsls	r2, r2, #6
 800287e:	601a      	str	r2, [r3, #0]
    gpio.Alternate = MCO3_GPIO_AF;
 8002880:	183b      	adds	r3, r7, r0
 8002882:	2200      	movs	r2, #0
 8002884:	611a      	str	r2, [r3, #16]

    /* MCO3 Clock Enable */
    MCO3_CLK_ENABLE();
 8002886:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <HAL_RCC_MCOConfig+0xfc>)
 8002888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288a:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <HAL_RCC_MCOConfig+0xfc>)
 800288c:	2102      	movs	r1, #2
 800288e:	430a      	orrs	r2, r1
 8002890:	62da      	str	r2, [r3, #44]	; 0x2c
 8002892:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <HAL_RCC_MCOConfig+0xfc>)
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	2202      	movs	r2, #2
 8002898:	4013      	ands	r3, r2
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	697b      	ldr	r3, [r7, #20]
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 800289e:	183b      	adds	r3, r7, r0
 80028a0:	4a18      	ldr	r2, [pc, #96]	; (8002904 <HAL_RCC_MCOConfig+0x100>)
 80028a2:	0019      	movs	r1, r3
 80028a4:	0010      	movs	r0, r2
 80028a6:	f7ff f94d 	bl	8001b44 <HAL_GPIO_Init>
 80028aa:	e01a      	b.n	80028e2 <HAL_RCC_MCOConfig+0xde>
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {
    gpio.Pin       = MCO2_PIN;
 80028ac:	201c      	movs	r0, #28
 80028ae:	183b      	adds	r3, r7, r0
 80028b0:	2280      	movs	r2, #128	; 0x80
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 80028b6:	183b      	adds	r3, r7, r0
 80028b8:	2200      	movs	r2, #0
 80028ba:	611a      	str	r2, [r3, #16]

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 80028bc:	4b10      	ldr	r3, [pc, #64]	; (8002900 <HAL_RCC_MCOConfig+0xfc>)
 80028be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c0:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <HAL_RCC_MCOConfig+0xfc>)
 80028c2:	2101      	movs	r1, #1
 80028c4:	430a      	orrs	r2, r1
 80028c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80028c8:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <HAL_RCC_MCOConfig+0xfc>)
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	2201      	movs	r2, #1
 80028ce:	4013      	ands	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	693b      	ldr	r3, [r7, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 80028d4:	183a      	adds	r2, r7, r0
 80028d6:	23a0      	movs	r3, #160	; 0xa0
 80028d8:	05db      	lsls	r3, r3, #23
 80028da:	0011      	movs	r1, r2
 80028dc:	0018      	movs	r0, r3
 80028de:	f7ff f931 	bl	8001b44 <HAL_GPIO_Init>
  }

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80028e2:	4b07      	ldr	r3, [pc, #28]	; (8002900 <HAL_RCC_MCOConfig+0xfc>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	4a08      	ldr	r2, [pc, #32]	; (8002908 <HAL_RCC_MCOConfig+0x104>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	0019      	movs	r1, r3
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	431a      	orrs	r2, r3
 80028f2:	4b03      	ldr	r3, [pc, #12]	; (8002900 <HAL_RCC_MCOConfig+0xfc>)
 80028f4:	430a      	orrs	r2, r1
 80028f6:	60da      	str	r2, [r3, #12]
}
 80028f8:	46c0      	nop			; (mov r8, r8)
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b00d      	add	sp, #52	; 0x34
 80028fe:	bd90      	pop	{r4, r7, pc}
 8002900:	40021000 	.word	0x40021000
 8002904:	50000400 	.word	0x50000400
 8002908:	80ffffff 	.word	0x80ffffff

0800290c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8002910:	4b04      	ldr	r3, [pc, #16]	; (8002924 <HAL_RCC_EnableCSS+0x18>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <HAL_RCC_EnableCSS+0x18>)
 8002916:	2180      	movs	r1, #128	; 0x80
 8002918:	0309      	lsls	r1, r1, #12
 800291a:	430a      	orrs	r2, r1
 800291c:	601a      	str	r2, [r3, #0]
}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000

08002928 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002928:	b5b0      	push	{r4, r5, r7, lr}
 800292a:	b08e      	sub	sp, #56	; 0x38
 800292c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800292e:	4b4c      	ldr	r3, [pc, #304]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x138>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002936:	230c      	movs	r3, #12
 8002938:	4013      	ands	r3, r2
 800293a:	2b0c      	cmp	r3, #12
 800293c:	d014      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x40>
 800293e:	d900      	bls.n	8002942 <HAL_RCC_GetSysClockFreq+0x1a>
 8002940:	e07b      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0x112>
 8002942:	2b04      	cmp	r3, #4
 8002944:	d002      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x24>
 8002946:	2b08      	cmp	r3, #8
 8002948:	d00b      	beq.n	8002962 <HAL_RCC_GetSysClockFreq+0x3a>
 800294a:	e076      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800294c:	4b44      	ldr	r3, [pc, #272]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x138>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2210      	movs	r2, #16
 8002952:	4013      	ands	r3, r2
 8002954:	d002      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002956:	4b43      	ldr	r3, [pc, #268]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002958:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800295a:	e07c      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800295c:	4b42      	ldr	r3, [pc, #264]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x140>)
 800295e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002960:	e079      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002962:	4b42      	ldr	r3, [pc, #264]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x144>)
 8002964:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002966:	e076      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296a:	0c9a      	lsrs	r2, r3, #18
 800296c:	230f      	movs	r3, #15
 800296e:	401a      	ands	r2, r3
 8002970:	4b3f      	ldr	r3, [pc, #252]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x148>)
 8002972:	5c9b      	ldrb	r3, [r3, r2]
 8002974:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002978:	0d9a      	lsrs	r2, r3, #22
 800297a:	2303      	movs	r3, #3
 800297c:	4013      	ands	r3, r2
 800297e:	3301      	adds	r3, #1
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002982:	4b37      	ldr	r3, [pc, #220]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x138>)
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	025b      	lsls	r3, r3, #9
 800298a:	4013      	ands	r3, r2
 800298c:	d01a      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
 8002996:	4a35      	ldr	r2, [pc, #212]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x144>)
 8002998:	2300      	movs	r3, #0
 800299a:	69b8      	ldr	r0, [r7, #24]
 800299c:	69f9      	ldr	r1, [r7, #28]
 800299e:	f7fd fc5f 	bl	8000260 <__aeabi_lmul>
 80029a2:	0002      	movs	r2, r0
 80029a4:	000b      	movs	r3, r1
 80029a6:	0010      	movs	r0, r2
 80029a8:	0019      	movs	r1, r3
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f7fd fc33 	bl	8000220 <__aeabi_uldivmod>
 80029ba:	0002      	movs	r2, r0
 80029bc:	000b      	movs	r3, r1
 80029be:	0013      	movs	r3, r2
 80029c0:	637b      	str	r3, [r7, #52]	; 0x34
 80029c2:	e037      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80029c4:	4b26      	ldr	r3, [pc, #152]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x138>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2210      	movs	r2, #16
 80029ca:	4013      	ands	r3, r2
 80029cc:	d01a      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80029ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	4a23      	ldr	r2, [pc, #140]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x13c>)
 80029d8:	2300      	movs	r3, #0
 80029da:	68b8      	ldr	r0, [r7, #8]
 80029dc:	68f9      	ldr	r1, [r7, #12]
 80029de:	f7fd fc3f 	bl	8000260 <__aeabi_lmul>
 80029e2:	0002      	movs	r2, r0
 80029e4:	000b      	movs	r3, r1
 80029e6:	0010      	movs	r0, r2
 80029e8:	0019      	movs	r1, r3
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	2300      	movs	r3, #0
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f7fd fc13 	bl	8000220 <__aeabi_uldivmod>
 80029fa:	0002      	movs	r2, r0
 80029fc:	000b      	movs	r3, r1
 80029fe:	0013      	movs	r3, r2
 8002a00:	637b      	str	r3, [r7, #52]	; 0x34
 8002a02:	e017      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a06:	0018      	movs	r0, r3
 8002a08:	2300      	movs	r3, #0
 8002a0a:	0019      	movs	r1, r3
 8002a0c:	4a16      	ldr	r2, [pc, #88]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x140>)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f7fd fc26 	bl	8000260 <__aeabi_lmul>
 8002a14:	0002      	movs	r2, r0
 8002a16:	000b      	movs	r3, r1
 8002a18:	0010      	movs	r0, r2
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	001c      	movs	r4, r3
 8002a20:	2300      	movs	r3, #0
 8002a22:	001d      	movs	r5, r3
 8002a24:	0022      	movs	r2, r4
 8002a26:	002b      	movs	r3, r5
 8002a28:	f7fd fbfa 	bl	8000220 <__aeabi_uldivmod>
 8002a2c:	0002      	movs	r2, r0
 8002a2e:	000b      	movs	r3, r1
 8002a30:	0013      	movs	r3, r2
 8002a32:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a38:	e00d      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002a3a:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	0b5b      	lsrs	r3, r3, #13
 8002a40:	2207      	movs	r2, #7
 8002a42:	4013      	ands	r3, r2
 8002a44:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	2280      	movs	r2, #128	; 0x80
 8002a4c:	0212      	lsls	r2, r2, #8
 8002a4e:	409a      	lsls	r2, r3
 8002a50:	0013      	movs	r3, r2
 8002a52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a54:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002a58:	0018      	movs	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b00e      	add	sp, #56	; 0x38
 8002a5e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a60:	40021000 	.word	0x40021000
 8002a64:	003d0900 	.word	0x003d0900
 8002a68:	00f42400 	.word	0x00f42400
 8002a6c:	007a1200 	.word	0x007a1200
 8002a70:	08004c08 	.word	0x08004c08

08002a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a78:	4b02      	ldr	r3, [pc, #8]	; (8002a84 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
}
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	20000000 	.word	0x20000000

08002a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a8c:	f7ff fff2 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002a90:	0001      	movs	r1, r0
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	0a1b      	lsrs	r3, r3, #8
 8002a98:	2207      	movs	r2, #7
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a9e:	5cd3      	ldrb	r3, [r2, r3]
 8002aa0:	40d9      	lsrs	r1, r3
 8002aa2:	000b      	movs	r3, r1
}
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	08004c00 	.word	0x08004c00

08002ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ab8:	f7ff ffdc 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002abc:	0001      	movs	r1, r0
 8002abe:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	0adb      	lsrs	r3, r3, #11
 8002ac4:	2207      	movs	r2, #7
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	4a04      	ldr	r2, [pc, #16]	; (8002adc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002aca:	5cd3      	ldrb	r3, [r2, r3]
 8002acc:	40d9      	lsrs	r1, r3
 8002ace:	000b      	movs	r3, r1
}
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	08004c00 	.word	0x08004c00

08002ae0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002ae4:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <HAL_RCC_NMI_IRQHandler+0x28>)
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	2380      	movs	r3, #128	; 0x80
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	401a      	ands	r2, r3
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d105      	bne.n	8002b02 <HAL_RCC_NMI_IRQHandler+0x22>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002af6:	f000 f809 	bl	8002b0c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002afa:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <HAL_RCC_NMI_IRQHandler+0x28>)
 8002afc:	2280      	movs	r2, #128	; 0x80
 8002afe:	0052      	lsls	r2, r2, #1
 8002b00:	619a      	str	r2, [r3, #24]
  }
}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000

08002b0c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002b10:	46c0      	nop			; (mov r8, r8)
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002b20:	2017      	movs	r0, #23
 8002b22:	183b      	adds	r3, r7, r0
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d100      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002b32:	e0c7      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b34:	4b8b      	ldr	r3, [pc, #556]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	055b      	lsls	r3, r3, #21
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d109      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b40:	4b88      	ldr	r3, [pc, #544]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b44:	4b87      	ldr	r3, [pc, #540]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002b46:	2180      	movs	r1, #128	; 0x80
 8002b48:	0549      	lsls	r1, r1, #21
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002b4e:	183b      	adds	r3, r7, r0
 8002b50:	2201      	movs	r2, #1
 8002b52:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b54:	4b84      	ldr	r3, [pc, #528]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d11a      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b60:	4b81      	ldr	r3, [pc, #516]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b80      	ldr	r3, [pc, #512]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002b66:	2180      	movs	r1, #128	; 0x80
 8002b68:	0049      	lsls	r1, r1, #1
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6e:	f7fe fb15 	bl	800119c <HAL_GetTick>
 8002b72:	0003      	movs	r3, r0
 8002b74:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b76:	e008      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b78:	f7fe fb10 	bl	800119c <HAL_GetTick>
 8002b7c:	0002      	movs	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e0e8      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8a:	4b77      	ldr	r3, [pc, #476]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	4013      	ands	r3, r2
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002b96:	4b73      	ldr	r3, [pc, #460]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	23c0      	movs	r3, #192	; 0xc0
 8002b9c:	039b      	lsls	r3, r3, #14
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	23c0      	movs	r3, #192	; 0xc0
 8002ba8:	039b      	lsls	r3, r3, #14
 8002baa:	4013      	ands	r3, r2
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d013      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	23c0      	movs	r3, #192	; 0xc0
 8002bb8:	029b      	lsls	r3, r3, #10
 8002bba:	401a      	ands	r2, r3
 8002bbc:	23c0      	movs	r3, #192	; 0xc0
 8002bbe:	029b      	lsls	r3, r3, #10
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d10a      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002bc4:	4b67      	ldr	r3, [pc, #412]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	029b      	lsls	r3, r3, #10
 8002bcc:	401a      	ands	r2, r3
 8002bce:	2380      	movs	r3, #128	; 0x80
 8002bd0:	029b      	lsls	r3, r3, #10
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d101      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0c0      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002bda:	4b62      	ldr	r3, [pc, #392]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002bdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bde:	23c0      	movs	r3, #192	; 0xc0
 8002be0:	029b      	lsls	r3, r3, #10
 8002be2:	4013      	ands	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d03b      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	23c0      	movs	r3, #192	; 0xc0
 8002bf2:	029b      	lsls	r3, r3, #10
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d033      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2220      	movs	r2, #32
 8002c02:	4013      	ands	r3, r2
 8002c04:	d02e      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002c06:	4b57      	ldr	r3, [pc, #348]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0a:	4a58      	ldr	r2, [pc, #352]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c10:	4b54      	ldr	r3, [pc, #336]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c14:	4b53      	ldr	r3, [pc, #332]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c16:	2180      	movs	r1, #128	; 0x80
 8002c18:	0309      	lsls	r1, r1, #12
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c1e:	4b51      	ldr	r3, [pc, #324]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c22:	4b50      	ldr	r3, [pc, #320]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c24:	4952      	ldr	r1, [pc, #328]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c26:	400a      	ands	r2, r1
 8002c28:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002c2a:	4b4e      	ldr	r3, [pc, #312]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4013      	ands	r3, r2
 8002c38:	d014      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7fe faaf 	bl	800119c <HAL_GetTick>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c42:	e009      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c44:	f7fe faaa 	bl	800119c <HAL_GetTick>
 8002c48:	0002      	movs	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	4a49      	ldr	r2, [pc, #292]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e081      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c58:	4b42      	ldr	r3, [pc, #264]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4013      	ands	r3, r2
 8002c62:	d0ef      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d01f      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	23c0      	movs	r3, #192	; 0xc0
 8002c74:	029b      	lsls	r3, r3, #10
 8002c76:	401a      	ands	r2, r3
 8002c78:	23c0      	movs	r3, #192	; 0xc0
 8002c7a:	029b      	lsls	r3, r3, #10
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d10c      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002c80:	4b38      	ldr	r3, [pc, #224]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a3c      	ldr	r2, [pc, #240]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	0019      	movs	r1, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	23c0      	movs	r3, #192	; 0xc0
 8002c90:	039b      	lsls	r3, r3, #14
 8002c92:	401a      	ands	r2, r3
 8002c94:	4b33      	ldr	r3, [pc, #204]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c96:	430a      	orrs	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	4b32      	ldr	r3, [pc, #200]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c9c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	23c0      	movs	r3, #192	; 0xc0
 8002ca4:	029b      	lsls	r3, r3, #10
 8002ca6:	401a      	ands	r2, r3
 8002ca8:	4b2e      	ldr	r3, [pc, #184]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002caa:	430a      	orrs	r2, r1
 8002cac:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cae:	2317      	movs	r3, #23
 8002cb0:	18fb      	adds	r3, r7, r3
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d105      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb8:	4b2a      	ldr	r3, [pc, #168]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cbc:	4b29      	ldr	r3, [pc, #164]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cbe:	492f      	ldr	r1, [pc, #188]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cc0:	400a      	ands	r2, r1
 8002cc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d009      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cce:	4b25      	ldr	r3, [pc, #148]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	4393      	bics	r3, r2
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	4b21      	ldr	r3, [pc, #132]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d009      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cec:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf0:	220c      	movs	r2, #12
 8002cf2:	4393      	bics	r3, r2
 8002cf4:	0019      	movs	r1, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	4b1a      	ldr	r3, [pc, #104]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2204      	movs	r2, #4
 8002d06:	4013      	ands	r3, r2
 8002d08:	d009      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d0a:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0e:	4a1c      	ldr	r2, [pc, #112]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	0019      	movs	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2208      	movs	r2, #8
 8002d24:	4013      	ands	r3, r2
 8002d26:	d009      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d28:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2c:	4a15      	ldr	r2, [pc, #84]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	0019      	movs	r1, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2280      	movs	r2, #128	; 0x80
 8002d42:	4013      	ands	r3, r2
 8002d44:	d009      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4a:	4a0f      	ldr	r2, [pc, #60]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	0019      	movs	r1, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699a      	ldr	r2, [r3, #24]
 8002d54:	4b03      	ldr	r3, [pc, #12]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d56:	430a      	orrs	r2, r1
 8002d58:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b006      	add	sp, #24
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40007000 	.word	0x40007000
 8002d6c:	fffcffff 	.word	0xfffcffff
 8002d70:	fff7ffff 	.word	0xfff7ffff
 8002d74:	00001388 	.word	0x00001388
 8002d78:	ffcfffff 	.word	0xffcfffff
 8002d7c:	efffffff 	.word	0xefffffff
 8002d80:	fffff3ff 	.word	0xfffff3ff
 8002d84:	ffffcfff 	.word	0xffffcfff
 8002d88:	fff3ffff 	.word	0xfff3ffff

08002d8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e083      	b.n	8002ea6 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	2382      	movs	r3, #130	; 0x82
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d009      	beq.n	8002dc6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	61da      	str	r2, [r3, #28]
 8002db8:	e005      	b.n	8002dc6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2251      	movs	r2, #81	; 0x51
 8002dd0:	5c9b      	ldrb	r3, [r3, r2]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d107      	bne.n	8002de8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2250      	movs	r2, #80	; 0x50
 8002ddc:	2100      	movs	r1, #0
 8002dde:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	0018      	movs	r0, r3
 8002de4:	f7fe f8a2 	bl	8000f2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2251      	movs	r2, #81	; 0x51
 8002dec:	2102      	movs	r1, #2
 8002dee:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2140      	movs	r1, #64	; 0x40
 8002dfc:	438a      	bics	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	2382      	movs	r3, #130	; 0x82
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	401a      	ands	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6899      	ldr	r1, [r3, #8]
 8002e0e:	2384      	movs	r3, #132	; 0x84
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	400b      	ands	r3, r1
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68d9      	ldr	r1, [r3, #12]
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	400b      	ands	r3, r1
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	2102      	movs	r1, #2
 8002e28:	400b      	ands	r3, r1
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	2101      	movs	r1, #1
 8002e32:	400b      	ands	r3, r1
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6999      	ldr	r1, [r3, #24]
 8002e3a:	2380      	movs	r3, #128	; 0x80
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	400b      	ands	r3, r1
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	2138      	movs	r1, #56	; 0x38
 8002e48:	400b      	ands	r3, r1
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	2180      	movs	r1, #128	; 0x80
 8002e52:	400b      	ands	r3, r1
 8002e54:	431a      	orrs	r2, r3
 8002e56:	0011      	movs	r1, r2
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	019b      	lsls	r3, r3, #6
 8002e60:	401a      	ands	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	0c1b      	lsrs	r3, r3, #16
 8002e70:	2204      	movs	r2, #4
 8002e72:	4013      	ands	r3, r2
 8002e74:	0019      	movs	r1, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	2210      	movs	r2, #16
 8002e7c:	401a      	ands	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69da      	ldr	r2, [r3, #28]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4907      	ldr	r1, [pc, #28]	; (8002eb0 <HAL_SPI_Init+0x124>)
 8002e92:	400a      	ands	r2, r1
 8002e94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2251      	movs	r2, #81	; 0x51
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b002      	add	sp, #8
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	fffff7ff 	.word	0xfffff7ff

08002eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e032      	b.n	8002f2c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2239      	movs	r2, #57	; 0x39
 8002eca:	5c9b      	ldrb	r3, [r3, r2]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d107      	bne.n	8002ee2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2238      	movs	r2, #56	; 0x38
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	0018      	movs	r0, r3
 8002ede:	f7fe f869 	bl	8000fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2239      	movs	r2, #57	; 0x39
 8002ee6:	2102      	movs	r1, #2
 8002ee8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	0010      	movs	r0, r2
 8002ef6:	f000 fa01 	bl	80032fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	223e      	movs	r2, #62	; 0x3e
 8002efe:	2101      	movs	r1, #1
 8002f00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	223a      	movs	r2, #58	; 0x3a
 8002f06:	2101      	movs	r1, #1
 8002f08:	5499      	strb	r1, [r3, r2]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	223b      	movs	r2, #59	; 0x3b
 8002f0e:	2101      	movs	r1, #1
 8002f10:	5499      	strb	r1, [r3, r2]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	223c      	movs	r2, #60	; 0x3c
 8002f16:	2101      	movs	r1, #1
 8002f18:	5499      	strb	r1, [r3, r2]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	223d      	movs	r2, #61	; 0x3d
 8002f1e:	2101      	movs	r1, #1
 8002f20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2239      	movs	r2, #57	; 0x39
 8002f26:	2101      	movs	r1, #1
 8002f28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b002      	add	sp, #8
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2202      	movs	r2, #2
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d124      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2202      	movs	r2, #2
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d11d      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	4252      	negs	r2, r2
 8002f60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2203      	movs	r2, #3
 8002f70:	4013      	ands	r3, r2
 8002f72:	d004      	beq.n	8002f7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	0018      	movs	r0, r3
 8002f78:	f000 f9a8 	bl	80032cc <HAL_TIM_IC_CaptureCallback>
 8002f7c:	e007      	b.n	8002f8e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f000 f99b 	bl	80032bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f000 f9a7 	bl	80032dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d125      	bne.n	8002fee <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	2204      	movs	r2, #4
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d11e      	bne.n	8002fee <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2205      	movs	r2, #5
 8002fb6:	4252      	negs	r2, r2
 8002fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	23c0      	movs	r3, #192	; 0xc0
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f000 f97b 	bl	80032cc <HAL_TIM_IC_CaptureCallback>
 8002fd6:	e007      	b.n	8002fe8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f000 f96e 	bl	80032bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f000 f97a 	bl	80032dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d124      	bne.n	8003046 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2208      	movs	r2, #8
 8003004:	4013      	ands	r3, r2
 8003006:	2b08      	cmp	r3, #8
 8003008:	d11d      	bne.n	8003046 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2209      	movs	r2, #9
 8003010:	4252      	negs	r2, r2
 8003012:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2204      	movs	r2, #4
 8003018:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	2203      	movs	r2, #3
 8003022:	4013      	ands	r3, r2
 8003024:	d004      	beq.n	8003030 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	0018      	movs	r0, r3
 800302a:	f000 f94f 	bl	80032cc <HAL_TIM_IC_CaptureCallback>
 800302e:	e007      	b.n	8003040 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	0018      	movs	r0, r3
 8003034:	f000 f942 	bl	80032bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	0018      	movs	r0, r3
 800303c:	f000 f94e 	bl	80032dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	2210      	movs	r2, #16
 800304e:	4013      	ands	r3, r2
 8003050:	2b10      	cmp	r3, #16
 8003052:	d125      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	2210      	movs	r2, #16
 800305c:	4013      	ands	r3, r2
 800305e:	2b10      	cmp	r3, #16
 8003060:	d11e      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2211      	movs	r2, #17
 8003068:	4252      	negs	r2, r2
 800306a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2208      	movs	r2, #8
 8003070:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	23c0      	movs	r3, #192	; 0xc0
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4013      	ands	r3, r2
 800307e:	d004      	beq.n	800308a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	0018      	movs	r0, r3
 8003084:	f000 f922 	bl	80032cc <HAL_TIM_IC_CaptureCallback>
 8003088:	e007      	b.n	800309a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	0018      	movs	r0, r3
 800308e:	f000 f915 	bl	80032bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	0018      	movs	r0, r3
 8003096:	f000 f921 	bl	80032dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2201      	movs	r2, #1
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d10f      	bne.n	80030ce <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	2201      	movs	r2, #1
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d108      	bne.n	80030ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2202      	movs	r2, #2
 80030c2:	4252      	negs	r2, r2
 80030c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	0018      	movs	r0, r3
 80030ca:	f000 f8ef 	bl	80032ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2240      	movs	r2, #64	; 0x40
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b40      	cmp	r3, #64	; 0x40
 80030da:	d10f      	bne.n	80030fc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2240      	movs	r2, #64	; 0x40
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b40      	cmp	r3, #64	; 0x40
 80030e8:	d108      	bne.n	80030fc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2241      	movs	r2, #65	; 0x41
 80030f0:	4252      	negs	r2, r2
 80030f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	0018      	movs	r0, r3
 80030f8:	f000 f8f8 	bl	80032ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030fc:	46c0      	nop			; (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800310e:	230f      	movs	r3, #15
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2238      	movs	r2, #56	; 0x38
 800311a:	5c9b      	ldrb	r3, [r3, r2]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <HAL_TIM_ConfigClockSource+0x20>
 8003120:	2302      	movs	r3, #2
 8003122:	e0bc      	b.n	800329e <HAL_TIM_ConfigClockSource+0x19a>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2238      	movs	r2, #56	; 0x38
 8003128:	2101      	movs	r1, #1
 800312a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2239      	movs	r2, #57	; 0x39
 8003130:	2102      	movs	r1, #2
 8003132:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2277      	movs	r2, #119	; 0x77
 8003140:	4393      	bics	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4a58      	ldr	r2, [pc, #352]	; (80032a8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003148:	4013      	ands	r3, r2
 800314a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2280      	movs	r2, #128	; 0x80
 800315a:	0192      	lsls	r2, r2, #6
 800315c:	4293      	cmp	r3, r2
 800315e:	d040      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0xde>
 8003160:	2280      	movs	r2, #128	; 0x80
 8003162:	0192      	lsls	r2, r2, #6
 8003164:	4293      	cmp	r3, r2
 8003166:	d900      	bls.n	800316a <HAL_TIM_ConfigClockSource+0x66>
 8003168:	e088      	b.n	800327c <HAL_TIM_ConfigClockSource+0x178>
 800316a:	2280      	movs	r2, #128	; 0x80
 800316c:	0152      	lsls	r2, r2, #5
 800316e:	4293      	cmp	r3, r2
 8003170:	d100      	bne.n	8003174 <HAL_TIM_ConfigClockSource+0x70>
 8003172:	e088      	b.n	8003286 <HAL_TIM_ConfigClockSource+0x182>
 8003174:	2280      	movs	r2, #128	; 0x80
 8003176:	0152      	lsls	r2, r2, #5
 8003178:	4293      	cmp	r3, r2
 800317a:	d900      	bls.n	800317e <HAL_TIM_ConfigClockSource+0x7a>
 800317c:	e07e      	b.n	800327c <HAL_TIM_ConfigClockSource+0x178>
 800317e:	2b70      	cmp	r3, #112	; 0x70
 8003180:	d018      	beq.n	80031b4 <HAL_TIM_ConfigClockSource+0xb0>
 8003182:	d900      	bls.n	8003186 <HAL_TIM_ConfigClockSource+0x82>
 8003184:	e07a      	b.n	800327c <HAL_TIM_ConfigClockSource+0x178>
 8003186:	2b60      	cmp	r3, #96	; 0x60
 8003188:	d04f      	beq.n	800322a <HAL_TIM_ConfigClockSource+0x126>
 800318a:	d900      	bls.n	800318e <HAL_TIM_ConfigClockSource+0x8a>
 800318c:	e076      	b.n	800327c <HAL_TIM_ConfigClockSource+0x178>
 800318e:	2b50      	cmp	r3, #80	; 0x50
 8003190:	d03b      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x106>
 8003192:	d900      	bls.n	8003196 <HAL_TIM_ConfigClockSource+0x92>
 8003194:	e072      	b.n	800327c <HAL_TIM_ConfigClockSource+0x178>
 8003196:	2b40      	cmp	r3, #64	; 0x40
 8003198:	d057      	beq.n	800324a <HAL_TIM_ConfigClockSource+0x146>
 800319a:	d900      	bls.n	800319e <HAL_TIM_ConfigClockSource+0x9a>
 800319c:	e06e      	b.n	800327c <HAL_TIM_ConfigClockSource+0x178>
 800319e:	2b30      	cmp	r3, #48	; 0x30
 80031a0:	d063      	beq.n	800326a <HAL_TIM_ConfigClockSource+0x166>
 80031a2:	d86b      	bhi.n	800327c <HAL_TIM_ConfigClockSource+0x178>
 80031a4:	2b20      	cmp	r3, #32
 80031a6:	d060      	beq.n	800326a <HAL_TIM_ConfigClockSource+0x166>
 80031a8:	d868      	bhi.n	800327c <HAL_TIM_ConfigClockSource+0x178>
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d05d      	beq.n	800326a <HAL_TIM_ConfigClockSource+0x166>
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d05b      	beq.n	800326a <HAL_TIM_ConfigClockSource+0x166>
 80031b2:	e063      	b.n	800327c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031c4:	f000 f968 	bl	8003498 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2277      	movs	r2, #119	; 0x77
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	609a      	str	r2, [r3, #8]
      break;
 80031e0:	e052      	b.n	8003288 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031f2:	f000 f951 	bl	8003498 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2180      	movs	r1, #128	; 0x80
 8003202:	01c9      	lsls	r1, r1, #7
 8003204:	430a      	orrs	r2, r1
 8003206:	609a      	str	r2, [r3, #8]
      break;
 8003208:	e03e      	b.n	8003288 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003216:	001a      	movs	r2, r3
 8003218:	f000 f8c4 	bl	80033a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2150      	movs	r1, #80	; 0x50
 8003222:	0018      	movs	r0, r3
 8003224:	f000 f91e 	bl	8003464 <TIM_ITRx_SetConfig>
      break;
 8003228:	e02e      	b.n	8003288 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003236:	001a      	movs	r2, r3
 8003238:	f000 f8e2 	bl	8003400 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2160      	movs	r1, #96	; 0x60
 8003242:	0018      	movs	r0, r3
 8003244:	f000 f90e 	bl	8003464 <TIM_ITRx_SetConfig>
      break;
 8003248:	e01e      	b.n	8003288 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003256:	001a      	movs	r2, r3
 8003258:	f000 f8a4 	bl	80033a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2140      	movs	r1, #64	; 0x40
 8003262:	0018      	movs	r0, r3
 8003264:	f000 f8fe 	bl	8003464 <TIM_ITRx_SetConfig>
      break;
 8003268:	e00e      	b.n	8003288 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	0019      	movs	r1, r3
 8003274:	0010      	movs	r0, r2
 8003276:	f000 f8f5 	bl	8003464 <TIM_ITRx_SetConfig>
      break;
 800327a:	e005      	b.n	8003288 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800327c:	230f      	movs	r3, #15
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	2201      	movs	r2, #1
 8003282:	701a      	strb	r2, [r3, #0]
      break;
 8003284:	e000      	b.n	8003288 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003286:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2239      	movs	r2, #57	; 0x39
 800328c:	2101      	movs	r1, #1
 800328e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2238      	movs	r2, #56	; 0x38
 8003294:	2100      	movs	r1, #0
 8003296:	5499      	strb	r1, [r3, r2]

  return status;
 8003298:	230f      	movs	r3, #15
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	781b      	ldrb	r3, [r3, #0]
}
 800329e:	0018      	movs	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	b004      	add	sp, #16
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	ffff00ff 	.word	0xffff00ff

080032ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b002      	add	sp, #8
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032c4:	46c0      	nop			; (mov r8, r8)
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b002      	add	sp, #8
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032d4:	46c0      	nop			; (mov r8, r8)
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b002      	add	sp, #8
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032e4:	46c0      	nop			; (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b002      	add	sp, #8
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b002      	add	sp, #8
 80032fa:	bd80      	pop	{r7, pc}

080032fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	2380      	movs	r3, #128	; 0x80
 8003310:	05db      	lsls	r3, r3, #23
 8003312:	429a      	cmp	r2, r3
 8003314:	d007      	beq.n	8003326 <TIM_Base_SetConfig+0x2a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a1f      	ldr	r2, [pc, #124]	; (8003398 <TIM_Base_SetConfig+0x9c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d003      	beq.n	8003326 <TIM_Base_SetConfig+0x2a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a1e      	ldr	r2, [pc, #120]	; (800339c <TIM_Base_SetConfig+0xa0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d108      	bne.n	8003338 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2270      	movs	r2, #112	; 0x70
 800332a:	4393      	bics	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4313      	orrs	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	05db      	lsls	r3, r3, #23
 800333e:	429a      	cmp	r2, r3
 8003340:	d007      	beq.n	8003352 <TIM_Base_SetConfig+0x56>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a14      	ldr	r2, [pc, #80]	; (8003398 <TIM_Base_SetConfig+0x9c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d003      	beq.n	8003352 <TIM_Base_SetConfig+0x56>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a13      	ldr	r2, [pc, #76]	; (800339c <TIM_Base_SetConfig+0xa0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d108      	bne.n	8003364 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <TIM_Base_SetConfig+0xa4>)
 8003356:	4013      	ands	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2280      	movs	r2, #128	; 0x80
 8003368:	4393      	bics	r3, r2
 800336a:	001a      	movs	r2, r3
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	615a      	str	r2, [r3, #20]
}
 8003390:	46c0      	nop			; (mov r8, r8)
 8003392:	46bd      	mov	sp, r7
 8003394:	b004      	add	sp, #16
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40010800 	.word	0x40010800
 800339c:	40011400 	.word	0x40011400
 80033a0:	fffffcff 	.word	0xfffffcff

080033a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	2201      	movs	r2, #1
 80033bc:	4393      	bics	r3, r2
 80033be:	001a      	movs	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	22f0      	movs	r2, #240	; 0xf0
 80033ce:	4393      	bics	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	220a      	movs	r2, #10
 80033e0:	4393      	bics	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	621a      	str	r2, [r3, #32]
}
 80033f8:	46c0      	nop			; (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b006      	add	sp, #24
 80033fe:	bd80      	pop	{r7, pc}

08003400 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	2210      	movs	r2, #16
 8003412:	4393      	bics	r3, r2
 8003414:	001a      	movs	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	4a0d      	ldr	r2, [pc, #52]	; (8003460 <TIM_TI2_ConfigInputStage+0x60>)
 800342a:	4013      	ands	r3, r2
 800342c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	031b      	lsls	r3, r3, #12
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	22a0      	movs	r2, #160	; 0xa0
 800343c:	4393      	bics	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	621a      	str	r2, [r3, #32]
}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	46bd      	mov	sp, r7
 800345a:	b006      	add	sp, #24
 800345c:	bd80      	pop	{r7, pc}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	ffff0fff 	.word	0xffff0fff

08003464 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2270      	movs	r2, #112	; 0x70
 8003478:	4393      	bics	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	2207      	movs	r2, #7
 8003484:	4313      	orrs	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	609a      	str	r2, [r3, #8]
}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	46bd      	mov	sp, r7
 8003492:	b004      	add	sp, #16
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	4a09      	ldr	r2, [pc, #36]	; (80034d4 <TIM_ETR_SetConfig+0x3c>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	021a      	lsls	r2, r3, #8
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4313      	orrs	r3, r2
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	609a      	str	r2, [r3, #8]
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b006      	add	sp, #24
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	ffff00ff 	.word	0xffff00ff

080034d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2238      	movs	r2, #56	; 0x38
 80034e6:	5c9b      	ldrb	r3, [r3, r2]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e042      	b.n	8003576 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2238      	movs	r2, #56	; 0x38
 80034f4:	2101      	movs	r1, #1
 80034f6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2239      	movs	r2, #57	; 0x39
 80034fc:	2102      	movs	r1, #2
 80034fe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2270      	movs	r2, #112	; 0x70
 8003514:	4393      	bics	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	05db      	lsls	r3, r3, #23
 8003532:	429a      	cmp	r2, r3
 8003534:	d009      	beq.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a11      	ldr	r2, [pc, #68]	; (8003580 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d004      	beq.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a0f      	ldr	r2, [pc, #60]	; (8003584 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d10c      	bne.n	8003564 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2280      	movs	r2, #128	; 0x80
 800354e:	4393      	bics	r3, r2
 8003550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	4313      	orrs	r3, r2
 800355a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2239      	movs	r2, #57	; 0x39
 8003568:	2101      	movs	r1, #1
 800356a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2238      	movs	r2, #56	; 0x38
 8003570:	2100      	movs	r1, #0
 8003572:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	0018      	movs	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	b004      	add	sp, #16
 800357c:	bd80      	pop	{r7, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	40010800 	.word	0x40010800
 8003584:	40011400 	.word	0x40011400

08003588 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e044      	b.n	8003624 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d107      	bne.n	80035b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2278      	movs	r2, #120	; 0x78
 80035a6:	2100      	movs	r1, #0
 80035a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	0018      	movs	r0, r3
 80035ae:	f7fd fc0f 	bl	8000dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2224      	movs	r2, #36	; 0x24
 80035b6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2101      	movs	r1, #1
 80035c4:	438a      	bics	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	0018      	movs	r0, r3
 80035cc:	f000 fd24 	bl	8004018 <UART_SetConfig>
 80035d0:	0003      	movs	r3, r0
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e024      	b.n	8003624 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	0018      	movs	r0, r3
 80035e6:	f000 ff9b 	bl	8004520 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	490d      	ldr	r1, [pc, #52]	; (800362c <HAL_UART_Init+0xa4>)
 80035f6:	400a      	ands	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	212a      	movs	r1, #42	; 0x2a
 8003606:	438a      	bics	r2, r1
 8003608:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2101      	movs	r1, #1
 8003616:	430a      	orrs	r2, r1
 8003618:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	0018      	movs	r0, r3
 800361e:	f001 f833 	bl	8004688 <UART_CheckIdleState>
 8003622:	0003      	movs	r3, r0
}
 8003624:	0018      	movs	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	b002      	add	sp, #8
 800362a:	bd80      	pop	{r7, pc}
 800362c:	ffffb7ff 	.word	0xffffb7ff

08003630 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08a      	sub	sp, #40	; 0x28
 8003634:	af02      	add	r7, sp, #8
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	1dbb      	adds	r3, r7, #6
 800363e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003644:	2b20      	cmp	r3, #32
 8003646:	d000      	beq.n	800364a <HAL_UART_Transmit+0x1a>
 8003648:	e08c      	b.n	8003764 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_UART_Transmit+0x28>
 8003650:	1dbb      	adds	r3, r7, #6
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e084      	b.n	8003766 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	2380      	movs	r3, #128	; 0x80
 8003662:	015b      	lsls	r3, r3, #5
 8003664:	429a      	cmp	r2, r3
 8003666:	d109      	bne.n	800367c <HAL_UART_Transmit+0x4c>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d105      	bne.n	800367c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2201      	movs	r2, #1
 8003674:	4013      	ands	r3, r2
 8003676:	d001      	beq.n	800367c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e074      	b.n	8003766 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2284      	movs	r2, #132	; 0x84
 8003680:	2100      	movs	r1, #0
 8003682:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2221      	movs	r2, #33	; 0x21
 8003688:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800368a:	f7fd fd87 	bl	800119c <HAL_GetTick>
 800368e:	0003      	movs	r3, r0
 8003690:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1dba      	adds	r2, r7, #6
 8003696:	2150      	movs	r1, #80	; 0x50
 8003698:	8812      	ldrh	r2, [r2, #0]
 800369a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	1dba      	adds	r2, r7, #6
 80036a0:	2152      	movs	r1, #82	; 0x52
 80036a2:	8812      	ldrh	r2, [r2, #0]
 80036a4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	2380      	movs	r3, #128	; 0x80
 80036ac:	015b      	lsls	r3, r3, #5
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d108      	bne.n	80036c4 <HAL_UART_Transmit+0x94>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d104      	bne.n	80036c4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	e003      	b.n	80036cc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036cc:	e02f      	b.n	800372e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	0013      	movs	r3, r2
 80036d8:	2200      	movs	r2, #0
 80036da:	2180      	movs	r1, #128	; 0x80
 80036dc:	f001 f87c 	bl	80047d8 <UART_WaitOnFlagUntilTimeout>
 80036e0:	1e03      	subs	r3, r0, #0
 80036e2:	d004      	beq.n	80036ee <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e03b      	b.n	8003766 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10b      	bne.n	800370c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	001a      	movs	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	05d2      	lsls	r2, r2, #23
 8003700:	0dd2      	lsrs	r2, r2, #23
 8003702:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	3302      	adds	r3, #2
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	e007      	b.n	800371c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	781a      	ldrb	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	3301      	adds	r3, #1
 800371a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2252      	movs	r2, #82	; 0x52
 8003720:	5a9b      	ldrh	r3, [r3, r2]
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b299      	uxth	r1, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2252      	movs	r2, #82	; 0x52
 800372c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2252      	movs	r2, #82	; 0x52
 8003732:	5a9b      	ldrh	r3, [r3, r2]
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1c9      	bne.n	80036ce <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	0013      	movs	r3, r2
 8003744:	2200      	movs	r2, #0
 8003746:	2140      	movs	r1, #64	; 0x40
 8003748:	f001 f846 	bl	80047d8 <UART_WaitOnFlagUntilTimeout>
 800374c:	1e03      	subs	r3, r0, #0
 800374e:	d004      	beq.n	800375a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e005      	b.n	8003766 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	e000      	b.n	8003766 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003764:	2302      	movs	r3, #2
  }
}
 8003766:	0018      	movs	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	b008      	add	sp, #32
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08a      	sub	sp, #40	; 0x28
 8003774:	af02      	add	r7, sp, #8
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	1dbb      	adds	r3, r7, #6
 800377e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2280      	movs	r2, #128	; 0x80
 8003784:	589b      	ldr	r3, [r3, r2]
 8003786:	2b20      	cmp	r3, #32
 8003788:	d000      	beq.n	800378c <HAL_UART_Receive+0x1c>
 800378a:	e0d0      	b.n	800392e <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_UART_Receive+0x2a>
 8003792:	1dbb      	adds	r3, r7, #6
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e0c8      	b.n	8003930 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	2380      	movs	r3, #128	; 0x80
 80037a4:	015b      	lsls	r3, r3, #5
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d109      	bne.n	80037be <HAL_UART_Receive+0x4e>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d105      	bne.n	80037be <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2201      	movs	r2, #1
 80037b6:	4013      	ands	r3, r2
 80037b8:	d001      	beq.n	80037be <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e0b8      	b.n	8003930 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2284      	movs	r2, #132	; 0x84
 80037c2:	2100      	movs	r1, #0
 80037c4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2280      	movs	r2, #128	; 0x80
 80037ca:	2122      	movs	r1, #34	; 0x22
 80037cc:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037d4:	f7fd fce2 	bl	800119c <HAL_GetTick>
 80037d8:	0003      	movs	r3, r0
 80037da:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	1dba      	adds	r2, r7, #6
 80037e0:	2158      	movs	r1, #88	; 0x58
 80037e2:	8812      	ldrh	r2, [r2, #0]
 80037e4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1dba      	adds	r2, r7, #6
 80037ea:	215a      	movs	r1, #90	; 0x5a
 80037ec:	8812      	ldrh	r2, [r2, #0]
 80037ee:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	2380      	movs	r3, #128	; 0x80
 80037f6:	015b      	lsls	r3, r3, #5
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d10d      	bne.n	8003818 <HAL_UART_Receive+0xa8>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d104      	bne.n	800380e <HAL_UART_Receive+0x9e>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	225c      	movs	r2, #92	; 0x5c
 8003808:	494b      	ldr	r1, [pc, #300]	; (8003938 <HAL_UART_Receive+0x1c8>)
 800380a:	5299      	strh	r1, [r3, r2]
 800380c:	e02e      	b.n	800386c <HAL_UART_Receive+0xfc>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	225c      	movs	r2, #92	; 0x5c
 8003812:	21ff      	movs	r1, #255	; 0xff
 8003814:	5299      	strh	r1, [r3, r2]
 8003816:	e029      	b.n	800386c <HAL_UART_Receive+0xfc>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10d      	bne.n	800383c <HAL_UART_Receive+0xcc>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d104      	bne.n	8003832 <HAL_UART_Receive+0xc2>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	225c      	movs	r2, #92	; 0x5c
 800382c:	21ff      	movs	r1, #255	; 0xff
 800382e:	5299      	strh	r1, [r3, r2]
 8003830:	e01c      	b.n	800386c <HAL_UART_Receive+0xfc>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	225c      	movs	r2, #92	; 0x5c
 8003836:	217f      	movs	r1, #127	; 0x7f
 8003838:	5299      	strh	r1, [r3, r2]
 800383a:	e017      	b.n	800386c <HAL_UART_Receive+0xfc>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	055b      	lsls	r3, r3, #21
 8003844:	429a      	cmp	r2, r3
 8003846:	d10d      	bne.n	8003864 <HAL_UART_Receive+0xf4>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d104      	bne.n	800385a <HAL_UART_Receive+0xea>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	225c      	movs	r2, #92	; 0x5c
 8003854:	217f      	movs	r1, #127	; 0x7f
 8003856:	5299      	strh	r1, [r3, r2]
 8003858:	e008      	b.n	800386c <HAL_UART_Receive+0xfc>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	225c      	movs	r2, #92	; 0x5c
 800385e:	213f      	movs	r1, #63	; 0x3f
 8003860:	5299      	strh	r1, [r3, r2]
 8003862:	e003      	b.n	800386c <HAL_UART_Receive+0xfc>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	225c      	movs	r2, #92	; 0x5c
 8003868:	2100      	movs	r1, #0
 800386a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800386c:	2312      	movs	r3, #18
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	215c      	movs	r1, #92	; 0x5c
 8003874:	5a52      	ldrh	r2, [r2, r1]
 8003876:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	2380      	movs	r3, #128	; 0x80
 800387e:	015b      	lsls	r3, r3, #5
 8003880:	429a      	cmp	r2, r3
 8003882:	d108      	bne.n	8003896 <HAL_UART_Receive+0x126>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d104      	bne.n	8003896 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800388c:	2300      	movs	r3, #0
 800388e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	61bb      	str	r3, [r7, #24]
 8003894:	e003      	b.n	800389e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800389a:	2300      	movs	r3, #0
 800389c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800389e:	e03a      	b.n	8003916 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	0013      	movs	r3, r2
 80038aa:	2200      	movs	r2, #0
 80038ac:	2120      	movs	r1, #32
 80038ae:	f000 ff93 	bl	80047d8 <UART_WaitOnFlagUntilTimeout>
 80038b2:	1e03      	subs	r3, r0, #0
 80038b4:	d005      	beq.n	80038c2 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2280      	movs	r2, #128	; 0x80
 80038ba:	2120      	movs	r1, #32
 80038bc:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e036      	b.n	8003930 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10e      	bne.n	80038e6 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2212      	movs	r2, #18
 80038d2:	18ba      	adds	r2, r7, r2
 80038d4:	8812      	ldrh	r2, [r2, #0]
 80038d6:	4013      	ands	r3, r2
 80038d8:	b29a      	uxth	r2, r3
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	3302      	adds	r3, #2
 80038e2:	61bb      	str	r3, [r7, #24]
 80038e4:	e00e      	b.n	8003904 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2212      	movs	r2, #18
 80038f0:	18ba      	adds	r2, r7, r2
 80038f2:	8812      	ldrh	r2, [r2, #0]
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	4013      	ands	r3, r2
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3301      	adds	r3, #1
 8003902:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	225a      	movs	r2, #90	; 0x5a
 8003908:	5a9b      	ldrh	r3, [r3, r2]
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b299      	uxth	r1, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	225a      	movs	r2, #90	; 0x5a
 8003914:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	225a      	movs	r2, #90	; 0x5a
 800391a:	5a9b      	ldrh	r3, [r3, r2]
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1be      	bne.n	80038a0 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2280      	movs	r2, #128	; 0x80
 8003926:	2120      	movs	r1, #32
 8003928:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	e000      	b.n	8003930 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800392e:	2302      	movs	r3, #2
  }
}
 8003930:	0018      	movs	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	b008      	add	sp, #32
 8003936:	bd80      	pop	{r7, pc}
 8003938:	000001ff 	.word	0x000001ff

0800393c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	1dbb      	adds	r3, r7, #6
 8003948:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800394e:	2b20      	cmp	r3, #32
 8003950:	d15b      	bne.n	8003a0a <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_UART_Transmit_IT+0x24>
 8003958:	1dbb      	adds	r3, r7, #6
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e053      	b.n	8003a0c <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	2380      	movs	r3, #128	; 0x80
 800396a:	015b      	lsls	r3, r3, #5
 800396c:	429a      	cmp	r2, r3
 800396e:	d109      	bne.n	8003984 <HAL_UART_Transmit_IT+0x48>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d105      	bne.n	8003984 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2201      	movs	r2, #1
 800397c:	4013      	ands	r3, r2
 800397e:	d001      	beq.n	8003984 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e043      	b.n	8003a0c <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	1dba      	adds	r2, r7, #6
 800398e:	2150      	movs	r1, #80	; 0x50
 8003990:	8812      	ldrh	r2, [r2, #0]
 8003992:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	1dba      	adds	r2, r7, #6
 8003998:	2152      	movs	r1, #82	; 0x52
 800399a:	8812      	ldrh	r2, [r2, #0]
 800399c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2284      	movs	r2, #132	; 0x84
 80039a8:	2100      	movs	r1, #0
 80039aa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2221      	movs	r2, #33	; 0x21
 80039b0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	015b      	lsls	r3, r3, #5
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d107      	bne.n	80039ce <HAL_UART_Transmit_IT+0x92>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d103      	bne.n	80039ce <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4a12      	ldr	r2, [pc, #72]	; (8003a14 <HAL_UART_Transmit_IT+0xd8>)
 80039ca:	66da      	str	r2, [r3, #108]	; 0x6c
 80039cc:	e002      	b.n	80039d4 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4a11      	ldr	r2, [pc, #68]	; (8003a18 <HAL_UART_Transmit_IT+0xdc>)
 80039d2:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d4:	f3ef 8310 	mrs	r3, PRIMASK
 80039d8:	613b      	str	r3, [r7, #16]
  return(result);
 80039da:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	2301      	movs	r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f383 8810 	msr	PRIMASK, r3
}
 80039e8:	46c0      	nop			; (mov r8, r8)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2180      	movs	r1, #128	; 0x80
 80039f6:	430a      	orrs	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	f383 8810 	msr	PRIMASK, r3
}
 8003a04:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	e000      	b.n	8003a0c <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8003a0a:	2302      	movs	r3, #2
  }
}
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b008      	add	sp, #32
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	08004a55 	.word	0x08004a55
 8003a18:	080049a3 	.word	0x080049a3

08003a1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b0ab      	sub	sp, #172	; 0xac
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	22a4      	movs	r2, #164	; 0xa4
 8003a2c:	18b9      	adds	r1, r7, r2
 8003a2e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	20a0      	movs	r0, #160	; 0xa0
 8003a38:	1839      	adds	r1, r7, r0
 8003a3a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	219c      	movs	r1, #156	; 0x9c
 8003a44:	1879      	adds	r1, r7, r1
 8003a46:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a48:	0011      	movs	r1, r2
 8003a4a:	18bb      	adds	r3, r7, r2
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a99      	ldr	r2, [pc, #612]	; (8003cb4 <HAL_UART_IRQHandler+0x298>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	2298      	movs	r2, #152	; 0x98
 8003a54:	18bc      	adds	r4, r7, r2
 8003a56:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003a58:	18bb      	adds	r3, r7, r2
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d114      	bne.n	8003a8a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a60:	187b      	adds	r3, r7, r1
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2220      	movs	r2, #32
 8003a66:	4013      	ands	r3, r2
 8003a68:	d00f      	beq.n	8003a8a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a6a:	183b      	adds	r3, r7, r0
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	4013      	ands	r3, r2
 8003a72:	d00a      	beq.n	8003a8a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d100      	bne.n	8003a7e <HAL_UART_IRQHandler+0x62>
 8003a7c:	e2a0      	b.n	8003fc0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	0010      	movs	r0, r2
 8003a86:	4798      	blx	r3
      }
      return;
 8003a88:	e29a      	b.n	8003fc0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a8a:	2398      	movs	r3, #152	; 0x98
 8003a8c:	18fb      	adds	r3, r7, r3
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d100      	bne.n	8003a96 <HAL_UART_IRQHandler+0x7a>
 8003a94:	e114      	b.n	8003cc0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a96:	239c      	movs	r3, #156	; 0x9c
 8003a98:	18fb      	adds	r3, r7, r3
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d106      	bne.n	8003ab0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003aa2:	23a0      	movs	r3, #160	; 0xa0
 8003aa4:	18fb      	adds	r3, r7, r3
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a83      	ldr	r2, [pc, #524]	; (8003cb8 <HAL_UART_IRQHandler+0x29c>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d100      	bne.n	8003ab0 <HAL_UART_IRQHandler+0x94>
 8003aae:	e107      	b.n	8003cc0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ab0:	23a4      	movs	r3, #164	; 0xa4
 8003ab2:	18fb      	adds	r3, r7, r3
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d012      	beq.n	8003ae2 <HAL_UART_IRQHandler+0xc6>
 8003abc:	23a0      	movs	r3, #160	; 0xa0
 8003abe:	18fb      	adds	r3, r7, r3
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d00b      	beq.n	8003ae2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2284      	movs	r2, #132	; 0x84
 8003ad6:	589b      	ldr	r3, [r3, r2]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2184      	movs	r1, #132	; 0x84
 8003ae0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ae2:	23a4      	movs	r3, #164	; 0xa4
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	4013      	ands	r3, r2
 8003aec:	d011      	beq.n	8003b12 <HAL_UART_IRQHandler+0xf6>
 8003aee:	239c      	movs	r3, #156	; 0x9c
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2201      	movs	r2, #1
 8003af6:	4013      	ands	r3, r2
 8003af8:	d00b      	beq.n	8003b12 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2202      	movs	r2, #2
 8003b00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2284      	movs	r2, #132	; 0x84
 8003b06:	589b      	ldr	r3, [r3, r2]
 8003b08:	2204      	movs	r2, #4
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2184      	movs	r1, #132	; 0x84
 8003b10:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b12:	23a4      	movs	r3, #164	; 0xa4
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2204      	movs	r2, #4
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d011      	beq.n	8003b42 <HAL_UART_IRQHandler+0x126>
 8003b1e:	239c      	movs	r3, #156	; 0x9c
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2201      	movs	r2, #1
 8003b26:	4013      	ands	r3, r2
 8003b28:	d00b      	beq.n	8003b42 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2204      	movs	r2, #4
 8003b30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2284      	movs	r2, #132	; 0x84
 8003b36:	589b      	ldr	r3, [r3, r2]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2184      	movs	r1, #132	; 0x84
 8003b40:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b42:	23a4      	movs	r3, #164	; 0xa4
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2208      	movs	r2, #8
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d017      	beq.n	8003b7e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b4e:	23a0      	movs	r3, #160	; 0xa0
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2220      	movs	r2, #32
 8003b56:	4013      	ands	r3, r2
 8003b58:	d105      	bne.n	8003b66 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b5a:	239c      	movs	r3, #156	; 0x9c
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2201      	movs	r2, #1
 8003b62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b64:	d00b      	beq.n	8003b7e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2208      	movs	r2, #8
 8003b6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2284      	movs	r2, #132	; 0x84
 8003b72:	589b      	ldr	r3, [r3, r2]
 8003b74:	2208      	movs	r2, #8
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2184      	movs	r1, #132	; 0x84
 8003b7c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b7e:	23a4      	movs	r3, #164	; 0xa4
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d013      	beq.n	8003bb4 <HAL_UART_IRQHandler+0x198>
 8003b8c:	23a0      	movs	r3, #160	; 0xa0
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	2380      	movs	r3, #128	; 0x80
 8003b94:	04db      	lsls	r3, r3, #19
 8003b96:	4013      	ands	r3, r2
 8003b98:	d00c      	beq.n	8003bb4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2280      	movs	r2, #128	; 0x80
 8003ba0:	0112      	lsls	r2, r2, #4
 8003ba2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2284      	movs	r2, #132	; 0x84
 8003ba8:	589b      	ldr	r3, [r3, r2]
 8003baa:	2220      	movs	r2, #32
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2184      	movs	r1, #132	; 0x84
 8003bb2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2284      	movs	r2, #132	; 0x84
 8003bb8:	589b      	ldr	r3, [r3, r2]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d100      	bne.n	8003bc0 <HAL_UART_IRQHandler+0x1a4>
 8003bbe:	e201      	b.n	8003fc4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bc0:	23a4      	movs	r3, #164	; 0xa4
 8003bc2:	18fb      	adds	r3, r7, r3
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d00e      	beq.n	8003bea <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bcc:	23a0      	movs	r3, #160	; 0xa0
 8003bce:	18fb      	adds	r3, r7, r3
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d008      	beq.n	8003bea <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d004      	beq.n	8003bea <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	0010      	movs	r0, r2
 8003be8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2284      	movs	r2, #132	; 0x84
 8003bee:	589b      	ldr	r3, [r3, r2]
 8003bf0:	2194      	movs	r1, #148	; 0x94
 8003bf2:	187a      	adds	r2, r7, r1
 8003bf4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2240      	movs	r2, #64	; 0x40
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b40      	cmp	r3, #64	; 0x40
 8003c02:	d004      	beq.n	8003c0e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c04:	187b      	adds	r3, r7, r1
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2228      	movs	r2, #40	; 0x28
 8003c0a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c0c:	d047      	beq.n	8003c9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	0018      	movs	r0, r3
 8003c12:	f000 fe4b 	bl	80048ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2240      	movs	r2, #64	; 0x40
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b40      	cmp	r3, #64	; 0x40
 8003c22:	d137      	bne.n	8003c94 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c24:	f3ef 8310 	mrs	r3, PRIMASK
 8003c28:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003c2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c2c:	2090      	movs	r0, #144	; 0x90
 8003c2e:	183a      	adds	r2, r7, r0
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	2301      	movs	r3, #1
 8003c34:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c38:	f383 8810 	msr	PRIMASK, r3
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2140      	movs	r1, #64	; 0x40
 8003c4a:	438a      	bics	r2, r1
 8003c4c:	609a      	str	r2, [r3, #8]
 8003c4e:	183b      	adds	r3, r7, r0
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c56:	f383 8810 	msr	PRIMASK, r3
}
 8003c5a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d012      	beq.n	8003c8a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c68:	4a14      	ldr	r2, [pc, #80]	; (8003cbc <HAL_UART_IRQHandler+0x2a0>)
 8003c6a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c70:	0018      	movs	r0, r3
 8003c72:	f7fd fe71 	bl	8001958 <HAL_DMA_Abort_IT>
 8003c76:	1e03      	subs	r3, r0, #0
 8003c78:	d01a      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c84:	0018      	movs	r0, r3
 8003c86:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c88:	e012      	b.n	8003cb0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f000 f9af 	bl	8003ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c92:	e00d      	b.n	8003cb0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	0018      	movs	r0, r3
 8003c98:	f000 f9aa 	bl	8003ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9c:	e008      	b.n	8003cb0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f000 f9a5 	bl	8003ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2284      	movs	r2, #132	; 0x84
 8003caa:	2100      	movs	r1, #0
 8003cac:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003cae:	e189      	b.n	8003fc4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb0:	46c0      	nop			; (mov r8, r8)
    return;
 8003cb2:	e187      	b.n	8003fc4 <HAL_UART_IRQHandler+0x5a8>
 8003cb4:	0000080f 	.word	0x0000080f
 8003cb8:	04000120 	.word	0x04000120
 8003cbc:	08004975 	.word	0x08004975

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d000      	beq.n	8003cca <HAL_UART_IRQHandler+0x2ae>
 8003cc8:	e13b      	b.n	8003f42 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003cca:	23a4      	movs	r3, #164	; 0xa4
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2210      	movs	r2, #16
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d100      	bne.n	8003cd8 <HAL_UART_IRQHandler+0x2bc>
 8003cd6:	e134      	b.n	8003f42 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003cd8:	23a0      	movs	r3, #160	; 0xa0
 8003cda:	18fb      	adds	r3, r7, r3
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2210      	movs	r2, #16
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d100      	bne.n	8003ce6 <HAL_UART_IRQHandler+0x2ca>
 8003ce4:	e12d      	b.n	8003f42 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2210      	movs	r2, #16
 8003cec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2240      	movs	r2, #64	; 0x40
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b40      	cmp	r3, #64	; 0x40
 8003cfa:	d000      	beq.n	8003cfe <HAL_UART_IRQHandler+0x2e2>
 8003cfc:	e0a1      	b.n	8003e42 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	217e      	movs	r1, #126	; 0x7e
 8003d08:	187b      	adds	r3, r7, r1
 8003d0a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003d0c:	187b      	adds	r3, r7, r1
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d100      	bne.n	8003d16 <HAL_UART_IRQHandler+0x2fa>
 8003d14:	e158      	b.n	8003fc8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2258      	movs	r2, #88	; 0x58
 8003d1a:	5a9b      	ldrh	r3, [r3, r2]
 8003d1c:	187a      	adds	r2, r7, r1
 8003d1e:	8812      	ldrh	r2, [r2, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d300      	bcc.n	8003d26 <HAL_UART_IRQHandler+0x30a>
 8003d24:	e150      	b.n	8003fc8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	187a      	adds	r2, r7, r1
 8003d2a:	215a      	movs	r1, #90	; 0x5a
 8003d2c:	8812      	ldrh	r2, [r2, #0]
 8003d2e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d16f      	bne.n	8003e1e <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d42:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d46:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d48:	2301      	movs	r3, #1
 8003d4a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4e:	f383 8810 	msr	PRIMASK, r3
}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	499e      	ldr	r1, [pc, #632]	; (8003fd8 <HAL_UART_IRQHandler+0x5bc>)
 8003d60:	400a      	ands	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d66:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6a:	f383 8810 	msr	PRIMASK, r3
}
 8003d6e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d70:	f3ef 8310 	mrs	r3, PRIMASK
 8003d74:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d78:	677b      	str	r3, [r7, #116]	; 0x74
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d80:	f383 8810 	msr	PRIMASK, r3
}
 8003d84:	46c0      	nop			; (mov r8, r8)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2101      	movs	r1, #1
 8003d92:	438a      	bics	r2, r1
 8003d94:	609a      	str	r2, [r3, #8]
 8003d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d98:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d9c:	f383 8810 	msr	PRIMASK, r3
}
 8003da0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da2:	f3ef 8310 	mrs	r3, PRIMASK
 8003da6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003daa:	673b      	str	r3, [r7, #112]	; 0x70
 8003dac:	2301      	movs	r3, #1
 8003dae:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db2:	f383 8810 	msr	PRIMASK, r3
}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2140      	movs	r1, #64	; 0x40
 8003dc4:	438a      	bics	r2, r1
 8003dc6:	609a      	str	r2, [r3, #8]
 8003dc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dca:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dce:	f383 8810 	msr	PRIMASK, r3
}
 8003dd2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2280      	movs	r2, #128	; 0x80
 8003dd8:	2120      	movs	r1, #32
 8003dda:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003de2:	f3ef 8310 	mrs	r3, PRIMASK
 8003de6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dec:	2301      	movs	r3, #1
 8003dee:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003df2:	f383 8810 	msr	PRIMASK, r3
}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2110      	movs	r1, #16
 8003e04:	438a      	bics	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e0e:	f383 8810 	msr	PRIMASK, r3
}
 8003e12:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f7fd fd5d 	bl	80018d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2202      	movs	r2, #2
 8003e22:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2258      	movs	r2, #88	; 0x58
 8003e28:	5a9a      	ldrh	r2, [r3, r2]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	215a      	movs	r1, #90	; 0x5a
 8003e2e:	5a5b      	ldrh	r3, [r3, r1]
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	0011      	movs	r1, r2
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f000 f8e0 	bl	8004000 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e40:	e0c2      	b.n	8003fc8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2258      	movs	r2, #88	; 0x58
 8003e46:	5a99      	ldrh	r1, [r3, r2]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	225a      	movs	r2, #90	; 0x5a
 8003e4c:	5a9b      	ldrh	r3, [r3, r2]
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	208e      	movs	r0, #142	; 0x8e
 8003e52:	183b      	adds	r3, r7, r0
 8003e54:	1a8a      	subs	r2, r1, r2
 8003e56:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	225a      	movs	r2, #90	; 0x5a
 8003e5c:	5a9b      	ldrh	r3, [r3, r2]
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d100      	bne.n	8003e66 <HAL_UART_IRQHandler+0x44a>
 8003e64:	e0b2      	b.n	8003fcc <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003e66:	183b      	adds	r3, r7, r0
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d100      	bne.n	8003e70 <HAL_UART_IRQHandler+0x454>
 8003e6e:	e0ad      	b.n	8003fcc <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e70:	f3ef 8310 	mrs	r3, PRIMASK
 8003e74:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e76:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e78:	2488      	movs	r4, #136	; 0x88
 8003e7a:	193a      	adds	r2, r7, r4
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	2301      	movs	r3, #1
 8003e80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f383 8810 	msr	PRIMASK, r3
}
 8003e88:	46c0      	nop			; (mov r8, r8)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4951      	ldr	r1, [pc, #324]	; (8003fdc <HAL_UART_IRQHandler+0x5c0>)
 8003e96:	400a      	ands	r2, r1
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	193b      	adds	r3, r7, r4
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f383 8810 	msr	PRIMASK, r3
}
 8003ea6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8003eac:	61bb      	str	r3, [r7, #24]
  return(result);
 8003eae:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb0:	2484      	movs	r4, #132	; 0x84
 8003eb2:	193a      	adds	r2, r7, r4
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	f383 8810 	msr	PRIMASK, r3
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2101      	movs	r1, #1
 8003ece:	438a      	bics	r2, r1
 8003ed0:	609a      	str	r2, [r3, #8]
 8003ed2:	193b      	adds	r3, r7, r4
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	f383 8810 	msr	PRIMASK, r3
}
 8003ede:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2280      	movs	r2, #128	; 0x80
 8003ee4:	2120      	movs	r1, #32
 8003ee6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003efc:	2480      	movs	r4, #128	; 0x80
 8003efe:	193a      	adds	r2, r7, r4
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	2301      	movs	r3, #1
 8003f04:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	f383 8810 	msr	PRIMASK, r3
}
 8003f0c:	46c0      	nop			; (mov r8, r8)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2110      	movs	r1, #16
 8003f1a:	438a      	bics	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	193b      	adds	r3, r7, r4
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f26:	f383 8810 	msr	PRIMASK, r3
}
 8003f2a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f32:	183b      	adds	r3, r7, r0
 8003f34:	881a      	ldrh	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	0011      	movs	r1, r2
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	f000 f860 	bl	8004000 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f40:	e044      	b.n	8003fcc <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f42:	23a4      	movs	r3, #164	; 0xa4
 8003f44:	18fb      	adds	r3, r7, r3
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	035b      	lsls	r3, r3, #13
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d010      	beq.n	8003f72 <HAL_UART_IRQHandler+0x556>
 8003f50:	239c      	movs	r3, #156	; 0x9c
 8003f52:	18fb      	adds	r3, r7, r3
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	2380      	movs	r3, #128	; 0x80
 8003f58:	03db      	lsls	r3, r3, #15
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d009      	beq.n	8003f72 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2280      	movs	r2, #128	; 0x80
 8003f64:	0352      	lsls	r2, r2, #13
 8003f66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f000 fdfb 	bl	8004b66 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f70:	e02f      	b.n	8003fd2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f72:	23a4      	movs	r3, #164	; 0xa4
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2280      	movs	r2, #128	; 0x80
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d00f      	beq.n	8003f9e <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f7e:	23a0      	movs	r3, #160	; 0xa0
 8003f80:	18fb      	adds	r3, r7, r3
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2280      	movs	r2, #128	; 0x80
 8003f86:	4013      	ands	r3, r2
 8003f88:	d009      	beq.n	8003f9e <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d01e      	beq.n	8003fd0 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	0010      	movs	r0, r2
 8003f9a:	4798      	blx	r3
    }
    return;
 8003f9c:	e018      	b.n	8003fd0 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f9e:	23a4      	movs	r3, #164	; 0xa4
 8003fa0:	18fb      	adds	r3, r7, r3
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2240      	movs	r2, #64	; 0x40
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d013      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x5b6>
 8003faa:	23a0      	movs	r3, #160	; 0xa0
 8003fac:	18fb      	adds	r3, r7, r3
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2240      	movs	r2, #64	; 0x40
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	d00d      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f000 fda9 	bl	8004b10 <UART_EndTransmit_IT>
    return;
 8003fbe:	e008      	b.n	8003fd2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003fc0:	46c0      	nop			; (mov r8, r8)
 8003fc2:	e006      	b.n	8003fd2 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003fc4:	46c0      	nop			; (mov r8, r8)
 8003fc6:	e004      	b.n	8003fd2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003fc8:	46c0      	nop			; (mov r8, r8)
 8003fca:	e002      	b.n	8003fd2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003fcc:	46c0      	nop			; (mov r8, r8)
 8003fce:	e000      	b.n	8003fd2 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003fd0:	46c0      	nop			; (mov r8, r8)
  }

}
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b02b      	add	sp, #172	; 0xac
 8003fd6:	bd90      	pop	{r4, r7, pc}
 8003fd8:	fffffeff 	.word	0xfffffeff
 8003fdc:	fffffedf 	.word	0xfffffedf

08003fe0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003fe8:	46c0      	nop			; (mov r8, r8)
 8003fea:	46bd      	mov	sp, r7
 8003fec:	b002      	add	sp, #8
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ff8:	46c0      	nop			; (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b002      	add	sp, #8
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	000a      	movs	r2, r1
 800400a:	1cbb      	adds	r3, r7, #2
 800400c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	46bd      	mov	sp, r7
 8004012:	b002      	add	sp, #8
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004018:	b5b0      	push	{r4, r5, r7, lr}
 800401a:	b08e      	sub	sp, #56	; 0x38
 800401c:	af00      	add	r7, sp, #0
 800401e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004020:	231a      	movs	r3, #26
 8004022:	2218      	movs	r2, #24
 8004024:	189b      	adds	r3, r3, r2
 8004026:	19db      	adds	r3, r3, r7
 8004028:	2200      	movs	r2, #0
 800402a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	431a      	orrs	r2, r3
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	431a      	orrs	r2, r3
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	4313      	orrs	r3, r2
 8004042:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4ac6      	ldr	r2, [pc, #792]	; (8004364 <UART_SetConfig+0x34c>)
 800404c:	4013      	ands	r3, r2
 800404e:	0019      	movs	r1, r3
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004056:	430a      	orrs	r2, r1
 8004058:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	4ac1      	ldr	r2, [pc, #772]	; (8004368 <UART_SetConfig+0x350>)
 8004062:	4013      	ands	r3, r2
 8004064:	0019      	movs	r1, r3
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4abb      	ldr	r2, [pc, #748]	; (800436c <UART_SetConfig+0x354>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d004      	beq.n	800408c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004088:	4313      	orrs	r3, r2
 800408a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	4ab7      	ldr	r2, [pc, #732]	; (8004370 <UART_SetConfig+0x358>)
 8004094:	4013      	ands	r3, r2
 8004096:	0019      	movs	r1, r3
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800409e:	430a      	orrs	r2, r1
 80040a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4ab3      	ldr	r2, [pc, #716]	; (8004374 <UART_SetConfig+0x35c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d131      	bne.n	8004110 <UART_SetConfig+0xf8>
 80040ac:	4bb2      	ldr	r3, [pc, #712]	; (8004378 <UART_SetConfig+0x360>)
 80040ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b0:	2203      	movs	r2, #3
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d01d      	beq.n	80040f4 <UART_SetConfig+0xdc>
 80040b8:	d823      	bhi.n	8004102 <UART_SetConfig+0xea>
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d00c      	beq.n	80040d8 <UART_SetConfig+0xc0>
 80040be:	d820      	bhi.n	8004102 <UART_SetConfig+0xea>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <UART_SetConfig+0xb2>
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d00e      	beq.n	80040e6 <UART_SetConfig+0xce>
 80040c8:	e01b      	b.n	8004102 <UART_SetConfig+0xea>
 80040ca:	231b      	movs	r3, #27
 80040cc:	2218      	movs	r2, #24
 80040ce:	189b      	adds	r3, r3, r2
 80040d0:	19db      	adds	r3, r3, r7
 80040d2:	2201      	movs	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]
 80040d6:	e09c      	b.n	8004212 <UART_SetConfig+0x1fa>
 80040d8:	231b      	movs	r3, #27
 80040da:	2218      	movs	r2, #24
 80040dc:	189b      	adds	r3, r3, r2
 80040de:	19db      	adds	r3, r3, r7
 80040e0:	2202      	movs	r2, #2
 80040e2:	701a      	strb	r2, [r3, #0]
 80040e4:	e095      	b.n	8004212 <UART_SetConfig+0x1fa>
 80040e6:	231b      	movs	r3, #27
 80040e8:	2218      	movs	r2, #24
 80040ea:	189b      	adds	r3, r3, r2
 80040ec:	19db      	adds	r3, r3, r7
 80040ee:	2204      	movs	r2, #4
 80040f0:	701a      	strb	r2, [r3, #0]
 80040f2:	e08e      	b.n	8004212 <UART_SetConfig+0x1fa>
 80040f4:	231b      	movs	r3, #27
 80040f6:	2218      	movs	r2, #24
 80040f8:	189b      	adds	r3, r3, r2
 80040fa:	19db      	adds	r3, r3, r7
 80040fc:	2208      	movs	r2, #8
 80040fe:	701a      	strb	r2, [r3, #0]
 8004100:	e087      	b.n	8004212 <UART_SetConfig+0x1fa>
 8004102:	231b      	movs	r3, #27
 8004104:	2218      	movs	r2, #24
 8004106:	189b      	adds	r3, r3, r2
 8004108:	19db      	adds	r3, r3, r7
 800410a:	2210      	movs	r2, #16
 800410c:	701a      	strb	r2, [r3, #0]
 800410e:	e080      	b.n	8004212 <UART_SetConfig+0x1fa>
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a99      	ldr	r2, [pc, #612]	; (800437c <UART_SetConfig+0x364>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d131      	bne.n	800417e <UART_SetConfig+0x166>
 800411a:	4b97      	ldr	r3, [pc, #604]	; (8004378 <UART_SetConfig+0x360>)
 800411c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411e:	220c      	movs	r2, #12
 8004120:	4013      	ands	r3, r2
 8004122:	2b0c      	cmp	r3, #12
 8004124:	d01d      	beq.n	8004162 <UART_SetConfig+0x14a>
 8004126:	d823      	bhi.n	8004170 <UART_SetConfig+0x158>
 8004128:	2b08      	cmp	r3, #8
 800412a:	d00c      	beq.n	8004146 <UART_SetConfig+0x12e>
 800412c:	d820      	bhi.n	8004170 <UART_SetConfig+0x158>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <UART_SetConfig+0x120>
 8004132:	2b04      	cmp	r3, #4
 8004134:	d00e      	beq.n	8004154 <UART_SetConfig+0x13c>
 8004136:	e01b      	b.n	8004170 <UART_SetConfig+0x158>
 8004138:	231b      	movs	r3, #27
 800413a:	2218      	movs	r2, #24
 800413c:	189b      	adds	r3, r3, r2
 800413e:	19db      	adds	r3, r3, r7
 8004140:	2200      	movs	r2, #0
 8004142:	701a      	strb	r2, [r3, #0]
 8004144:	e065      	b.n	8004212 <UART_SetConfig+0x1fa>
 8004146:	231b      	movs	r3, #27
 8004148:	2218      	movs	r2, #24
 800414a:	189b      	adds	r3, r3, r2
 800414c:	19db      	adds	r3, r3, r7
 800414e:	2202      	movs	r2, #2
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	e05e      	b.n	8004212 <UART_SetConfig+0x1fa>
 8004154:	231b      	movs	r3, #27
 8004156:	2218      	movs	r2, #24
 8004158:	189b      	adds	r3, r3, r2
 800415a:	19db      	adds	r3, r3, r7
 800415c:	2204      	movs	r2, #4
 800415e:	701a      	strb	r2, [r3, #0]
 8004160:	e057      	b.n	8004212 <UART_SetConfig+0x1fa>
 8004162:	231b      	movs	r3, #27
 8004164:	2218      	movs	r2, #24
 8004166:	189b      	adds	r3, r3, r2
 8004168:	19db      	adds	r3, r3, r7
 800416a:	2208      	movs	r2, #8
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	e050      	b.n	8004212 <UART_SetConfig+0x1fa>
 8004170:	231b      	movs	r3, #27
 8004172:	2218      	movs	r2, #24
 8004174:	189b      	adds	r3, r3, r2
 8004176:	19db      	adds	r3, r3, r7
 8004178:	2210      	movs	r2, #16
 800417a:	701a      	strb	r2, [r3, #0]
 800417c:	e049      	b.n	8004212 <UART_SetConfig+0x1fa>
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a7a      	ldr	r2, [pc, #488]	; (800436c <UART_SetConfig+0x354>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d13e      	bne.n	8004206 <UART_SetConfig+0x1ee>
 8004188:	4b7b      	ldr	r3, [pc, #492]	; (8004378 <UART_SetConfig+0x360>)
 800418a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800418c:	23c0      	movs	r3, #192	; 0xc0
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	4013      	ands	r3, r2
 8004192:	22c0      	movs	r2, #192	; 0xc0
 8004194:	0112      	lsls	r2, r2, #4
 8004196:	4293      	cmp	r3, r2
 8004198:	d027      	beq.n	80041ea <UART_SetConfig+0x1d2>
 800419a:	22c0      	movs	r2, #192	; 0xc0
 800419c:	0112      	lsls	r2, r2, #4
 800419e:	4293      	cmp	r3, r2
 80041a0:	d82a      	bhi.n	80041f8 <UART_SetConfig+0x1e0>
 80041a2:	2280      	movs	r2, #128	; 0x80
 80041a4:	0112      	lsls	r2, r2, #4
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d011      	beq.n	80041ce <UART_SetConfig+0x1b6>
 80041aa:	2280      	movs	r2, #128	; 0x80
 80041ac:	0112      	lsls	r2, r2, #4
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d822      	bhi.n	80041f8 <UART_SetConfig+0x1e0>
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d004      	beq.n	80041c0 <UART_SetConfig+0x1a8>
 80041b6:	2280      	movs	r2, #128	; 0x80
 80041b8:	00d2      	lsls	r2, r2, #3
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00e      	beq.n	80041dc <UART_SetConfig+0x1c4>
 80041be:	e01b      	b.n	80041f8 <UART_SetConfig+0x1e0>
 80041c0:	231b      	movs	r3, #27
 80041c2:	2218      	movs	r2, #24
 80041c4:	189b      	adds	r3, r3, r2
 80041c6:	19db      	adds	r3, r3, r7
 80041c8:	2200      	movs	r2, #0
 80041ca:	701a      	strb	r2, [r3, #0]
 80041cc:	e021      	b.n	8004212 <UART_SetConfig+0x1fa>
 80041ce:	231b      	movs	r3, #27
 80041d0:	2218      	movs	r2, #24
 80041d2:	189b      	adds	r3, r3, r2
 80041d4:	19db      	adds	r3, r3, r7
 80041d6:	2202      	movs	r2, #2
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	e01a      	b.n	8004212 <UART_SetConfig+0x1fa>
 80041dc:	231b      	movs	r3, #27
 80041de:	2218      	movs	r2, #24
 80041e0:	189b      	adds	r3, r3, r2
 80041e2:	19db      	adds	r3, r3, r7
 80041e4:	2204      	movs	r2, #4
 80041e6:	701a      	strb	r2, [r3, #0]
 80041e8:	e013      	b.n	8004212 <UART_SetConfig+0x1fa>
 80041ea:	231b      	movs	r3, #27
 80041ec:	2218      	movs	r2, #24
 80041ee:	189b      	adds	r3, r3, r2
 80041f0:	19db      	adds	r3, r3, r7
 80041f2:	2208      	movs	r2, #8
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	e00c      	b.n	8004212 <UART_SetConfig+0x1fa>
 80041f8:	231b      	movs	r3, #27
 80041fa:	2218      	movs	r2, #24
 80041fc:	189b      	adds	r3, r3, r2
 80041fe:	19db      	adds	r3, r3, r7
 8004200:	2210      	movs	r2, #16
 8004202:	701a      	strb	r2, [r3, #0]
 8004204:	e005      	b.n	8004212 <UART_SetConfig+0x1fa>
 8004206:	231b      	movs	r3, #27
 8004208:	2218      	movs	r2, #24
 800420a:	189b      	adds	r3, r3, r2
 800420c:	19db      	adds	r3, r3, r7
 800420e:	2210      	movs	r2, #16
 8004210:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a55      	ldr	r2, [pc, #340]	; (800436c <UART_SetConfig+0x354>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d000      	beq.n	800421e <UART_SetConfig+0x206>
 800421c:	e084      	b.n	8004328 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800421e:	231b      	movs	r3, #27
 8004220:	2218      	movs	r2, #24
 8004222:	189b      	adds	r3, r3, r2
 8004224:	19db      	adds	r3, r3, r7
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b08      	cmp	r3, #8
 800422a:	d01d      	beq.n	8004268 <UART_SetConfig+0x250>
 800422c:	dc20      	bgt.n	8004270 <UART_SetConfig+0x258>
 800422e:	2b04      	cmp	r3, #4
 8004230:	d015      	beq.n	800425e <UART_SetConfig+0x246>
 8004232:	dc1d      	bgt.n	8004270 <UART_SetConfig+0x258>
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <UART_SetConfig+0x226>
 8004238:	2b02      	cmp	r3, #2
 800423a:	d005      	beq.n	8004248 <UART_SetConfig+0x230>
 800423c:	e018      	b.n	8004270 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800423e:	f7fe fc23 	bl	8002a88 <HAL_RCC_GetPCLK1Freq>
 8004242:	0003      	movs	r3, r0
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004246:	e01c      	b.n	8004282 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004248:	4b4b      	ldr	r3, [pc, #300]	; (8004378 <UART_SetConfig+0x360>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2210      	movs	r2, #16
 800424e:	4013      	ands	r3, r2
 8004250:	d002      	beq.n	8004258 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004252:	4b4b      	ldr	r3, [pc, #300]	; (8004380 <UART_SetConfig+0x368>)
 8004254:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004256:	e014      	b.n	8004282 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8004258:	4b4a      	ldr	r3, [pc, #296]	; (8004384 <UART_SetConfig+0x36c>)
 800425a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800425c:	e011      	b.n	8004282 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800425e:	f7fe fb63 	bl	8002928 <HAL_RCC_GetSysClockFreq>
 8004262:	0003      	movs	r3, r0
 8004264:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004266:	e00c      	b.n	8004282 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004268:	2380      	movs	r3, #128	; 0x80
 800426a:	021b      	lsls	r3, r3, #8
 800426c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800426e:	e008      	b.n	8004282 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004274:	231a      	movs	r3, #26
 8004276:	2218      	movs	r2, #24
 8004278:	189b      	adds	r3, r3, r2
 800427a:	19db      	adds	r3, r3, r7
 800427c:	2201      	movs	r2, #1
 800427e:	701a      	strb	r2, [r3, #0]
        break;
 8004280:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004284:	2b00      	cmp	r3, #0
 8004286:	d100      	bne.n	800428a <UART_SetConfig+0x272>
 8004288:	e132      	b.n	80044f0 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	0013      	movs	r3, r2
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	189b      	adds	r3, r3, r2
 8004294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004296:	429a      	cmp	r2, r3
 8004298:	d305      	bcc.n	80042a6 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d906      	bls.n	80042b4 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80042a6:	231a      	movs	r3, #26
 80042a8:	2218      	movs	r2, #24
 80042aa:	189b      	adds	r3, r3, r2
 80042ac:	19db      	adds	r3, r3, r7
 80042ae:	2201      	movs	r2, #1
 80042b0:	701a      	strb	r2, [r3, #0]
 80042b2:	e11d      	b.n	80044f0 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80042b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	6939      	ldr	r1, [r7, #16]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	000b      	movs	r3, r1
 80042c2:	0e1b      	lsrs	r3, r3, #24
 80042c4:	0010      	movs	r0, r2
 80042c6:	0205      	lsls	r5, r0, #8
 80042c8:	431d      	orrs	r5, r3
 80042ca:	000b      	movs	r3, r1
 80042cc:	021c      	lsls	r4, r3, #8
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	085b      	lsrs	r3, r3, #1
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	68b8      	ldr	r0, [r7, #8]
 80042dc:	68f9      	ldr	r1, [r7, #12]
 80042de:	1900      	adds	r0, r0, r4
 80042e0:	4169      	adcs	r1, r5
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	2300      	movs	r3, #0
 80042ea:	607b      	str	r3, [r7, #4]
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f7fb ff96 	bl	8000220 <__aeabi_uldivmod>
 80042f4:	0002      	movs	r2, r0
 80042f6:	000b      	movs	r3, r1
 80042f8:	0013      	movs	r3, r2
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042fe:	23c0      	movs	r3, #192	; 0xc0
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	429a      	cmp	r2, r3
 8004304:	d309      	bcc.n	800431a <UART_SetConfig+0x302>
 8004306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004308:	2380      	movs	r3, #128	; 0x80
 800430a:	035b      	lsls	r3, r3, #13
 800430c:	429a      	cmp	r2, r3
 800430e:	d204      	bcs.n	800431a <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004316:	60da      	str	r2, [r3, #12]
 8004318:	e0ea      	b.n	80044f0 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 800431a:	231a      	movs	r3, #26
 800431c:	2218      	movs	r2, #24
 800431e:	189b      	adds	r3, r3, r2
 8004320:	19db      	adds	r3, r3, r7
 8004322:	2201      	movs	r2, #1
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	e0e3      	b.n	80044f0 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	2380      	movs	r3, #128	; 0x80
 800432e:	021b      	lsls	r3, r3, #8
 8004330:	429a      	cmp	r2, r3
 8004332:	d000      	beq.n	8004336 <UART_SetConfig+0x31e>
 8004334:	e085      	b.n	8004442 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8004336:	231b      	movs	r3, #27
 8004338:	2218      	movs	r2, #24
 800433a:	189b      	adds	r3, r3, r2
 800433c:	19db      	adds	r3, r3, r7
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b08      	cmp	r3, #8
 8004342:	d837      	bhi.n	80043b4 <UART_SetConfig+0x39c>
 8004344:	009a      	lsls	r2, r3, #2
 8004346:	4b10      	ldr	r3, [pc, #64]	; (8004388 <UART_SetConfig+0x370>)
 8004348:	18d3      	adds	r3, r2, r3
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800434e:	f7fe fb9b 	bl	8002a88 <HAL_RCC_GetPCLK1Freq>
 8004352:	0003      	movs	r3, r0
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004356:	e036      	b.n	80043c6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004358:	f7fe fbac 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 800435c:	0003      	movs	r3, r0
 800435e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004360:	e031      	b.n	80043c6 <UART_SetConfig+0x3ae>
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	efff69f3 	.word	0xefff69f3
 8004368:	ffffcfff 	.word	0xffffcfff
 800436c:	40004800 	.word	0x40004800
 8004370:	fffff4ff 	.word	0xfffff4ff
 8004374:	40013800 	.word	0x40013800
 8004378:	40021000 	.word	0x40021000
 800437c:	40004400 	.word	0x40004400
 8004380:	003d0900 	.word	0x003d0900
 8004384:	00f42400 	.word	0x00f42400
 8004388:	08004c14 	.word	0x08004c14
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800438c:	4b60      	ldr	r3, [pc, #384]	; (8004510 <UART_SetConfig+0x4f8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2210      	movs	r2, #16
 8004392:	4013      	ands	r3, r2
 8004394:	d002      	beq.n	800439c <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004396:	4b5f      	ldr	r3, [pc, #380]	; (8004514 <UART_SetConfig+0x4fc>)
 8004398:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800439a:	e014      	b.n	80043c6 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 800439c:	4b5e      	ldr	r3, [pc, #376]	; (8004518 <UART_SetConfig+0x500>)
 800439e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043a0:	e011      	b.n	80043c6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043a2:	f7fe fac1 	bl	8002928 <HAL_RCC_GetSysClockFreq>
 80043a6:	0003      	movs	r3, r0
 80043a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043aa:	e00c      	b.n	80043c6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ac:	2380      	movs	r3, #128	; 0x80
 80043ae:	021b      	lsls	r3, r3, #8
 80043b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043b2:	e008      	b.n	80043c6 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80043b8:	231a      	movs	r3, #26
 80043ba:	2218      	movs	r2, #24
 80043bc:	189b      	adds	r3, r3, r2
 80043be:	19db      	adds	r3, r3, r7
 80043c0:	2201      	movs	r2, #1
 80043c2:	701a      	strb	r2, [r3, #0]
        break;
 80043c4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d100      	bne.n	80043ce <UART_SetConfig+0x3b6>
 80043cc:	e090      	b.n	80044f0 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d0:	005a      	lsls	r2, r3, #1
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	085b      	lsrs	r3, r3, #1
 80043d8:	18d2      	adds	r2, r2, r3
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	0019      	movs	r1, r3
 80043e0:	0010      	movs	r0, r2
 80043e2:	f7fb fe91 	bl	8000108 <__udivsi3>
 80043e6:	0003      	movs	r3, r0
 80043e8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ec:	2b0f      	cmp	r3, #15
 80043ee:	d921      	bls.n	8004434 <UART_SetConfig+0x41c>
 80043f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043f2:	2380      	movs	r3, #128	; 0x80
 80043f4:	025b      	lsls	r3, r3, #9
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d21c      	bcs.n	8004434 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	200e      	movs	r0, #14
 8004400:	2418      	movs	r4, #24
 8004402:	1903      	adds	r3, r0, r4
 8004404:	19db      	adds	r3, r3, r7
 8004406:	210f      	movs	r1, #15
 8004408:	438a      	bics	r2, r1
 800440a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800440c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440e:	085b      	lsrs	r3, r3, #1
 8004410:	b29b      	uxth	r3, r3
 8004412:	2207      	movs	r2, #7
 8004414:	4013      	ands	r3, r2
 8004416:	b299      	uxth	r1, r3
 8004418:	1903      	adds	r3, r0, r4
 800441a:	19db      	adds	r3, r3, r7
 800441c:	1902      	adds	r2, r0, r4
 800441e:	19d2      	adds	r2, r2, r7
 8004420:	8812      	ldrh	r2, [r2, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	1902      	adds	r2, r0, r4
 800442c:	19d2      	adds	r2, r2, r7
 800442e:	8812      	ldrh	r2, [r2, #0]
 8004430:	60da      	str	r2, [r3, #12]
 8004432:	e05d      	b.n	80044f0 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004434:	231a      	movs	r3, #26
 8004436:	2218      	movs	r2, #24
 8004438:	189b      	adds	r3, r3, r2
 800443a:	19db      	adds	r3, r3, r7
 800443c:	2201      	movs	r2, #1
 800443e:	701a      	strb	r2, [r3, #0]
 8004440:	e056      	b.n	80044f0 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004442:	231b      	movs	r3, #27
 8004444:	2218      	movs	r2, #24
 8004446:	189b      	adds	r3, r3, r2
 8004448:	19db      	adds	r3, r3, r7
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b08      	cmp	r3, #8
 800444e:	d822      	bhi.n	8004496 <UART_SetConfig+0x47e>
 8004450:	009a      	lsls	r2, r3, #2
 8004452:	4b32      	ldr	r3, [pc, #200]	; (800451c <UART_SetConfig+0x504>)
 8004454:	18d3      	adds	r3, r2, r3
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800445a:	f7fe fb15 	bl	8002a88 <HAL_RCC_GetPCLK1Freq>
 800445e:	0003      	movs	r3, r0
 8004460:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004462:	e021      	b.n	80044a8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004464:	f7fe fb26 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 8004468:	0003      	movs	r3, r0
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800446c:	e01c      	b.n	80044a8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800446e:	4b28      	ldr	r3, [pc, #160]	; (8004510 <UART_SetConfig+0x4f8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2210      	movs	r2, #16
 8004474:	4013      	ands	r3, r2
 8004476:	d002      	beq.n	800447e <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004478:	4b26      	ldr	r3, [pc, #152]	; (8004514 <UART_SetConfig+0x4fc>)
 800447a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800447c:	e014      	b.n	80044a8 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 800447e:	4b26      	ldr	r3, [pc, #152]	; (8004518 <UART_SetConfig+0x500>)
 8004480:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004482:	e011      	b.n	80044a8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004484:	f7fe fa50 	bl	8002928 <HAL_RCC_GetSysClockFreq>
 8004488:	0003      	movs	r3, r0
 800448a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800448c:	e00c      	b.n	80044a8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800448e:	2380      	movs	r3, #128	; 0x80
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004494:	e008      	b.n	80044a8 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800449a:	231a      	movs	r3, #26
 800449c:	2218      	movs	r2, #24
 800449e:	189b      	adds	r3, r3, r2
 80044a0:	19db      	adds	r3, r3, r7
 80044a2:	2201      	movs	r2, #1
 80044a4:	701a      	strb	r2, [r3, #0]
        break;
 80044a6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80044a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d020      	beq.n	80044f0 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	085a      	lsrs	r2, r3, #1
 80044b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b6:	18d2      	adds	r2, r2, r3
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	0019      	movs	r1, r3
 80044be:	0010      	movs	r0, r2
 80044c0:	f7fb fe22 	bl	8000108 <__udivsi3>
 80044c4:	0003      	movs	r3, r0
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ca:	2b0f      	cmp	r3, #15
 80044cc:	d90a      	bls.n	80044e4 <UART_SetConfig+0x4cc>
 80044ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	025b      	lsls	r3, r3, #9
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d205      	bcs.n	80044e4 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044da:	b29a      	uxth	r2, r3
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	60da      	str	r2, [r3, #12]
 80044e2:	e005      	b.n	80044f0 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80044e4:	231a      	movs	r3, #26
 80044e6:	2218      	movs	r2, #24
 80044e8:	189b      	adds	r3, r3, r2
 80044ea:	19db      	adds	r3, r3, r7
 80044ec:	2201      	movs	r2, #1
 80044ee:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	2200      	movs	r2, #0
 80044f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	2200      	movs	r2, #0
 80044fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80044fc:	231a      	movs	r3, #26
 80044fe:	2218      	movs	r2, #24
 8004500:	189b      	adds	r3, r3, r2
 8004502:	19db      	adds	r3, r3, r7
 8004504:	781b      	ldrb	r3, [r3, #0]
}
 8004506:	0018      	movs	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	b00e      	add	sp, #56	; 0x38
 800450c:	bdb0      	pop	{r4, r5, r7, pc}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	40021000 	.word	0x40021000
 8004514:	003d0900 	.word	0x003d0900
 8004518:	00f42400 	.word	0x00f42400
 800451c:	08004c38 	.word	0x08004c38

08004520 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	2201      	movs	r2, #1
 800452e:	4013      	ands	r3, r2
 8004530:	d00b      	beq.n	800454a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	4a4a      	ldr	r2, [pc, #296]	; (8004664 <UART_AdvFeatureConfig+0x144>)
 800453a:	4013      	ands	r3, r2
 800453c:	0019      	movs	r1, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	2202      	movs	r2, #2
 8004550:	4013      	ands	r3, r2
 8004552:	d00b      	beq.n	800456c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	4a43      	ldr	r2, [pc, #268]	; (8004668 <UART_AdvFeatureConfig+0x148>)
 800455c:	4013      	ands	r3, r2
 800455e:	0019      	movs	r1, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	2204      	movs	r2, #4
 8004572:	4013      	ands	r3, r2
 8004574:	d00b      	beq.n	800458e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	4a3b      	ldr	r2, [pc, #236]	; (800466c <UART_AdvFeatureConfig+0x14c>)
 800457e:	4013      	ands	r3, r2
 8004580:	0019      	movs	r1, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	2208      	movs	r2, #8
 8004594:	4013      	ands	r3, r2
 8004596:	d00b      	beq.n	80045b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	4a34      	ldr	r2, [pc, #208]	; (8004670 <UART_AdvFeatureConfig+0x150>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	0019      	movs	r1, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	2210      	movs	r2, #16
 80045b6:	4013      	ands	r3, r2
 80045b8:	d00b      	beq.n	80045d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	4a2c      	ldr	r2, [pc, #176]	; (8004674 <UART_AdvFeatureConfig+0x154>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	0019      	movs	r1, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	2220      	movs	r2, #32
 80045d8:	4013      	ands	r3, r2
 80045da:	d00b      	beq.n	80045f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	4a25      	ldr	r2, [pc, #148]	; (8004678 <UART_AdvFeatureConfig+0x158>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	0019      	movs	r1, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	2240      	movs	r2, #64	; 0x40
 80045fa:	4013      	ands	r3, r2
 80045fc:	d01d      	beq.n	800463a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	4a1d      	ldr	r2, [pc, #116]	; (800467c <UART_AdvFeatureConfig+0x15c>)
 8004606:	4013      	ands	r3, r2
 8004608:	0019      	movs	r1, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800461a:	2380      	movs	r3, #128	; 0x80
 800461c:	035b      	lsls	r3, r3, #13
 800461e:	429a      	cmp	r2, r3
 8004620:	d10b      	bne.n	800463a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	4a15      	ldr	r2, [pc, #84]	; (8004680 <UART_AdvFeatureConfig+0x160>)
 800462a:	4013      	ands	r3, r2
 800462c:	0019      	movs	r1, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	2280      	movs	r2, #128	; 0x80
 8004640:	4013      	ands	r3, r2
 8004642:	d00b      	beq.n	800465c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	4a0e      	ldr	r2, [pc, #56]	; (8004684 <UART_AdvFeatureConfig+0x164>)
 800464c:	4013      	ands	r3, r2
 800464e:	0019      	movs	r1, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	605a      	str	r2, [r3, #4]
  }
}
 800465c:	46c0      	nop			; (mov r8, r8)
 800465e:	46bd      	mov	sp, r7
 8004660:	b002      	add	sp, #8
 8004662:	bd80      	pop	{r7, pc}
 8004664:	fffdffff 	.word	0xfffdffff
 8004668:	fffeffff 	.word	0xfffeffff
 800466c:	fffbffff 	.word	0xfffbffff
 8004670:	ffff7fff 	.word	0xffff7fff
 8004674:	ffffefff 	.word	0xffffefff
 8004678:	ffffdfff 	.word	0xffffdfff
 800467c:	ffefffff 	.word	0xffefffff
 8004680:	ff9fffff 	.word	0xff9fffff
 8004684:	fff7ffff 	.word	0xfff7ffff

08004688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b092      	sub	sp, #72	; 0x48
 800468c:	af02      	add	r7, sp, #8
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2284      	movs	r2, #132	; 0x84
 8004694:	2100      	movs	r1, #0
 8004696:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004698:	f7fc fd80 	bl	800119c <HAL_GetTick>
 800469c:	0003      	movs	r3, r0
 800469e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2208      	movs	r2, #8
 80046a8:	4013      	ands	r3, r2
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d12c      	bne.n	8004708 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b0:	2280      	movs	r2, #128	; 0x80
 80046b2:	0391      	lsls	r1, r2, #14
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	4a46      	ldr	r2, [pc, #280]	; (80047d0 <UART_CheckIdleState+0x148>)
 80046b8:	9200      	str	r2, [sp, #0]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f000 f88c 	bl	80047d8 <UART_WaitOnFlagUntilTimeout>
 80046c0:	1e03      	subs	r3, r0, #0
 80046c2:	d021      	beq.n	8004708 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046c4:	f3ef 8310 	mrs	r3, PRIMASK
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80046ce:	2301      	movs	r3, #1
 80046d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d4:	f383 8810 	msr	PRIMASK, r3
}
 80046d8:	46c0      	nop			; (mov r8, r8)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2180      	movs	r1, #128	; 0x80
 80046e6:	438a      	bics	r2, r1
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f0:	f383 8810 	msr	PRIMASK, r3
}
 80046f4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2278      	movs	r2, #120	; 0x78
 8004700:	2100      	movs	r1, #0
 8004702:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e05f      	b.n	80047c8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2204      	movs	r2, #4
 8004710:	4013      	ands	r3, r2
 8004712:	2b04      	cmp	r3, #4
 8004714:	d146      	bne.n	80047a4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004718:	2280      	movs	r2, #128	; 0x80
 800471a:	03d1      	lsls	r1, r2, #15
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	4a2c      	ldr	r2, [pc, #176]	; (80047d0 <UART_CheckIdleState+0x148>)
 8004720:	9200      	str	r2, [sp, #0]
 8004722:	2200      	movs	r2, #0
 8004724:	f000 f858 	bl	80047d8 <UART_WaitOnFlagUntilTimeout>
 8004728:	1e03      	subs	r3, r0, #0
 800472a:	d03b      	beq.n	80047a4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800472c:	f3ef 8310 	mrs	r3, PRIMASK
 8004730:	60fb      	str	r3, [r7, #12]
  return(result);
 8004732:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004734:	637b      	str	r3, [r7, #52]	; 0x34
 8004736:	2301      	movs	r3, #1
 8004738:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f383 8810 	msr	PRIMASK, r3
}
 8004740:	46c0      	nop			; (mov r8, r8)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4921      	ldr	r1, [pc, #132]	; (80047d4 <UART_CheckIdleState+0x14c>)
 800474e:	400a      	ands	r2, r1
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004754:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f383 8810 	msr	PRIMASK, r3
}
 800475c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800475e:	f3ef 8310 	mrs	r3, PRIMASK
 8004762:	61bb      	str	r3, [r7, #24]
  return(result);
 8004764:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004766:	633b      	str	r3, [r7, #48]	; 0x30
 8004768:	2301      	movs	r3, #1
 800476a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f383 8810 	msr	PRIMASK, r3
}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2101      	movs	r1, #1
 8004780:	438a      	bics	r2, r1
 8004782:	609a      	str	r2, [r3, #8]
 8004784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004786:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	f383 8810 	msr	PRIMASK, r3
}
 800478e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2280      	movs	r2, #128	; 0x80
 8004794:	2120      	movs	r1, #32
 8004796:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2278      	movs	r2, #120	; 0x78
 800479c:	2100      	movs	r1, #0
 800479e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e011      	b.n	80047c8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2280      	movs	r2, #128	; 0x80
 80047ae:	2120      	movs	r1, #32
 80047b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2278      	movs	r2, #120	; 0x78
 80047c2:	2100      	movs	r1, #0
 80047c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	0018      	movs	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	b010      	add	sp, #64	; 0x40
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	01ffffff 	.word	0x01ffffff
 80047d4:	fffffedf 	.word	0xfffffedf

080047d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	1dfb      	adds	r3, r7, #7
 80047e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e8:	e04b      	b.n	8004882 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	3301      	adds	r3, #1
 80047ee:	d048      	beq.n	8004882 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f0:	f7fc fcd4 	bl	800119c <HAL_GetTick>
 80047f4:	0002      	movs	r2, r0
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d302      	bcc.n	8004806 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e04b      	b.n	80048a2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2204      	movs	r2, #4
 8004812:	4013      	ands	r3, r2
 8004814:	d035      	beq.n	8004882 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	2208      	movs	r2, #8
 800481e:	4013      	ands	r3, r2
 8004820:	2b08      	cmp	r3, #8
 8004822:	d111      	bne.n	8004848 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2208      	movs	r2, #8
 800482a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	0018      	movs	r0, r3
 8004830:	f000 f83c 	bl	80048ac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2284      	movs	r2, #132	; 0x84
 8004838:	2108      	movs	r1, #8
 800483a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2278      	movs	r2, #120	; 0x78
 8004840:	2100      	movs	r1, #0
 8004842:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e02c      	b.n	80048a2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69da      	ldr	r2, [r3, #28]
 800484e:	2380      	movs	r3, #128	; 0x80
 8004850:	011b      	lsls	r3, r3, #4
 8004852:	401a      	ands	r2, r3
 8004854:	2380      	movs	r3, #128	; 0x80
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	429a      	cmp	r2, r3
 800485a:	d112      	bne.n	8004882 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2280      	movs	r2, #128	; 0x80
 8004862:	0112      	lsls	r2, r2, #4
 8004864:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	0018      	movs	r0, r3
 800486a:	f000 f81f 	bl	80048ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2284      	movs	r2, #132	; 0x84
 8004872:	2120      	movs	r1, #32
 8004874:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2278      	movs	r2, #120	; 0x78
 800487a:	2100      	movs	r1, #0
 800487c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e00f      	b.n	80048a2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	4013      	ands	r3, r2
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	425a      	negs	r2, r3
 8004892:	4153      	adcs	r3, r2
 8004894:	b2db      	uxtb	r3, r3
 8004896:	001a      	movs	r2, r3
 8004898:	1dfb      	adds	r3, r7, #7
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d0a4      	beq.n	80047ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	0018      	movs	r0, r3
 80048a4:	46bd      	mov	sp, r7
 80048a6:	b004      	add	sp, #16
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08e      	sub	sp, #56	; 0x38
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b4:	f3ef 8310 	mrs	r3, PRIMASK
 80048b8:	617b      	str	r3, [r7, #20]
  return(result);
 80048ba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048bc:	637b      	str	r3, [r7, #52]	; 0x34
 80048be:	2301      	movs	r3, #1
 80048c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	f383 8810 	msr	PRIMASK, r3
}
 80048c8:	46c0      	nop			; (mov r8, r8)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4926      	ldr	r1, [pc, #152]	; (8004970 <UART_EndRxTransfer+0xc4>)
 80048d6:	400a      	ands	r2, r1
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	f383 8810 	msr	PRIMASK, r3
}
 80048e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048e6:	f3ef 8310 	mrs	r3, PRIMASK
 80048ea:	623b      	str	r3, [r7, #32]
  return(result);
 80048ec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ee:	633b      	str	r3, [r7, #48]	; 0x30
 80048f0:	2301      	movs	r3, #1
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	f383 8810 	msr	PRIMASK, r3
}
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2101      	movs	r1, #1
 8004908:	438a      	bics	r2, r1
 800490a:	609a      	str	r2, [r3, #8]
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	f383 8810 	msr	PRIMASK, r3
}
 8004916:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491c:	2b01      	cmp	r3, #1
 800491e:	d118      	bne.n	8004952 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004920:	f3ef 8310 	mrs	r3, PRIMASK
 8004924:	60bb      	str	r3, [r7, #8]
  return(result);
 8004926:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800492a:	2301      	movs	r3, #1
 800492c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f383 8810 	msr	PRIMASK, r3
}
 8004934:	46c0      	nop			; (mov r8, r8)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2110      	movs	r1, #16
 8004942:	438a      	bics	r2, r1
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f383 8810 	msr	PRIMASK, r3
}
 8004950:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2280      	movs	r2, #128	; 0x80
 8004956:	2120      	movs	r1, #32
 8004958:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	46bd      	mov	sp, r7
 800496a:	b00e      	add	sp, #56	; 0x38
 800496c:	bd80      	pop	{r7, pc}
 800496e:	46c0      	nop			; (mov r8, r8)
 8004970:	fffffedf 	.word	0xfffffedf

08004974 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	225a      	movs	r2, #90	; 0x5a
 8004986:	2100      	movs	r1, #0
 8004988:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2252      	movs	r2, #82	; 0x52
 800498e:	2100      	movs	r1, #0
 8004990:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	0018      	movs	r0, r3
 8004996:	f7ff fb2b 	bl	8003ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	46bd      	mov	sp, r7
 800499e:	b004      	add	sp, #16
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b08a      	sub	sp, #40	; 0x28
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049ae:	2b21      	cmp	r3, #33	; 0x21
 80049b0:	d14c      	bne.n	8004a4c <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2252      	movs	r2, #82	; 0x52
 80049b6:	5a9b      	ldrh	r3, [r3, r2]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d132      	bne.n	8004a24 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049be:	f3ef 8310 	mrs	r3, PRIMASK
 80049c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80049c4:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24
 80049c8:	2301      	movs	r3, #1
 80049ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f383 8810 	msr	PRIMASK, r3
}
 80049d2:	46c0      	nop			; (mov r8, r8)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2180      	movs	r1, #128	; 0x80
 80049e0:	438a      	bics	r2, r1
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f383 8810 	msr	PRIMASK, r3
}
 80049ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049f0:	f3ef 8310 	mrs	r3, PRIMASK
 80049f4:	617b      	str	r3, [r7, #20]
  return(result);
 80049f6:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049f8:	623b      	str	r3, [r7, #32]
 80049fa:	2301      	movs	r3, #1
 80049fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	f383 8810 	msr	PRIMASK, r3
}
 8004a04:	46c0      	nop			; (mov r8, r8)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2140      	movs	r1, #64	; 0x40
 8004a12:	430a      	orrs	r2, r1
 8004a14:	601a      	str	r2, [r3, #0]
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	f383 8810 	msr	PRIMASK, r3
}
 8004a20:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004a22:	e013      	b.n	8004a4c <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a28:	781a      	ldrb	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2252      	movs	r2, #82	; 0x52
 8004a3e:	5a9b      	ldrh	r3, [r3, r2]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b299      	uxth	r1, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2252      	movs	r2, #82	; 0x52
 8004a4a:	5299      	strh	r1, [r3, r2]
}
 8004a4c:	46c0      	nop			; (mov r8, r8)
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	b00a      	add	sp, #40	; 0x28
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08c      	sub	sp, #48	; 0x30
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a60:	2b21      	cmp	r3, #33	; 0x21
 8004a62:	d151      	bne.n	8004b08 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2252      	movs	r2, #82	; 0x52
 8004a68:	5a9b      	ldrh	r3, [r3, r2]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d132      	bne.n	8004ad6 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a70:	f3ef 8310 	mrs	r3, PRIMASK
 8004a74:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a76:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f383 8810 	msr	PRIMASK, r3
}
 8004a84:	46c0      	nop			; (mov r8, r8)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2180      	movs	r1, #128	; 0x80
 8004a92:	438a      	bics	r2, r1
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f383 8810 	msr	PRIMASK, r3
}
 8004aa0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8004aa6:	61bb      	str	r3, [r7, #24]
  return(result);
 8004aa8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8004aac:	2301      	movs	r3, #1
 8004aae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f383 8810 	msr	PRIMASK, r3
}
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2140      	movs	r1, #64	; 0x40
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	f383 8810 	msr	PRIMASK, r3
}
 8004ad2:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004ad4:	e018      	b.n	8004b08 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ada:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	001a      	movs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	05d2      	lsls	r2, r2, #23
 8004ae8:	0dd2      	lsrs	r2, r2, #23
 8004aea:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af0:	1c9a      	adds	r2, r3, #2
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2252      	movs	r2, #82	; 0x52
 8004afa:	5a9b      	ldrh	r3, [r3, r2]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b299      	uxth	r1, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2252      	movs	r2, #82	; 0x52
 8004b06:	5299      	strh	r1, [r3, r2]
}
 8004b08:	46c0      	nop			; (mov r8, r8)
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	b00c      	add	sp, #48	; 0x30
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b18:	f3ef 8310 	mrs	r3, PRIMASK
 8004b1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b1e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b20:	617b      	str	r3, [r7, #20]
 8004b22:	2301      	movs	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f383 8810 	msr	PRIMASK, r3
}
 8004b2c:	46c0      	nop			; (mov r8, r8)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2140      	movs	r1, #64	; 0x40
 8004b3a:	438a      	bics	r2, r1
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f383 8810 	msr	PRIMASK, r3
}
 8004b48:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f7ff fa41 	bl	8003fe0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b5e:	46c0      	nop			; (mov r8, r8)
 8004b60:	46bd      	mov	sp, r7
 8004b62:	b006      	add	sp, #24
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b082      	sub	sp, #8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	46bd      	mov	sp, r7
 8004b72:	b002      	add	sp, #8
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <memset>:
 8004b76:	0003      	movs	r3, r0
 8004b78:	1882      	adds	r2, r0, r2
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d100      	bne.n	8004b80 <memset+0xa>
 8004b7e:	4770      	bx	lr
 8004b80:	7019      	strb	r1, [r3, #0]
 8004b82:	3301      	adds	r3, #1
 8004b84:	e7f9      	b.n	8004b7a <memset+0x4>
	...

08004b88 <__libc_init_array>:
 8004b88:	b570      	push	{r4, r5, r6, lr}
 8004b8a:	2600      	movs	r6, #0
 8004b8c:	4c0c      	ldr	r4, [pc, #48]	; (8004bc0 <__libc_init_array+0x38>)
 8004b8e:	4d0d      	ldr	r5, [pc, #52]	; (8004bc4 <__libc_init_array+0x3c>)
 8004b90:	1b64      	subs	r4, r4, r5
 8004b92:	10a4      	asrs	r4, r4, #2
 8004b94:	42a6      	cmp	r6, r4
 8004b96:	d109      	bne.n	8004bac <__libc_init_array+0x24>
 8004b98:	2600      	movs	r6, #0
 8004b9a:	f000 f819 	bl	8004bd0 <_init>
 8004b9e:	4c0a      	ldr	r4, [pc, #40]	; (8004bc8 <__libc_init_array+0x40>)
 8004ba0:	4d0a      	ldr	r5, [pc, #40]	; (8004bcc <__libc_init_array+0x44>)
 8004ba2:	1b64      	subs	r4, r4, r5
 8004ba4:	10a4      	asrs	r4, r4, #2
 8004ba6:	42a6      	cmp	r6, r4
 8004ba8:	d105      	bne.n	8004bb6 <__libc_init_array+0x2e>
 8004baa:	bd70      	pop	{r4, r5, r6, pc}
 8004bac:	00b3      	lsls	r3, r6, #2
 8004bae:	58eb      	ldr	r3, [r5, r3]
 8004bb0:	4798      	blx	r3
 8004bb2:	3601      	adds	r6, #1
 8004bb4:	e7ee      	b.n	8004b94 <__libc_init_array+0xc>
 8004bb6:	00b3      	lsls	r3, r6, #2
 8004bb8:	58eb      	ldr	r3, [r5, r3]
 8004bba:	4798      	blx	r3
 8004bbc:	3601      	adds	r6, #1
 8004bbe:	e7f2      	b.n	8004ba6 <__libc_init_array+0x1e>
 8004bc0:	08004c64 	.word	0x08004c64
 8004bc4:	08004c64 	.word	0x08004c64
 8004bc8:	08004c68 	.word	0x08004c68
 8004bcc:	08004c64 	.word	0x08004c64

08004bd0 <_init>:
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd6:	bc08      	pop	{r3}
 8004bd8:	469e      	mov	lr, r3
 8004bda:	4770      	bx	lr

08004bdc <_fini>:
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be2:	bc08      	pop	{r3}
 8004be4:	469e      	mov	lr, r3
 8004be6:	4770      	bx	lr
