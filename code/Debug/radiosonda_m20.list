
radiosonda_m20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000549c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  0800555c  0800555c  0000655c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005794  08005794  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005794  08005794  00006794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800579c  0800579c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800579c  0800579c  0000679c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057a0  080057a0  000067a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080057a4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000778  2000005c  08005800  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007d4  08005800  000077d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfca  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000251f  00000000  00000000  0001504e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00017570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c1  00000000  00000000  00018128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013968  00000000  00000000  00018ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ebd4  00000000  00000000  0002c451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007467f  00000000  00000000  0003b025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af6a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e8c  00000000  00000000  000af6e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000b2574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005544 	.word	0x08005544

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08005544 	.word	0x08005544

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8d8 	bl	80004a4 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8d3 	bl	80004a4 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzsi2>:
 8000468:	211c      	movs	r1, #28
 800046a:	2301      	movs	r3, #1
 800046c:	041b      	lsls	r3, r3, #16
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__clzsi2+0xe>
 8000472:	0c00      	lsrs	r0, r0, #16
 8000474:	3910      	subs	r1, #16
 8000476:	0a1b      	lsrs	r3, r3, #8
 8000478:	4298      	cmp	r0, r3
 800047a:	d301      	bcc.n	8000480 <__clzsi2+0x18>
 800047c:	0a00      	lsrs	r0, r0, #8
 800047e:	3908      	subs	r1, #8
 8000480:	091b      	lsrs	r3, r3, #4
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0x22>
 8000486:	0900      	lsrs	r0, r0, #4
 8000488:	3904      	subs	r1, #4
 800048a:	a202      	add	r2, pc, #8	@ (adr r2, 8000494 <__clzsi2+0x2c>)
 800048c:	5c10      	ldrb	r0, [r2, r0]
 800048e:	1840      	adds	r0, r0, r1
 8000490:	4770      	bx	lr
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	02020304 	.word	0x02020304
 8000498:	01010101 	.word	0x01010101
	...

080004a4 <__clzdi2>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	2900      	cmp	r1, #0
 80004a8:	d103      	bne.n	80004b2 <__clzdi2+0xe>
 80004aa:	f7ff ffdd 	bl	8000468 <__clzsi2>
 80004ae:	3020      	adds	r0, #32
 80004b0:	e002      	b.n	80004b8 <__clzdi2+0x14>
 80004b2:	0008      	movs	r0, r1
 80004b4:	f7ff ffd8 	bl	8000468 <__clzsi2>
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <SPI_RW>:

/**
  * @brief  SPI_RW
  */
uint8_t SPI_RW(uint8_t sendByte )
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	0002      	movs	r2, r0
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	701a      	strb	r2, [r3, #0]



  while ((SPI1->SR & SPI_FLAG_TXE) == (uint8_t)RESET);
 80004c8:	46c0      	nop			@ (mov r8, r8)
 80004ca:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <SPI_RW+0x3c>)
 80004cc:	689b      	ldr	r3, [r3, #8]
 80004ce:	2202      	movs	r2, #2
 80004d0:	4013      	ands	r3, r2
 80004d2:	d0fa      	beq.n	80004ca <SPI_RW+0xe>
  SPI1->DR = sendByte;
 80004d4:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <SPI_RW+0x3c>)
 80004d6:	1dfa      	adds	r2, r7, #7
 80004d8:	7812      	ldrb	r2, [r2, #0]
 80004da:	60da      	str	r2, [r3, #12]
  //HAL_Delay(10);
  while ((SPI1->SR & SPI_FLAG_RXNE) == (uint8_t)RESET);
 80004dc:	46c0      	nop			@ (mov r8, r8)
 80004de:	4b06      	ldr	r3, [pc, #24]	@ (80004f8 <SPI_RW+0x3c>)
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	2201      	movs	r2, #1
 80004e4:	4013      	ands	r3, r2
 80004e6:	d0fa      	beq.n	80004de <SPI_RW+0x22>
  return SPI1->DR;
 80004e8:	4b03      	ldr	r3, [pc, #12]	@ (80004f8 <SPI_RW+0x3c>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	b2db      	uxtb	r3, r3


}
 80004ee:	0018      	movs	r0, r3
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b002      	add	sp, #8
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)
 80004f8:	40013000 	.word	0x40013000

080004fc <LPS22_WriteReg>:

void LPS22_WriteReg( uint8_t writeAddr, uint8_t writeData )
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	0002      	movs	r2, r0
 8000504:	1dfb      	adds	r3, r7, #7
 8000506:	701a      	strb	r2, [r3, #0]
 8000508:	1dbb      	adds	r3, r7, #6
 800050a:	1c0a      	adds	r2, r1, #0
 800050c:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LPS_CS_GPIO_Port, LPS_CS_Pin, 0);
 800050e:	23a0      	movs	r3, #160	@ 0xa0
 8000510:	05db      	lsls	r3, r3, #23
 8000512:	2200      	movs	r2, #0
 8000514:	2110      	movs	r1, #16
 8000516:	0018      	movs	r0, r3
 8000518:	f001 fe36 	bl	8002188 <HAL_GPIO_WritePin>
  SPI_RW(writeAddr);
 800051c:	1dfb      	adds	r3, r7, #7
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	0018      	movs	r0, r3
 8000522:	f7ff ffcb 	bl	80004bc <SPI_RW>
  SPI_RW(writeData);
 8000526:	1dbb      	adds	r3, r7, #6
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	0018      	movs	r0, r3
 800052c:	f7ff ffc6 	bl	80004bc <SPI_RW>
  HAL_GPIO_WritePin(LPS_CS_GPIO_Port, LPS_CS_Pin, 1);
 8000530:	23a0      	movs	r3, #160	@ 0xa0
 8000532:	05db      	lsls	r3, r3, #23
 8000534:	2201      	movs	r2, #1
 8000536:	2110      	movs	r1, #16
 8000538:	0018      	movs	r0, r3
 800053a:	f001 fe25 	bl	8002188 <HAL_GPIO_WritePin>
}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b002      	add	sp, #8
 8000544:	bd80      	pop	{r7, pc}

08000546 <LPS22_ReadReg>:

/**
 *  @brief  LPS22_ReadReg
 */
uint8_t LPS22_ReadReg( uint8_t readAddr )
{
 8000546:	b5b0      	push	{r4, r5, r7, lr}
 8000548:	b084      	sub	sp, #16
 800054a:	af00      	add	r7, sp, #0
 800054c:	0002      	movs	r2, r0
 800054e:	1dfb      	adds	r3, r7, #7
 8000550:	701a      	strb	r2, [r3, #0]
  uint8_t readData;

  HAL_GPIO_WritePin(LPS_CS_GPIO_Port, LPS_CS_Pin, 0);
 8000552:	23a0      	movs	r3, #160	@ 0xa0
 8000554:	05db      	lsls	r3, r3, #23
 8000556:	2200      	movs	r2, #0
 8000558:	2110      	movs	r1, #16
 800055a:	0018      	movs	r0, r3
 800055c:	f001 fe14 	bl	8002188 <HAL_GPIO_WritePin>
  SPI_RW(0x80 | readAddr);
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2280      	movs	r2, #128	@ 0x80
 8000566:	4252      	negs	r2, r2
 8000568:	4313      	orrs	r3, r2
 800056a:	b2db      	uxtb	r3, r3
 800056c:	0018      	movs	r0, r3
 800056e:	f7ff ffa5 	bl	80004bc <SPI_RW>
  readData = SPI_RW(0x00);
 8000572:	250f      	movs	r5, #15
 8000574:	197c      	adds	r4, r7, r5
 8000576:	2000      	movs	r0, #0
 8000578:	f7ff ffa0 	bl	80004bc <SPI_RW>
 800057c:	0003      	movs	r3, r0
 800057e:	7023      	strb	r3, [r4, #0]
  HAL_GPIO_WritePin(LPS_CS_GPIO_Port, LPS_CS_Pin, 1);
 8000580:	23a0      	movs	r3, #160	@ 0xa0
 8000582:	05db      	lsls	r3, r3, #23
 8000584:	2201      	movs	r2, #1
 8000586:	2110      	movs	r1, #16
 8000588:	0018      	movs	r0, r3
 800058a:	f001 fdfd 	bl	8002188 <HAL_GPIO_WritePin>

  return readData;
 800058e:	197b      	adds	r3, r7, r5
 8000590:	781b      	ldrb	r3, [r3, #0]
}
 8000592:	0018      	movs	r0, r3
 8000594:	46bd      	mov	sp, r7
 8000596:	b004      	add	sp, #16
 8000598:	bdb0      	pop	{r4, r5, r7, pc}

0800059a <LPS22_Config>:

/**
 *  @brief  LPS22_Config
 */
void LPS22_Config( void )
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LPS_CS_GPIO_Port, LPS_CS_Pin, 1);    // LOW ENABLE
 800059e:	23a0      	movs	r3, #160	@ 0xa0
 80005a0:	05db      	lsls	r3, r3, #23
 80005a2:	2201      	movs	r2, #1
 80005a4:	2110      	movs	r1, #16
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 fdee 	bl	8002188 <HAL_GPIO_WritePin>
}
 80005ac:	46c0      	nop			@ (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <LPS22_Init>:


//#define LPS22HB_InitRegNum    5
uint8_t LPS22_Init( void )
{
 80005b2:	b590      	push	{r4, r7, lr}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
  uint8_t treg = 0;
 80005b8:	1dfb      	adds	r3, r7, #7
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
//    {0x00, MPU6500_CONFIG},         /* [8]  default : GyrLPS_250Hz        */
//    {0x00, MPU6500_ACCEL_CONFIG_2}, /* [9]  default : AccLPS_460Hz        */
//    {0x30, MPU6500_USER_CTRL},      /* [10] Set I2C_MST_EN, I2C_IF_DIS    */
//  };

  if (LPS22_DeviceCheck() != SUCCESS) {
 80005be:	f000 f859 	bl	8000674 <LPS22_DeviceCheck>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <LPS22_Init+0x18>
    return ERROR;
 80005c6:	2301      	movs	r3, #1
 80005c8:	e050      	b.n	800066c <LPS22_Init+0xba>
  }

  /* Normal mode (low-noise mode) */
  treg = LPS22_ReadReg(LPS22HB_RES_CONF);
 80005ca:	1dfc      	adds	r4, r7, #7
 80005cc:	201a      	movs	r0, #26
 80005ce:	f7ff ffba 	bl	8000546 <LPS22_ReadReg>
 80005d2:	0003      	movs	r3, r0
 80005d4:	7023      	strb	r3, [r4, #0]
  treg &= 0x02;
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	1dfa      	adds	r2, r7, #7
 80005da:	7812      	ldrb	r2, [r2, #0]
 80005dc:	2102      	movs	r1, #2
 80005de:	400a      	ands	r2, r1
 80005e0:	701a      	strb	r2, [r3, #0]
  treg |= 0x00;
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	1dfa      	adds	r2, r7, #7
 80005e6:	7812      	ldrb	r2, [r2, #0]
 80005e8:	701a      	strb	r2, [r3, #0]
  LPS22_WriteReg(LPS22HB_RES_CONF, treg);
 80005ea:	1dfb      	adds	r3, r7, #7
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	0019      	movs	r1, r3
 80005f0:	201a      	movs	r0, #26
 80005f2:	f7ff ff83 	bl	80004fc <LPS22_WriteReg>
  HAL_Delay(5);
 80005f6:	2005      	movs	r0, #5
 80005f8:	f000 ff86 	bl	8001508 <HAL_Delay>

  /* Control register 1 */
  treg  = 0x00;
 80005fc:	1dfb      	adds	r3, r7, #7
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
  treg |= 0x50; // Output data rate, 75 Hz
 8000602:	1dfb      	adds	r3, r7, #7
 8000604:	1dfa      	adds	r2, r7, #7
 8000606:	7812      	ldrb	r2, [r2, #0]
 8000608:	2150      	movs	r1, #80	@ 0x50
 800060a:	430a      	orrs	r2, r1
 800060c:	701a      	strb	r2, [r3, #0]
  treg |= 0x00; // Low-pass filter disabled
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	1dfa      	adds	r2, r7, #7
 8000612:	7812      	ldrb	r2, [r2, #0]
 8000614:	701a      	strb	r2, [r3, #0]
  treg |= 0x02; // Block data update, enable
 8000616:	1dfb      	adds	r3, r7, #7
 8000618:	1dfa      	adds	r2, r7, #7
 800061a:	7812      	ldrb	r2, [r2, #0]
 800061c:	2102      	movs	r1, #2
 800061e:	430a      	orrs	r2, r1
 8000620:	701a      	strb	r2, [r3, #0]
  LPS22_WriteReg(LPS22HB_CTRL_REG1, treg);
 8000622:	1dfb      	adds	r3, r7, #7
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	0019      	movs	r1, r3
 8000628:	2010      	movs	r0, #16
 800062a:	f7ff ff67 	bl	80004fc <LPS22_WriteReg>
  HAL_Delay(5);
 800062e:	2005      	movs	r0, #5
 8000630:	f000 ff6a 	bl	8001508 <HAL_Delay>

  /* Control register 2 */
  treg = LPS22_ReadReg(LPS22HB_CTRL_REG2);
 8000634:	1dfc      	adds	r4, r7, #7
 8000636:	2011      	movs	r0, #17
 8000638:	f7ff ff85 	bl	8000546 <LPS22_ReadReg>
 800063c:	0003      	movs	r3, r0
 800063e:	7023      	strb	r3, [r4, #0]
  treg &= 0xED;
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	1dfa      	adds	r2, r7, #7
 8000644:	7812      	ldrb	r2, [r2, #0]
 8000646:	2112      	movs	r1, #18
 8000648:	438a      	bics	r2, r1
 800064a:	701a      	strb	r2, [r3, #0]
  treg |= 0x10;
 800064c:	1dfb      	adds	r3, r7, #7
 800064e:	1dfa      	adds	r2, r7, #7
 8000650:	7812      	ldrb	r2, [r2, #0]
 8000652:	2110      	movs	r1, #16
 8000654:	430a      	orrs	r2, r1
 8000656:	701a      	strb	r2, [r3, #0]
  LPS22_WriteReg(LPS22HB_RES_CONF, treg);
 8000658:	1dfb      	adds	r3, r7, #7
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	0019      	movs	r1, r3
 800065e:	201a      	movs	r0, #26
 8000660:	f7ff ff4c 	bl	80004fc <LPS22_WriteReg>
  HAL_Delay(5);
 8000664:	2005      	movs	r0, #5
 8000666:	f000 ff4f 	bl	8001508 <HAL_Delay>

  return SUCCESS;
 800066a:	2300      	movs	r3, #0
}
 800066c:	0018      	movs	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	b003      	add	sp, #12
 8000672:	bd90      	pop	{r4, r7, pc}

08000674 <LPS22_DeviceCheck>:

/**
 *  @brief  LPS22_DeviceCheck
 */
uint8_t LPS22_DeviceCheck( void )
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
  uint8_t deviceID;

  deviceID = LPS22_ReadReg(LPS22HB_WHO_AM_I);
 800067a:	1dfc      	adds	r4, r7, #7
 800067c:	200f      	movs	r0, #15
 800067e:	f7ff ff62 	bl	8000546 <LPS22_ReadReg>
 8000682:	0003      	movs	r3, r0
 8000684:	7023      	strb	r3, [r4, #0]

  if (deviceID != LPS22HB_DEVICE_ID) {
 8000686:	1dfb      	adds	r3, r7, #7
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2bb1      	cmp	r3, #177	@ 0xb1
 800068c:	d001      	beq.n	8000692 <LPS22_DeviceCheck+0x1e>
    return ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	e000      	b.n	8000694 <LPS22_DeviceCheck+0x20>
  }

  return SUCCESS;
 8000692:	2300      	movs	r3, #0
}
 8000694:	0018      	movs	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	b003      	add	sp, #12
 800069a:	bd90      	pop	{r4, r7, pc}

0800069c <HAL_UART_RxCpltCallback>:
uint8_t size = 0;
uint16_t count = 0;
uint16_t c = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	data[count] = onebyte[0];
 80006a4:	4b4b      	ldr	r3, [pc, #300]	@ (80007d4 <HAL_UART_RxCpltCallback+0x138>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	001a      	movs	r2, r3
 80006aa:	4b4b      	ldr	r3, [pc, #300]	@ (80007d8 <HAL_UART_RxCpltCallback+0x13c>)
 80006ac:	7819      	ldrb	r1, [r3, #0]
 80006ae:	4b4b      	ldr	r3, [pc, #300]	@ (80007dc <HAL_UART_RxCpltCallback+0x140>)
 80006b0:	5499      	strb	r1, [r3, r2]
	count++;
 80006b2:	4b48      	ldr	r3, [pc, #288]	@ (80007d4 <HAL_UART_RxCpltCallback+0x138>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	3301      	adds	r3, #1
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	4b46      	ldr	r3, [pc, #280]	@ (80007d4 <HAL_UART_RxCpltCallback+0x138>)
 80006bc:	801a      	strh	r2, [r3, #0]
	onebyte[0] = 0;
 80006be:	4b46      	ldr	r3, [pc, #280]	@ (80007d8 <HAL_UART_RxCpltCallback+0x13c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006c4:	2380      	movs	r3, #128	@ 0x80
 80006c6:	01db      	lsls	r3, r3, #7
 80006c8:	4a45      	ldr	r2, [pc, #276]	@ (80007e0 <HAL_UART_RxCpltCallback+0x144>)
 80006ca:	0019      	movs	r1, r3
 80006cc:	0010      	movs	r0, r2
 80006ce:	f001 fd78 	bl	80021c2 <HAL_GPIO_TogglePin>
	if(huart == &hlpuart1){
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	4b43      	ldr	r3, [pc, #268]	@ (80007e4 <HAL_UART_RxCpltCallback+0x148>)
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d000      	beq.n	80006dc <HAL_UART_RxCpltCallback+0x40>
 80006da:	e070      	b.n	80007be <HAL_UART_RxCpltCallback+0x122>
		if(flags == 1){}else if(data[count-2] == '\r' && data[count-1] == '\n'){
 80006dc:	4b42      	ldr	r3, [pc, #264]	@ (80007e8 <HAL_UART_RxCpltCallback+0x14c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d100      	bne.n	80006e6 <HAL_UART_RxCpltCallback+0x4a>
 80006e4:	e06b      	b.n	80007be <HAL_UART_RxCpltCallback+0x122>
 80006e6:	4b3b      	ldr	r3, [pc, #236]	@ (80007d4 <HAL_UART_RxCpltCallback+0x138>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	3b02      	subs	r3, #2
 80006ec:	4a3b      	ldr	r2, [pc, #236]	@ (80007dc <HAL_UART_RxCpltCallback+0x140>)
 80006ee:	5cd3      	ldrb	r3, [r2, r3]
 80006f0:	2b0d      	cmp	r3, #13
 80006f2:	d15e      	bne.n	80007b2 <HAL_UART_RxCpltCallback+0x116>
 80006f4:	4b37      	ldr	r3, [pc, #220]	@ (80007d4 <HAL_UART_RxCpltCallback+0x138>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	3b01      	subs	r3, #1
 80006fa:	4a38      	ldr	r2, [pc, #224]	@ (80007dc <HAL_UART_RxCpltCallback+0x140>)
 80006fc:	5cd3      	ldrb	r3, [r2, r3]
 80006fe:	2b0a      	cmp	r3, #10
 8000700:	d157      	bne.n	80007b2 <HAL_UART_RxCpltCallback+0x116>
			for(c = 0; c<count-1; c++){
 8000702:	4b3a      	ldr	r3, [pc, #232]	@ (80007ec <HAL_UART_RxCpltCallback+0x150>)
 8000704:	2200      	movs	r2, #0
 8000706:	801a      	strh	r2, [r3, #0]
 8000708:	e00f      	b.n	800072a <HAL_UART_RxCpltCallback+0x8e>
				data[c]=data[c+1];
 800070a:	4b38      	ldr	r3, [pc, #224]	@ (80007ec <HAL_UART_RxCpltCallback+0x150>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	3301      	adds	r3, #1
 8000710:	4a36      	ldr	r2, [pc, #216]	@ (80007ec <HAL_UART_RxCpltCallback+0x150>)
 8000712:	8812      	ldrh	r2, [r2, #0]
 8000714:	0011      	movs	r1, r2
 8000716:	4a31      	ldr	r2, [pc, #196]	@ (80007dc <HAL_UART_RxCpltCallback+0x140>)
 8000718:	5cd2      	ldrb	r2, [r2, r3]
 800071a:	4b30      	ldr	r3, [pc, #192]	@ (80007dc <HAL_UART_RxCpltCallback+0x140>)
 800071c:	545a      	strb	r2, [r3, r1]
			for(c = 0; c<count-1; c++){
 800071e:	4b33      	ldr	r3, [pc, #204]	@ (80007ec <HAL_UART_RxCpltCallback+0x150>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	3301      	adds	r3, #1
 8000724:	b29a      	uxth	r2, r3
 8000726:	4b31      	ldr	r3, [pc, #196]	@ (80007ec <HAL_UART_RxCpltCallback+0x150>)
 8000728:	801a      	strh	r2, [r3, #0]
 800072a:	4b30      	ldr	r3, [pc, #192]	@ (80007ec <HAL_UART_RxCpltCallback+0x150>)
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	001a      	movs	r2, r3
 8000730:	4b28      	ldr	r3, [pc, #160]	@ (80007d4 <HAL_UART_RxCpltCallback+0x138>)
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	3b01      	subs	r3, #1
 8000736:	429a      	cmp	r2, r3
 8000738:	dbe7      	blt.n	800070a <HAL_UART_RxCpltCallback+0x6e>
			}
			HAL_UART_Transmit(&huart1, data, count, 100);
 800073a:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <HAL_UART_RxCpltCallback+0x138>)
 800073c:	881a      	ldrh	r2, [r3, #0]
 800073e:	4927      	ldr	r1, [pc, #156]	@ (80007dc <HAL_UART_RxCpltCallback+0x140>)
 8000740:	482b      	ldr	r0, [pc, #172]	@ (80007f0 <HAL_UART_RxCpltCallback+0x154>)
 8000742:	2364      	movs	r3, #100	@ 0x64
 8000744:	f002 fdb6 	bl	80032b4 <HAL_UART_Transmit>
			size = sprintf(txt, "GOT: %p\n\r", minmea_check(((char*)data), false));
 8000748:	4b24      	ldr	r3, [pc, #144]	@ (80007dc <HAL_UART_RxCpltCallback+0x140>)
 800074a:	2100      	movs	r1, #0
 800074c:	0018      	movs	r0, r3
 800074e:	f000 fbdd 	bl	8000f0c <minmea_check>
 8000752:	0003      	movs	r3, r0
 8000754:	001a      	movs	r2, r3
 8000756:	4927      	ldr	r1, [pc, #156]	@ (80007f4 <HAL_UART_RxCpltCallback+0x158>)
 8000758:	4b27      	ldr	r3, [pc, #156]	@ (80007f8 <HAL_UART_RxCpltCallback+0x15c>)
 800075a:	0018      	movs	r0, r3
 800075c:	f004 fa54 	bl	8004c08 <siprintf>
 8000760:	0003      	movs	r3, r0
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b25      	ldr	r3, [pc, #148]	@ (80007fc <HAL_UART_RxCpltCallback+0x160>)
 8000766:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, txt, size, 100);
 8000768:	4b24      	ldr	r3, [pc, #144]	@ (80007fc <HAL_UART_RxCpltCallback+0x160>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	001a      	movs	r2, r3
 800076e:	4922      	ldr	r1, [pc, #136]	@ (80007f8 <HAL_UART_RxCpltCallback+0x15c>)
 8000770:	481f      	ldr	r0, [pc, #124]	@ (80007f0 <HAL_UART_RxCpltCallback+0x154>)
 8000772:	2364      	movs	r3, #100	@ 0x64
 8000774:	f002 fd9e 	bl	80032b4 <HAL_UART_Transmit>
			for(count = 0; count<1000; count++){
 8000778:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <HAL_UART_RxCpltCallback+0x138>)
 800077a:	2200      	movs	r2, #0
 800077c:	801a      	strh	r2, [r3, #0]
 800077e:	e00b      	b.n	8000798 <HAL_UART_RxCpltCallback+0xfc>
				data[count]=0;
 8000780:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <HAL_UART_RxCpltCallback+0x138>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	001a      	movs	r2, r3
 8000786:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <HAL_UART_RxCpltCallback+0x140>)
 8000788:	2100      	movs	r1, #0
 800078a:	5499      	strb	r1, [r3, r2]
			for(count = 0; count<1000; count++){
 800078c:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <HAL_UART_RxCpltCallback+0x138>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	b29a      	uxth	r2, r3
 8000794:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <HAL_UART_RxCpltCallback+0x138>)
 8000796:	801a      	strh	r2, [r3, #0]
 8000798:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <HAL_UART_RxCpltCallback+0x138>)
 800079a:	881a      	ldrh	r2, [r3, #0]
 800079c:	23fa      	movs	r3, #250	@ 0xfa
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d3ed      	bcc.n	8000780 <HAL_UART_RxCpltCallback+0xe4>
			}
			count = 0;
 80007a4:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <HAL_UART_RxCpltCallback+0x138>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	801a      	strh	r2, [r3, #0]
			flags = 1;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <HAL_UART_RxCpltCallback+0x14c>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
 80007b0:	e005      	b.n	80007be <HAL_UART_RxCpltCallback+0x122>
		}else{
			HAL_UART_Receive_IT(&hlpuart1, onebyte, 1);
 80007b2:	4909      	ldr	r1, [pc, #36]	@ (80007d8 <HAL_UART_RxCpltCallback+0x13c>)
 80007b4:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <HAL_UART_RxCpltCallback+0x148>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	0018      	movs	r0, r3
 80007ba:	f002 fe8b 	bl	80034d4 <HAL_UART_Receive_IT>

		}
	}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80007be:	2380      	movs	r3, #128	@ 0x80
 80007c0:	01db      	lsls	r3, r3, #7
 80007c2:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <HAL_UART_RxCpltCallback+0x144>)
 80007c4:	0019      	movs	r1, r3
 80007c6:	0010      	movs	r0, r2
 80007c8:	f001 fcfb 	bl	80021c2 <HAL_GPIO_TogglePin>
}
 80007cc:	46c0      	nop			@ (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b002      	add	sp, #8
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000680 	.word	0x20000680
 80007d8:	20000288 	.word	0x20000288
 80007dc:	2000028c 	.word	0x2000028c
 80007e0:	50000800 	.word	0x50000800
 80007e4:	200000d4 	.word	0x200000d4
 80007e8:	20000284 	.word	0x20000284
 80007ec:	20000682 	.word	0x20000682
 80007f0:	2000015c 	.word	0x2000015c
 80007f4:	0800555c 	.word	0x0800555c
 80007f8:	20000674 	.word	0x20000674
 80007fc:	2000067e 	.word	0x2000067e

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000804:	f000 fe10 	bl	8001428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000808:	f000 f898 	bl	800093c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080c:	f000 fa4a 	bl	8000ca4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000810:	f000 fa2a 	bl	8000c68 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000814:	f000 f992 	bl	8000b3c <MX_LPUART1_UART_Init>
  MX_ADC_Init();
 8000818:	f000 f90c 	bl	8000a34 <MX_ADC_Init>
  MX_USART1_UART_Init();
 800081c:	f000 f9bc 	bl	8000b98 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000820:	f000 f9ea 	bl	8000bf8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000824:	2380      	movs	r3, #128	@ 0x80
 8000826:	01db      	lsls	r3, r3, #7
 8000828:	4a35      	ldr	r2, [pc, #212]	@ (8000900 <main+0x100>)
 800082a:	0019      	movs	r1, r3
 800082c:	0010      	movs	r0, r2
 800082e:	f001 fcc8 	bl	80021c2 <HAL_GPIO_TogglePin>
  	HAL_UART_Transmit(&huart1, (uint8_t*)&"Starting firmware...\r\n", 22, 10);
 8000832:	4934      	ldr	r1, [pc, #208]	@ (8000904 <main+0x104>)
 8000834:	4834      	ldr	r0, [pc, #208]	@ (8000908 <main+0x108>)
 8000836:	230a      	movs	r3, #10
 8000838:	2216      	movs	r2, #22
 800083a:	f002 fd3b 	bl	80032b4 <HAL_UART_Transmit>

  	HAL_UART_Transmit(&huart1, (uint8_t*)&"Enabling DC boost...\r\n", 22, 10);
 800083e:	4933      	ldr	r1, [pc, #204]	@ (800090c <main+0x10c>)
 8000840:	4831      	ldr	r0, [pc, #196]	@ (8000908 <main+0x108>)
 8000842:	230a      	movs	r3, #10
 8000844:	2216      	movs	r2, #22
 8000846:	f002 fd35 	bl	80032b4 <HAL_UART_Transmit>
  	HAL_GPIO_WritePin(DC_boost_GPIO_Port, DC_boost_Pin, GPIO_PIN_SET);
 800084a:	2380      	movs	r3, #128	@ 0x80
 800084c:	0159      	lsls	r1, r3, #5
 800084e:	23a0      	movs	r3, #160	@ 0xa0
 8000850:	05db      	lsls	r3, r3, #23
 8000852:	2201      	movs	r2, #1
 8000854:	0018      	movs	r0, r3
 8000856:	f001 fc97 	bl	8002188 <HAL_GPIO_WritePin>

  	HAL_UART_Transmit(&huart1, (uint8_t*)&"Enabling GPS...\r\n", 17, 10);
 800085a:	492d      	ldr	r1, [pc, #180]	@ (8000910 <main+0x110>)
 800085c:	482a      	ldr	r0, [pc, #168]	@ (8000908 <main+0x108>)
 800085e:	230a      	movs	r3, #10
 8000860:	2211      	movs	r2, #17
 8000862:	f002 fd27 	bl	80032b4 <HAL_UART_Transmit>
  	HAL_GPIO_WritePin(GPS_ON_GPIO_Port, GPS_ON_Pin, GPIO_PIN_SET);
 8000866:	2380      	movs	r3, #128	@ 0x80
 8000868:	01db      	lsls	r3, r3, #7
 800086a:	482a      	ldr	r0, [pc, #168]	@ (8000914 <main+0x114>)
 800086c:	2201      	movs	r2, #1
 800086e:	0019      	movs	r1, r3
 8000870:	f001 fc8a 	bl	8002188 <HAL_GPIO_WritePin>
  	HAL_UART_Transmit(&huart1, (uint8_t*)&"Enabling RADIO...\r\n", 19, 10);
 8000874:	4928      	ldr	r1, [pc, #160]	@ (8000918 <main+0x118>)
 8000876:	4824      	ldr	r0, [pc, #144]	@ (8000908 <main+0x108>)
 8000878:	230a      	movs	r3, #10
 800087a:	2213      	movs	r2, #19
 800087c:	f002 fd1a 	bl	80032b4 <HAL_UART_Transmit>
  	HAL_GPIO_WritePin(RADIO_EN_GPIO_Port, RADIO_EN_Pin, GPIO_PIN_SET);
 8000880:	2380      	movs	r3, #128	@ 0x80
 8000882:	021b      	lsls	r3, r3, #8
 8000884:	4823      	ldr	r0, [pc, #140]	@ (8000914 <main+0x114>)
 8000886:	2201      	movs	r2, #1
 8000888:	0019      	movs	r1, r3
 800088a:	f001 fc7d 	bl	8002188 <HAL_GPIO_WritePin>
  	HAL_UART_Transmit(&huart1, (uint8_t*)&"Initialising LPS22...", 21, 10);
 800088e:	4923      	ldr	r1, [pc, #140]	@ (800091c <main+0x11c>)
 8000890:	481d      	ldr	r0, [pc, #116]	@ (8000908 <main+0x108>)
 8000892:	230a      	movs	r3, #10
 8000894:	2215      	movs	r2, #21
 8000896:	f002 fd0d 	bl	80032b4 <HAL_UART_Transmit>
    __HAL_SPI_ENABLE(&hspi1);
 800089a:	4b21      	ldr	r3, [pc, #132]	@ (8000920 <main+0x120>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <main+0x120>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2140      	movs	r1, #64	@ 0x40
 80008a6:	430a      	orrs	r2, r1
 80008a8:	601a      	str	r2, [r3, #0]
    LPS22_Config();
 80008aa:	f7ff fe76 	bl	800059a <LPS22_Config>
    if ( LPS22_Init()!=0)
 80008ae:	f7ff fe80 	bl	80005b2 <LPS22_Init>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d006      	beq.n	80008c4 <main+0xc4>
    {
    	HAL_UART_Transmit_IT(&huart1, "FAIL\r\n", 6);
 80008b6:	491b      	ldr	r1, [pc, #108]	@ (8000924 <main+0x124>)
 80008b8:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <main+0x108>)
 80008ba:	2206      	movs	r2, #6
 80008bc:	0018      	movs	r0, r3
 80008be:	f002 fd99 	bl	80033f4 <HAL_UART_Transmit_IT>
 80008c2:	e005      	b.n	80008d0 <main+0xd0>
    }
    else
    {
    	HAL_UART_Transmit_IT(&huart1, "OK\r\n", 4);
 80008c4:	4918      	ldr	r1, [pc, #96]	@ (8000928 <main+0x128>)
 80008c6:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <main+0x108>)
 80008c8:	2204      	movs	r2, #4
 80008ca:	0018      	movs	r0, r3
 80008cc:	f002 fd92 	bl	80033f4 <HAL_UART_Transmit_IT>
    }
    HAL_UART_Transmit(&huart1, (uint8_t*)&"STARTED\r\n", 9, 10);
 80008d0:	4916      	ldr	r1, [pc, #88]	@ (800092c <main+0x12c>)
 80008d2:	480d      	ldr	r0, [pc, #52]	@ (8000908 <main+0x108>)
 80008d4:	230a      	movs	r3, #10
 80008d6:	2209      	movs	r2, #9
 80008d8:	f002 fcec 	bl	80032b4 <HAL_UART_Transmit>
  	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80008dc:	2380      	movs	r3, #128	@ 0x80
 80008de:	01db      	lsls	r3, r3, #7
 80008e0:	4a07      	ldr	r2, [pc, #28]	@ (8000900 <main+0x100>)
 80008e2:	0019      	movs	r1, r3
 80008e4:	0010      	movs	r0, r2
 80008e6:	f001 fc6c 	bl	80021c2 <HAL_GPIO_TogglePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  flags = 0;
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <main+0x130>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
	  	HAL_UART_Receive_IT(&hlpuart1, onebyte, 1);
 80008f0:	4910      	ldr	r1, [pc, #64]	@ (8000934 <main+0x134>)
 80008f2:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <main+0x138>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	0018      	movs	r0, r3
 80008f8:	f002 fdec 	bl	80034d4 <HAL_UART_Receive_IT>
	  flags = 0;
 80008fc:	46c0      	nop			@ (mov r8, r8)
 80008fe:	e7f4      	b.n	80008ea <main+0xea>
 8000900:	50000800 	.word	0x50000800
 8000904:	08005568 	.word	0x08005568
 8000908:	2000015c 	.word	0x2000015c
 800090c:	08005580 	.word	0x08005580
 8000910:	08005598 	.word	0x08005598
 8000914:	50000400 	.word	0x50000400
 8000918:	080055ac 	.word	0x080055ac
 800091c:	080055c0 	.word	0x080055c0
 8000920:	2000022c 	.word	0x2000022c
 8000924:	080055d8 	.word	0x080055d8
 8000928:	080055e0 	.word	0x080055e0
 800092c:	080055e8 	.word	0x080055e8
 8000930:	20000284 	.word	0x20000284
 8000934:	20000288 	.word	0x20000288
 8000938:	200000d4 	.word	0x200000d4

0800093c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b09b      	sub	sp, #108	@ 0x6c
 8000940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000942:	2434      	movs	r4, #52	@ 0x34
 8000944:	193b      	adds	r3, r7, r4
 8000946:	0018      	movs	r0, r3
 8000948:	2334      	movs	r3, #52	@ 0x34
 800094a:	001a      	movs	r2, r3
 800094c:	2100      	movs	r1, #0
 800094e:	f004 f97b 	bl	8004c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000952:	2320      	movs	r3, #32
 8000954:	18fb      	adds	r3, r7, r3
 8000956:	0018      	movs	r0, r3
 8000958:	2314      	movs	r3, #20
 800095a:	001a      	movs	r2, r3
 800095c:	2100      	movs	r1, #0
 800095e:	f004 f973 	bl	8004c48 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	0018      	movs	r0, r3
 8000966:	231c      	movs	r3, #28
 8000968:	001a      	movs	r2, r3
 800096a:	2100      	movs	r1, #0
 800096c:	f004 f96c 	bl	8004c48 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000970:	4b2e      	ldr	r3, [pc, #184]	@ (8000a2c <SystemClock_Config+0xf0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a2e      	ldr	r2, [pc, #184]	@ (8000a30 <SystemClock_Config+0xf4>)
 8000976:	401a      	ands	r2, r3
 8000978:	4b2c      	ldr	r3, [pc, #176]	@ (8000a2c <SystemClock_Config+0xf0>)
 800097a:	2180      	movs	r1, #128	@ 0x80
 800097c:	0109      	lsls	r1, r1, #4
 800097e:	430a      	orrs	r2, r1
 8000980:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000982:	0021      	movs	r1, r4
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2201      	movs	r2, #1
 8000988:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2280      	movs	r2, #128	@ 0x80
 800098e:	0252      	lsls	r2, r2, #9
 8000990:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2202      	movs	r2, #2
 8000996:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2280      	movs	r2, #128	@ 0x80
 800099c:	0252      	lsls	r2, r2, #9
 800099e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	2200      	movs	r2, #0
 80009a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2280      	movs	r2, #128	@ 0x80
 80009aa:	0412      	lsls	r2, r2, #16
 80009ac:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	0018      	movs	r0, r3
 80009b2:	f001 fc21 	bl	80021f8 <HAL_RCC_OscConfig>
 80009b6:	1e03      	subs	r3, r0, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009ba:	f000 fa71 	bl	8000ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	2120      	movs	r1, #32
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	220f      	movs	r2, #15
 80009c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2203      	movs	r2, #3
 80009ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2100      	movs	r1, #0
 80009e2:	0018      	movs	r0, r3
 80009e4:	f001 ff72 	bl	80028cc <HAL_RCC_ClockConfig>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009ec:	f000 fa58 	bl	8000ea0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2205      	movs	r2, #5
 80009f4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	0018      	movs	r0, r3
 8000a06:	f002 fa33 	bl	8002e70 <HAL_RCCEx_PeriphCLKConfig>
 8000a0a:	1e03      	subs	r3, r0, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000a0e:	f000 fa47 	bl	8000ea0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000a12:	2380      	movs	r3, #128	@ 0x80
 8000a14:	045b      	lsls	r3, r3, #17
 8000a16:	2200      	movs	r2, #0
 8000a18:	0019      	movs	r1, r3
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f002 f89e 	bl	8002b5c <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000a20:	f002 f920 	bl	8002c64 <HAL_RCC_EnableCSS>
}
 8000a24:	46c0      	nop			@ (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b01b      	add	sp, #108	@ 0x6c
 8000a2a:	bd90      	pop	{r4, r7, pc}
 8000a2c:	40007000 	.word	0x40007000
 8000a30:	ffffe7ff 	.word	0xffffe7ff

08000a34 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a3a:	003b      	movs	r3, r7
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	2308      	movs	r3, #8
 8000a40:	001a      	movs	r2, r3
 8000a42:	2100      	movs	r1, #0
 8000a44:	f004 f900 	bl	8004c48 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000a48:	4b37      	ldr	r3, [pc, #220]	@ (8000b28 <MX_ADC_Init+0xf4>)
 8000a4a:	4a38      	ldr	r2, [pc, #224]	@ (8000b2c <MX_ADC_Init+0xf8>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000a4e:	4b36      	ldr	r3, [pc, #216]	@ (8000b28 <MX_ADC_Init+0xf4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000a54:	4b34      	ldr	r3, [pc, #208]	@ (8000b28 <MX_ADC_Init+0xf4>)
 8000a56:	22c0      	movs	r2, #192	@ 0xc0
 8000a58:	0612      	lsls	r2, r2, #24
 8000a5a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000a5c:	4b32      	ldr	r3, [pc, #200]	@ (8000b28 <MX_ADC_Init+0xf4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a62:	4b31      	ldr	r3, [pc, #196]	@ (8000b28 <MX_ADC_Init+0xf4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000a68:	4b2f      	ldr	r3, [pc, #188]	@ (8000b28 <MX_ADC_Init+0xf4>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000b28 <MX_ADC_Init+0xf4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000a74:	4b2c      	ldr	r3, [pc, #176]	@ (8000b28 <MX_ADC_Init+0xf4>)
 8000a76:	2220      	movs	r2, #32
 8000a78:	2100      	movs	r1, #0
 8000a7a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b28 <MX_ADC_Init+0xf4>)
 8000a7e:	2221      	movs	r2, #33	@ 0x21
 8000a80:	2100      	movs	r1, #0
 8000a82:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a84:	4b28      	ldr	r3, [pc, #160]	@ (8000b28 <MX_ADC_Init+0xf4>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a8a:	4b27      	ldr	r3, [pc, #156]	@ (8000b28 <MX_ADC_Init+0xf4>)
 8000a8c:	22c2      	movs	r2, #194	@ 0xc2
 8000a8e:	32ff      	adds	r2, #255	@ 0xff
 8000a90:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000a92:	4b25      	ldr	r3, [pc, #148]	@ (8000b28 <MX_ADC_Init+0xf4>)
 8000a94:	222c      	movs	r2, #44	@ 0x2c
 8000a96:	2100      	movs	r1, #0
 8000a98:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a9a:	4b23      	ldr	r3, [pc, #140]	@ (8000b28 <MX_ADC_Init+0xf4>)
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aa0:	4b21      	ldr	r3, [pc, #132]	@ (8000b28 <MX_ADC_Init+0xf4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	@ (8000b28 <MX_ADC_Init+0xf4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <MX_ADC_Init+0xf4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b28 <MX_ADC_Init+0xf4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <MX_ADC_Init+0xf4>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 fd48 	bl	8001550 <HAL_ADC_Init>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000ac4:	f000 f9ec 	bl	8000ea0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ac8:	003b      	movs	r3, r7
 8000aca:	4a19      	ldr	r2, [pc, #100]	@ (8000b30 <MX_ADC_Init+0xfc>)
 8000acc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000ace:	003b      	movs	r3, r7
 8000ad0:	2280      	movs	r2, #128	@ 0x80
 8000ad2:	0152      	lsls	r2, r2, #5
 8000ad4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ad6:	003a      	movs	r2, r7
 8000ad8:	4b13      	ldr	r3, [pc, #76]	@ (8000b28 <MX_ADC_Init+0xf4>)
 8000ada:	0011      	movs	r1, r2
 8000adc:	0018      	movs	r0, r3
 8000ade:	f000 feab 	bl	8001838 <HAL_ADC_ConfigChannel>
 8000ae2:	1e03      	subs	r3, r0, #0
 8000ae4:	d001      	beq.n	8000aea <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000ae6:	f000 f9db 	bl	8000ea0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000aea:	003b      	movs	r3, r7
 8000aec:	4a11      	ldr	r2, [pc, #68]	@ (8000b34 <MX_ADC_Init+0x100>)
 8000aee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000af0:	003a      	movs	r2, r7
 8000af2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b28 <MX_ADC_Init+0xf4>)
 8000af4:	0011      	movs	r1, r2
 8000af6:	0018      	movs	r0, r3
 8000af8:	f000 fe9e 	bl	8001838 <HAL_ADC_ConfigChannel>
 8000afc:	1e03      	subs	r3, r0, #0
 8000afe:	d001      	beq.n	8000b04 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000b00:	f000 f9ce 	bl	8000ea0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000b04:	003b      	movs	r3, r7
 8000b06:	4a0c      	ldr	r2, [pc, #48]	@ (8000b38 <MX_ADC_Init+0x104>)
 8000b08:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b0a:	003a      	movs	r2, r7
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <MX_ADC_Init+0xf4>)
 8000b0e:	0011      	movs	r1, r2
 8000b10:	0018      	movs	r0, r3
 8000b12:	f000 fe91 	bl	8001838 <HAL_ADC_ConfigChannel>
 8000b16:	1e03      	subs	r3, r0, #0
 8000b18:	d001      	beq.n	8000b1e <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000b1a:	f000 f9c1 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b002      	add	sp, #8
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	20000078 	.word	0x20000078
 8000b2c:	40012400 	.word	0x40012400
 8000b30:	24000200 	.word	0x24000200
 8000b34:	34002000 	.word	0x34002000
 8000b38:	38004000 	.word	0x38004000

08000b3c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b40:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <MX_LPUART1_UART_Init+0x54>)
 8000b42:	4a14      	ldr	r2, [pc, #80]	@ (8000b94 <MX_LPUART1_UART_Init+0x58>)
 8000b44:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8000b46:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <MX_LPUART1_UART_Init+0x54>)
 8000b48:	2296      	movs	r2, #150	@ 0x96
 8000b4a:	0192      	lsls	r2, r2, #6
 8000b4c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <MX_LPUART1_UART_Init+0x54>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <MX_LPUART1_UART_Init+0x54>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <MX_LPUART1_UART_Init+0x54>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <MX_LPUART1_UART_Init+0x54>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <MX_LPUART1_UART_Init+0x54>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <MX_LPUART1_UART_Init+0x54>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b72:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <MX_LPUART1_UART_Init+0x54>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b78:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <MX_LPUART1_UART_Init+0x54>)
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f002 fb46 	bl	800320c <HAL_UART_Init>
 8000b80:	1e03      	subs	r3, r0, #0
 8000b82:	d001      	beq.n	8000b88 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000b84:	f000 f98c 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b88:	46c0      	nop			@ (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	200000d4 	.word	0x200000d4
 8000b94:	40004800 	.word	0x40004800

08000b98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000b9e:	4a15      	ldr	r2, [pc, #84]	@ (8000bf4 <MX_USART1_UART_Init+0x5c>)
 8000ba0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000ba4:	22e1      	movs	r2, #225	@ 0xe1
 8000ba6:	0252      	lsls	r2, r2, #9
 8000ba8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000baa:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bda:	4b05      	ldr	r3, [pc, #20]	@ (8000bf0 <MX_USART1_UART_Init+0x58>)
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f002 fb15 	bl	800320c <HAL_UART_Init>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000be6:	f000 f95b 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bea:	46c0      	nop			@ (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	2000015c 	.word	0x2000015c
 8000bf4:	40013800 	.word	0x40013800

08000bf8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	@ (8000c60 <MX_SPI1_Init+0x68>)
 8000bfe:	4a19      	ldr	r2, [pc, #100]	@ (8000c64 <MX_SPI1_Init+0x6c>)
 8000c00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c02:	4b17      	ldr	r3, [pc, #92]	@ (8000c60 <MX_SPI1_Init+0x68>)
 8000c04:	2282      	movs	r2, #130	@ 0x82
 8000c06:	0052      	lsls	r2, r2, #1
 8000c08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <MX_SPI1_Init+0x68>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c10:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <MX_SPI1_Init+0x68>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c16:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <MX_SPI1_Init+0x68>)
 8000c18:	2202      	movs	r2, #2
 8000c1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c1c:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <MX_SPI1_Init+0x68>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c22:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <MX_SPI1_Init+0x68>)
 8000c24:	2280      	movs	r2, #128	@ 0x80
 8000c26:	0092      	lsls	r2, r2, #2
 8000c28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c60 <MX_SPI1_Init+0x68>)
 8000c2c:	2218      	movs	r2, #24
 8000c2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c30:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <MX_SPI1_Init+0x68>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c36:	4b0a      	ldr	r3, [pc, #40]	@ (8000c60 <MX_SPI1_Init+0x68>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <MX_SPI1_Init+0x68>)
 8000c3e:	2280      	movs	r2, #128	@ 0x80
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <MX_SPI1_Init+0x68>)
 8000c46:	2207      	movs	r2, #7
 8000c48:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c4a:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <MX_SPI1_Init+0x68>)
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f002 fa49 	bl	80030e4 <HAL_SPI_Init>
 8000c52:	1e03      	subs	r3, r0, #0
 8000c54:	d001      	beq.n	8000c5a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000c56:	f000 f923 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	2000022c 	.word	0x2000022c
 8000c64:	40013000 	.word	0x40013000

08000c68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <MX_DMA_Init+0x38>)
 8000c70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <MX_DMA_Init+0x38>)
 8000c74:	2101      	movs	r1, #1
 8000c76:	430a      	orrs	r2, r1
 8000c78:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <MX_DMA_Init+0x38>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4013      	ands	r3, r2
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	200a      	movs	r0, #10
 8000c8c:	f000 ff26 	bl	8001adc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000c90:	200a      	movs	r0, #10
 8000c92:	f000 ff38 	bl	8001b06 <HAL_NVIC_EnableIRQ>

}
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b002      	add	sp, #8
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b08b      	sub	sp, #44	@ 0x2c
 8000ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	2414      	movs	r4, #20
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	0018      	movs	r0, r3
 8000cb0:	2314      	movs	r3, #20
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	f003 ffc7 	bl	8004c48 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	4b71      	ldr	r3, [pc, #452]	@ (8000e80 <MX_GPIO_Init+0x1dc>)
 8000cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cbe:	4b70      	ldr	r3, [pc, #448]	@ (8000e80 <MX_GPIO_Init+0x1dc>)
 8000cc0:	2104      	movs	r1, #4
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000cc6:	4b6e      	ldr	r3, [pc, #440]	@ (8000e80 <MX_GPIO_Init+0x1dc>)
 8000cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cca:	2204      	movs	r2, #4
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd2:	4b6b      	ldr	r3, [pc, #428]	@ (8000e80 <MX_GPIO_Init+0x1dc>)
 8000cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cd6:	4b6a      	ldr	r3, [pc, #424]	@ (8000e80 <MX_GPIO_Init+0x1dc>)
 8000cd8:	2180      	movs	r1, #128	@ 0x80
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000cde:	4b68      	ldr	r3, [pc, #416]	@ (8000e80 <MX_GPIO_Init+0x1dc>)
 8000ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ce2:	2280      	movs	r2, #128	@ 0x80
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b65      	ldr	r3, [pc, #404]	@ (8000e80 <MX_GPIO_Init+0x1dc>)
 8000cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cee:	4b64      	ldr	r3, [pc, #400]	@ (8000e80 <MX_GPIO_Init+0x1dc>)
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000cf6:	4b62      	ldr	r3, [pc, #392]	@ (8000e80 <MX_GPIO_Init+0x1dc>)
 8000cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	4b5f      	ldr	r3, [pc, #380]	@ (8000e80 <MX_GPIO_Init+0x1dc>)
 8000d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d06:	4b5e      	ldr	r3, [pc, #376]	@ (8000e80 <MX_GPIO_Init+0x1dc>)
 8000d08:	2102      	movs	r1, #2
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d0e:	4b5c      	ldr	r3, [pc, #368]	@ (8000e80 <MX_GPIO_Init+0x1dc>)
 8000d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d12:	2202      	movs	r2, #2
 8000d14:	4013      	ands	r3, r2
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1a:	4b59      	ldr	r3, [pc, #356]	@ (8000e80 <MX_GPIO_Init+0x1dc>)
 8000d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d1e:	4b58      	ldr	r3, [pc, #352]	@ (8000e80 <MX_GPIO_Init+0x1dc>)
 8000d20:	2108      	movs	r1, #8
 8000d22:	430a      	orrs	r2, r1
 8000d24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d26:	4b56      	ldr	r3, [pc, #344]	@ (8000e80 <MX_GPIO_Init+0x1dc>)
 8000d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d2a:	2208      	movs	r2, #8
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|EXPANSION_1_Pin|EXPANSION_2_Pin|Temp_EN_Pin
 8000d32:	4954      	ldr	r1, [pc, #336]	@ (8000e84 <MX_GPIO_Init+0x1e0>)
 8000d34:	4b54      	ldr	r3, [pc, #336]	@ (8000e88 <MX_GPIO_Init+0x1e4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f001 fa25 	bl	8002188 <HAL_GPIO_WritePin>
                          |ADF_CLK_Pin|ADF_Data_Pin|ADF_LE_Pin|Heater_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EXPANSION_4_Pin|EXPANSION_PS_Pin|DC_boost_Pin, GPIO_PIN_RESET);
 8000d3e:	4953      	ldr	r1, [pc, #332]	@ (8000e8c <MX_GPIO_Init+0x1e8>)
 8000d40:	23a0      	movs	r3, #160	@ 0xa0
 8000d42:	05db      	lsls	r3, r3, #23
 8000d44:	2200      	movs	r2, #0
 8000d46:	0018      	movs	r0, r3
 8000d48:	f001 fa1e 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LPS_CS_GPIO_Port, LPS_CS_Pin, GPIO_PIN_SET);
 8000d4c:	23a0      	movs	r3, #160	@ 0xa0
 8000d4e:	05db      	lsls	r3, r3, #23
 8000d50:	2201      	movs	r2, #1
 8000d52:	2110      	movs	r1, #16
 8000d54:	0018      	movs	r0, r3
 8000d56:	f001 fa17 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RF_Boost_Pin|ADF_TX_Data_Pin|GPS_ON_Pin|RADIO_EN_Pin
 8000d5a:	494d      	ldr	r1, [pc, #308]	@ (8000e90 <MX_GPIO_Init+0x1ec>)
 8000d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8000e94 <MX_GPIO_Init+0x1f0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	0018      	movs	r0, r3
 8000d62:	f001 fa11 	bl	8002188 <HAL_GPIO_WritePin>
                          |Trmp_R4_Pin|Temp_R2_Pin|Temp_R1_Pin|EXPANSION_3_Pin
                          |Temp_R5_Pin|Temp_R3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Battery_on_GPIO_Port, Battery_on_Pin, GPIO_PIN_RESET);
 8000d66:	4b4c      	ldr	r3, [pc, #304]	@ (8000e98 <MX_GPIO_Init+0x1f4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f001 fa0b 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_Pin TL555_in_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|TL555_in_Pin;
 8000d72:	193b      	adds	r3, r7, r4
 8000d74:	2281      	movs	r2, #129	@ 0x81
 8000d76:	0192      	lsls	r2, r2, #6
 8000d78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7a:	193b      	adds	r3, r7, r4
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	193b      	adds	r3, r7, r4
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	193b      	adds	r3, r7, r4
 8000d88:	4a3f      	ldr	r2, [pc, #252]	@ (8000e88 <MX_GPIO_Init+0x1e4>)
 8000d8a:	0019      	movs	r1, r3
 8000d8c:	0010      	movs	r0, r2
 8000d8e:	f001 f885 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin EXPANSION_1_Pin EXPANSION_2_Pin Temp_EN_Pin
                           ADF_CLK_Pin ADF_Data_Pin ADF_LE_Pin Heater_Pin */
  GPIO_InitStruct.Pin = LED_Pin|EXPANSION_1_Pin|EXPANSION_2_Pin|Temp_EN_Pin
 8000d92:	193b      	adds	r3, r7, r4
 8000d94:	4a3b      	ldr	r2, [pc, #236]	@ (8000e84 <MX_GPIO_Init+0x1e0>)
 8000d96:	601a      	str	r2, [r3, #0]
                          |ADF_CLK_Pin|ADF_Data_Pin|ADF_LE_Pin|Heater_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d98:	193b      	adds	r3, r7, r4
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	193b      	adds	r3, r7, r4
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	193b      	adds	r3, r7, r4
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	4a36      	ldr	r2, [pc, #216]	@ (8000e88 <MX_GPIO_Init+0x1e4>)
 8000dae:	0019      	movs	r1, r3
 8000db0:	0010      	movs	r0, r2
 8000db2:	f001 f873 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_RX_Pin */
  GPIO_InitStruct.Pin = IR_RX_Pin;
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	2202      	movs	r2, #2
 8000dba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbc:	193b      	adds	r3, r7, r4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IR_RX_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	193a      	adds	r2, r7, r4
 8000dca:	23a0      	movs	r3, #160	@ 0xa0
 8000dcc:	05db      	lsls	r3, r3, #23
 8000dce:	0011      	movs	r1, r2
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f001 f863 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXPANSION_4_Pin EXPANSION_PS_Pin LPS_CS_Pin DC_boost_Pin */
  GPIO_InitStruct.Pin = EXPANSION_4_Pin|EXPANSION_PS_Pin|LPS_CS_Pin|DC_boost_Pin;
 8000dd6:	193b      	adds	r3, r7, r4
 8000dd8:	4a30      	ldr	r2, [pc, #192]	@ (8000e9c <MX_GPIO_Init+0x1f8>)
 8000dda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	193b      	adds	r3, r7, r4
 8000dde:	2201      	movs	r2, #1
 8000de0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	193b      	adds	r3, r7, r4
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	193b      	adds	r3, r7, r4
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	193a      	adds	r2, r7, r4
 8000df0:	23a0      	movs	r3, #160	@ 0xa0
 8000df2:	05db      	lsls	r3, r3, #23
 8000df4:	0011      	movs	r1, r2
 8000df6:	0018      	movs	r0, r3
 8000df8:	f001 f850 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_Boost_Pin ADF_TX_Data_Pin GPS_ON_Pin RADIO_EN_Pin
                           Trmp_R4_Pin Temp_R2_Pin Temp_R1_Pin EXPANSION_3_Pin
                           Temp_R5_Pin Temp_R3_Pin */
  GPIO_InitStruct.Pin = RF_Boost_Pin|ADF_TX_Data_Pin|GPS_ON_Pin|RADIO_EN_Pin
 8000dfc:	193b      	adds	r3, r7, r4
 8000dfe:	4a24      	ldr	r2, [pc, #144]	@ (8000e90 <MX_GPIO_Init+0x1ec>)
 8000e00:	601a      	str	r2, [r3, #0]
                          |Trmp_R4_Pin|Temp_R2_Pin|Temp_R1_Pin|EXPANSION_3_Pin
                          |Temp_R5_Pin|Temp_R3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	193b      	adds	r3, r7, r4
 8000e04:	2201      	movs	r2, #1
 8000e06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	193b      	adds	r3, r7, r4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	193b      	adds	r3, r7, r4
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	193b      	adds	r3, r7, r4
 8000e16:	4a1f      	ldr	r2, [pc, #124]	@ (8000e94 <MX_GPIO_Init+0x1f0>)
 8000e18:	0019      	movs	r1, r3
 8000e1a:	0010      	movs	r0, r2
 8000e1c:	f001 f83e 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e20:	0021      	movs	r1, r4
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2280      	movs	r2, #128	@ 0x80
 8000e26:	0052      	lsls	r2, r2, #1
 8000e28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	000c      	movs	r4, r1
 8000e2c:	193b      	adds	r3, r7, r4
 8000e2e:	2202      	movs	r2, #2
 8000e30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	193b      	adds	r3, r7, r4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e3e:	193b      	adds	r3, r7, r4
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	193a      	adds	r2, r7, r4
 8000e46:	23a0      	movs	r3, #160	@ 0xa0
 8000e48:	05db      	lsls	r3, r3, #23
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f001 f825 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Battery_on_Pin */
  GPIO_InitStruct.Pin = Battery_on_Pin;
 8000e52:	0021      	movs	r1, r4
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	2204      	movs	r2, #4
 8000e58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Battery_on_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e98 <MX_GPIO_Init+0x1f4>)
 8000e70:	0019      	movs	r1, r3
 8000e72:	0010      	movs	r0, r2
 8000e74:	f001 f812 	bl	8001e9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e78:	46c0      	nop			@ (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b00b      	add	sp, #44	@ 0x2c
 8000e7e:	bd90      	pop	{r4, r7, pc}
 8000e80:	40021000 	.word	0x40021000
 8000e84:	000053a3 	.word	0x000053a3
 8000e88:	50000800 	.word	0x50000800
 8000e8c:	0000100c 	.word	0x0000100c
 8000e90:	0000f3f0 	.word	0x0000f3f0
 8000e94:	50000400 	.word	0x50000400
 8000e98:	50000c00 	.word	0x50000c00
 8000e9c:	0000101c 	.word	0x0000101c

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea4:	b672      	cpsid	i
}
 8000ea6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea8:	46c0      	nop			@ (mov r8, r8)
 8000eaa:	e7fd      	b.n	8000ea8 <Error_Handler+0x8>

08000eac <hex2int>:
#include <stdarg.h>

#define boolstr(s) ((s) ? "true" : "false")

static int hex2int(char c)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	0002      	movs	r2, r0
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	701a      	strb	r2, [r3, #0]
    if (c >= '0' && c <= '9')
 8000eb8:	1dfb      	adds	r3, r7, #7
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b2f      	cmp	r3, #47	@ 0x2f
 8000ebe:	d907      	bls.n	8000ed0 <hex2int+0x24>
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b39      	cmp	r3, #57	@ 0x39
 8000ec6:	d803      	bhi.n	8000ed0 <hex2int+0x24>
        return c - '0';
 8000ec8:	1dfb      	adds	r3, r7, #7
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	3b30      	subs	r3, #48	@ 0x30
 8000ece:	e019      	b.n	8000f04 <hex2int+0x58>
    if (c >= 'A' && c <= 'F')
 8000ed0:	1dfb      	adds	r3, r7, #7
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b40      	cmp	r3, #64	@ 0x40
 8000ed6:	d907      	bls.n	8000ee8 <hex2int+0x3c>
 8000ed8:	1dfb      	adds	r3, r7, #7
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b46      	cmp	r3, #70	@ 0x46
 8000ede:	d803      	bhi.n	8000ee8 <hex2int+0x3c>
        return c - 'A' + 10;
 8000ee0:	1dfb      	adds	r3, r7, #7
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	3b37      	subs	r3, #55	@ 0x37
 8000ee6:	e00d      	b.n	8000f04 <hex2int+0x58>
    if (c >= 'a' && c <= 'f')
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b60      	cmp	r3, #96	@ 0x60
 8000eee:	d907      	bls.n	8000f00 <hex2int+0x54>
 8000ef0:	1dfb      	adds	r3, r7, #7
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b66      	cmp	r3, #102	@ 0x66
 8000ef6:	d803      	bhi.n	8000f00 <hex2int+0x54>
        return c - 'a' + 10;
 8000ef8:	1dfb      	adds	r3, r7, #7
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	3b57      	subs	r3, #87	@ 0x57
 8000efe:	e001      	b.n	8000f04 <hex2int+0x58>
    return -1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	425b      	negs	r3, r3
}
 8000f04:	0018      	movs	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b002      	add	sp, #8
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <minmea_check>:

    return checksum;
}

uint8_t minmea_check(const char *sentence, bool strict)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	000a      	movs	r2, r1
 8000f16:	1cfb      	adds	r3, r7, #3
 8000f18:	701a      	strb	r2, [r3, #0]
    uint8_t checksum = 0x00;
 8000f1a:	2317      	movs	r3, #23
 8000f1c:	18fb      	adds	r3, r7, r3
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]

    // A valid sentence starts with "$".
    if (*sentence++ != '$')
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	1c5a      	adds	r2, r3, #1
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b24      	cmp	r3, #36	@ 0x24
 8000f2c:	d00b      	beq.n	8000f46 <minmea_check+0x3a>
        return 1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e063      	b.n	8000ffa <minmea_check+0xee>

    // The optional checksum is an XOR of all bytes between "$" and "*".
    while (*sentence && *sentence != '*' && isprint((unsigned char) *sentence))
        checksum ^= *sentence++;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	1c5a      	adds	r2, r3, #1
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	7819      	ldrb	r1, [r3, #0]
 8000f3a:	2217      	movs	r2, #23
 8000f3c:	18bb      	adds	r3, r7, r2
 8000f3e:	18ba      	adds	r2, r7, r2
 8000f40:	7812      	ldrb	r2, [r2, #0]
 8000f42:	404a      	eors	r2, r1
 8000f44:	701a      	strb	r2, [r3, #0]
    while (*sentence && *sentence != '*' && isprint((unsigned char) *sentence))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d00d      	beq.n	8000f6a <minmea_check+0x5e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f54:	d009      	beq.n	8000f6a <minmea_check+0x5e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	4b29      	ldr	r3, [pc, #164]	@ (8001004 <minmea_check+0xf8>)
 8000f5e:	18d3      	adds	r3, r2, r3
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	001a      	movs	r2, r3
 8000f64:	2397      	movs	r3, #151	@ 0x97
 8000f66:	4013      	ands	r3, r2
 8000f68:	d1e3      	bne.n	8000f32 <minmea_check+0x26>

    // If checksum is present...
    if (*sentence == '*') {
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f70:	d12b      	bne.n	8000fca <minmea_check+0xbe>
        // Extract checksum.
        sentence++;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3301      	adds	r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
        int upper = hex2int(*sentence++);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff ff93 	bl	8000eac <hex2int>
 8000f86:	0003      	movs	r3, r0
 8000f88:	613b      	str	r3, [r7, #16]
        if (upper == -1)
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	d101      	bne.n	8000f94 <minmea_check+0x88>
            return 2;
 8000f90:	2302      	movs	r3, #2
 8000f92:	e032      	b.n	8000ffa <minmea_check+0xee>
        int lower = hex2int(*sentence++);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f7ff ff85 	bl	8000eac <hex2int>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	60fb      	str	r3, [r7, #12]
        if (lower == -1)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	d101      	bne.n	8000fb0 <minmea_check+0xa4>
            return 3;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e024      	b.n	8000ffa <minmea_check+0xee>
        int expected = upper << 4 | lower;
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60bb      	str	r3, [r7, #8]

        // Check for checksum mismatch.
        if (checksum != expected)
 8000fba:	2317      	movs	r3, #23
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	68ba      	ldr	r2, [r7, #8]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d00a      	beq.n	8000fdc <minmea_check+0xd0>
            return 4;
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	e017      	b.n	8000ffa <minmea_check+0xee>
    } else if (strict) {
 8000fca:	1cfb      	adds	r3, r7, #3
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d004      	beq.n	8000fdc <minmea_check+0xd0>
        // Discard non-checksummed frames in strict mode.
        return 5;
 8000fd2:	2305      	movs	r3, #5
 8000fd4:	e011      	b.n	8000ffa <minmea_check+0xee>
    }

    // The only stuff allowed at this point is a newline.
    while (*sentence == '\r' || *sentence == '\n') {
        sentence++;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	607b      	str	r3, [r7, #4]
    while (*sentence == '\r' || *sentence == '\n') {
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b0d      	cmp	r3, #13
 8000fe2:	d0f8      	beq.n	8000fd6 <minmea_check+0xca>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b0a      	cmp	r3, #10
 8000fea:	d0f4      	beq.n	8000fd6 <minmea_check+0xca>
    }
    
    if (*sentence) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <minmea_check+0xec>
        return 6;
 8000ff4:	2306      	movs	r3, #6
 8000ff6:	e000      	b.n	8000ffa <minmea_check+0xee>
    }

    return 0;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b006      	add	sp, #24
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	08005660 	.word	0x08005660

08001008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100c:	4b07      	ldr	r3, [pc, #28]	@ (800102c <HAL_MspInit+0x24>)
 800100e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_MspInit+0x24>)
 8001012:	2101      	movs	r1, #1
 8001014:	430a      	orrs	r2, r1
 8001016:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001018:	4b04      	ldr	r3, [pc, #16]	@ (800102c <HAL_MspInit+0x24>)
 800101a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800101c:	4b03      	ldr	r3, [pc, #12]	@ (800102c <HAL_MspInit+0x24>)
 800101e:	2180      	movs	r1, #128	@ 0x80
 8001020:	0549      	lsls	r1, r1, #21
 8001022:	430a      	orrs	r2, r1
 8001024:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021000 	.word	0x40021000

08001030 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b08b      	sub	sp, #44	@ 0x2c
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	2414      	movs	r4, #20
 800103a:	193b      	adds	r3, r7, r4
 800103c:	0018      	movs	r0, r3
 800103e:	2314      	movs	r3, #20
 8001040:	001a      	movs	r2, r3
 8001042:	2100      	movs	r1, #0
 8001044:	f003 fe00 	bl	8004c48 <memset>
  if(hadc->Instance==ADC1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a22      	ldr	r2, [pc, #136]	@ (80010d8 <HAL_ADC_MspInit+0xa8>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d13d      	bne.n	80010ce <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001052:	4b22      	ldr	r3, [pc, #136]	@ (80010dc <HAL_ADC_MspInit+0xac>)
 8001054:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001056:	4b21      	ldr	r3, [pc, #132]	@ (80010dc <HAL_ADC_MspInit+0xac>)
 8001058:	2180      	movs	r1, #128	@ 0x80
 800105a:	0089      	lsls	r1, r1, #2
 800105c:	430a      	orrs	r2, r1
 800105e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001060:	4b1e      	ldr	r3, [pc, #120]	@ (80010dc <HAL_ADC_MspInit+0xac>)
 8001062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001064:	4b1d      	ldr	r3, [pc, #116]	@ (80010dc <HAL_ADC_MspInit+0xac>)
 8001066:	2104      	movs	r1, #4
 8001068:	430a      	orrs	r2, r1
 800106a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800106c:	4b1b      	ldr	r3, [pc, #108]	@ (80010dc <HAL_ADC_MspInit+0xac>)
 800106e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001070:	2204      	movs	r2, #4
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001078:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <HAL_ADC_MspInit+0xac>)
 800107a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800107c:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <HAL_ADC_MspInit+0xac>)
 800107e:	2102      	movs	r1, #2
 8001080:	430a      	orrs	r2, r1
 8001082:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001084:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <HAL_ADC_MspInit+0xac>)
 8001086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001088:	2202      	movs	r2, #2
 800108a:	4013      	ands	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC3     ------> ADC_IN13
    PC4     ------> ADC_IN14
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = Heater_ADC_2_Pin|Temp_ADC_Pin;
 8001090:	193b      	adds	r3, r7, r4
 8001092:	2218      	movs	r2, #24
 8001094:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001096:	193b      	adds	r3, r7, r4
 8001098:	2203      	movs	r2, #3
 800109a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	193b      	adds	r3, r7, r4
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a2:	193b      	adds	r3, r7, r4
 80010a4:	4a0e      	ldr	r2, [pc, #56]	@ (80010e0 <HAL_ADC_MspInit+0xb0>)
 80010a6:	0019      	movs	r1, r3
 80010a8:	0010      	movs	r0, r2
 80010aa:	f000 fef7 	bl	8001e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Heater_ADC_1_Pin;
 80010ae:	0021      	movs	r1, r4
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2202      	movs	r2, #2
 80010b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2203      	movs	r2, #3
 80010ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Heater_ADC_1_GPIO_Port, &GPIO_InitStruct);
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	4a07      	ldr	r2, [pc, #28]	@ (80010e4 <HAL_ADC_MspInit+0xb4>)
 80010c6:	0019      	movs	r1, r3
 80010c8:	0010      	movs	r0, r2
 80010ca:	f000 fee7 	bl	8001e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b00b      	add	sp, #44	@ 0x2c
 80010d4:	bd90      	pop	{r4, r7, pc}
 80010d6:	46c0      	nop			@ (mov r8, r8)
 80010d8:	40012400 	.word	0x40012400
 80010dc:	40021000 	.word	0x40021000
 80010e0:	50000800 	.word	0x50000800
 80010e4:	50000400 	.word	0x50000400

080010e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b08b      	sub	sp, #44	@ 0x2c
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	2414      	movs	r4, #20
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	0018      	movs	r0, r3
 80010f6:	2314      	movs	r3, #20
 80010f8:	001a      	movs	r2, r3
 80010fa:	2100      	movs	r1, #0
 80010fc:	f003 fda4 	bl	8004c48 <memset>
  if(huart->Instance==LPUART1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a4d      	ldr	r2, [pc, #308]	@ (800123c <HAL_UART_MspInit+0x154>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d132      	bne.n	8001170 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800110a:	4b4d      	ldr	r3, [pc, #308]	@ (8001240 <HAL_UART_MspInit+0x158>)
 800110c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800110e:	4b4c      	ldr	r3, [pc, #304]	@ (8001240 <HAL_UART_MspInit+0x158>)
 8001110:	2180      	movs	r1, #128	@ 0x80
 8001112:	02c9      	lsls	r1, r1, #11
 8001114:	430a      	orrs	r2, r1
 8001116:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001118:	4b49      	ldr	r3, [pc, #292]	@ (8001240 <HAL_UART_MspInit+0x158>)
 800111a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800111c:	4b48      	ldr	r3, [pc, #288]	@ (8001240 <HAL_UART_MspInit+0x158>)
 800111e:	2104      	movs	r1, #4
 8001120:	430a      	orrs	r2, r1
 8001122:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001124:	4b46      	ldr	r3, [pc, #280]	@ (8001240 <HAL_UART_MspInit+0x158>)
 8001126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001128:	2204      	movs	r2, #4
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PC10     ------> LPUART1_TX
    PC11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001130:	193b      	adds	r3, r7, r4
 8001132:	22c0      	movs	r2, #192	@ 0xc0
 8001134:	0112      	lsls	r2, r2, #4
 8001136:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	0021      	movs	r1, r4
 800113a:	187b      	adds	r3, r7, r1
 800113c:	2202      	movs	r2, #2
 800113e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	187b      	adds	r3, r7, r1
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	187b      	adds	r3, r7, r1
 8001148:	2203      	movs	r2, #3
 800114a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_LPUART1;
 800114c:	187b      	adds	r3, r7, r1
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001152:	187b      	adds	r3, r7, r1
 8001154:	4a3b      	ldr	r2, [pc, #236]	@ (8001244 <HAL_UART_MspInit+0x15c>)
 8001156:	0019      	movs	r1, r3
 8001158:	0010      	movs	r0, r2
 800115a:	f000 fe9f 	bl	8001e9c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	201d      	movs	r0, #29
 8001164:	f000 fcba 	bl	8001adc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001168:	201d      	movs	r0, #29
 800116a:	f000 fccc 	bl	8001b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800116e:	e060      	b.n	8001232 <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a34      	ldr	r2, [pc, #208]	@ (8001248 <HAL_UART_MspInit+0x160>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d15b      	bne.n	8001232 <HAL_UART_MspInit+0x14a>
    __HAL_RCC_USART1_CLK_ENABLE();
 800117a:	4b31      	ldr	r3, [pc, #196]	@ (8001240 <HAL_UART_MspInit+0x158>)
 800117c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800117e:	4b30      	ldr	r3, [pc, #192]	@ (8001240 <HAL_UART_MspInit+0x158>)
 8001180:	2180      	movs	r1, #128	@ 0x80
 8001182:	01c9      	lsls	r1, r1, #7
 8001184:	430a      	orrs	r2, r1
 8001186:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	4b2d      	ldr	r3, [pc, #180]	@ (8001240 <HAL_UART_MspInit+0x158>)
 800118a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800118c:	4b2c      	ldr	r3, [pc, #176]	@ (8001240 <HAL_UART_MspInit+0x158>)
 800118e:	2101      	movs	r1, #1
 8001190:	430a      	orrs	r2, r1
 8001192:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001194:	4b2a      	ldr	r3, [pc, #168]	@ (8001240 <HAL_UART_MspInit+0x158>)
 8001196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001198:	2201      	movs	r2, #1
 800119a:	4013      	ands	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011a0:	2114      	movs	r1, #20
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	22c0      	movs	r2, #192	@ 0xc0
 80011a6:	00d2      	lsls	r2, r2, #3
 80011a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	2202      	movs	r2, #2
 80011ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	2203      	movs	r2, #3
 80011ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	2204      	movs	r2, #4
 80011c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	187a      	adds	r2, r7, r1
 80011c4:	23a0      	movs	r3, #160	@ 0xa0
 80011c6:	05db      	lsls	r3, r3, #23
 80011c8:	0011      	movs	r1, r2
 80011ca:	0018      	movs	r0, r3
 80011cc:	f000 fe66 	bl	8001e9c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80011d0:	4b1e      	ldr	r3, [pc, #120]	@ (800124c <HAL_UART_MspInit+0x164>)
 80011d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001250 <HAL_UART_MspInit+0x168>)
 80011d4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 80011d6:	4b1d      	ldr	r3, [pc, #116]	@ (800124c <HAL_UART_MspInit+0x164>)
 80011d8:	2203      	movs	r2, #3
 80011da:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011dc:	4b1b      	ldr	r3, [pc, #108]	@ (800124c <HAL_UART_MspInit+0x164>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e2:	4b1a      	ldr	r3, [pc, #104]	@ (800124c <HAL_UART_MspInit+0x164>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011e8:	4b18      	ldr	r3, [pc, #96]	@ (800124c <HAL_UART_MspInit+0x164>)
 80011ea:	2280      	movs	r2, #128	@ 0x80
 80011ec:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ee:	4b17      	ldr	r3, [pc, #92]	@ (800124c <HAL_UART_MspInit+0x164>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011f4:	4b15      	ldr	r3, [pc, #84]	@ (800124c <HAL_UART_MspInit+0x164>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80011fa:	4b14      	ldr	r3, [pc, #80]	@ (800124c <HAL_UART_MspInit+0x164>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <HAL_UART_MspInit+0x164>)
 8001202:	2200      	movs	r2, #0
 8001204:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001206:	4b11      	ldr	r3, [pc, #68]	@ (800124c <HAL_UART_MspInit+0x164>)
 8001208:	0018      	movs	r0, r3
 800120a:	f000 fc99 	bl	8001b40 <HAL_DMA_Init>
 800120e:	1e03      	subs	r3, r0, #0
 8001210:	d001      	beq.n	8001216 <HAL_UART_MspInit+0x12e>
      Error_Handler();
 8001212:	f7ff fe45 	bl	8000ea0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a0c      	ldr	r2, [pc, #48]	@ (800124c <HAL_UART_MspInit+0x164>)
 800121a:	675a      	str	r2, [r3, #116]	@ 0x74
 800121c:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <HAL_UART_MspInit+0x164>)
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	201b      	movs	r0, #27
 8001228:	f000 fc58 	bl	8001adc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800122c:	201b      	movs	r0, #27
 800122e:	f000 fc6a 	bl	8001b06 <HAL_NVIC_EnableIRQ>
}
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b00b      	add	sp, #44	@ 0x2c
 8001238:	bd90      	pop	{r4, r7, pc}
 800123a:	46c0      	nop			@ (mov r8, r8)
 800123c:	40004800 	.word	0x40004800
 8001240:	40021000 	.word	0x40021000
 8001244:	50000800 	.word	0x50000800
 8001248:	40013800 	.word	0x40013800
 800124c:	200001e4 	.word	0x200001e4
 8001250:	40020030 	.word	0x40020030

08001254 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b089      	sub	sp, #36	@ 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	240c      	movs	r4, #12
 800125e:	193b      	adds	r3, r7, r4
 8001260:	0018      	movs	r0, r3
 8001262:	2314      	movs	r3, #20
 8001264:	001a      	movs	r2, r3
 8001266:	2100      	movs	r1, #0
 8001268:	f003 fcee 	bl	8004c48 <memset>
  if(hspi->Instance==SPI1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a18      	ldr	r2, [pc, #96]	@ (80012d4 <HAL_SPI_MspInit+0x80>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d129      	bne.n	80012ca <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001276:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <HAL_SPI_MspInit+0x84>)
 8001278:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800127a:	4b17      	ldr	r3, [pc, #92]	@ (80012d8 <HAL_SPI_MspInit+0x84>)
 800127c:	2180      	movs	r1, #128	@ 0x80
 800127e:	0149      	lsls	r1, r1, #5
 8001280:	430a      	orrs	r2, r1
 8001282:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <HAL_SPI_MspInit+0x84>)
 8001286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001288:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <HAL_SPI_MspInit+0x84>)
 800128a:	2101      	movs	r1, #1
 800128c:	430a      	orrs	r2, r1
 800128e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001290:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <HAL_SPI_MspInit+0x84>)
 8001292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001294:	2201      	movs	r2, #1
 8001296:	4013      	ands	r3, r2
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800129c:	0021      	movs	r1, r4
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	22e0      	movs	r2, #224	@ 0xe0
 80012a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	187b      	adds	r3, r7, r1
 80012a6:	2202      	movs	r2, #2
 80012a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	187b      	adds	r3, r7, r1
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	2203      	movs	r2, #3
 80012b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80012b6:	187b      	adds	r3, r7, r1
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	187a      	adds	r2, r7, r1
 80012be:	23a0      	movs	r3, #160	@ 0xa0
 80012c0:	05db      	lsls	r3, r3, #23
 80012c2:	0011      	movs	r1, r2
 80012c4:	0018      	movs	r0, r3
 80012c6:	f000 fde9 	bl	8001e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b009      	add	sp, #36	@ 0x24
 80012d0:	bd90      	pop	{r4, r7, pc}
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	40013000 	.word	0x40013000
 80012d8:	40021000 	.word	0x40021000

080012dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80012e0:	f001 fdaa 	bl	8002e38 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e4:	46c0      	nop			@ (mov r8, r8)
 80012e6:	e7fd      	b.n	80012e4 <NMI_Handler+0x8>

080012e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ec:	46c0      	nop			@ (mov r8, r8)
 80012ee:	e7fd      	b.n	80012ec <HardFault_Handler+0x4>

080012f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012f4:	46c0      	nop			@ (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fe:	46c0      	nop			@ (mov r8, r8)
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001308:	f000 f8e2 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130c:	46c0      	nop			@ (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001318:	4b03      	ldr	r3, [pc, #12]	@ (8001328 <DMA1_Channel2_3_IRQHandler+0x14>)
 800131a:	0018      	movs	r0, r3
 800131c:	f000 fd0f 	bl	8001d3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001320:	46c0      	nop			@ (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	46c0      	nop			@ (mov r8, r8)
 8001328:	200001e4 	.word	0x200001e4

0800132c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001330:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <USART1_IRQHandler+0x14>)
 8001332:	0018      	movs	r0, r3
 8001334:	f002 f92c 	bl	8003590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001338:	46c0      	nop			@ (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			@ (mov r8, r8)
 8001340:	2000015c 	.word	0x2000015c

08001344 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001348:	4b03      	ldr	r3, [pc, #12]	@ (8001358 <LPUART1_IRQHandler+0x14>)
 800134a:	0018      	movs	r0, r3
 800134c:	f002 f920 	bl	8003590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001350:	46c0      	nop			@ (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			@ (mov r8, r8)
 8001358:	200000d4 	.word	0x200000d4

0800135c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001364:	4a14      	ldr	r2, [pc, #80]	@ (80013b8 <_sbrk+0x5c>)
 8001366:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <_sbrk+0x60>)
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001370:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <_sbrk+0x64>)
 800137a:	4a12      	ldr	r2, [pc, #72]	@ (80013c4 <_sbrk+0x68>)
 800137c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	18d3      	adds	r3, r2, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	429a      	cmp	r2, r3
 800138a:	d207      	bcs.n	800139c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800138c:	f003 fc64 	bl	8004c58 <__errno>
 8001390:	0003      	movs	r3, r0
 8001392:	220c      	movs	r2, #12
 8001394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001396:	2301      	movs	r3, #1
 8001398:	425b      	negs	r3, r3
 800139a:	e009      	b.n	80013b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800139c:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <_sbrk+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a2:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	18d2      	adds	r2, r2, r3
 80013aa:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <_sbrk+0x64>)
 80013ac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	0018      	movs	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b006      	add	sp, #24
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20002000 	.word	0x20002000
 80013bc:	00000400 	.word	0x00000400
 80013c0:	20000684 	.word	0x20000684
 80013c4:	200007d8 	.word	0x200007d8

080013c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013cc:	46c0      	nop			@ (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80013d4:	480d      	ldr	r0, [pc, #52]	@ (800140c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80013d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013d8:	f7ff fff6 	bl	80013c8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013dc:	480c      	ldr	r0, [pc, #48]	@ (8001410 <LoopForever+0x6>)
  ldr r1, =_edata
 80013de:	490d      	ldr	r1, [pc, #52]	@ (8001414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001418 <LoopForever+0xe>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0a      	ldr	r2, [pc, #40]	@ (800141c <LoopForever+0x12>)
  ldr r4, =_ebss
 80013f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001420 <LoopForever+0x16>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001402:	f003 fc2f 	bl	8004c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001406:	f7ff f9fb 	bl	8000800 <main>

0800140a <LoopForever>:

LoopForever:
    b LoopForever
 800140a:	e7fe      	b.n	800140a <LoopForever>
   ldr   r0, =_estack
 800140c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001418:	080057a4 	.word	0x080057a4
  ldr r2, =_sbss
 800141c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001420:	200007d4 	.word	0x200007d4

08001424 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC1_COMP_IRQHandler>
	...

08001428 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800142e:	1dfb      	adds	r3, r7, #7
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001434:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <HAL_Init+0x3c>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <HAL_Init+0x3c>)
 800143a:	2140      	movs	r1, #64	@ 0x40
 800143c:	430a      	orrs	r2, r1
 800143e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001440:	2003      	movs	r0, #3
 8001442:	f000 f811 	bl	8001468 <HAL_InitTick>
 8001446:	1e03      	subs	r3, r0, #0
 8001448:	d003      	beq.n	8001452 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800144a:	1dfb      	adds	r3, r7, #7
 800144c:	2201      	movs	r2, #1
 800144e:	701a      	strb	r2, [r3, #0]
 8001450:	e001      	b.n	8001456 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001452:	f7ff fdd9 	bl	8001008 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	781b      	ldrb	r3, [r3, #0]
}
 800145a:	0018      	movs	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	b002      	add	sp, #8
 8001460:	bd80      	pop	{r7, pc}
 8001462:	46c0      	nop			@ (mov r8, r8)
 8001464:	40022000 	.word	0x40022000

08001468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001470:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <HAL_InitTick+0x5c>)
 8001472:	681c      	ldr	r4, [r3, #0]
 8001474:	4b14      	ldr	r3, [pc, #80]	@ (80014c8 <HAL_InitTick+0x60>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	0019      	movs	r1, r3
 800147a:	23fa      	movs	r3, #250	@ 0xfa
 800147c:	0098      	lsls	r0, r3, #2
 800147e:	f7fe fe4d 	bl	800011c <__udivsi3>
 8001482:	0003      	movs	r3, r0
 8001484:	0019      	movs	r1, r3
 8001486:	0020      	movs	r0, r4
 8001488:	f7fe fe48 	bl	800011c <__udivsi3>
 800148c:	0003      	movs	r3, r0
 800148e:	0018      	movs	r0, r3
 8001490:	f000 fb49 	bl	8001b26 <HAL_SYSTICK_Config>
 8001494:	1e03      	subs	r3, r0, #0
 8001496:	d001      	beq.n	800149c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e00f      	b.n	80014bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d80b      	bhi.n	80014ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	2301      	movs	r3, #1
 80014a6:	425b      	negs	r3, r3
 80014a8:	2200      	movs	r2, #0
 80014aa:	0018      	movs	r0, r3
 80014ac:	f000 fb16 	bl	8001adc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b0:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_InitTick+0x64>)
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e000      	b.n	80014bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	0018      	movs	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	b003      	add	sp, #12
 80014c2:	bd90      	pop	{r4, r7, pc}
 80014c4:	20000000 	.word	0x20000000
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20000004 	.word	0x20000004

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <HAL_IncTick+0x1c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	001a      	movs	r2, r3
 80014da:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <HAL_IncTick+0x20>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	18d2      	adds	r2, r2, r3
 80014e0:	4b03      	ldr	r3, [pc, #12]	@ (80014f0 <HAL_IncTick+0x20>)
 80014e2:	601a      	str	r2, [r3, #0]
}
 80014e4:	46c0      	nop			@ (mov r8, r8)
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	20000008 	.word	0x20000008
 80014f0:	20000688 	.word	0x20000688

080014f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  return uwTick;
 80014f8:	4b02      	ldr	r3, [pc, #8]	@ (8001504 <HAL_GetTick+0x10>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	0018      	movs	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			@ (mov r8, r8)
 8001504:	20000688 	.word	0x20000688

08001508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001510:	f7ff fff0 	bl	80014f4 <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3301      	adds	r3, #1
 8001520:	d005      	beq.n	800152e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001522:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <HAL_Delay+0x44>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	001a      	movs	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	189b      	adds	r3, r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800152e:	46c0      	nop			@ (mov r8, r8)
 8001530:	f7ff ffe0 	bl	80014f4 <HAL_GetTick>
 8001534:	0002      	movs	r2, r0
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	429a      	cmp	r2, r3
 800153e:	d8f7      	bhi.n	8001530 <HAL_Delay+0x28>
  {
  }
}
 8001540:	46c0      	nop			@ (mov r8, r8)
 8001542:	46c0      	nop			@ (mov r8, r8)
 8001544:	46bd      	mov	sp, r7
 8001546:	b004      	add	sp, #16
 8001548:	bd80      	pop	{r7, pc}
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	20000008 	.word	0x20000008

08001550 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e159      	b.n	8001816 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10a      	bne.n	8001580 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2250      	movs	r2, #80	@ 0x50
 8001574:	2100      	movs	r1, #0
 8001576:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	0018      	movs	r0, r3
 800157c:	f7ff fd58 	bl	8001030 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001584:	2210      	movs	r2, #16
 8001586:	4013      	ands	r3, r2
 8001588:	2b10      	cmp	r3, #16
 800158a:	d005      	beq.n	8001598 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2204      	movs	r2, #4
 8001594:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001596:	d00b      	beq.n	80015b0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800159c:	2210      	movs	r2, #16
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2250      	movs	r2, #80	@ 0x50
 80015a8:	2100      	movs	r1, #0
 80015aa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e132      	b.n	8001816 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b4:	4a9a      	ldr	r2, [pc, #616]	@ (8001820 <HAL_ADC_Init+0x2d0>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	2202      	movs	r2, #2
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2203      	movs	r2, #3
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d108      	bne.n	80015e0 <HAL_ADC_Init+0x90>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2201      	movs	r2, #1
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d101      	bne.n	80015e0 <HAL_ADC_Init+0x90>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <HAL_ADC_Init+0x92>
 80015e0:	2300      	movs	r3, #0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d149      	bne.n	800167a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	23c0      	movs	r3, #192	@ 0xc0
 80015ec:	061b      	lsls	r3, r3, #24
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d00b      	beq.n	800160a <HAL_ADC_Init+0xba>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	2380      	movs	r3, #128	@ 0x80
 80015f8:	05db      	lsls	r3, r3, #23
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d005      	beq.n	800160a <HAL_ADC_Init+0xba>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	2380      	movs	r3, #128	@ 0x80
 8001604:	061b      	lsls	r3, r3, #24
 8001606:	429a      	cmp	r2, r3
 8001608:	d111      	bne.n	800162e <HAL_ADC_Init+0xde>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	691a      	ldr	r2, [r3, #16]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	0092      	lsls	r2, r2, #2
 8001616:	0892      	lsrs	r2, r2, #2
 8001618:	611a      	str	r2, [r3, #16]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6919      	ldr	r1, [r3, #16]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	611a      	str	r2, [r3, #16]
 800162c:	e014      	b.n	8001658 <HAL_ADC_Init+0x108>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	691a      	ldr	r2, [r3, #16]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	0092      	lsls	r2, r2, #2
 800163a:	0892      	lsrs	r2, r2, #2
 800163c:	611a      	str	r2, [r3, #16]
 800163e:	4b79      	ldr	r3, [pc, #484]	@ (8001824 <HAL_ADC_Init+0x2d4>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4b78      	ldr	r3, [pc, #480]	@ (8001824 <HAL_ADC_Init+0x2d4>)
 8001644:	4978      	ldr	r1, [pc, #480]	@ (8001828 <HAL_ADC_Init+0x2d8>)
 8001646:	400a      	ands	r2, r1
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	4b76      	ldr	r3, [pc, #472]	@ (8001824 <HAL_ADC_Init+0x2d4>)
 800164c:	6819      	ldr	r1, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	4b74      	ldr	r3, [pc, #464]	@ (8001824 <HAL_ADC_Init+0x2d4>)
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2118      	movs	r1, #24
 8001664:	438a      	bics	r2, r1
 8001666:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68d9      	ldr	r1, [r3, #12]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800167a:	4b6a      	ldr	r3, [pc, #424]	@ (8001824 <HAL_ADC_Init+0x2d4>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b69      	ldr	r3, [pc, #420]	@ (8001824 <HAL_ADC_Init+0x2d4>)
 8001680:	496a      	ldr	r1, [pc, #424]	@ (800182c <HAL_ADC_Init+0x2dc>)
 8001682:	400a      	ands	r2, r1
 8001684:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001686:	4b67      	ldr	r3, [pc, #412]	@ (8001824 <HAL_ADC_Init+0x2d4>)
 8001688:	6819      	ldr	r1, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800168e:	065a      	lsls	r2, r3, #25
 8001690:	4b64      	ldr	r3, [pc, #400]	@ (8001824 <HAL_ADC_Init+0x2d4>)
 8001692:	430a      	orrs	r2, r1
 8001694:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	2380      	movs	r3, #128	@ 0x80
 800169e:	055b      	lsls	r3, r3, #21
 80016a0:	4013      	ands	r3, r2
 80016a2:	d108      	bne.n	80016b6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2180      	movs	r1, #128	@ 0x80
 80016b0:	0549      	lsls	r1, r1, #21
 80016b2:	430a      	orrs	r2, r1
 80016b4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	495b      	ldr	r1, [pc, #364]	@ (8001830 <HAL_ADC_Init+0x2e0>)
 80016c2:	400a      	ands	r2, r1
 80016c4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68d9      	ldr	r1, [r3, #12]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d101      	bne.n	80016dc <HAL_ADC_Init+0x18c>
 80016d8:	2304      	movs	r3, #4
 80016da:	e000      	b.n	80016de <HAL_ADC_Init+0x18e>
 80016dc:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80016de:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2020      	movs	r0, #32
 80016e4:	5c1b      	ldrb	r3, [r3, r0]
 80016e6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80016e8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	202c      	movs	r0, #44	@ 0x2c
 80016ee:	5c1b      	ldrb	r3, [r3, r0]
 80016f0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80016f2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80016f8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001700:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001708:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001716:	23c2      	movs	r3, #194	@ 0xc2
 8001718:	33ff      	adds	r3, #255	@ 0xff
 800171a:	429a      	cmp	r2, r3
 800171c:	d00b      	beq.n	8001736 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68d9      	ldr	r1, [r3, #12]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2221      	movs	r2, #33	@ 0x21
 800173a:	5c9b      	ldrb	r3, [r3, r2]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d11a      	bne.n	8001776 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2220      	movs	r2, #32
 8001744:	5c9b      	ldrb	r3, [r3, r2]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2180      	movs	r1, #128	@ 0x80
 8001756:	0249      	lsls	r1, r1, #9
 8001758:	430a      	orrs	r2, r1
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	e00b      	b.n	8001776 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001762:	2220      	movs	r2, #32
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176e:	2201      	movs	r2, #1
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800177a:	2b01      	cmp	r3, #1
 800177c:	d11f      	bne.n	80017be <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	492a      	ldr	r1, [pc, #168]	@ (8001834 <HAL_ADC_Init+0x2e4>)
 800178a:	400a      	ands	r2, r1
 800178c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6919      	ldr	r1, [r3, #16]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800179c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80017a2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2101      	movs	r1, #1
 80017b8:	430a      	orrs	r2, r1
 80017ba:	611a      	str	r2, [r3, #16]
 80017bc:	e00e      	b.n	80017dc <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	2201      	movs	r2, #1
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d107      	bne.n	80017dc <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2101      	movs	r1, #1
 80017d8:	438a      	bics	r2, r1
 80017da:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	695a      	ldr	r2, [r3, #20]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2107      	movs	r1, #7
 80017e8:	438a      	bics	r2, r1
 80017ea:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6959      	ldr	r1, [r3, #20]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001808:	2203      	movs	r2, #3
 800180a:	4393      	bics	r3, r2
 800180c:	2201      	movs	r2, #1
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	0018      	movs	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	b002      	add	sp, #8
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	fffffefd 	.word	0xfffffefd
 8001824:	40012708 	.word	0x40012708
 8001828:	ffc3ffff 	.word	0xffc3ffff
 800182c:	fdffffff 	.word	0xfdffffff
 8001830:	fffe0219 	.word	0xfffe0219
 8001834:	fffffc03 	.word	0xfffffc03

08001838 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2250      	movs	r2, #80	@ 0x50
 8001846:	5c9b      	ldrb	r3, [r3, r2]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_ADC_ConfigChannel+0x18>
 800184c:	2302      	movs	r3, #2
 800184e:	e06c      	b.n	800192a <HAL_ADC_ConfigChannel+0xf2>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2250      	movs	r2, #80	@ 0x50
 8001854:	2101      	movs	r1, #1
 8001856:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2204      	movs	r2, #4
 8001860:	4013      	ands	r3, r2
 8001862:	d00b      	beq.n	800187c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001868:	2220      	movs	r2, #32
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2250      	movs	r2, #80	@ 0x50
 8001874:	2100      	movs	r1, #0
 8001876:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e056      	b.n	800192a <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	4a2c      	ldr	r2, [pc, #176]	@ (8001934 <HAL_ADC_ConfigChannel+0xfc>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d028      	beq.n	80018d8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	035b      	lsls	r3, r3, #13
 8001892:	0b5a      	lsrs	r2, r3, #13
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	2380      	movs	r3, #128	@ 0x80
 80018a2:	02db      	lsls	r3, r3, #11
 80018a4:	4013      	ands	r3, r2
 80018a6:	d009      	beq.n	80018bc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80018a8:	4b23      	ldr	r3, [pc, #140]	@ (8001938 <HAL_ADC_ConfigChannel+0x100>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b22      	ldr	r3, [pc, #136]	@ (8001938 <HAL_ADC_ConfigChannel+0x100>)
 80018ae:	2180      	movs	r1, #128	@ 0x80
 80018b0:	0409      	lsls	r1, r1, #16
 80018b2:	430a      	orrs	r2, r1
 80018b4:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80018b6:	200a      	movs	r0, #10
 80018b8:	f000 f844 	bl	8001944 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	2380      	movs	r3, #128	@ 0x80
 80018c2:	029b      	lsls	r3, r3, #10
 80018c4:	4013      	ands	r3, r2
 80018c6:	d02b      	beq.n	8001920 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80018c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <HAL_ADC_ConfigChannel+0x100>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001938 <HAL_ADC_ConfigChannel+0x100>)
 80018ce:	2180      	movs	r1, #128	@ 0x80
 80018d0:	03c9      	lsls	r1, r1, #15
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	e023      	b.n	8001920 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	035b      	lsls	r3, r3, #13
 80018e4:	0b5b      	lsrs	r3, r3, #13
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	400a      	ands	r2, r1
 80018ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2380      	movs	r3, #128	@ 0x80
 80018f6:	02db      	lsls	r3, r3, #11
 80018f8:	4013      	ands	r3, r2
 80018fa:	d005      	beq.n	8001908 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80018fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <HAL_ADC_ConfigChannel+0x100>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b0d      	ldr	r3, [pc, #52]	@ (8001938 <HAL_ADC_ConfigChannel+0x100>)
 8001902:	490e      	ldr	r1, [pc, #56]	@ (800193c <HAL_ADC_ConfigChannel+0x104>)
 8001904:	400a      	ands	r2, r1
 8001906:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	2380      	movs	r3, #128	@ 0x80
 800190e:	029b      	lsls	r3, r3, #10
 8001910:	4013      	ands	r3, r2
 8001912:	d005      	beq.n	8001920 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001914:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <HAL_ADC_ConfigChannel+0x100>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b07      	ldr	r3, [pc, #28]	@ (8001938 <HAL_ADC_ConfigChannel+0x100>)
 800191a:	4909      	ldr	r1, [pc, #36]	@ (8001940 <HAL_ADC_ConfigChannel+0x108>)
 800191c:	400a      	ands	r2, r1
 800191e:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2250      	movs	r2, #80	@ 0x50
 8001924:	2100      	movs	r1, #0
 8001926:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	0018      	movs	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	b002      	add	sp, #8
 8001930:	bd80      	pop	{r7, pc}
 8001932:	46c0      	nop			@ (mov r8, r8)
 8001934:	00001001 	.word	0x00001001
 8001938:	40012708 	.word	0x40012708
 800193c:	ff7fffff 	.word	0xff7fffff
 8001940:	ffbfffff 	.word	0xffbfffff

08001944 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800194c:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <ADC_DelayMicroSecond+0x38>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	490b      	ldr	r1, [pc, #44]	@ (8001980 <ADC_DelayMicroSecond+0x3c>)
 8001952:	0018      	movs	r0, r3
 8001954:	f7fe fbe2 	bl	800011c <__udivsi3>
 8001958:	0003      	movs	r3, r0
 800195a:	001a      	movs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4353      	muls	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001962:	e002      	b.n	800196a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3b01      	subs	r3, #1
 8001968:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f9      	bne.n	8001964 <ADC_DelayMicroSecond+0x20>
  }
}
 8001970:	46c0      	nop			@ (mov r8, r8)
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	46bd      	mov	sp, r7
 8001976:	b004      	add	sp, #16
 8001978:	bd80      	pop	{r7, pc}
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	20000000 	.word	0x20000000
 8001980:	000f4240 	.word	0x000f4240

08001984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	0002      	movs	r2, r0
 800198c:	1dfb      	adds	r3, r7, #7
 800198e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001990:	1dfb      	adds	r3, r7, #7
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b7f      	cmp	r3, #127	@ 0x7f
 8001996:	d809      	bhi.n	80019ac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001998:	1dfb      	adds	r3, r7, #7
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	001a      	movs	r2, r3
 800199e:	231f      	movs	r3, #31
 80019a0:	401a      	ands	r2, r3
 80019a2:	4b04      	ldr	r3, [pc, #16]	@ (80019b4 <__NVIC_EnableIRQ+0x30>)
 80019a4:	2101      	movs	r1, #1
 80019a6:	4091      	lsls	r1, r2
 80019a8:	000a      	movs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]
  }
}
 80019ac:	46c0      	nop			@ (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b002      	add	sp, #8
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	e000e100 	.word	0xe000e100

080019b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	0002      	movs	r2, r0
 80019c0:	6039      	str	r1, [r7, #0]
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80019cc:	d828      	bhi.n	8001a20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019ce:	4a2f      	ldr	r2, [pc, #188]	@ (8001a8c <__NVIC_SetPriority+0xd4>)
 80019d0:	1dfb      	adds	r3, r7, #7
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b25b      	sxtb	r3, r3
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	33c0      	adds	r3, #192	@ 0xc0
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	589b      	ldr	r3, [r3, r2]
 80019de:	1dfa      	adds	r2, r7, #7
 80019e0:	7812      	ldrb	r2, [r2, #0]
 80019e2:	0011      	movs	r1, r2
 80019e4:	2203      	movs	r2, #3
 80019e6:	400a      	ands	r2, r1
 80019e8:	00d2      	lsls	r2, r2, #3
 80019ea:	21ff      	movs	r1, #255	@ 0xff
 80019ec:	4091      	lsls	r1, r2
 80019ee:	000a      	movs	r2, r1
 80019f0:	43d2      	mvns	r2, r2
 80019f2:	401a      	ands	r2, r3
 80019f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	019b      	lsls	r3, r3, #6
 80019fa:	22ff      	movs	r2, #255	@ 0xff
 80019fc:	401a      	ands	r2, r3
 80019fe:	1dfb      	adds	r3, r7, #7
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	0018      	movs	r0, r3
 8001a04:	2303      	movs	r3, #3
 8001a06:	4003      	ands	r3, r0
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a0c:	481f      	ldr	r0, [pc, #124]	@ (8001a8c <__NVIC_SetPriority+0xd4>)
 8001a0e:	1dfb      	adds	r3, r7, #7
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	b25b      	sxtb	r3, r3
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	430a      	orrs	r2, r1
 8001a18:	33c0      	adds	r3, #192	@ 0xc0
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a1e:	e031      	b.n	8001a84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a20:	4a1b      	ldr	r2, [pc, #108]	@ (8001a90 <__NVIC_SetPriority+0xd8>)
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	0019      	movs	r1, r3
 8001a28:	230f      	movs	r3, #15
 8001a2a:	400b      	ands	r3, r1
 8001a2c:	3b08      	subs	r3, #8
 8001a2e:	089b      	lsrs	r3, r3, #2
 8001a30:	3306      	adds	r3, #6
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	18d3      	adds	r3, r2, r3
 8001a36:	3304      	adds	r3, #4
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	1dfa      	adds	r2, r7, #7
 8001a3c:	7812      	ldrb	r2, [r2, #0]
 8001a3e:	0011      	movs	r1, r2
 8001a40:	2203      	movs	r2, #3
 8001a42:	400a      	ands	r2, r1
 8001a44:	00d2      	lsls	r2, r2, #3
 8001a46:	21ff      	movs	r1, #255	@ 0xff
 8001a48:	4091      	lsls	r1, r2
 8001a4a:	000a      	movs	r2, r1
 8001a4c:	43d2      	mvns	r2, r2
 8001a4e:	401a      	ands	r2, r3
 8001a50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	019b      	lsls	r3, r3, #6
 8001a56:	22ff      	movs	r2, #255	@ 0xff
 8001a58:	401a      	ands	r2, r3
 8001a5a:	1dfb      	adds	r3, r7, #7
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	0018      	movs	r0, r3
 8001a60:	2303      	movs	r3, #3
 8001a62:	4003      	ands	r3, r0
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a68:	4809      	ldr	r0, [pc, #36]	@ (8001a90 <__NVIC_SetPriority+0xd8>)
 8001a6a:	1dfb      	adds	r3, r7, #7
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	001c      	movs	r4, r3
 8001a70:	230f      	movs	r3, #15
 8001a72:	4023      	ands	r3, r4
 8001a74:	3b08      	subs	r3, #8
 8001a76:	089b      	lsrs	r3, r3, #2
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	3306      	adds	r3, #6
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	18c3      	adds	r3, r0, r3
 8001a80:	3304      	adds	r3, #4
 8001a82:	601a      	str	r2, [r3, #0]
}
 8001a84:	46c0      	nop			@ (mov r8, r8)
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b003      	add	sp, #12
 8001a8a:	bd90      	pop	{r4, r7, pc}
 8001a8c:	e000e100 	.word	0xe000e100
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	1e5a      	subs	r2, r3, #1
 8001aa0:	2380      	movs	r3, #128	@ 0x80
 8001aa2:	045b      	lsls	r3, r3, #17
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d301      	bcc.n	8001aac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e010      	b.n	8001ace <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aac:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <SysTick_Config+0x44>)
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	3a01      	subs	r2, #1
 8001ab2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	425b      	negs	r3, r3
 8001ab8:	2103      	movs	r1, #3
 8001aba:	0018      	movs	r0, r3
 8001abc:	f7ff ff7c 	bl	80019b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	@ (8001ad8 <SysTick_Config+0x44>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	@ (8001ad8 <SysTick_Config+0x44>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	0018      	movs	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	b002      	add	sp, #8
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	46c0      	nop			@ (mov r8, r8)
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	210f      	movs	r1, #15
 8001ae8:	187b      	adds	r3, r7, r1
 8001aea:	1c02      	adds	r2, r0, #0
 8001aec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	187b      	adds	r3, r7, r1
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	b25b      	sxtb	r3, r3
 8001af6:	0011      	movs	r1, r2
 8001af8:	0018      	movs	r0, r3
 8001afa:	f7ff ff5d 	bl	80019b8 <__NVIC_SetPriority>
}
 8001afe:	46c0      	nop			@ (mov r8, r8)
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b004      	add	sp, #16
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	0002      	movs	r2, r0
 8001b0e:	1dfb      	adds	r3, r7, #7
 8001b10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b12:	1dfb      	adds	r3, r7, #7
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	b25b      	sxtb	r3, r3
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f7ff ff33 	bl	8001984 <__NVIC_EnableIRQ>
}
 8001b1e:	46c0      	nop			@ (mov r8, r8)
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b002      	add	sp, #8
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	0018      	movs	r0, r3
 8001b32:	f7ff ffaf 	bl	8001a94 <SysTick_Config>
 8001b36:	0003      	movs	r3, r0
}
 8001b38:	0018      	movs	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b002      	add	sp, #8
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e061      	b.n	8001c16 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a32      	ldr	r2, [pc, #200]	@ (8001c20 <HAL_DMA_Init+0xe0>)
 8001b58:	4694      	mov	ip, r2
 8001b5a:	4463      	add	r3, ip
 8001b5c:	2114      	movs	r1, #20
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f7fe fadc 	bl	800011c <__udivsi3>
 8001b64:	0003      	movs	r3, r0
 8001b66:	009a      	lsls	r2, r3, #2
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c24 <HAL_DMA_Init+0xe4>)
 8001b70:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2225      	movs	r2, #37	@ 0x25
 8001b76:	2102      	movs	r1, #2
 8001b78:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4a28      	ldr	r2, [pc, #160]	@ (8001c28 <HAL_DMA_Init+0xe8>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001b92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001baa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	2380      	movs	r3, #128	@ 0x80
 8001bc6:	01db      	lsls	r3, r3, #7
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d018      	beq.n	8001bfe <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001bcc:	4b17      	ldr	r3, [pc, #92]	@ (8001c2c <HAL_DMA_Init+0xec>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd4:	211c      	movs	r1, #28
 8001bd6:	400b      	ands	r3, r1
 8001bd8:	210f      	movs	r1, #15
 8001bda:	4099      	lsls	r1, r3
 8001bdc:	000b      	movs	r3, r1
 8001bde:	43d9      	mvns	r1, r3
 8001be0:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <HAL_DMA_Init+0xec>)
 8001be2:	400a      	ands	r2, r1
 8001be4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001be6:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <HAL_DMA_Init+0xec>)
 8001be8:	6819      	ldr	r1, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	201c      	movs	r0, #28
 8001bf4:	4003      	ands	r3, r0
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <HAL_DMA_Init+0xec>)
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2225      	movs	r2, #37	@ 0x25
 8001c08:	2101      	movs	r1, #1
 8001c0a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2224      	movs	r2, #36	@ 0x24
 8001c10:	2100      	movs	r1, #0
 8001c12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	0018      	movs	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b004      	add	sp, #16
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	46c0      	nop			@ (mov r8, r8)
 8001c20:	bffdfff8 	.word	0xbffdfff8
 8001c24:	40020000 	.word	0x40020000
 8001c28:	ffff800f 	.word	0xffff800f
 8001c2c:	400200a8 	.word	0x400200a8

08001c30 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c38:	230f      	movs	r3, #15
 8001c3a:	18fb      	adds	r3, r7, r3
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2225      	movs	r2, #37	@ 0x25
 8001c44:	5c9b      	ldrb	r3, [r3, r2]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d008      	beq.n	8001c5e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2204      	movs	r2, #4
 8001c50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2224      	movs	r2, #36	@ 0x24
 8001c56:	2100      	movs	r1, #0
 8001c58:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e024      	b.n	8001ca8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	210e      	movs	r1, #14
 8001c6a:	438a      	bics	r2, r1
 8001c6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2101      	movs	r1, #1
 8001c7a:	438a      	bics	r2, r1
 8001c7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c82:	221c      	movs	r2, #28
 8001c84:	401a      	ands	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	4091      	lsls	r1, r2
 8001c8e:	000a      	movs	r2, r1
 8001c90:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2225      	movs	r2, #37	@ 0x25
 8001c96:	2101      	movs	r1, #1
 8001c98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2224      	movs	r2, #36	@ 0x24
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	5499      	strb	r1, [r3, r2]

    return status;
 8001ca2:	230f      	movs	r3, #15
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001ca8:	0018      	movs	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b004      	add	sp, #16
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb8:	210f      	movs	r1, #15
 8001cba:	187b      	adds	r3, r7, r1
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2225      	movs	r2, #37	@ 0x25
 8001cc4:	5c9b      	ldrb	r3, [r3, r2]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d006      	beq.n	8001cda <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2204      	movs	r2, #4
 8001cd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001cd2:	187b      	adds	r3, r7, r1
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	701a      	strb	r2, [r3, #0]
 8001cd8:	e02a      	b.n	8001d30 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	210e      	movs	r1, #14
 8001ce6:	438a      	bics	r2, r1
 8001ce8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	438a      	bics	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfe:	221c      	movs	r2, #28
 8001d00:	401a      	ands	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	2101      	movs	r1, #1
 8001d08:	4091      	lsls	r1, r2
 8001d0a:	000a      	movs	r2, r1
 8001d0c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2225      	movs	r2, #37	@ 0x25
 8001d12:	2101      	movs	r1, #1
 8001d14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2224      	movs	r2, #36	@ 0x24
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d004      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	0010      	movs	r0, r2
 8001d2e:	4798      	blx	r3
    }
  }
  return status;
 8001d30:	230f      	movs	r3, #15
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	781b      	ldrb	r3, [r3, #0]
}
 8001d36:	0018      	movs	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b004      	add	sp, #16
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5a:	221c      	movs	r2, #28
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2204      	movs	r2, #4
 8001d60:	409a      	lsls	r2, r3
 8001d62:	0013      	movs	r3, r2
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	4013      	ands	r3, r2
 8001d68:	d026      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x7a>
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d022      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d107      	bne.n	8001d8e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2104      	movs	r1, #4
 8001d8a:	438a      	bics	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	221c      	movs	r2, #28
 8001d94:	401a      	ands	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	2104      	movs	r1, #4
 8001d9c:	4091      	lsls	r1, r2
 8001d9e:	000a      	movs	r2, r1
 8001da0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d100      	bne.n	8001dac <HAL_DMA_IRQHandler+0x6e>
 8001daa:	e071      	b.n	8001e90 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	0010      	movs	r0, r2
 8001db4:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001db6:	e06b      	b.n	8001e90 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dbc:	221c      	movs	r2, #28
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	0013      	movs	r3, r2
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d02d      	beq.n	8001e28 <HAL_DMA_IRQHandler+0xea>
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d029      	beq.n	8001e28 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d10b      	bne.n	8001df8 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	210a      	movs	r1, #10
 8001dec:	438a      	bics	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2225      	movs	r2, #37	@ 0x25
 8001df4:	2101      	movs	r1, #1
 8001df6:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfc:	221c      	movs	r2, #28
 8001dfe:	401a      	ands	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e04:	2102      	movs	r1, #2
 8001e06:	4091      	lsls	r1, r2
 8001e08:	000a      	movs	r2, r1
 8001e0a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2224      	movs	r2, #36	@ 0x24
 8001e10:	2100      	movs	r1, #0
 8001e12:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d039      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	0010      	movs	r0, r2
 8001e24:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e26:	e033      	b.n	8001e90 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2c:	221c      	movs	r2, #28
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2208      	movs	r2, #8
 8001e32:	409a      	lsls	r2, r3
 8001e34:	0013      	movs	r3, r2
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d02a      	beq.n	8001e92 <HAL_DMA_IRQHandler+0x154>
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2208      	movs	r2, #8
 8001e40:	4013      	ands	r3, r2
 8001e42:	d026      	beq.n	8001e92 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	210e      	movs	r1, #14
 8001e50:	438a      	bics	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e58:	221c      	movs	r2, #28
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e60:	2101      	movs	r1, #1
 8001e62:	4091      	lsls	r1, r2
 8001e64:	000a      	movs	r2, r1
 8001e66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2225      	movs	r2, #37	@ 0x25
 8001e72:	2101      	movs	r1, #1
 8001e74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2224      	movs	r2, #36	@ 0x24
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	0010      	movs	r0, r2
 8001e8e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e90:	46c0      	nop			@ (mov r8, r8)
 8001e92:	46c0      	nop			@ (mov r8, r8)
}
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b004      	add	sp, #16
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001eb2:	e14f      	b.n	8002154 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4091      	lsls	r1, r2
 8001ebe:	000a      	movs	r2, r1
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d100      	bne.n	8001ecc <HAL_GPIO_Init+0x30>
 8001eca:	e140      	b.n	800214e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d005      	beq.n	8001ee4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2203      	movs	r2, #3
 8001ede:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d130      	bne.n	8001f46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	2203      	movs	r2, #3
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	0013      	movs	r3, r2
 8001ef4:	43da      	mvns	r2, r3
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	409a      	lsls	r2, r3
 8001f06:	0013      	movs	r3, r2
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	0013      	movs	r3, r2
 8001f22:	43da      	mvns	r2, r3
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	091b      	lsrs	r3, r3, #4
 8001f30:	2201      	movs	r2, #1
 8001f32:	401a      	ands	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	409a      	lsls	r2, r3
 8001f38:	0013      	movs	r3, r2
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d017      	beq.n	8001f82 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	0013      	movs	r3, r2
 8001f62:	43da      	mvns	r2, r3
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	409a      	lsls	r2, r3
 8001f74:	0013      	movs	r3, r2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2203      	movs	r2, #3
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d123      	bne.n	8001fd6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	08da      	lsrs	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3208      	adds	r2, #8
 8001f96:	0092      	lsls	r2, r2, #2
 8001f98:	58d3      	ldr	r3, [r2, r3]
 8001f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2207      	movs	r2, #7
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	0013      	movs	r3, r2
 8001faa:	43da      	mvns	r2, r3
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	691a      	ldr	r2, [r3, #16]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2107      	movs	r1, #7
 8001fba:	400b      	ands	r3, r1
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	409a      	lsls	r2, r3
 8001fc0:	0013      	movs	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	0092      	lsls	r2, r2, #2
 8001fd2:	6939      	ldr	r1, [r7, #16]
 8001fd4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	0013      	movs	r3, r2
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	401a      	ands	r2, r3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	0013      	movs	r3, r2
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	23c0      	movs	r3, #192	@ 0xc0
 8002010:	029b      	lsls	r3, r3, #10
 8002012:	4013      	ands	r3, r2
 8002014:	d100      	bne.n	8002018 <HAL_GPIO_Init+0x17c>
 8002016:	e09a      	b.n	800214e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002018:	4b54      	ldr	r3, [pc, #336]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 800201a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800201c:	4b53      	ldr	r3, [pc, #332]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 800201e:	2101      	movs	r1, #1
 8002020:	430a      	orrs	r2, r1
 8002022:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002024:	4a52      	ldr	r2, [pc, #328]	@ (8002170 <HAL_GPIO_Init+0x2d4>)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	089b      	lsrs	r3, r3, #2
 800202a:	3302      	adds	r3, #2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	589b      	ldr	r3, [r3, r2]
 8002030:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2203      	movs	r2, #3
 8002036:	4013      	ands	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	220f      	movs	r2, #15
 800203c:	409a      	lsls	r2, r3
 800203e:	0013      	movs	r3, r2
 8002040:	43da      	mvns	r2, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	23a0      	movs	r3, #160	@ 0xa0
 800204c:	05db      	lsls	r3, r3, #23
 800204e:	429a      	cmp	r2, r3
 8002050:	d019      	beq.n	8002086 <HAL_GPIO_Init+0x1ea>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a47      	ldr	r2, [pc, #284]	@ (8002174 <HAL_GPIO_Init+0x2d8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d013      	beq.n	8002082 <HAL_GPIO_Init+0x1e6>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a46      	ldr	r2, [pc, #280]	@ (8002178 <HAL_GPIO_Init+0x2dc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00d      	beq.n	800207e <HAL_GPIO_Init+0x1e2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a45      	ldr	r2, [pc, #276]	@ (800217c <HAL_GPIO_Init+0x2e0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d007      	beq.n	800207a <HAL_GPIO_Init+0x1de>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a44      	ldr	r2, [pc, #272]	@ (8002180 <HAL_GPIO_Init+0x2e4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_GPIO_Init+0x1da>
 8002072:	2305      	movs	r3, #5
 8002074:	e008      	b.n	8002088 <HAL_GPIO_Init+0x1ec>
 8002076:	2306      	movs	r3, #6
 8002078:	e006      	b.n	8002088 <HAL_GPIO_Init+0x1ec>
 800207a:	2303      	movs	r3, #3
 800207c:	e004      	b.n	8002088 <HAL_GPIO_Init+0x1ec>
 800207e:	2302      	movs	r3, #2
 8002080:	e002      	b.n	8002088 <HAL_GPIO_Init+0x1ec>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_GPIO_Init+0x1ec>
 8002086:	2300      	movs	r3, #0
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	2103      	movs	r1, #3
 800208c:	400a      	ands	r2, r1
 800208e:	0092      	lsls	r2, r2, #2
 8002090:	4093      	lsls	r3, r2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002098:	4935      	ldr	r1, [pc, #212]	@ (8002170 <HAL_GPIO_Init+0x2d4>)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	089b      	lsrs	r3, r3, #2
 800209e:	3302      	adds	r3, #2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020a6:	4b37      	ldr	r3, [pc, #220]	@ (8002184 <HAL_GPIO_Init+0x2e8>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	43da      	mvns	r2, r3
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	2380      	movs	r3, #128	@ 0x80
 80020bc:	035b      	lsls	r3, r3, #13
 80020be:	4013      	ands	r3, r2
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020ca:	4b2e      	ldr	r3, [pc, #184]	@ (8002184 <HAL_GPIO_Init+0x2e8>)
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80020d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002184 <HAL_GPIO_Init+0x2e8>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	43da      	mvns	r2, r3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	2380      	movs	r3, #128	@ 0x80
 80020e6:	039b      	lsls	r3, r3, #14
 80020e8:	4013      	ands	r3, r2
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020f4:	4b23      	ldr	r3, [pc, #140]	@ (8002184 <HAL_GPIO_Init+0x2e8>)
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80020fa:	4b22      	ldr	r3, [pc, #136]	@ (8002184 <HAL_GPIO_Init+0x2e8>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	43da      	mvns	r2, r3
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	2380      	movs	r3, #128	@ 0x80
 8002110:	029b      	lsls	r3, r3, #10
 8002112:	4013      	ands	r3, r2
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800211e:	4b19      	ldr	r3, [pc, #100]	@ (8002184 <HAL_GPIO_Init+0x2e8>)
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002124:	4b17      	ldr	r3, [pc, #92]	@ (8002184 <HAL_GPIO_Init+0x2e8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	43da      	mvns	r2, r3
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	2380      	movs	r3, #128	@ 0x80
 800213a:	025b      	lsls	r3, r3, #9
 800213c:	4013      	ands	r3, r2
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002148:	4b0e      	ldr	r3, [pc, #56]	@ (8002184 <HAL_GPIO_Init+0x2e8>)
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	3301      	adds	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	40da      	lsrs	r2, r3
 800215c:	1e13      	subs	r3, r2, #0
 800215e:	d000      	beq.n	8002162 <HAL_GPIO_Init+0x2c6>
 8002160:	e6a8      	b.n	8001eb4 <HAL_GPIO_Init+0x18>
  }
}
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	46c0      	nop			@ (mov r8, r8)
 8002166:	46bd      	mov	sp, r7
 8002168:	b006      	add	sp, #24
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	40010000 	.word	0x40010000
 8002174:	50000400 	.word	0x50000400
 8002178:	50000800 	.word	0x50000800
 800217c:	50000c00 	.word	0x50000c00
 8002180:	50001c00 	.word	0x50001c00
 8002184:	40010400 	.word	0x40010400

08002188 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	0008      	movs	r0, r1
 8002192:	0011      	movs	r1, r2
 8002194:	1cbb      	adds	r3, r7, #2
 8002196:	1c02      	adds	r2, r0, #0
 8002198:	801a      	strh	r2, [r3, #0]
 800219a:	1c7b      	adds	r3, r7, #1
 800219c:	1c0a      	adds	r2, r1, #0
 800219e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021a0:	1c7b      	adds	r3, r7, #1
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d004      	beq.n	80021b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021a8:	1cbb      	adds	r3, r7, #2
 80021aa:	881a      	ldrh	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80021b0:	e003      	b.n	80021ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80021b2:	1cbb      	adds	r3, r7, #2
 80021b4:	881a      	ldrh	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021ba:	46c0      	nop			@ (mov r8, r8)
 80021bc:	46bd      	mov	sp, r7
 80021be:	b002      	add	sp, #8
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b084      	sub	sp, #16
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	000a      	movs	r2, r1
 80021cc:	1cbb      	adds	r3, r7, #2
 80021ce:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021d6:	1cbb      	adds	r3, r7, #2
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4013      	ands	r3, r2
 80021de:	041a      	lsls	r2, r3, #16
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	1cb9      	adds	r1, r7, #2
 80021e6:	8809      	ldrh	r1, [r1, #0]
 80021e8:	400b      	ands	r3, r1
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	619a      	str	r2, [r3, #24]
}
 80021f0:	46c0      	nop			@ (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b004      	add	sp, #16
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f8:	b5b0      	push	{r4, r5, r7, lr}
 80021fa:	b08a      	sub	sp, #40	@ 0x28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d102      	bne.n	800220c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	f000 fb5a 	bl	80028c0 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800220c:	4bce      	ldr	r3, [pc, #824]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	220c      	movs	r2, #12
 8002212:	4013      	ands	r3, r2
 8002214:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002216:	4bcc      	ldr	r3, [pc, #816]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	2380      	movs	r3, #128	@ 0x80
 800221c:	025b      	lsls	r3, r3, #9
 800221e:	4013      	ands	r3, r2
 8002220:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2201      	movs	r2, #1
 8002228:	4013      	ands	r3, r2
 800222a:	d100      	bne.n	800222e <HAL_RCC_OscConfig+0x36>
 800222c:	e07c      	b.n	8002328 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	2b08      	cmp	r3, #8
 8002232:	d007      	beq.n	8002244 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	2b0c      	cmp	r3, #12
 8002238:	d111      	bne.n	800225e <HAL_RCC_OscConfig+0x66>
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	2380      	movs	r3, #128	@ 0x80
 800223e:	025b      	lsls	r3, r3, #9
 8002240:	429a      	cmp	r2, r3
 8002242:	d10c      	bne.n	800225e <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	4bc0      	ldr	r3, [pc, #768]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2380      	movs	r3, #128	@ 0x80
 800224a:	029b      	lsls	r3, r3, #10
 800224c:	4013      	ands	r3, r2
 800224e:	d100      	bne.n	8002252 <HAL_RCC_OscConfig+0x5a>
 8002250:	e069      	b.n	8002326 <HAL_RCC_OscConfig+0x12e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d165      	bne.n	8002326 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e330      	b.n	80028c0 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	2380      	movs	r3, #128	@ 0x80
 8002264:	025b      	lsls	r3, r3, #9
 8002266:	429a      	cmp	r2, r3
 8002268:	d107      	bne.n	800227a <HAL_RCC_OscConfig+0x82>
 800226a:	4bb7      	ldr	r3, [pc, #732]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4bb6      	ldr	r3, [pc, #728]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 8002270:	2180      	movs	r1, #128	@ 0x80
 8002272:	0249      	lsls	r1, r1, #9
 8002274:	430a      	orrs	r2, r1
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	e027      	b.n	80022ca <HAL_RCC_OscConfig+0xd2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	23a0      	movs	r3, #160	@ 0xa0
 8002280:	02db      	lsls	r3, r3, #11
 8002282:	429a      	cmp	r2, r3
 8002284:	d10e      	bne.n	80022a4 <HAL_RCC_OscConfig+0xac>
 8002286:	4bb0      	ldr	r3, [pc, #704]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	4baf      	ldr	r3, [pc, #700]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 800228c:	2180      	movs	r1, #128	@ 0x80
 800228e:	02c9      	lsls	r1, r1, #11
 8002290:	430a      	orrs	r2, r1
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	4bac      	ldr	r3, [pc, #688]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4bab      	ldr	r3, [pc, #684]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 800229a:	2180      	movs	r1, #128	@ 0x80
 800229c:	0249      	lsls	r1, r1, #9
 800229e:	430a      	orrs	r2, r1
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	e012      	b.n	80022ca <HAL_RCC_OscConfig+0xd2>
 80022a4:	4ba8      	ldr	r3, [pc, #672]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4ba7      	ldr	r3, [pc, #668]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 80022aa:	49a8      	ldr	r1, [pc, #672]	@ (800254c <HAL_RCC_OscConfig+0x354>)
 80022ac:	400a      	ands	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	4ba5      	ldr	r3, [pc, #660]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	2380      	movs	r3, #128	@ 0x80
 80022b6:	025b      	lsls	r3, r3, #9
 80022b8:	4013      	ands	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4ba2      	ldr	r3, [pc, #648]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4ba1      	ldr	r3, [pc, #644]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 80022c4:	49a2      	ldr	r1, [pc, #648]	@ (8002550 <HAL_RCC_OscConfig+0x358>)
 80022c6:	400a      	ands	r2, r1
 80022c8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d014      	beq.n	80022fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d2:	f7ff f90f 	bl	80014f4 <HAL_GetTick>
 80022d6:	0003      	movs	r3, r0
 80022d8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022dc:	f7ff f90a 	bl	80014f4 <HAL_GetTick>
 80022e0:	0002      	movs	r2, r0
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	@ 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e2e8      	b.n	80028c0 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022ee:	4b96      	ldr	r3, [pc, #600]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	2380      	movs	r3, #128	@ 0x80
 80022f4:	029b      	lsls	r3, r3, #10
 80022f6:	4013      	ands	r3, r2
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0xe4>
 80022fa:	e015      	b.n	8002328 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7ff f8fa 	bl	80014f4 <HAL_GetTick>
 8002300:	0003      	movs	r3, r0
 8002302:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002306:	f7ff f8f5 	bl	80014f4 <HAL_GetTick>
 800230a:	0002      	movs	r2, r0
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b64      	cmp	r3, #100	@ 0x64
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e2d3      	b.n	80028c0 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002318:	4b8b      	ldr	r3, [pc, #556]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	2380      	movs	r3, #128	@ 0x80
 800231e:	029b      	lsls	r3, r3, #10
 8002320:	4013      	ands	r3, r2
 8002322:	d1f0      	bne.n	8002306 <HAL_RCC_OscConfig+0x10e>
 8002324:	e000      	b.n	8002328 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002326:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2202      	movs	r2, #2
 800232e:	4013      	ands	r3, r2
 8002330:	d100      	bne.n	8002334 <HAL_RCC_OscConfig+0x13c>
 8002332:	e08b      	b.n	800244c <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	2b04      	cmp	r3, #4
 800233e:	d005      	beq.n	800234c <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d13e      	bne.n	80023c4 <HAL_RCC_OscConfig+0x1cc>
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d13b      	bne.n	80023c4 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800234c:	4b7e      	ldr	r3, [pc, #504]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2204      	movs	r2, #4
 8002352:	4013      	ands	r3, r2
 8002354:	d004      	beq.n	8002360 <HAL_RCC_OscConfig+0x168>
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e2af      	b.n	80028c0 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002360:	4b79      	ldr	r3, [pc, #484]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	4a7b      	ldr	r2, [pc, #492]	@ (8002554 <HAL_RCC_OscConfig+0x35c>)
 8002366:	4013      	ands	r3, r2
 8002368:	0019      	movs	r1, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	021a      	lsls	r2, r3, #8
 8002370:	4b75      	ldr	r3, [pc, #468]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 8002372:	430a      	orrs	r2, r1
 8002374:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002376:	4b74      	ldr	r3, [pc, #464]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2209      	movs	r2, #9
 800237c:	4393      	bics	r3, r2
 800237e:	0019      	movs	r1, r3
 8002380:	4b71      	ldr	r3, [pc, #452]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002388:	f000 fc7a 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 800238c:	0001      	movs	r1, r0
 800238e:	4b6e      	ldr	r3, [pc, #440]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	220f      	movs	r2, #15
 8002396:	4013      	ands	r3, r2
 8002398:	4a6f      	ldr	r2, [pc, #444]	@ (8002558 <HAL_RCC_OscConfig+0x360>)
 800239a:	5cd3      	ldrb	r3, [r2, r3]
 800239c:	000a      	movs	r2, r1
 800239e:	40da      	lsrs	r2, r3
 80023a0:	4b6e      	ldr	r3, [pc, #440]	@ (800255c <HAL_RCC_OscConfig+0x364>)
 80023a2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80023a4:	4b6e      	ldr	r3, [pc, #440]	@ (8002560 <HAL_RCC_OscConfig+0x368>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2513      	movs	r5, #19
 80023aa:	197c      	adds	r4, r7, r5
 80023ac:	0018      	movs	r0, r3
 80023ae:	f7ff f85b 	bl	8001468 <HAL_InitTick>
 80023b2:	0003      	movs	r3, r0
 80023b4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80023b6:	197b      	adds	r3, r7, r5
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d046      	beq.n	800244c <HAL_RCC_OscConfig+0x254>
      {
        return status;
 80023be:	197b      	adds	r3, r7, r5
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	e27d      	b.n	80028c0 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d027      	beq.n	800241a <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80023ca:	4b5f      	ldr	r3, [pc, #380]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2209      	movs	r2, #9
 80023d0:	4393      	bics	r3, r2
 80023d2:	0019      	movs	r1, r3
 80023d4:	4b5c      	ldr	r3, [pc, #368]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7ff f88a 	bl	80014f4 <HAL_GetTick>
 80023e0:	0003      	movs	r3, r0
 80023e2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e6:	f7ff f885 	bl	80014f4 <HAL_GetTick>
 80023ea:	0002      	movs	r2, r0
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e263      	b.n	80028c0 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023f8:	4b53      	ldr	r3, [pc, #332]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2204      	movs	r2, #4
 80023fe:	4013      	ands	r3, r2
 8002400:	d0f1      	beq.n	80023e6 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002402:	4b51      	ldr	r3, [pc, #324]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4a53      	ldr	r2, [pc, #332]	@ (8002554 <HAL_RCC_OscConfig+0x35c>)
 8002408:	4013      	ands	r3, r2
 800240a:	0019      	movs	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	021a      	lsls	r2, r3, #8
 8002412:	4b4d      	ldr	r3, [pc, #308]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 8002414:	430a      	orrs	r2, r1
 8002416:	605a      	str	r2, [r3, #4]
 8002418:	e018      	b.n	800244c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800241a:	4b4b      	ldr	r3, [pc, #300]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4b4a      	ldr	r3, [pc, #296]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 8002420:	2101      	movs	r1, #1
 8002422:	438a      	bics	r2, r1
 8002424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7ff f865 	bl	80014f4 <HAL_GetTick>
 800242a:	0003      	movs	r3, r0
 800242c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002430:	f7ff f860 	bl	80014f4 <HAL_GetTick>
 8002434:	0002      	movs	r2, r0
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e23e      	b.n	80028c0 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002442:	4b41      	ldr	r3, [pc, #260]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2204      	movs	r2, #4
 8002448:	4013      	ands	r3, r2
 800244a:	d1f1      	bne.n	8002430 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2210      	movs	r2, #16
 8002452:	4013      	ands	r3, r2
 8002454:	d100      	bne.n	8002458 <HAL_RCC_OscConfig+0x260>
 8002456:	e0a1      	b.n	800259c <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d140      	bne.n	80024e0 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800245e:	4b3a      	ldr	r3, [pc, #232]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	2380      	movs	r3, #128	@ 0x80
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4013      	ands	r3, r2
 8002468:	d005      	beq.n	8002476 <HAL_RCC_OscConfig+0x27e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e224      	b.n	80028c0 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002476:	4b34      	ldr	r3, [pc, #208]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4a3a      	ldr	r2, [pc, #232]	@ (8002564 <HAL_RCC_OscConfig+0x36c>)
 800247c:	4013      	ands	r3, r2
 800247e:	0019      	movs	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1a      	ldr	r2, [r3, #32]
 8002484:	4b30      	ldr	r3, [pc, #192]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 8002486:	430a      	orrs	r2, r1
 8002488:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800248a:	4b2f      	ldr	r3, [pc, #188]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	0a19      	lsrs	r1, r3, #8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	061a      	lsls	r2, r3, #24
 8002498:	4b2b      	ldr	r3, [pc, #172]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 800249a:	430a      	orrs	r2, r1
 800249c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	0b5b      	lsrs	r3, r3, #13
 80024a4:	3301      	adds	r3, #1
 80024a6:	2280      	movs	r2, #128	@ 0x80
 80024a8:	0212      	lsls	r2, r2, #8
 80024aa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80024ac:	4b26      	ldr	r3, [pc, #152]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	210f      	movs	r1, #15
 80024b4:	400b      	ands	r3, r1
 80024b6:	4928      	ldr	r1, [pc, #160]	@ (8002558 <HAL_RCC_OscConfig+0x360>)
 80024b8:	5ccb      	ldrb	r3, [r1, r3]
 80024ba:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80024bc:	4b27      	ldr	r3, [pc, #156]	@ (800255c <HAL_RCC_OscConfig+0x364>)
 80024be:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80024c0:	4b27      	ldr	r3, [pc, #156]	@ (8002560 <HAL_RCC_OscConfig+0x368>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2513      	movs	r5, #19
 80024c6:	197c      	adds	r4, r7, r5
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7fe ffcd 	bl	8001468 <HAL_InitTick>
 80024ce:	0003      	movs	r3, r0
 80024d0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80024d2:	197b      	adds	r3, r7, r5
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d060      	beq.n	800259c <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 80024da:	197b      	adds	r3, r7, r5
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	e1ef      	b.n	80028c0 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d03f      	beq.n	8002568 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024e8:	4b17      	ldr	r3, [pc, #92]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b16      	ldr	r3, [pc, #88]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 80024ee:	2180      	movs	r1, #128	@ 0x80
 80024f0:	0049      	lsls	r1, r1, #1
 80024f2:	430a      	orrs	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7fe fffd 	bl	80014f4 <HAL_GetTick>
 80024fa:	0003      	movs	r3, r0
 80024fc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002500:	f7fe fff8 	bl	80014f4 <HAL_GetTick>
 8002504:	0002      	movs	r2, r0
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1d6      	b.n	80028c0 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002512:	4b0d      	ldr	r3, [pc, #52]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	2380      	movs	r3, #128	@ 0x80
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4013      	ands	r3, r2
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800251e:	4b0a      	ldr	r3, [pc, #40]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	4a10      	ldr	r2, [pc, #64]	@ (8002564 <HAL_RCC_OscConfig+0x36c>)
 8002524:	4013      	ands	r3, r2
 8002526:	0019      	movs	r1, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1a      	ldr	r2, [r3, #32]
 800252c:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 800252e:	430a      	orrs	r2, r1
 8002530:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002532:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	0a19      	lsrs	r1, r3, #8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	061a      	lsls	r2, r3, #24
 8002540:	4b01      	ldr	r3, [pc, #4]	@ (8002548 <HAL_RCC_OscConfig+0x350>)
 8002542:	430a      	orrs	r2, r1
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	e029      	b.n	800259c <HAL_RCC_OscConfig+0x3a4>
 8002548:	40021000 	.word	0x40021000
 800254c:	fffeffff 	.word	0xfffeffff
 8002550:	fffbffff 	.word	0xfffbffff
 8002554:	ffffe0ff 	.word	0xffffe0ff
 8002558:	080055f4 	.word	0x080055f4
 800255c:	20000000 	.word	0x20000000
 8002560:	20000004 	.word	0x20000004
 8002564:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002568:	4bbe      	ldr	r3, [pc, #760]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4bbd      	ldr	r3, [pc, #756]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 800256e:	49be      	ldr	r1, [pc, #760]	@ (8002868 <HAL_RCC_OscConfig+0x670>)
 8002570:	400a      	ands	r2, r1
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7fe ffbe 	bl	80014f4 <HAL_GetTick>
 8002578:	0003      	movs	r3, r0
 800257a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800257e:	f7fe ffb9 	bl	80014f4 <HAL_GetTick>
 8002582:	0002      	movs	r2, r0
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e197      	b.n	80028c0 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002590:	4bb4      	ldr	r3, [pc, #720]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	2380      	movs	r3, #128	@ 0x80
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4013      	ands	r3, r2
 800259a:	d1f0      	bne.n	800257e <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2208      	movs	r2, #8
 80025a2:	4013      	ands	r3, r2
 80025a4:	d036      	beq.n	8002614 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d019      	beq.n	80025e2 <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ae:	4bad      	ldr	r3, [pc, #692]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 80025b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80025b2:	4bac      	ldr	r3, [pc, #688]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 80025b4:	2101      	movs	r1, #1
 80025b6:	430a      	orrs	r2, r1
 80025b8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ba:	f7fe ff9b 	bl	80014f4 <HAL_GetTick>
 80025be:	0003      	movs	r3, r0
 80025c0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025c4:	f7fe ff96 	bl	80014f4 <HAL_GetTick>
 80025c8:	0002      	movs	r2, r0
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e174      	b.n	80028c0 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025d6:	4ba3      	ldr	r3, [pc, #652]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 80025d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025da:	2202      	movs	r2, #2
 80025dc:	4013      	ands	r3, r2
 80025de:	d0f1      	beq.n	80025c4 <HAL_RCC_OscConfig+0x3cc>
 80025e0:	e018      	b.n	8002614 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e2:	4ba0      	ldr	r3, [pc, #640]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 80025e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80025e6:	4b9f      	ldr	r3, [pc, #636]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 80025e8:	2101      	movs	r1, #1
 80025ea:	438a      	bics	r2, r1
 80025ec:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ee:	f7fe ff81 	bl	80014f4 <HAL_GetTick>
 80025f2:	0003      	movs	r3, r0
 80025f4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f8:	f7fe ff7c 	bl	80014f4 <HAL_GetTick>
 80025fc:	0002      	movs	r2, r0
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e15a      	b.n	80028c0 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800260a:	4b96      	ldr	r3, [pc, #600]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 800260c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800260e:	2202      	movs	r2, #2
 8002610:	4013      	ands	r3, r2
 8002612:	d1f1      	bne.n	80025f8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2204      	movs	r2, #4
 800261a:	4013      	ands	r3, r2
 800261c:	d100      	bne.n	8002620 <HAL_RCC_OscConfig+0x428>
 800261e:	e0ae      	b.n	800277e <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002620:	2027      	movs	r0, #39	@ 0x27
 8002622:	183b      	adds	r3, r7, r0
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002628:	4b8e      	ldr	r3, [pc, #568]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 800262a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800262c:	2380      	movs	r3, #128	@ 0x80
 800262e:	055b      	lsls	r3, r3, #21
 8002630:	4013      	ands	r3, r2
 8002632:	d109      	bne.n	8002648 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002634:	4b8b      	ldr	r3, [pc, #556]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 8002636:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002638:	4b8a      	ldr	r3, [pc, #552]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 800263a:	2180      	movs	r1, #128	@ 0x80
 800263c:	0549      	lsls	r1, r1, #21
 800263e:	430a      	orrs	r2, r1
 8002640:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002642:	183b      	adds	r3, r7, r0
 8002644:	2201      	movs	r2, #1
 8002646:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	4b88      	ldr	r3, [pc, #544]	@ (800286c <HAL_RCC_OscConfig+0x674>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	2380      	movs	r3, #128	@ 0x80
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4013      	ands	r3, r2
 8002652:	d11a      	bne.n	800268a <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002654:	4b85      	ldr	r3, [pc, #532]	@ (800286c <HAL_RCC_OscConfig+0x674>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b84      	ldr	r3, [pc, #528]	@ (800286c <HAL_RCC_OscConfig+0x674>)
 800265a:	2180      	movs	r1, #128	@ 0x80
 800265c:	0049      	lsls	r1, r1, #1
 800265e:	430a      	orrs	r2, r1
 8002660:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002662:	f7fe ff47 	bl	80014f4 <HAL_GetTick>
 8002666:	0003      	movs	r3, r0
 8002668:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266c:	f7fe ff42 	bl	80014f4 <HAL_GetTick>
 8002670:	0002      	movs	r2, r0
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	@ 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e120      	b.n	80028c0 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267e:	4b7b      	ldr	r3, [pc, #492]	@ (800286c <HAL_RCC_OscConfig+0x674>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	2380      	movs	r3, #128	@ 0x80
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4013      	ands	r3, r2
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	2380      	movs	r3, #128	@ 0x80
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	429a      	cmp	r2, r3
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_OscConfig+0x4ae>
 8002696:	4b73      	ldr	r3, [pc, #460]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 8002698:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800269a:	4b72      	ldr	r3, [pc, #456]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 800269c:	2180      	movs	r1, #128	@ 0x80
 800269e:	0049      	lsls	r1, r1, #1
 80026a0:	430a      	orrs	r2, r1
 80026a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80026a4:	e031      	b.n	800270a <HAL_RCC_OscConfig+0x512>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4d0>
 80026ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 80026b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026b2:	4b6c      	ldr	r3, [pc, #432]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 80026b4:	496c      	ldr	r1, [pc, #432]	@ (8002868 <HAL_RCC_OscConfig+0x670>)
 80026b6:	400a      	ands	r2, r1
 80026b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80026ba:	4b6a      	ldr	r3, [pc, #424]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 80026bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026be:	4b69      	ldr	r3, [pc, #420]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 80026c0:	496b      	ldr	r1, [pc, #428]	@ (8002870 <HAL_RCC_OscConfig+0x678>)
 80026c2:	400a      	ands	r2, r1
 80026c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80026c6:	e020      	b.n	800270a <HAL_RCC_OscConfig+0x512>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	23a0      	movs	r3, #160	@ 0xa0
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d10e      	bne.n	80026f2 <HAL_RCC_OscConfig+0x4fa>
 80026d4:	4b63      	ldr	r3, [pc, #396]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 80026d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026d8:	4b62      	ldr	r3, [pc, #392]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 80026da:	2180      	movs	r1, #128	@ 0x80
 80026dc:	00c9      	lsls	r1, r1, #3
 80026de:	430a      	orrs	r2, r1
 80026e0:	651a      	str	r2, [r3, #80]	@ 0x50
 80026e2:	4b60      	ldr	r3, [pc, #384]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 80026e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026e6:	4b5f      	ldr	r3, [pc, #380]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 80026e8:	2180      	movs	r1, #128	@ 0x80
 80026ea:	0049      	lsls	r1, r1, #1
 80026ec:	430a      	orrs	r2, r1
 80026ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80026f0:	e00b      	b.n	800270a <HAL_RCC_OscConfig+0x512>
 80026f2:	4b5c      	ldr	r3, [pc, #368]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 80026f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 80026f8:	495b      	ldr	r1, [pc, #364]	@ (8002868 <HAL_RCC_OscConfig+0x670>)
 80026fa:	400a      	ands	r2, r1
 80026fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80026fe:	4b59      	ldr	r3, [pc, #356]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 8002700:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002702:	4b58      	ldr	r3, [pc, #352]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 8002704:	495a      	ldr	r1, [pc, #360]	@ (8002870 <HAL_RCC_OscConfig+0x678>)
 8002706:	400a      	ands	r2, r1
 8002708:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d015      	beq.n	800273e <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002712:	f7fe feef 	bl	80014f4 <HAL_GetTick>
 8002716:	0003      	movs	r3, r0
 8002718:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800271a:	e009      	b.n	8002730 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800271c:	f7fe feea 	bl	80014f4 <HAL_GetTick>
 8002720:	0002      	movs	r2, r0
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	4a53      	ldr	r2, [pc, #332]	@ (8002874 <HAL_RCC_OscConfig+0x67c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e0c7      	b.n	80028c0 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002730:	4b4c      	ldr	r3, [pc, #304]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 8002732:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002734:	2380      	movs	r3, #128	@ 0x80
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4013      	ands	r3, r2
 800273a:	d0ef      	beq.n	800271c <HAL_RCC_OscConfig+0x524>
 800273c:	e014      	b.n	8002768 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273e:	f7fe fed9 	bl	80014f4 <HAL_GetTick>
 8002742:	0003      	movs	r3, r0
 8002744:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002746:	e009      	b.n	800275c <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002748:	f7fe fed4 	bl	80014f4 <HAL_GetTick>
 800274c:	0002      	movs	r2, r0
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	4a48      	ldr	r2, [pc, #288]	@ (8002874 <HAL_RCC_OscConfig+0x67c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e0b1      	b.n	80028c0 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800275c:	4b41      	ldr	r3, [pc, #260]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 800275e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002760:	2380      	movs	r3, #128	@ 0x80
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4013      	ands	r3, r2
 8002766:	d1ef      	bne.n	8002748 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002768:	2327      	movs	r3, #39	@ 0x27
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d105      	bne.n	800277e <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002772:	4b3c      	ldr	r3, [pc, #240]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 8002774:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002776:	4b3b      	ldr	r3, [pc, #236]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 8002778:	493f      	ldr	r1, [pc, #252]	@ (8002878 <HAL_RCC_OscConfig+0x680>)
 800277a:	400a      	ands	r2, r1
 800277c:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002782:	2b00      	cmp	r3, #0
 8002784:	d100      	bne.n	8002788 <HAL_RCC_OscConfig+0x590>
 8002786:	e09a      	b.n	80028be <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	2b0c      	cmp	r3, #12
 800278c:	d064      	beq.n	8002858 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002792:	2b02      	cmp	r3, #2
 8002794:	d145      	bne.n	8002822 <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002796:	4b33      	ldr	r3, [pc, #204]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	4b32      	ldr	r3, [pc, #200]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 800279c:	4937      	ldr	r1, [pc, #220]	@ (800287c <HAL_RCC_OscConfig+0x684>)
 800279e:	400a      	ands	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a2:	f7fe fea7 	bl	80014f4 <HAL_GetTick>
 80027a6:	0003      	movs	r3, r0
 80027a8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ac:	f7fe fea2 	bl	80014f4 <HAL_GetTick>
 80027b0:	0002      	movs	r2, r0
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e080      	b.n	80028c0 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027be:	4b29      	ldr	r3, [pc, #164]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	2380      	movs	r3, #128	@ 0x80
 80027c4:	049b      	lsls	r3, r3, #18
 80027c6:	4013      	ands	r3, r2
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ca:	4b26      	ldr	r3, [pc, #152]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002880 <HAL_RCC_OscConfig+0x688>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	0019      	movs	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	431a      	orrs	r2, r3
 80027e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 80027e6:	430a      	orrs	r2, r1
 80027e8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 80027f0:	2180      	movs	r1, #128	@ 0x80
 80027f2:	0449      	lsls	r1, r1, #17
 80027f4:	430a      	orrs	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe fe7c 	bl	80014f4 <HAL_GetTick>
 80027fc:	0003      	movs	r3, r0
 80027fe:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002802:	f7fe fe77 	bl	80014f4 <HAL_GetTick>
 8002806:	0002      	movs	r2, r0
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e055      	b.n	80028c0 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002814:	4b13      	ldr	r3, [pc, #76]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	2380      	movs	r3, #128	@ 0x80
 800281a:	049b      	lsls	r3, r3, #18
 800281c:	4013      	ands	r3, r2
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x60a>
 8002820:	e04d      	b.n	80028be <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002822:	4b10      	ldr	r3, [pc, #64]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	4b0f      	ldr	r3, [pc, #60]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 8002828:	4914      	ldr	r1, [pc, #80]	@ (800287c <HAL_RCC_OscConfig+0x684>)
 800282a:	400a      	ands	r2, r1
 800282c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282e:	f7fe fe61 	bl	80014f4 <HAL_GetTick>
 8002832:	0003      	movs	r3, r0
 8002834:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002838:	f7fe fe5c 	bl	80014f4 <HAL_GetTick>
 800283c:	0002      	movs	r2, r0
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e03a      	b.n	80028c0 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800284a:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <HAL_RCC_OscConfig+0x66c>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	2380      	movs	r3, #128	@ 0x80
 8002850:	049b      	lsls	r3, r3, #18
 8002852:	4013      	ands	r3, r2
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x640>
 8002856:	e032      	b.n	80028be <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	2b01      	cmp	r3, #1
 800285e:	d111      	bne.n	8002884 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e02d      	b.n	80028c0 <HAL_RCC_OscConfig+0x6c8>
 8002864:	40021000 	.word	0x40021000
 8002868:	fffffeff 	.word	0xfffffeff
 800286c:	40007000 	.word	0x40007000
 8002870:	fffffbff 	.word	0xfffffbff
 8002874:	00001388 	.word	0x00001388
 8002878:	efffffff 	.word	0xefffffff
 800287c:	feffffff 	.word	0xfeffffff
 8002880:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002884:	4b10      	ldr	r3, [pc, #64]	@ (80028c8 <HAL_RCC_OscConfig+0x6d0>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	2380      	movs	r3, #128	@ 0x80
 800288e:	025b      	lsls	r3, r3, #9
 8002890:	401a      	ands	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002896:	429a      	cmp	r2, r3
 8002898:	d10f      	bne.n	80028ba <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	23f0      	movs	r3, #240	@ 0xf0
 800289e:	039b      	lsls	r3, r3, #14
 80028a0:	401a      	ands	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	23c0      	movs	r3, #192	@ 0xc0
 80028ae:	041b      	lsls	r3, r3, #16
 80028b0:	401a      	ands	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	0018      	movs	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b00a      	add	sp, #40	@ 0x28
 80028c6:	bdb0      	pop	{r4, r5, r7, pc}
 80028c8:	40021000 	.word	0x40021000

080028cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028cc:	b5b0      	push	{r4, r5, r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e128      	b.n	8002b32 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e0:	4b96      	ldr	r3, [pc, #600]	@ (8002b3c <HAL_RCC_ClockConfig+0x270>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2201      	movs	r2, #1
 80028e6:	4013      	ands	r3, r2
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d91e      	bls.n	800292c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b93      	ldr	r3, [pc, #588]	@ (8002b3c <HAL_RCC_ClockConfig+0x270>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2201      	movs	r2, #1
 80028f4:	4393      	bics	r3, r2
 80028f6:	0019      	movs	r1, r3
 80028f8:	4b90      	ldr	r3, [pc, #576]	@ (8002b3c <HAL_RCC_ClockConfig+0x270>)
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002900:	f7fe fdf8 	bl	80014f4 <HAL_GetTick>
 8002904:	0003      	movs	r3, r0
 8002906:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002908:	e009      	b.n	800291e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800290a:	f7fe fdf3 	bl	80014f4 <HAL_GetTick>
 800290e:	0002      	movs	r2, r0
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	4a8a      	ldr	r2, [pc, #552]	@ (8002b40 <HAL_RCC_ClockConfig+0x274>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e109      	b.n	8002b32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291e:	4b87      	ldr	r3, [pc, #540]	@ (8002b3c <HAL_RCC_ClockConfig+0x270>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2201      	movs	r2, #1
 8002924:	4013      	ands	r3, r2
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d1ee      	bne.n	800290a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2202      	movs	r2, #2
 8002932:	4013      	ands	r3, r2
 8002934:	d009      	beq.n	800294a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002936:	4b83      	ldr	r3, [pc, #524]	@ (8002b44 <HAL_RCC_ClockConfig+0x278>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	22f0      	movs	r2, #240	@ 0xf0
 800293c:	4393      	bics	r3, r2
 800293e:	0019      	movs	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	4b7f      	ldr	r3, [pc, #508]	@ (8002b44 <HAL_RCC_ClockConfig+0x278>)
 8002946:	430a      	orrs	r2, r1
 8002948:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2201      	movs	r2, #1
 8002950:	4013      	ands	r3, r2
 8002952:	d100      	bne.n	8002956 <HAL_RCC_ClockConfig+0x8a>
 8002954:	e089      	b.n	8002a6a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800295e:	4b79      	ldr	r3, [pc, #484]	@ (8002b44 <HAL_RCC_ClockConfig+0x278>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	2380      	movs	r3, #128	@ 0x80
 8002964:	029b      	lsls	r3, r3, #10
 8002966:	4013      	ands	r3, r2
 8002968:	d120      	bne.n	80029ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e0e1      	b.n	8002b32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b03      	cmp	r3, #3
 8002974:	d107      	bne.n	8002986 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002976:	4b73      	ldr	r3, [pc, #460]	@ (8002b44 <HAL_RCC_ClockConfig+0x278>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	2380      	movs	r3, #128	@ 0x80
 800297c:	049b      	lsls	r3, r3, #18
 800297e:	4013      	ands	r3, r2
 8002980:	d114      	bne.n	80029ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e0d5      	b.n	8002b32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d106      	bne.n	800299c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800298e:	4b6d      	ldr	r3, [pc, #436]	@ (8002b44 <HAL_RCC_ClockConfig+0x278>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2204      	movs	r2, #4
 8002994:	4013      	ands	r3, r2
 8002996:	d109      	bne.n	80029ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0ca      	b.n	8002b32 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800299c:	4b69      	ldr	r3, [pc, #420]	@ (8002b44 <HAL_RCC_ClockConfig+0x278>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	2380      	movs	r3, #128	@ 0x80
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4013      	ands	r3, r2
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0c2      	b.n	8002b32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ac:	4b65      	ldr	r3, [pc, #404]	@ (8002b44 <HAL_RCC_ClockConfig+0x278>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2203      	movs	r2, #3
 80029b2:	4393      	bics	r3, r2
 80029b4:	0019      	movs	r1, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	4b62      	ldr	r3, [pc, #392]	@ (8002b44 <HAL_RCC_ClockConfig+0x278>)
 80029bc:	430a      	orrs	r2, r1
 80029be:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c0:	f7fe fd98 	bl	80014f4 <HAL_GetTick>
 80029c4:	0003      	movs	r3, r0
 80029c6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d111      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029d0:	e009      	b.n	80029e6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d2:	f7fe fd8f 	bl	80014f4 <HAL_GetTick>
 80029d6:	0002      	movs	r2, r0
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	4a58      	ldr	r2, [pc, #352]	@ (8002b40 <HAL_RCC_ClockConfig+0x274>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e0a5      	b.n	8002b32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029e6:	4b57      	ldr	r3, [pc, #348]	@ (8002b44 <HAL_RCC_ClockConfig+0x278>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	220c      	movs	r2, #12
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d1ef      	bne.n	80029d2 <HAL_RCC_ClockConfig+0x106>
 80029f2:	e03a      	b.n	8002a6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d111      	bne.n	8002a20 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029fc:	e009      	b.n	8002a12 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029fe:	f7fe fd79 	bl	80014f4 <HAL_GetTick>
 8002a02:	0002      	movs	r2, r0
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	4a4d      	ldr	r2, [pc, #308]	@ (8002b40 <HAL_RCC_ClockConfig+0x274>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e08f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a12:	4b4c      	ldr	r3, [pc, #304]	@ (8002b44 <HAL_RCC_ClockConfig+0x278>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	220c      	movs	r2, #12
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b0c      	cmp	r3, #12
 8002a1c:	d1ef      	bne.n	80029fe <HAL_RCC_ClockConfig+0x132>
 8002a1e:	e024      	b.n	8002a6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d11b      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a28:	e009      	b.n	8002a3e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2a:	f7fe fd63 	bl	80014f4 <HAL_GetTick>
 8002a2e:	0002      	movs	r2, r0
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	4a42      	ldr	r2, [pc, #264]	@ (8002b40 <HAL_RCC_ClockConfig+0x274>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e079      	b.n	8002b32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a3e:	4b41      	ldr	r3, [pc, #260]	@ (8002b44 <HAL_RCC_ClockConfig+0x278>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	220c      	movs	r2, #12
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d1ef      	bne.n	8002a2a <HAL_RCC_ClockConfig+0x15e>
 8002a4a:	e00e      	b.n	8002a6a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a4c:	f7fe fd52 	bl	80014f4 <HAL_GetTick>
 8002a50:	0002      	movs	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	4a3a      	ldr	r2, [pc, #232]	@ (8002b40 <HAL_RCC_ClockConfig+0x274>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e068      	b.n	8002b32 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a60:	4b38      	ldr	r3, [pc, #224]	@ (8002b44 <HAL_RCC_ClockConfig+0x278>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	220c      	movs	r2, #12
 8002a66:	4013      	ands	r3, r2
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a6a:	4b34      	ldr	r3, [pc, #208]	@ (8002b3c <HAL_RCC_ClockConfig+0x270>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	4013      	ands	r3, r2
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d21e      	bcs.n	8002ab6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a78:	4b30      	ldr	r3, [pc, #192]	@ (8002b3c <HAL_RCC_ClockConfig+0x270>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	4393      	bics	r3, r2
 8002a80:	0019      	movs	r1, r3
 8002a82:	4b2e      	ldr	r3, [pc, #184]	@ (8002b3c <HAL_RCC_ClockConfig+0x270>)
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a8a:	f7fe fd33 	bl	80014f4 <HAL_GetTick>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	e009      	b.n	8002aa8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a94:	f7fe fd2e 	bl	80014f4 <HAL_GetTick>
 8002a98:	0002      	movs	r2, r0
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	4a28      	ldr	r2, [pc, #160]	@ (8002b40 <HAL_RCC_ClockConfig+0x274>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e044      	b.n	8002b32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa8:	4b24      	ldr	r3, [pc, #144]	@ (8002b3c <HAL_RCC_ClockConfig+0x270>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2201      	movs	r2, #1
 8002aae:	4013      	ands	r3, r2
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d1ee      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2204      	movs	r2, #4
 8002abc:	4013      	ands	r3, r2
 8002abe:	d009      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac0:	4b20      	ldr	r3, [pc, #128]	@ (8002b44 <HAL_RCC_ClockConfig+0x278>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4a20      	ldr	r2, [pc, #128]	@ (8002b48 <HAL_RCC_ClockConfig+0x27c>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	0019      	movs	r1, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	4b1d      	ldr	r3, [pc, #116]	@ (8002b44 <HAL_RCC_ClockConfig+0x278>)
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2208      	movs	r2, #8
 8002ada:	4013      	ands	r3, r2
 8002adc:	d00a      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ade:	4b19      	ldr	r3, [pc, #100]	@ (8002b44 <HAL_RCC_ClockConfig+0x278>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b4c <HAL_RCC_ClockConfig+0x280>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	00da      	lsls	r2, r3, #3
 8002aee:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <HAL_RCC_ClockConfig+0x278>)
 8002af0:	430a      	orrs	r2, r1
 8002af2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002af4:	f000 f8c4 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8002af8:	0001      	movs	r1, r0
 8002afa:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <HAL_RCC_ClockConfig+0x278>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	220f      	movs	r2, #15
 8002b02:	4013      	ands	r3, r2
 8002b04:	4a12      	ldr	r2, [pc, #72]	@ (8002b50 <HAL_RCC_ClockConfig+0x284>)
 8002b06:	5cd3      	ldrb	r3, [r2, r3]
 8002b08:	000a      	movs	r2, r1
 8002b0a:	40da      	lsrs	r2, r3
 8002b0c:	4b11      	ldr	r3, [pc, #68]	@ (8002b54 <HAL_RCC_ClockConfig+0x288>)
 8002b0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b10:	4b11      	ldr	r3, [pc, #68]	@ (8002b58 <HAL_RCC_ClockConfig+0x28c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	250b      	movs	r5, #11
 8002b16:	197c      	adds	r4, r7, r5
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f7fe fca5 	bl	8001468 <HAL_InitTick>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002b22:	197b      	adds	r3, r7, r5
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002b2a:	197b      	adds	r3, r7, r5
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	0018      	movs	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b004      	add	sp, #16
 8002b38:	bdb0      	pop	{r4, r5, r7, pc}
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	40022000 	.word	0x40022000
 8002b40:	00001388 	.word	0x00001388
 8002b44:	40021000 	.word	0x40021000
 8002b48:	fffff8ff 	.word	0xfffff8ff
 8002b4c:	ffffc7ff 	.word	0xffffc7ff
 8002b50:	080055f4 	.word	0x080055f4
 8002b54:	20000000 	.word	0x20000000
 8002b58:	20000004 	.word	0x20000004

08002b5c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b08d      	sub	sp, #52	@ 0x34
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0};
 8002b68:	241c      	movs	r4, #28
 8002b6a:	193b      	adds	r3, r7, r4
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	2314      	movs	r3, #20
 8002b70:	001a      	movs	r2, r3
 8002b72:	2100      	movs	r1, #0
 8002b74:	f002 f868 	bl	8004c48 <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002b78:	0020      	movs	r0, r4
 8002b7a:	183b      	adds	r3, r7, r0
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002b80:	183b      	adds	r3, r7, r0
 8002b82:	2202      	movs	r2, #2
 8002b84:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 8002b86:	183b      	adds	r3, r7, r0
 8002b88:	2200      	movs	r2, #0
 8002b8a:	609a      	str	r2, [r3, #8]
  if(RCC_MCOx == RCC_MCO1)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d11a      	bne.n	8002bc8 <HAL_RCC_MCOConfig+0x6c>
  {
    gpio.Pin       = MCO1_PIN;
 8002b92:	183b      	adds	r3, r7, r0
 8002b94:	2280      	movs	r2, #128	@ 0x80
 8002b96:	0052      	lsls	r2, r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8002b9a:	183b      	adds	r3, r7, r0
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	611a      	str	r2, [r3, #16]

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8002ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c58 <HAL_RCC_MCOConfig+0xfc>)
 8002ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ba4:	4b2c      	ldr	r3, [pc, #176]	@ (8002c58 <HAL_RCC_MCOConfig+0xfc>)
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002bac:	4b2a      	ldr	r3, [pc, #168]	@ (8002c58 <HAL_RCC_MCOConfig+0xfc>)
 8002bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002bb8:	183a      	adds	r2, r7, r0
 8002bba:	23a0      	movs	r3, #160	@ 0xa0
 8002bbc:	05db      	lsls	r3, r3, #23
 8002bbe:	0011      	movs	r1, r2
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f7ff f96b 	bl	8001e9c <HAL_GPIO_Init>
 8002bc6:	e038      	b.n	8002c3a <HAL_RCC_MCOConfig+0xde>
  }
#if defined(RCC_MCO3_SUPPORT)
  else if (RCC_MCOx == RCC_MCO3)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d11a      	bne.n	8002c04 <HAL_RCC_MCOConfig+0xa8>
  {
    gpio.Pin       = MCO3_PIN;
 8002bce:	201c      	movs	r0, #28
 8002bd0:	183b      	adds	r3, r7, r0
 8002bd2:	2280      	movs	r2, #128	@ 0x80
 8002bd4:	0192      	lsls	r2, r2, #6
 8002bd6:	601a      	str	r2, [r3, #0]
    gpio.Alternate = MCO3_GPIO_AF;
 8002bd8:	183b      	adds	r3, r7, r0
 8002bda:	2200      	movs	r2, #0
 8002bdc:	611a      	str	r2, [r3, #16]

    /* MCO3 Clock Enable */
    MCO3_CLK_ENABLE();
 8002bde:	4b1e      	ldr	r3, [pc, #120]	@ (8002c58 <HAL_RCC_MCOConfig+0xfc>)
 8002be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002be2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c58 <HAL_RCC_MCOConfig+0xfc>)
 8002be4:	2102      	movs	r1, #2
 8002be6:	430a      	orrs	r2, r1
 8002be8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002bea:	4b1b      	ldr	r3, [pc, #108]	@ (8002c58 <HAL_RCC_MCOConfig+0xfc>)
 8002bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bee:	2202      	movs	r2, #2
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	697b      	ldr	r3, [r7, #20]
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 8002bf6:	183b      	adds	r3, r7, r0
 8002bf8:	4a18      	ldr	r2, [pc, #96]	@ (8002c5c <HAL_RCC_MCOConfig+0x100>)
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	0010      	movs	r0, r2
 8002bfe:	f7ff f94d 	bl	8001e9c <HAL_GPIO_Init>
 8002c02:	e01a      	b.n	8002c3a <HAL_RCC_MCOConfig+0xde>
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {
    gpio.Pin       = MCO2_PIN;
 8002c04:	201c      	movs	r0, #28
 8002c06:	183b      	adds	r3, r7, r0
 8002c08:	2280      	movs	r2, #128	@ 0x80
 8002c0a:	0092      	lsls	r2, r2, #2
 8002c0c:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8002c0e:	183b      	adds	r3, r7, r0
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 8002c14:	4b10      	ldr	r3, [pc, #64]	@ (8002c58 <HAL_RCC_MCOConfig+0xfc>)
 8002c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c18:	4b0f      	ldr	r3, [pc, #60]	@ (8002c58 <HAL_RCC_MCOConfig+0xfc>)
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002c20:	4b0d      	ldr	r3, [pc, #52]	@ (8002c58 <HAL_RCC_MCOConfig+0xfc>)
 8002c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c24:	2201      	movs	r2, #1
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	693b      	ldr	r3, [r7, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 8002c2c:	183a      	adds	r2, r7, r0
 8002c2e:	23a0      	movs	r3, #160	@ 0xa0
 8002c30:	05db      	lsls	r3, r3, #23
 8002c32:	0011      	movs	r1, r2
 8002c34:	0018      	movs	r0, r3
 8002c36:	f7ff f931 	bl	8001e9c <HAL_GPIO_Init>
  }

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002c3a:	4b07      	ldr	r3, [pc, #28]	@ (8002c58 <HAL_RCC_MCOConfig+0xfc>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	4a08      	ldr	r2, [pc, #32]	@ (8002c60 <HAL_RCC_MCOConfig+0x104>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	0019      	movs	r1, r3
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	4b03      	ldr	r3, [pc, #12]	@ (8002c58 <HAL_RCC_MCOConfig+0xfc>)
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	60da      	str	r2, [r3, #12]
}
 8002c50:	46c0      	nop			@ (mov r8, r8)
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b00d      	add	sp, #52	@ 0x34
 8002c56:	bd90      	pop	{r4, r7, pc}
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	50000400 	.word	0x50000400
 8002c60:	80ffffff 	.word	0x80ffffff

08002c64 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8002c68:	4b04      	ldr	r3, [pc, #16]	@ (8002c7c <HAL_RCC_EnableCSS+0x18>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4b03      	ldr	r3, [pc, #12]	@ (8002c7c <HAL_RCC_EnableCSS+0x18>)
 8002c6e:	2180      	movs	r1, #128	@ 0x80
 8002c70:	0309      	lsls	r1, r1, #12
 8002c72:	430a      	orrs	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]
}
 8002c76:	46c0      	nop			@ (mov r8, r8)
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40021000 	.word	0x40021000

08002c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c80:	b5b0      	push	{r4, r5, r7, lr}
 8002c82:	b08e      	sub	sp, #56	@ 0x38
 8002c84:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002c86:	4b4c      	ldr	r3, [pc, #304]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c8e:	230c      	movs	r3, #12
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b0c      	cmp	r3, #12
 8002c94:	d014      	beq.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8002c96:	d900      	bls.n	8002c9a <HAL_RCC_GetSysClockFreq+0x1a>
 8002c98:	e07b      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0x112>
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d002      	beq.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x24>
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d00b      	beq.n	8002cba <HAL_RCC_GetSysClockFreq+0x3a>
 8002ca2:	e076      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002ca4:	4b44      	ldr	r3, [pc, #272]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2210      	movs	r2, #16
 8002caa:	4013      	ands	r3, r2
 8002cac:	d002      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002cae:	4b43      	ldr	r3, [pc, #268]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002cb0:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002cb2:	e07c      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002cb4:	4b42      	ldr	r3, [pc, #264]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002cb6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002cb8:	e079      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cba:	4b42      	ldr	r3, [pc, #264]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002cbc:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002cbe:	e076      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc2:	0c9a      	lsrs	r2, r3, #18
 8002cc4:	230f      	movs	r3, #15
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	4b3f      	ldr	r3, [pc, #252]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x148>)
 8002cca:	5c9b      	ldrb	r3, [r3, r2]
 8002ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd0:	0d9a      	lsrs	r2, r3, #22
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cda:	4b37      	ldr	r3, [pc, #220]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	2380      	movs	r3, #128	@ 0x80
 8002ce0:	025b      	lsls	r3, r3, #9
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d01a      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	4a35      	ldr	r2, [pc, #212]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	69b8      	ldr	r0, [r7, #24]
 8002cf4:	69f9      	ldr	r1, [r7, #28]
 8002cf6:	f7fd fabd 	bl	8000274 <__aeabi_lmul>
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	000b      	movs	r3, r1
 8002cfe:	0010      	movs	r0, r2
 8002d00:	0019      	movs	r1, r3
 8002d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f7fd fa91 	bl	8000234 <__aeabi_uldivmod>
 8002d12:	0002      	movs	r2, r0
 8002d14:	000b      	movs	r3, r1
 8002d16:	0013      	movs	r3, r2
 8002d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d1a:	e037      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002d1c:	4b26      	ldr	r3, [pc, #152]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2210      	movs	r2, #16
 8002d22:	4013      	ands	r3, r2
 8002d24:	d01a      	beq.n	8002d5c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	4a23      	ldr	r2, [pc, #140]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002d30:	2300      	movs	r3, #0
 8002d32:	68b8      	ldr	r0, [r7, #8]
 8002d34:	68f9      	ldr	r1, [r7, #12]
 8002d36:	f7fd fa9d 	bl	8000274 <__aeabi_lmul>
 8002d3a:	0002      	movs	r2, r0
 8002d3c:	000b      	movs	r3, r1
 8002d3e:	0010      	movs	r0, r2
 8002d40:	0019      	movs	r1, r3
 8002d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d44:	603b      	str	r3, [r7, #0]
 8002d46:	2300      	movs	r3, #0
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f7fd fa71 	bl	8000234 <__aeabi_uldivmod>
 8002d52:	0002      	movs	r2, r0
 8002d54:	000b      	movs	r3, r1
 8002d56:	0013      	movs	r3, r2
 8002d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d5a:	e017      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5e:	0018      	movs	r0, r3
 8002d60:	2300      	movs	r3, #0
 8002d62:	0019      	movs	r1, r3
 8002d64:	4a16      	ldr	r2, [pc, #88]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002d66:	2300      	movs	r3, #0
 8002d68:	f7fd fa84 	bl	8000274 <__aeabi_lmul>
 8002d6c:	0002      	movs	r2, r0
 8002d6e:	000b      	movs	r3, r1
 8002d70:	0010      	movs	r0, r2
 8002d72:	0019      	movs	r1, r3
 8002d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d76:	001c      	movs	r4, r3
 8002d78:	2300      	movs	r3, #0
 8002d7a:	001d      	movs	r5, r3
 8002d7c:	0022      	movs	r2, r4
 8002d7e:	002b      	movs	r3, r5
 8002d80:	f7fd fa58 	bl	8000234 <__aeabi_uldivmod>
 8002d84:	0002      	movs	r2, r0
 8002d86:	000b      	movs	r3, r1
 8002d88:	0013      	movs	r3, r2
 8002d8a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d8e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002d90:	e00d      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002d92:	4b09      	ldr	r3, [pc, #36]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	0b5b      	lsrs	r3, r3, #13
 8002d98:	2207      	movs	r2, #7
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	3301      	adds	r3, #1
 8002da2:	2280      	movs	r2, #128	@ 0x80
 8002da4:	0212      	lsls	r2, r2, #8
 8002da6:	409a      	lsls	r2, r3
 8002da8:	0013      	movs	r3, r2
 8002daa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002dac:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002db0:	0018      	movs	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	b00e      	add	sp, #56	@ 0x38
 8002db6:	bdb0      	pop	{r4, r5, r7, pc}
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	003d0900 	.word	0x003d0900
 8002dc0:	00f42400 	.word	0x00f42400
 8002dc4:	007a1200 	.word	0x007a1200
 8002dc8:	0800560c 	.word	0x0800560c

08002dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd0:	4b02      	ldr	r3, [pc, #8]	@ (8002ddc <HAL_RCC_GetHCLKFreq+0x10>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	46c0      	nop			@ (mov r8, r8)
 8002ddc:	20000000 	.word	0x20000000

08002de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002de4:	f7ff fff2 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 8002de8:	0001      	movs	r1, r0
 8002dea:	4b06      	ldr	r3, [pc, #24]	@ (8002e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	0a1b      	lsrs	r3, r3, #8
 8002df0:	2207      	movs	r2, #7
 8002df2:	4013      	ands	r3, r2
 8002df4:	4a04      	ldr	r2, [pc, #16]	@ (8002e08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002df6:	5cd3      	ldrb	r3, [r2, r3]
 8002df8:	40d9      	lsrs	r1, r3
 8002dfa:	000b      	movs	r3, r1
}
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	46c0      	nop			@ (mov r8, r8)
 8002e04:	40021000 	.word	0x40021000
 8002e08:	08005604 	.word	0x08005604

08002e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e10:	f7ff ffdc 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 8002e14:	0001      	movs	r1, r0
 8002e16:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	0adb      	lsrs	r3, r3, #11
 8002e1c:	2207      	movs	r2, #7
 8002e1e:	4013      	ands	r3, r2
 8002e20:	4a04      	ldr	r2, [pc, #16]	@ (8002e34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e22:	5cd3      	ldrb	r3, [r2, r3]
 8002e24:	40d9      	lsrs	r1, r3
 8002e26:	000b      	movs	r3, r1
}
 8002e28:	0018      	movs	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	46c0      	nop			@ (mov r8, r8)
 8002e30:	40021000 	.word	0x40021000
 8002e34:	08005604 	.word	0x08005604

08002e38 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002e3c:	4b08      	ldr	r3, [pc, #32]	@ (8002e60 <HAL_RCC_NMI_IRQHandler+0x28>)
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	2380      	movs	r3, #128	@ 0x80
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	401a      	ands	r2, r3
 8002e46:	2380      	movs	r3, #128	@ 0x80
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d105      	bne.n	8002e5a <HAL_RCC_NMI_IRQHandler+0x22>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002e4e:	f000 f809 	bl	8002e64 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002e52:	4b03      	ldr	r3, [pc, #12]	@ (8002e60 <HAL_RCC_NMI_IRQHandler+0x28>)
 8002e54:	2280      	movs	r2, #128	@ 0x80
 8002e56:	0052      	lsls	r2, r2, #1
 8002e58:	619a      	str	r2, [r3, #24]
  }
}
 8002e5a:	46c0      	nop			@ (mov r8, r8)
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000

08002e64 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002e68:	46c0      	nop			@ (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002e78:	2017      	movs	r0, #23
 8002e7a:	183b      	adds	r3, r7, r0
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2220      	movs	r2, #32
 8002e86:	4013      	ands	r3, r2
 8002e88:	d100      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002e8a:	e0c7      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8c:	4b8b      	ldr	r3, [pc, #556]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002e8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e90:	2380      	movs	r3, #128	@ 0x80
 8002e92:	055b      	lsls	r3, r3, #21
 8002e94:	4013      	ands	r3, r2
 8002e96:	d109      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e98:	4b88      	ldr	r3, [pc, #544]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002e9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e9c:	4b87      	ldr	r3, [pc, #540]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002e9e:	2180      	movs	r1, #128	@ 0x80
 8002ea0:	0549      	lsls	r1, r1, #21
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002ea6:	183b      	adds	r3, r7, r0
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eac:	4b84      	ldr	r3, [pc, #528]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	2380      	movs	r3, #128	@ 0x80
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d11a      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eb8:	4b81      	ldr	r3, [pc, #516]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b80      	ldr	r3, [pc, #512]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002ebe:	2180      	movs	r1, #128	@ 0x80
 8002ec0:	0049      	lsls	r1, r1, #1
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec6:	f7fe fb15 	bl	80014f4 <HAL_GetTick>
 8002eca:	0003      	movs	r3, r0
 8002ecc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ece:	e008      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed0:	f7fe fb10 	bl	80014f4 <HAL_GetTick>
 8002ed4:	0002      	movs	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	@ 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e0e8      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee2:	4b77      	ldr	r3, [pc, #476]	@ (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	2380      	movs	r3, #128	@ 0x80
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	4013      	ands	r3, r2
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002eee:	4b73      	ldr	r3, [pc, #460]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	23c0      	movs	r3, #192	@ 0xc0
 8002ef4:	039b      	lsls	r3, r3, #14
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	23c0      	movs	r3, #192	@ 0xc0
 8002f00:	039b      	lsls	r3, r3, #14
 8002f02:	4013      	ands	r3, r2
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d013      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	23c0      	movs	r3, #192	@ 0xc0
 8002f10:	029b      	lsls	r3, r3, #10
 8002f12:	401a      	ands	r2, r3
 8002f14:	23c0      	movs	r3, #192	@ 0xc0
 8002f16:	029b      	lsls	r3, r3, #10
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d10a      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002f1c:	4b67      	ldr	r3, [pc, #412]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	2380      	movs	r3, #128	@ 0x80
 8002f22:	029b      	lsls	r3, r3, #10
 8002f24:	401a      	ands	r2, r3
 8002f26:	2380      	movs	r3, #128	@ 0x80
 8002f28:	029b      	lsls	r3, r3, #10
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e0c0      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002f32:	4b62      	ldr	r3, [pc, #392]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002f34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f36:	23c0      	movs	r3, #192	@ 0xc0
 8002f38:	029b      	lsls	r3, r3, #10
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d03b      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	23c0      	movs	r3, #192	@ 0xc0
 8002f4a:	029b      	lsls	r3, r3, #10
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d033      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d02e      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002f5e:	4b57      	ldr	r3, [pc, #348]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f62:	4a58      	ldr	r2, [pc, #352]	@ (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f68:	4b54      	ldr	r3, [pc, #336]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002f6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f6c:	4b53      	ldr	r3, [pc, #332]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002f6e:	2180      	movs	r1, #128	@ 0x80
 8002f70:	0309      	lsls	r1, r1, #12
 8002f72:	430a      	orrs	r2, r1
 8002f74:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f76:	4b51      	ldr	r3, [pc, #324]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002f78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f7a:	4b50      	ldr	r3, [pc, #320]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002f7c:	4952      	ldr	r1, [pc, #328]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f7e:	400a      	ands	r2, r1
 8002f80:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002f82:	4b4e      	ldr	r3, [pc, #312]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	2380      	movs	r3, #128	@ 0x80
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d014      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7fe faaf 	bl	80014f4 <HAL_GetTick>
 8002f96:	0003      	movs	r3, r0
 8002f98:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f9a:	e009      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f9c:	f7fe faaa 	bl	80014f4 <HAL_GetTick>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	4a49      	ldr	r2, [pc, #292]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e081      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fb0:	4b42      	ldr	r3, [pc, #264]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002fb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fb4:	2380      	movs	r3, #128	@ 0x80
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d0ef      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d01f      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	23c0      	movs	r3, #192	@ 0xc0
 8002fcc:	029b      	lsls	r3, r3, #10
 8002fce:	401a      	ands	r2, r3
 8002fd0:	23c0      	movs	r3, #192	@ 0xc0
 8002fd2:	029b      	lsls	r3, r3, #10
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d10c      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002fd8:	4b38      	ldr	r3, [pc, #224]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a3c      	ldr	r2, [pc, #240]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	0019      	movs	r1, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	23c0      	movs	r3, #192	@ 0xc0
 8002fe8:	039b      	lsls	r3, r3, #14
 8002fea:	401a      	ands	r2, r3
 8002fec:	4b33      	ldr	r3, [pc, #204]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	4b32      	ldr	r3, [pc, #200]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002ff4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	23c0      	movs	r3, #192	@ 0xc0
 8002ffc:	029b      	lsls	r3, r3, #10
 8002ffe:	401a      	ands	r2, r3
 8003000:	4b2e      	ldr	r3, [pc, #184]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003002:	430a      	orrs	r2, r1
 8003004:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003006:	2317      	movs	r3, #23
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d105      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003010:	4b2a      	ldr	r3, [pc, #168]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003012:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003014:	4b29      	ldr	r3, [pc, #164]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003016:	492f      	ldr	r1, [pc, #188]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003018:	400a      	ands	r2, r1
 800301a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2201      	movs	r2, #1
 8003022:	4013      	ands	r3, r2
 8003024:	d009      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003026:	4b25      	ldr	r3, [pc, #148]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800302a:	2203      	movs	r2, #3
 800302c:	4393      	bics	r3, r2
 800302e:	0019      	movs	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	4b21      	ldr	r3, [pc, #132]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003036:	430a      	orrs	r2, r1
 8003038:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2202      	movs	r2, #2
 8003040:	4013      	ands	r3, r2
 8003042:	d009      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003044:	4b1d      	ldr	r3, [pc, #116]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003048:	220c      	movs	r2, #12
 800304a:	4393      	bics	r3, r2
 800304c:	0019      	movs	r1, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	4b1a      	ldr	r3, [pc, #104]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003054:	430a      	orrs	r2, r1
 8003056:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2204      	movs	r2, #4
 800305e:	4013      	ands	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003062:	4b16      	ldr	r3, [pc, #88]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003066:	4a1c      	ldr	r2, [pc, #112]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003068:	4013      	ands	r3, r2
 800306a:	0019      	movs	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	4b12      	ldr	r3, [pc, #72]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003072:	430a      	orrs	r2, r1
 8003074:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2208      	movs	r2, #8
 800307c:	4013      	ands	r3, r2
 800307e:	d009      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003080:	4b0e      	ldr	r3, [pc, #56]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003084:	4a15      	ldr	r2, [pc, #84]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003086:	4013      	ands	r3, r2
 8003088:	0019      	movs	r1, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003090:	430a      	orrs	r2, r1
 8003092:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2280      	movs	r2, #128	@ 0x80
 800309a:	4013      	ands	r3, r2
 800309c:	d009      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800309e:	4b07      	ldr	r3, [pc, #28]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a2:	4a0f      	ldr	r2, [pc, #60]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	0019      	movs	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699a      	ldr	r2, [r3, #24]
 80030ac:	4b03      	ldr	r3, [pc, #12]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030ae:	430a      	orrs	r2, r1
 80030b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	0018      	movs	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b006      	add	sp, #24
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40007000 	.word	0x40007000
 80030c4:	fffcffff 	.word	0xfffcffff
 80030c8:	fff7ffff 	.word	0xfff7ffff
 80030cc:	00001388 	.word	0x00001388
 80030d0:	ffcfffff 	.word	0xffcfffff
 80030d4:	efffffff 	.word	0xefffffff
 80030d8:	fffff3ff 	.word	0xfffff3ff
 80030dc:	ffffcfff 	.word	0xffffcfff
 80030e0:	fff3ffff 	.word	0xfff3ffff

080030e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e083      	b.n	80031fe <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	2382      	movs	r3, #130	@ 0x82
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	429a      	cmp	r2, r3
 8003108:	d009      	beq.n	800311e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	61da      	str	r2, [r3, #28]
 8003110:	e005      	b.n	800311e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2251      	movs	r2, #81	@ 0x51
 8003128:	5c9b      	ldrb	r3, [r3, r2]
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d107      	bne.n	8003140 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2250      	movs	r2, #80	@ 0x50
 8003134:	2100      	movs	r1, #0
 8003136:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	0018      	movs	r0, r3
 800313c:	f7fe f88a 	bl	8001254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2251      	movs	r2, #81	@ 0x51
 8003144:	2102      	movs	r1, #2
 8003146:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2140      	movs	r1, #64	@ 0x40
 8003154:	438a      	bics	r2, r1
 8003156:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	2382      	movs	r3, #130	@ 0x82
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	401a      	ands	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6899      	ldr	r1, [r3, #8]
 8003166:	2384      	movs	r3, #132	@ 0x84
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	400b      	ands	r3, r1
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68d9      	ldr	r1, [r3, #12]
 8003172:	2380      	movs	r3, #128	@ 0x80
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	400b      	ands	r3, r1
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2102      	movs	r1, #2
 8003180:	400b      	ands	r3, r1
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	2101      	movs	r1, #1
 800318a:	400b      	ands	r3, r1
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6999      	ldr	r1, [r3, #24]
 8003192:	2380      	movs	r3, #128	@ 0x80
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	400b      	ands	r3, r1
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	2138      	movs	r1, #56	@ 0x38
 80031a0:	400b      	ands	r3, r1
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	2180      	movs	r1, #128	@ 0x80
 80031aa:	400b      	ands	r3, r1
 80031ac:	431a      	orrs	r2, r3
 80031ae:	0011      	movs	r1, r2
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031b4:	2380      	movs	r3, #128	@ 0x80
 80031b6:	019b      	lsls	r3, r3, #6
 80031b8:	401a      	ands	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	0c1b      	lsrs	r3, r3, #16
 80031c8:	2204      	movs	r2, #4
 80031ca:	4013      	ands	r3, r2
 80031cc:	0019      	movs	r1, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	2210      	movs	r2, #16
 80031d4:	401a      	ands	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69da      	ldr	r2, [r3, #28]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4907      	ldr	r1, [pc, #28]	@ (8003208 <HAL_SPI_Init+0x124>)
 80031ea:	400a      	ands	r2, r1
 80031ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2251      	movs	r2, #81	@ 0x51
 80031f8:	2101      	movs	r1, #1
 80031fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	0018      	movs	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	b002      	add	sp, #8
 8003204:	bd80      	pop	{r7, pc}
 8003206:	46c0      	nop			@ (mov r8, r8)
 8003208:	fffff7ff 	.word	0xfffff7ff

0800320c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e044      	b.n	80032a8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003222:	2b00      	cmp	r3, #0
 8003224:	d107      	bne.n	8003236 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2278      	movs	r2, #120	@ 0x78
 800322a:	2100      	movs	r1, #0
 800322c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	0018      	movs	r0, r3
 8003232:	f7fd ff59 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2224      	movs	r2, #36	@ 0x24
 800323a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2101      	movs	r1, #1
 8003248:	438a      	bics	r2, r1
 800324a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	0018      	movs	r0, r3
 8003250:	f000 fc9c 	bl	8003b8c <UART_SetConfig>
 8003254:	0003      	movs	r3, r0
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e024      	b.n	80032a8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	0018      	movs	r0, r3
 800326a:	f000 ff13 	bl	8004094 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	490d      	ldr	r1, [pc, #52]	@ (80032b0 <HAL_UART_Init+0xa4>)
 800327a:	400a      	ands	r2, r1
 800327c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	212a      	movs	r1, #42	@ 0x2a
 800328a:	438a      	bics	r2, r1
 800328c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2101      	movs	r1, #1
 800329a:	430a      	orrs	r2, r1
 800329c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	0018      	movs	r0, r3
 80032a2:	f000 ffab 	bl	80041fc <UART_CheckIdleState>
 80032a6:	0003      	movs	r3, r0
}
 80032a8:	0018      	movs	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b002      	add	sp, #8
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	ffffb7ff 	.word	0xffffb7ff

080032b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08a      	sub	sp, #40	@ 0x28
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	1dbb      	adds	r3, r7, #6
 80032c2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	d000      	beq.n	80032ce <HAL_UART_Transmit+0x1a>
 80032cc:	e08c      	b.n	80033e8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_UART_Transmit+0x28>
 80032d4:	1dbb      	adds	r3, r7, #6
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e084      	b.n	80033ea <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	2380      	movs	r3, #128	@ 0x80
 80032e6:	015b      	lsls	r3, r3, #5
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d109      	bne.n	8003300 <HAL_UART_Transmit+0x4c>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d105      	bne.n	8003300 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2201      	movs	r2, #1
 80032f8:	4013      	ands	r3, r2
 80032fa:	d001      	beq.n	8003300 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e074      	b.n	80033ea <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2284      	movs	r2, #132	@ 0x84
 8003304:	2100      	movs	r1, #0
 8003306:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2221      	movs	r2, #33	@ 0x21
 800330c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800330e:	f7fe f8f1 	bl	80014f4 <HAL_GetTick>
 8003312:	0003      	movs	r3, r0
 8003314:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1dba      	adds	r2, r7, #6
 800331a:	2150      	movs	r1, #80	@ 0x50
 800331c:	8812      	ldrh	r2, [r2, #0]
 800331e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1dba      	adds	r2, r7, #6
 8003324:	2152      	movs	r1, #82	@ 0x52
 8003326:	8812      	ldrh	r2, [r2, #0]
 8003328:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	2380      	movs	r3, #128	@ 0x80
 8003330:	015b      	lsls	r3, r3, #5
 8003332:	429a      	cmp	r2, r3
 8003334:	d108      	bne.n	8003348 <HAL_UART_Transmit+0x94>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d104      	bne.n	8003348 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800333e:	2300      	movs	r3, #0
 8003340:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	e003      	b.n	8003350 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800334c:	2300      	movs	r3, #0
 800334e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003350:	e02f      	b.n	80033b2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	0013      	movs	r3, r2
 800335c:	2200      	movs	r2, #0
 800335e:	2180      	movs	r1, #128	@ 0x80
 8003360:	f000 fff4 	bl	800434c <UART_WaitOnFlagUntilTimeout>
 8003364:	1e03      	subs	r3, r0, #0
 8003366:	d004      	beq.n	8003372 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2220      	movs	r2, #32
 800336c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e03b      	b.n	80033ea <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10b      	bne.n	8003390 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	001a      	movs	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	05d2      	lsls	r2, r2, #23
 8003384:	0dd2      	lsrs	r2, r2, #23
 8003386:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	3302      	adds	r3, #2
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	e007      	b.n	80033a0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	781a      	ldrb	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3301      	adds	r3, #1
 800339e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2252      	movs	r2, #82	@ 0x52
 80033a4:	5a9b      	ldrh	r3, [r3, r2]
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b299      	uxth	r1, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2252      	movs	r2, #82	@ 0x52
 80033b0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2252      	movs	r2, #82	@ 0x52
 80033b6:	5a9b      	ldrh	r3, [r3, r2]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1c9      	bne.n	8003352 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	0013      	movs	r3, r2
 80033c8:	2200      	movs	r2, #0
 80033ca:	2140      	movs	r1, #64	@ 0x40
 80033cc:	f000 ffbe 	bl	800434c <UART_WaitOnFlagUntilTimeout>
 80033d0:	1e03      	subs	r3, r0, #0
 80033d2:	d004      	beq.n	80033de <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e005      	b.n	80033ea <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2220      	movs	r2, #32
 80033e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	e000      	b.n	80033ea <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80033e8:	2302      	movs	r3, #2
  }
}
 80033ea:	0018      	movs	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b008      	add	sp, #32
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	1dbb      	adds	r3, r7, #6
 8003400:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003406:	2b20      	cmp	r3, #32
 8003408:	d15b      	bne.n	80034c2 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_UART_Transmit_IT+0x24>
 8003410:	1dbb      	adds	r3, r7, #6
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e053      	b.n	80034c4 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	2380      	movs	r3, #128	@ 0x80
 8003422:	015b      	lsls	r3, r3, #5
 8003424:	429a      	cmp	r2, r3
 8003426:	d109      	bne.n	800343c <HAL_UART_Transmit_IT+0x48>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d105      	bne.n	800343c <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2201      	movs	r2, #1
 8003434:	4013      	ands	r3, r2
 8003436:	d001      	beq.n	800343c <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e043      	b.n	80034c4 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1dba      	adds	r2, r7, #6
 8003446:	2150      	movs	r1, #80	@ 0x50
 8003448:	8812      	ldrh	r2, [r2, #0]
 800344a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1dba      	adds	r2, r7, #6
 8003450:	2152      	movs	r1, #82	@ 0x52
 8003452:	8812      	ldrh	r2, [r2, #0]
 8003454:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2284      	movs	r2, #132	@ 0x84
 8003460:	2100      	movs	r1, #0
 8003462:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2221      	movs	r2, #33	@ 0x21
 8003468:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	2380      	movs	r3, #128	@ 0x80
 8003470:	015b      	lsls	r3, r3, #5
 8003472:	429a      	cmp	r2, r3
 8003474:	d107      	bne.n	8003486 <HAL_UART_Transmit_IT+0x92>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d103      	bne.n	8003486 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4a12      	ldr	r2, [pc, #72]	@ (80034cc <HAL_UART_Transmit_IT+0xd8>)
 8003482:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003484:	e002      	b.n	800348c <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4a11      	ldr	r2, [pc, #68]	@ (80034d0 <HAL_UART_Transmit_IT+0xdc>)
 800348a:	66da      	str	r2, [r3, #108]	@ 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800348c:	f3ef 8310 	mrs	r3, PRIMASK
 8003490:	613b      	str	r3, [r7, #16]
  return(result);
 8003492:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	2301      	movs	r3, #1
 8003498:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f383 8810 	msr	PRIMASK, r3
}
 80034a0:	46c0      	nop			@ (mov r8, r8)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2180      	movs	r1, #128	@ 0x80
 80034ae:	430a      	orrs	r2, r1
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f383 8810 	msr	PRIMASK, r3
}
 80034bc:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	e000      	b.n	80034c4 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80034c2:	2302      	movs	r3, #2
  }
}
 80034c4:	0018      	movs	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b008      	add	sp, #32
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	0800475d 	.word	0x0800475d
 80034d0:	080046ab 	.word	0x080046ab

080034d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	1dbb      	adds	r3, r7, #6
 80034e0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2280      	movs	r2, #128	@ 0x80
 80034e6:	589b      	ldr	r3, [r3, r2]
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d14a      	bne.n	8003582 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_UART_Receive_IT+0x26>
 80034f2:	1dbb      	adds	r3, r7, #6
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e042      	b.n	8003584 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	2380      	movs	r3, #128	@ 0x80
 8003504:	015b      	lsls	r3, r3, #5
 8003506:	429a      	cmp	r2, r3
 8003508:	d109      	bne.n	800351e <HAL_UART_Receive_IT+0x4a>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d105      	bne.n	800351e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2201      	movs	r2, #1
 8003516:	4013      	ands	r3, r2
 8003518:	d001      	beq.n	800351e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e032      	b.n	8003584 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a18      	ldr	r2, [pc, #96]	@ (800358c <HAL_UART_Receive_IT+0xb8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d020      	beq.n	8003570 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	2380      	movs	r3, #128	@ 0x80
 8003536:	041b      	lsls	r3, r3, #16
 8003538:	4013      	ands	r3, r2
 800353a:	d019      	beq.n	8003570 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800353c:	f3ef 8310 	mrs	r3, PRIMASK
 8003540:	613b      	str	r3, [r7, #16]
  return(result);
 8003542:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	2301      	movs	r3, #1
 8003548:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f383 8810 	msr	PRIMASK, r3
}
 8003550:	46c0      	nop			@ (mov r8, r8)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2180      	movs	r1, #128	@ 0x80
 800355e:	04c9      	lsls	r1, r1, #19
 8003560:	430a      	orrs	r2, r1
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f383 8810 	msr	PRIMASK, r3
}
 800356e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003570:	1dbb      	adds	r3, r7, #6
 8003572:	881a      	ldrh	r2, [r3, #0]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	0018      	movs	r0, r3
 800357a:	f000 ff51 	bl	8004420 <UART_Start_Receive_IT>
 800357e:	0003      	movs	r3, r0
 8003580:	e000      	b.n	8003584 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8003582:	2302      	movs	r3, #2
  }
}
 8003584:	0018      	movs	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	b008      	add	sp, #32
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40004800 	.word	0x40004800

08003590 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003590:	b590      	push	{r4, r7, lr}
 8003592:	b0ab      	sub	sp, #172	@ 0xac
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	22a4      	movs	r2, #164	@ 0xa4
 80035a0:	18b9      	adds	r1, r7, r2
 80035a2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	20a0      	movs	r0, #160	@ 0xa0
 80035ac:	1839      	adds	r1, r7, r0
 80035ae:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	219c      	movs	r1, #156	@ 0x9c
 80035b8:	1879      	adds	r1, r7, r1
 80035ba:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035bc:	0011      	movs	r1, r2
 80035be:	18bb      	adds	r3, r7, r2
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a99      	ldr	r2, [pc, #612]	@ (8003828 <HAL_UART_IRQHandler+0x298>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	2298      	movs	r2, #152	@ 0x98
 80035c8:	18bc      	adds	r4, r7, r2
 80035ca:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80035cc:	18bb      	adds	r3, r7, r2
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d114      	bne.n	80035fe <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035d4:	187b      	adds	r3, r7, r1
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2220      	movs	r2, #32
 80035da:	4013      	ands	r3, r2
 80035dc:	d00f      	beq.n	80035fe <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035de:	183b      	adds	r3, r7, r0
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2220      	movs	r2, #32
 80035e4:	4013      	ands	r3, r2
 80035e6:	d00a      	beq.n	80035fe <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d100      	bne.n	80035f2 <HAL_UART_IRQHandler+0x62>
 80035f0:	e2a0      	b.n	8003b34 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	0010      	movs	r0, r2
 80035fa:	4798      	blx	r3
      }
      return;
 80035fc:	e29a      	b.n	8003b34 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035fe:	2398      	movs	r3, #152	@ 0x98
 8003600:	18fb      	adds	r3, r7, r3
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d100      	bne.n	800360a <HAL_UART_IRQHandler+0x7a>
 8003608:	e114      	b.n	8003834 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800360a:	239c      	movs	r3, #156	@ 0x9c
 800360c:	18fb      	adds	r3, r7, r3
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2201      	movs	r2, #1
 8003612:	4013      	ands	r3, r2
 8003614:	d106      	bne.n	8003624 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003616:	23a0      	movs	r3, #160	@ 0xa0
 8003618:	18fb      	adds	r3, r7, r3
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a83      	ldr	r2, [pc, #524]	@ (800382c <HAL_UART_IRQHandler+0x29c>)
 800361e:	4013      	ands	r3, r2
 8003620:	d100      	bne.n	8003624 <HAL_UART_IRQHandler+0x94>
 8003622:	e107      	b.n	8003834 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003624:	23a4      	movs	r3, #164	@ 0xa4
 8003626:	18fb      	adds	r3, r7, r3
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2201      	movs	r2, #1
 800362c:	4013      	ands	r3, r2
 800362e:	d012      	beq.n	8003656 <HAL_UART_IRQHandler+0xc6>
 8003630:	23a0      	movs	r3, #160	@ 0xa0
 8003632:	18fb      	adds	r3, r7, r3
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	2380      	movs	r3, #128	@ 0x80
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	4013      	ands	r3, r2
 800363c:	d00b      	beq.n	8003656 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2201      	movs	r2, #1
 8003644:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2284      	movs	r2, #132	@ 0x84
 800364a:	589b      	ldr	r3, [r3, r2]
 800364c:	2201      	movs	r2, #1
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2184      	movs	r1, #132	@ 0x84
 8003654:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003656:	23a4      	movs	r3, #164	@ 0xa4
 8003658:	18fb      	adds	r3, r7, r3
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2202      	movs	r2, #2
 800365e:	4013      	ands	r3, r2
 8003660:	d011      	beq.n	8003686 <HAL_UART_IRQHandler+0xf6>
 8003662:	239c      	movs	r3, #156	@ 0x9c
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2201      	movs	r2, #1
 800366a:	4013      	ands	r3, r2
 800366c:	d00b      	beq.n	8003686 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2202      	movs	r2, #2
 8003674:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2284      	movs	r2, #132	@ 0x84
 800367a:	589b      	ldr	r3, [r3, r2]
 800367c:	2204      	movs	r2, #4
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2184      	movs	r1, #132	@ 0x84
 8003684:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003686:	23a4      	movs	r3, #164	@ 0xa4
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2204      	movs	r2, #4
 800368e:	4013      	ands	r3, r2
 8003690:	d011      	beq.n	80036b6 <HAL_UART_IRQHandler+0x126>
 8003692:	239c      	movs	r3, #156	@ 0x9c
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2201      	movs	r2, #1
 800369a:	4013      	ands	r3, r2
 800369c:	d00b      	beq.n	80036b6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2204      	movs	r2, #4
 80036a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2284      	movs	r2, #132	@ 0x84
 80036aa:	589b      	ldr	r3, [r3, r2]
 80036ac:	2202      	movs	r2, #2
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2184      	movs	r1, #132	@ 0x84
 80036b4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036b6:	23a4      	movs	r3, #164	@ 0xa4
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2208      	movs	r2, #8
 80036be:	4013      	ands	r3, r2
 80036c0:	d017      	beq.n	80036f2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036c2:	23a0      	movs	r3, #160	@ 0xa0
 80036c4:	18fb      	adds	r3, r7, r3
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2220      	movs	r2, #32
 80036ca:	4013      	ands	r3, r2
 80036cc:	d105      	bne.n	80036da <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80036ce:	239c      	movs	r3, #156	@ 0x9c
 80036d0:	18fb      	adds	r3, r7, r3
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2201      	movs	r2, #1
 80036d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036d8:	d00b      	beq.n	80036f2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2208      	movs	r2, #8
 80036e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2284      	movs	r2, #132	@ 0x84
 80036e6:	589b      	ldr	r3, [r3, r2]
 80036e8:	2208      	movs	r2, #8
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2184      	movs	r1, #132	@ 0x84
 80036f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036f2:	23a4      	movs	r3, #164	@ 0xa4
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	2380      	movs	r3, #128	@ 0x80
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	4013      	ands	r3, r2
 80036fe:	d013      	beq.n	8003728 <HAL_UART_IRQHandler+0x198>
 8003700:	23a0      	movs	r3, #160	@ 0xa0
 8003702:	18fb      	adds	r3, r7, r3
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	2380      	movs	r3, #128	@ 0x80
 8003708:	04db      	lsls	r3, r3, #19
 800370a:	4013      	ands	r3, r2
 800370c:	d00c      	beq.n	8003728 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2280      	movs	r2, #128	@ 0x80
 8003714:	0112      	lsls	r2, r2, #4
 8003716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2284      	movs	r2, #132	@ 0x84
 800371c:	589b      	ldr	r3, [r3, r2]
 800371e:	2220      	movs	r2, #32
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2184      	movs	r1, #132	@ 0x84
 8003726:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2284      	movs	r2, #132	@ 0x84
 800372c:	589b      	ldr	r3, [r3, r2]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d100      	bne.n	8003734 <HAL_UART_IRQHandler+0x1a4>
 8003732:	e201      	b.n	8003b38 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003734:	23a4      	movs	r3, #164	@ 0xa4
 8003736:	18fb      	adds	r3, r7, r3
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2220      	movs	r2, #32
 800373c:	4013      	ands	r3, r2
 800373e:	d00e      	beq.n	800375e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003740:	23a0      	movs	r3, #160	@ 0xa0
 8003742:	18fb      	adds	r3, r7, r3
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2220      	movs	r2, #32
 8003748:	4013      	ands	r3, r2
 800374a:	d008      	beq.n	800375e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003750:	2b00      	cmp	r3, #0
 8003752:	d004      	beq.n	800375e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	0010      	movs	r0, r2
 800375c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2284      	movs	r2, #132	@ 0x84
 8003762:	589b      	ldr	r3, [r3, r2]
 8003764:	2194      	movs	r1, #148	@ 0x94
 8003766:	187a      	adds	r2, r7, r1
 8003768:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2240      	movs	r2, #64	@ 0x40
 8003772:	4013      	ands	r3, r2
 8003774:	2b40      	cmp	r3, #64	@ 0x40
 8003776:	d004      	beq.n	8003782 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003778:	187b      	adds	r3, r7, r1
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2228      	movs	r2, #40	@ 0x28
 800377e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003780:	d047      	beq.n	8003812 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	0018      	movs	r0, r3
 8003786:	f000 ff15 	bl	80045b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2240      	movs	r2, #64	@ 0x40
 8003792:	4013      	ands	r3, r2
 8003794:	2b40      	cmp	r3, #64	@ 0x40
 8003796:	d137      	bne.n	8003808 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003798:	f3ef 8310 	mrs	r3, PRIMASK
 800379c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800379e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037a0:	2090      	movs	r0, #144	@ 0x90
 80037a2:	183a      	adds	r2, r7, r0
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	2301      	movs	r3, #1
 80037a8:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037ac:	f383 8810 	msr	PRIMASK, r3
}
 80037b0:	46c0      	nop			@ (mov r8, r8)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2140      	movs	r1, #64	@ 0x40
 80037be:	438a      	bics	r2, r1
 80037c0:	609a      	str	r2, [r3, #8]
 80037c2:	183b      	adds	r3, r7, r0
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037ca:	f383 8810 	msr	PRIMASK, r3
}
 80037ce:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d012      	beq.n	80037fe <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037dc:	4a14      	ldr	r2, [pc, #80]	@ (8003830 <HAL_UART_IRQHandler+0x2a0>)
 80037de:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037e4:	0018      	movs	r0, r3
 80037e6:	f7fe fa63 	bl	8001cb0 <HAL_DMA_Abort_IT>
 80037ea:	1e03      	subs	r3, r0, #0
 80037ec:	d01a      	beq.n	8003824 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f8:	0018      	movs	r0, r3
 80037fa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fc:	e012      	b.n	8003824 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	0018      	movs	r0, r3
 8003802:	f000 f9af 	bl	8003b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003806:	e00d      	b.n	8003824 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	0018      	movs	r0, r3
 800380c:	f000 f9aa 	bl	8003b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003810:	e008      	b.n	8003824 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	0018      	movs	r0, r3
 8003816:	f000 f9a5 	bl	8003b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2284      	movs	r2, #132	@ 0x84
 800381e:	2100      	movs	r1, #0
 8003820:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003822:	e189      	b.n	8003b38 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003824:	46c0      	nop			@ (mov r8, r8)
    return;
 8003826:	e187      	b.n	8003b38 <HAL_UART_IRQHandler+0x5a8>
 8003828:	0000080f 	.word	0x0000080f
 800382c:	04000120 	.word	0x04000120
 8003830:	0800467d 	.word	0x0800467d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003838:	2b01      	cmp	r3, #1
 800383a:	d000      	beq.n	800383e <HAL_UART_IRQHandler+0x2ae>
 800383c:	e13b      	b.n	8003ab6 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800383e:	23a4      	movs	r3, #164	@ 0xa4
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2210      	movs	r2, #16
 8003846:	4013      	ands	r3, r2
 8003848:	d100      	bne.n	800384c <HAL_UART_IRQHandler+0x2bc>
 800384a:	e134      	b.n	8003ab6 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800384c:	23a0      	movs	r3, #160	@ 0xa0
 800384e:	18fb      	adds	r3, r7, r3
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2210      	movs	r2, #16
 8003854:	4013      	ands	r3, r2
 8003856:	d100      	bne.n	800385a <HAL_UART_IRQHandler+0x2ca>
 8003858:	e12d      	b.n	8003ab6 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2210      	movs	r2, #16
 8003860:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2240      	movs	r2, #64	@ 0x40
 800386a:	4013      	ands	r3, r2
 800386c:	2b40      	cmp	r3, #64	@ 0x40
 800386e:	d000      	beq.n	8003872 <HAL_UART_IRQHandler+0x2e2>
 8003870:	e0a1      	b.n	80039b6 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	217e      	movs	r1, #126	@ 0x7e
 800387c:	187b      	adds	r3, r7, r1
 800387e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003880:	187b      	adds	r3, r7, r1
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d100      	bne.n	800388a <HAL_UART_IRQHandler+0x2fa>
 8003888:	e158      	b.n	8003b3c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2258      	movs	r2, #88	@ 0x58
 800388e:	5a9b      	ldrh	r3, [r3, r2]
 8003890:	187a      	adds	r2, r7, r1
 8003892:	8812      	ldrh	r2, [r2, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d300      	bcc.n	800389a <HAL_UART_IRQHandler+0x30a>
 8003898:	e150      	b.n	8003b3c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	187a      	adds	r2, r7, r1
 800389e:	215a      	movs	r1, #90	@ 0x5a
 80038a0:	8812      	ldrh	r2, [r2, #0]
 80038a2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2220      	movs	r2, #32
 80038ae:	4013      	ands	r3, r2
 80038b0:	d16f      	bne.n	8003992 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038b2:	f3ef 8310 	mrs	r3, PRIMASK
 80038b6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80038b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038bc:	2301      	movs	r3, #1
 80038be:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038c2:	f383 8810 	msr	PRIMASK, r3
}
 80038c6:	46c0      	nop			@ (mov r8, r8)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	499e      	ldr	r1, [pc, #632]	@ (8003b4c <HAL_UART_IRQHandler+0x5bc>)
 80038d4:	400a      	ands	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038da:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038de:	f383 8810 	msr	PRIMASK, r3
}
 80038e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038e4:	f3ef 8310 	mrs	r3, PRIMASK
 80038e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80038ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80038ee:	2301      	movs	r3, #1
 80038f0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f4:	f383 8810 	msr	PRIMASK, r3
}
 80038f8:	46c0      	nop			@ (mov r8, r8)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2101      	movs	r1, #1
 8003906:	438a      	bics	r2, r1
 8003908:	609a      	str	r2, [r3, #8]
 800390a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800390c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800390e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003910:	f383 8810 	msr	PRIMASK, r3
}
 8003914:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003916:	f3ef 8310 	mrs	r3, PRIMASK
 800391a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800391c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800391e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003920:	2301      	movs	r3, #1
 8003922:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003926:	f383 8810 	msr	PRIMASK, r3
}
 800392a:	46c0      	nop			@ (mov r8, r8)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2140      	movs	r1, #64	@ 0x40
 8003938:	438a      	bics	r2, r1
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800393e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003940:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003942:	f383 8810 	msr	PRIMASK, r3
}
 8003946:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2280      	movs	r2, #128	@ 0x80
 800394c:	2120      	movs	r1, #32
 800394e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003956:	f3ef 8310 	mrs	r3, PRIMASK
 800395a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800395c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800395e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003960:	2301      	movs	r3, #1
 8003962:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003964:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003966:	f383 8810 	msr	PRIMASK, r3
}
 800396a:	46c0      	nop			@ (mov r8, r8)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2110      	movs	r1, #16
 8003978:	438a      	bics	r2, r1
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800397e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003980:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003982:	f383 8810 	msr	PRIMASK, r3
}
 8003986:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800398c:	0018      	movs	r0, r3
 800398e:	f7fe f94f 	bl	8001c30 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2202      	movs	r2, #2
 8003996:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2258      	movs	r2, #88	@ 0x58
 800399c:	5a9a      	ldrh	r2, [r3, r2]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	215a      	movs	r1, #90	@ 0x5a
 80039a2:	5a5b      	ldrh	r3, [r3, r1]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	0011      	movs	r1, r2
 80039ae:	0018      	movs	r0, r3
 80039b0:	f000 f8e0 	bl	8003b74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039b4:	e0c2      	b.n	8003b3c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2258      	movs	r2, #88	@ 0x58
 80039ba:	5a99      	ldrh	r1, [r3, r2]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	225a      	movs	r2, #90	@ 0x5a
 80039c0:	5a9b      	ldrh	r3, [r3, r2]
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	208e      	movs	r0, #142	@ 0x8e
 80039c6:	183b      	adds	r3, r7, r0
 80039c8:	1a8a      	subs	r2, r1, r2
 80039ca:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	225a      	movs	r2, #90	@ 0x5a
 80039d0:	5a9b      	ldrh	r3, [r3, r2]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d100      	bne.n	80039da <HAL_UART_IRQHandler+0x44a>
 80039d8:	e0b2      	b.n	8003b40 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80039da:	183b      	adds	r3, r7, r0
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d100      	bne.n	80039e4 <HAL_UART_IRQHandler+0x454>
 80039e2:	e0ad      	b.n	8003b40 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e4:	f3ef 8310 	mrs	r3, PRIMASK
 80039e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80039ea:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ec:	2488      	movs	r4, #136	@ 0x88
 80039ee:	193a      	adds	r2, r7, r4
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	2301      	movs	r3, #1
 80039f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f383 8810 	msr	PRIMASK, r3
}
 80039fc:	46c0      	nop			@ (mov r8, r8)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4951      	ldr	r1, [pc, #324]	@ (8003b50 <HAL_UART_IRQHandler+0x5c0>)
 8003a0a:	400a      	ands	r2, r1
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	193b      	adds	r3, r7, r4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f383 8810 	msr	PRIMASK, r3
}
 8003a1a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a20:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a22:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a24:	2484      	movs	r4, #132	@ 0x84
 8003a26:	193a      	adds	r2, r7, r4
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f383 8810 	msr	PRIMASK, r3
}
 8003a34:	46c0      	nop			@ (mov r8, r8)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2101      	movs	r1, #1
 8003a42:	438a      	bics	r2, r1
 8003a44:	609a      	str	r2, [r3, #8]
 8003a46:	193b      	adds	r3, r7, r4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	f383 8810 	msr	PRIMASK, r3
}
 8003a52:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2280      	movs	r2, #128	@ 0x80
 8003a58:	2120      	movs	r1, #32
 8003a5a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a68:	f3ef 8310 	mrs	r3, PRIMASK
 8003a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a70:	2480      	movs	r4, #128	@ 0x80
 8003a72:	193a      	adds	r2, r7, r4
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	2301      	movs	r3, #1
 8003a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7c:	f383 8810 	msr	PRIMASK, r3
}
 8003a80:	46c0      	nop			@ (mov r8, r8)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2110      	movs	r1, #16
 8003a8e:	438a      	bics	r2, r1
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	193b      	adds	r3, r7, r4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9a:	f383 8810 	msr	PRIMASK, r3
}
 8003a9e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003aa6:	183b      	adds	r3, r7, r0
 8003aa8:	881a      	ldrh	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	0011      	movs	r1, r2
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f000 f860 	bl	8003b74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ab4:	e044      	b.n	8003b40 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ab6:	23a4      	movs	r3, #164	@ 0xa4
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	2380      	movs	r3, #128	@ 0x80
 8003abe:	035b      	lsls	r3, r3, #13
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d010      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x556>
 8003ac4:	239c      	movs	r3, #156	@ 0x9c
 8003ac6:	18fb      	adds	r3, r7, r3
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	2380      	movs	r3, #128	@ 0x80
 8003acc:	03db      	lsls	r3, r3, #15
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d009      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2280      	movs	r2, #128	@ 0x80
 8003ad8:	0352      	lsls	r2, r2, #13
 8003ada:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f001 f88a 	bl	8004bf8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ae4:	e02f      	b.n	8003b46 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ae6:	23a4      	movs	r3, #164	@ 0xa4
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2280      	movs	r2, #128	@ 0x80
 8003aee:	4013      	ands	r3, r2
 8003af0:	d00f      	beq.n	8003b12 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003af2:	23a0      	movs	r3, #160	@ 0xa0
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2280      	movs	r2, #128	@ 0x80
 8003afa:	4013      	ands	r3, r2
 8003afc:	d009      	beq.n	8003b12 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d01e      	beq.n	8003b44 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	0010      	movs	r0, r2
 8003b0e:	4798      	blx	r3
    }
    return;
 8003b10:	e018      	b.n	8003b44 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b12:	23a4      	movs	r3, #164	@ 0xa4
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2240      	movs	r2, #64	@ 0x40
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d013      	beq.n	8003b46 <HAL_UART_IRQHandler+0x5b6>
 8003b1e:	23a0      	movs	r3, #160	@ 0xa0
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2240      	movs	r2, #64	@ 0x40
 8003b26:	4013      	ands	r3, r2
 8003b28:	d00d      	beq.n	8003b46 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f000 fe73 	bl	8004818 <UART_EndTransmit_IT>
    return;
 8003b32:	e008      	b.n	8003b46 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003b34:	46c0      	nop			@ (mov r8, r8)
 8003b36:	e006      	b.n	8003b46 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003b38:	46c0      	nop			@ (mov r8, r8)
 8003b3a:	e004      	b.n	8003b46 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003b3c:	46c0      	nop			@ (mov r8, r8)
 8003b3e:	e002      	b.n	8003b46 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003b40:	46c0      	nop			@ (mov r8, r8)
 8003b42:	e000      	b.n	8003b46 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003b44:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b02b      	add	sp, #172	@ 0xac
 8003b4a:	bd90      	pop	{r4, r7, pc}
 8003b4c:	fffffeff 	.word	0xfffffeff
 8003b50:	fffffedf 	.word	0xfffffedf

08003b54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b5c:	46c0      	nop			@ (mov r8, r8)
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b002      	add	sp, #8
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b6c:	46c0      	nop			@ (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b002      	add	sp, #8
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	000a      	movs	r2, r1
 8003b7e:	1cbb      	adds	r3, r7, #2
 8003b80:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b82:	46c0      	nop			@ (mov r8, r8)
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b002      	add	sp, #8
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b8c:	b5b0      	push	{r4, r5, r7, lr}
 8003b8e:	b08e      	sub	sp, #56	@ 0x38
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b94:	231a      	movs	r3, #26
 8003b96:	2218      	movs	r2, #24
 8003b98:	189b      	adds	r3, r3, r2
 8003b9a:	19db      	adds	r3, r3, r7
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4ac6      	ldr	r2, [pc, #792]	@ (8003ed8 <UART_SetConfig+0x34c>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	0019      	movs	r1, r3
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4ac1      	ldr	r2, [pc, #772]	@ (8003edc <UART_SetConfig+0x350>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	0019      	movs	r1, r3
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4abb      	ldr	r2, [pc, #748]	@ (8003ee0 <UART_SetConfig+0x354>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d004      	beq.n	8003c00 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	4ab7      	ldr	r2, [pc, #732]	@ (8003ee4 <UART_SetConfig+0x358>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c12:	430a      	orrs	r2, r1
 8003c14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4ab3      	ldr	r2, [pc, #716]	@ (8003ee8 <UART_SetConfig+0x35c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d131      	bne.n	8003c84 <UART_SetConfig+0xf8>
 8003c20:	4bb2      	ldr	r3, [pc, #712]	@ (8003eec <UART_SetConfig+0x360>)
 8003c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c24:	2203      	movs	r2, #3
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d01d      	beq.n	8003c68 <UART_SetConfig+0xdc>
 8003c2c:	d823      	bhi.n	8003c76 <UART_SetConfig+0xea>
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d00c      	beq.n	8003c4c <UART_SetConfig+0xc0>
 8003c32:	d820      	bhi.n	8003c76 <UART_SetConfig+0xea>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <UART_SetConfig+0xb2>
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d00e      	beq.n	8003c5a <UART_SetConfig+0xce>
 8003c3c:	e01b      	b.n	8003c76 <UART_SetConfig+0xea>
 8003c3e:	231b      	movs	r3, #27
 8003c40:	2218      	movs	r2, #24
 8003c42:	189b      	adds	r3, r3, r2
 8003c44:	19db      	adds	r3, r3, r7
 8003c46:	2201      	movs	r2, #1
 8003c48:	701a      	strb	r2, [r3, #0]
 8003c4a:	e09c      	b.n	8003d86 <UART_SetConfig+0x1fa>
 8003c4c:	231b      	movs	r3, #27
 8003c4e:	2218      	movs	r2, #24
 8003c50:	189b      	adds	r3, r3, r2
 8003c52:	19db      	adds	r3, r3, r7
 8003c54:	2202      	movs	r2, #2
 8003c56:	701a      	strb	r2, [r3, #0]
 8003c58:	e095      	b.n	8003d86 <UART_SetConfig+0x1fa>
 8003c5a:	231b      	movs	r3, #27
 8003c5c:	2218      	movs	r2, #24
 8003c5e:	189b      	adds	r3, r3, r2
 8003c60:	19db      	adds	r3, r3, r7
 8003c62:	2204      	movs	r2, #4
 8003c64:	701a      	strb	r2, [r3, #0]
 8003c66:	e08e      	b.n	8003d86 <UART_SetConfig+0x1fa>
 8003c68:	231b      	movs	r3, #27
 8003c6a:	2218      	movs	r2, #24
 8003c6c:	189b      	adds	r3, r3, r2
 8003c6e:	19db      	adds	r3, r3, r7
 8003c70:	2208      	movs	r2, #8
 8003c72:	701a      	strb	r2, [r3, #0]
 8003c74:	e087      	b.n	8003d86 <UART_SetConfig+0x1fa>
 8003c76:	231b      	movs	r3, #27
 8003c78:	2218      	movs	r2, #24
 8003c7a:	189b      	adds	r3, r3, r2
 8003c7c:	19db      	adds	r3, r3, r7
 8003c7e:	2210      	movs	r2, #16
 8003c80:	701a      	strb	r2, [r3, #0]
 8003c82:	e080      	b.n	8003d86 <UART_SetConfig+0x1fa>
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a99      	ldr	r2, [pc, #612]	@ (8003ef0 <UART_SetConfig+0x364>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d131      	bne.n	8003cf2 <UART_SetConfig+0x166>
 8003c8e:	4b97      	ldr	r3, [pc, #604]	@ (8003eec <UART_SetConfig+0x360>)
 8003c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c92:	220c      	movs	r2, #12
 8003c94:	4013      	ands	r3, r2
 8003c96:	2b0c      	cmp	r3, #12
 8003c98:	d01d      	beq.n	8003cd6 <UART_SetConfig+0x14a>
 8003c9a:	d823      	bhi.n	8003ce4 <UART_SetConfig+0x158>
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d00c      	beq.n	8003cba <UART_SetConfig+0x12e>
 8003ca0:	d820      	bhi.n	8003ce4 <UART_SetConfig+0x158>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <UART_SetConfig+0x120>
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d00e      	beq.n	8003cc8 <UART_SetConfig+0x13c>
 8003caa:	e01b      	b.n	8003ce4 <UART_SetConfig+0x158>
 8003cac:	231b      	movs	r3, #27
 8003cae:	2218      	movs	r2, #24
 8003cb0:	189b      	adds	r3, r3, r2
 8003cb2:	19db      	adds	r3, r3, r7
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
 8003cb8:	e065      	b.n	8003d86 <UART_SetConfig+0x1fa>
 8003cba:	231b      	movs	r3, #27
 8003cbc:	2218      	movs	r2, #24
 8003cbe:	189b      	adds	r3, r3, r2
 8003cc0:	19db      	adds	r3, r3, r7
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	701a      	strb	r2, [r3, #0]
 8003cc6:	e05e      	b.n	8003d86 <UART_SetConfig+0x1fa>
 8003cc8:	231b      	movs	r3, #27
 8003cca:	2218      	movs	r2, #24
 8003ccc:	189b      	adds	r3, r3, r2
 8003cce:	19db      	adds	r3, r3, r7
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	701a      	strb	r2, [r3, #0]
 8003cd4:	e057      	b.n	8003d86 <UART_SetConfig+0x1fa>
 8003cd6:	231b      	movs	r3, #27
 8003cd8:	2218      	movs	r2, #24
 8003cda:	189b      	adds	r3, r3, r2
 8003cdc:	19db      	adds	r3, r3, r7
 8003cde:	2208      	movs	r2, #8
 8003ce0:	701a      	strb	r2, [r3, #0]
 8003ce2:	e050      	b.n	8003d86 <UART_SetConfig+0x1fa>
 8003ce4:	231b      	movs	r3, #27
 8003ce6:	2218      	movs	r2, #24
 8003ce8:	189b      	adds	r3, r3, r2
 8003cea:	19db      	adds	r3, r3, r7
 8003cec:	2210      	movs	r2, #16
 8003cee:	701a      	strb	r2, [r3, #0]
 8003cf0:	e049      	b.n	8003d86 <UART_SetConfig+0x1fa>
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a7a      	ldr	r2, [pc, #488]	@ (8003ee0 <UART_SetConfig+0x354>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d13e      	bne.n	8003d7a <UART_SetConfig+0x1ee>
 8003cfc:	4b7b      	ldr	r3, [pc, #492]	@ (8003eec <UART_SetConfig+0x360>)
 8003cfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d00:	23c0      	movs	r3, #192	@ 0xc0
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	4013      	ands	r3, r2
 8003d06:	22c0      	movs	r2, #192	@ 0xc0
 8003d08:	0112      	lsls	r2, r2, #4
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d027      	beq.n	8003d5e <UART_SetConfig+0x1d2>
 8003d0e:	22c0      	movs	r2, #192	@ 0xc0
 8003d10:	0112      	lsls	r2, r2, #4
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d82a      	bhi.n	8003d6c <UART_SetConfig+0x1e0>
 8003d16:	2280      	movs	r2, #128	@ 0x80
 8003d18:	0112      	lsls	r2, r2, #4
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d011      	beq.n	8003d42 <UART_SetConfig+0x1b6>
 8003d1e:	2280      	movs	r2, #128	@ 0x80
 8003d20:	0112      	lsls	r2, r2, #4
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d822      	bhi.n	8003d6c <UART_SetConfig+0x1e0>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d004      	beq.n	8003d34 <UART_SetConfig+0x1a8>
 8003d2a:	2280      	movs	r2, #128	@ 0x80
 8003d2c:	00d2      	lsls	r2, r2, #3
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00e      	beq.n	8003d50 <UART_SetConfig+0x1c4>
 8003d32:	e01b      	b.n	8003d6c <UART_SetConfig+0x1e0>
 8003d34:	231b      	movs	r3, #27
 8003d36:	2218      	movs	r2, #24
 8003d38:	189b      	adds	r3, r3, r2
 8003d3a:	19db      	adds	r3, r3, r7
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	701a      	strb	r2, [r3, #0]
 8003d40:	e021      	b.n	8003d86 <UART_SetConfig+0x1fa>
 8003d42:	231b      	movs	r3, #27
 8003d44:	2218      	movs	r2, #24
 8003d46:	189b      	adds	r3, r3, r2
 8003d48:	19db      	adds	r3, r3, r7
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	e01a      	b.n	8003d86 <UART_SetConfig+0x1fa>
 8003d50:	231b      	movs	r3, #27
 8003d52:	2218      	movs	r2, #24
 8003d54:	189b      	adds	r3, r3, r2
 8003d56:	19db      	adds	r3, r3, r7
 8003d58:	2204      	movs	r2, #4
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	e013      	b.n	8003d86 <UART_SetConfig+0x1fa>
 8003d5e:	231b      	movs	r3, #27
 8003d60:	2218      	movs	r2, #24
 8003d62:	189b      	adds	r3, r3, r2
 8003d64:	19db      	adds	r3, r3, r7
 8003d66:	2208      	movs	r2, #8
 8003d68:	701a      	strb	r2, [r3, #0]
 8003d6a:	e00c      	b.n	8003d86 <UART_SetConfig+0x1fa>
 8003d6c:	231b      	movs	r3, #27
 8003d6e:	2218      	movs	r2, #24
 8003d70:	189b      	adds	r3, r3, r2
 8003d72:	19db      	adds	r3, r3, r7
 8003d74:	2210      	movs	r2, #16
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	e005      	b.n	8003d86 <UART_SetConfig+0x1fa>
 8003d7a:	231b      	movs	r3, #27
 8003d7c:	2218      	movs	r2, #24
 8003d7e:	189b      	adds	r3, r3, r2
 8003d80:	19db      	adds	r3, r3, r7
 8003d82:	2210      	movs	r2, #16
 8003d84:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a55      	ldr	r2, [pc, #340]	@ (8003ee0 <UART_SetConfig+0x354>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d000      	beq.n	8003d92 <UART_SetConfig+0x206>
 8003d90:	e084      	b.n	8003e9c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d92:	231b      	movs	r3, #27
 8003d94:	2218      	movs	r2, #24
 8003d96:	189b      	adds	r3, r3, r2
 8003d98:	19db      	adds	r3, r3, r7
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d01d      	beq.n	8003ddc <UART_SetConfig+0x250>
 8003da0:	dc20      	bgt.n	8003de4 <UART_SetConfig+0x258>
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d015      	beq.n	8003dd2 <UART_SetConfig+0x246>
 8003da6:	dc1d      	bgt.n	8003de4 <UART_SetConfig+0x258>
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <UART_SetConfig+0x226>
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d005      	beq.n	8003dbc <UART_SetConfig+0x230>
 8003db0:	e018      	b.n	8003de4 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db2:	f7ff f815 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 8003db6:	0003      	movs	r3, r0
 8003db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003dba:	e01c      	b.n	8003df6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8003eec <UART_SetConfig+0x360>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2210      	movs	r2, #16
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d002      	beq.n	8003dcc <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003dc6:	4b4b      	ldr	r3, [pc, #300]	@ (8003ef4 <UART_SetConfig+0x368>)
 8003dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003dca:	e014      	b.n	8003df6 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8003dcc:	4b4a      	ldr	r3, [pc, #296]	@ (8003ef8 <UART_SetConfig+0x36c>)
 8003dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003dd0:	e011      	b.n	8003df6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd2:	f7fe ff55 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8003dd6:	0003      	movs	r3, r0
 8003dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003dda:	e00c      	b.n	8003df6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ddc:	2380      	movs	r3, #128	@ 0x80
 8003dde:	021b      	lsls	r3, r3, #8
 8003de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003de2:	e008      	b.n	8003df6 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003de8:	231a      	movs	r3, #26
 8003dea:	2218      	movs	r2, #24
 8003dec:	189b      	adds	r3, r3, r2
 8003dee:	19db      	adds	r3, r3, r7
 8003df0:	2201      	movs	r2, #1
 8003df2:	701a      	strb	r2, [r3, #0]
        break;
 8003df4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d100      	bne.n	8003dfe <UART_SetConfig+0x272>
 8003dfc:	e132      	b.n	8004064 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	0013      	movs	r3, r2
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	189b      	adds	r3, r3, r2
 8003e08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d305      	bcc.n	8003e1a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d906      	bls.n	8003e28 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8003e1a:	231a      	movs	r3, #26
 8003e1c:	2218      	movs	r2, #24
 8003e1e:	189b      	adds	r3, r3, r2
 8003e20:	19db      	adds	r3, r3, r7
 8003e22:	2201      	movs	r2, #1
 8003e24:	701a      	strb	r2, [r3, #0]
 8003e26:	e11d      	b.n	8004064 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	6939      	ldr	r1, [r7, #16]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	000b      	movs	r3, r1
 8003e36:	0e1b      	lsrs	r3, r3, #24
 8003e38:	0010      	movs	r0, r2
 8003e3a:	0205      	lsls	r5, r0, #8
 8003e3c:	431d      	orrs	r5, r3
 8003e3e:	000b      	movs	r3, r1
 8003e40:	021c      	lsls	r4, r3, #8
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	085b      	lsrs	r3, r3, #1
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	68b8      	ldr	r0, [r7, #8]
 8003e50:	68f9      	ldr	r1, [r7, #12]
 8003e52:	1900      	adds	r0, r0, r4
 8003e54:	4169      	adcs	r1, r5
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	607b      	str	r3, [r7, #4]
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f7fc f9e6 	bl	8000234 <__aeabi_uldivmod>
 8003e68:	0002      	movs	r2, r0
 8003e6a:	000b      	movs	r3, r1
 8003e6c:	0013      	movs	r3, r2
 8003e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e72:	23c0      	movs	r3, #192	@ 0xc0
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d309      	bcc.n	8003e8e <UART_SetConfig+0x302>
 8003e7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e7c:	2380      	movs	r3, #128	@ 0x80
 8003e7e:	035b      	lsls	r3, r3, #13
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d204      	bcs.n	8003e8e <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e8a:	60da      	str	r2, [r3, #12]
 8003e8c:	e0ea      	b.n	8004064 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8003e8e:	231a      	movs	r3, #26
 8003e90:	2218      	movs	r2, #24
 8003e92:	189b      	adds	r3, r3, r2
 8003e94:	19db      	adds	r3, r3, r7
 8003e96:	2201      	movs	r2, #1
 8003e98:	701a      	strb	r2, [r3, #0]
 8003e9a:	e0e3      	b.n	8004064 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	69da      	ldr	r2, [r3, #28]
 8003ea0:	2380      	movs	r3, #128	@ 0x80
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d000      	beq.n	8003eaa <UART_SetConfig+0x31e>
 8003ea8:	e085      	b.n	8003fb6 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8003eaa:	231b      	movs	r3, #27
 8003eac:	2218      	movs	r2, #24
 8003eae:	189b      	adds	r3, r3, r2
 8003eb0:	19db      	adds	r3, r3, r7
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d837      	bhi.n	8003f28 <UART_SetConfig+0x39c>
 8003eb8:	009a      	lsls	r2, r3, #2
 8003eba:	4b10      	ldr	r3, [pc, #64]	@ (8003efc <UART_SetConfig+0x370>)
 8003ebc:	18d3      	adds	r3, r2, r3
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec2:	f7fe ff8d 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 8003ec6:	0003      	movs	r3, r0
 8003ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003eca:	e036      	b.n	8003f3a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ecc:	f7fe ff9e 	bl	8002e0c <HAL_RCC_GetPCLK2Freq>
 8003ed0:	0003      	movs	r3, r0
 8003ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ed4:	e031      	b.n	8003f3a <UART_SetConfig+0x3ae>
 8003ed6:	46c0      	nop			@ (mov r8, r8)
 8003ed8:	efff69f3 	.word	0xefff69f3
 8003edc:	ffffcfff 	.word	0xffffcfff
 8003ee0:	40004800 	.word	0x40004800
 8003ee4:	fffff4ff 	.word	0xfffff4ff
 8003ee8:	40013800 	.word	0x40013800
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	40004400 	.word	0x40004400
 8003ef4:	003d0900 	.word	0x003d0900
 8003ef8:	00f42400 	.word	0x00f42400
 8003efc:	08005618 	.word	0x08005618
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f00:	4b60      	ldr	r3, [pc, #384]	@ (8004084 <UART_SetConfig+0x4f8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2210      	movs	r2, #16
 8003f06:	4013      	ands	r3, r2
 8003f08:	d002      	beq.n	8003f10 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003f0a:	4b5f      	ldr	r3, [pc, #380]	@ (8004088 <UART_SetConfig+0x4fc>)
 8003f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003f0e:	e014      	b.n	8003f3a <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8003f10:	4b5e      	ldr	r3, [pc, #376]	@ (800408c <UART_SetConfig+0x500>)
 8003f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f14:	e011      	b.n	8003f3a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f16:	f7fe feb3 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f1e:	e00c      	b.n	8003f3a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f20:	2380      	movs	r3, #128	@ 0x80
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003f26:	e008      	b.n	8003f3a <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003f2c:	231a      	movs	r3, #26
 8003f2e:	2218      	movs	r2, #24
 8003f30:	189b      	adds	r3, r3, r2
 8003f32:	19db      	adds	r3, r3, r7
 8003f34:	2201      	movs	r2, #1
 8003f36:	701a      	strb	r2, [r3, #0]
        break;
 8003f38:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d100      	bne.n	8003f42 <UART_SetConfig+0x3b6>
 8003f40:	e090      	b.n	8004064 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f44:	005a      	lsls	r2, r3, #1
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	18d2      	adds	r2, r2, r3
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	0019      	movs	r1, r3
 8003f54:	0010      	movs	r0, r2
 8003f56:	f7fc f8e1 	bl	800011c <__udivsi3>
 8003f5a:	0003      	movs	r3, r0
 8003f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f60:	2b0f      	cmp	r3, #15
 8003f62:	d921      	bls.n	8003fa8 <UART_SetConfig+0x41c>
 8003f64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f66:	2380      	movs	r3, #128	@ 0x80
 8003f68:	025b      	lsls	r3, r3, #9
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d21c      	bcs.n	8003fa8 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	200e      	movs	r0, #14
 8003f74:	2418      	movs	r4, #24
 8003f76:	1903      	adds	r3, r0, r4
 8003f78:	19db      	adds	r3, r3, r7
 8003f7a:	210f      	movs	r1, #15
 8003f7c:	438a      	bics	r2, r1
 8003f7e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f82:	085b      	lsrs	r3, r3, #1
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2207      	movs	r2, #7
 8003f88:	4013      	ands	r3, r2
 8003f8a:	b299      	uxth	r1, r3
 8003f8c:	1903      	adds	r3, r0, r4
 8003f8e:	19db      	adds	r3, r3, r7
 8003f90:	1902      	adds	r2, r0, r4
 8003f92:	19d2      	adds	r2, r2, r7
 8003f94:	8812      	ldrh	r2, [r2, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	1902      	adds	r2, r0, r4
 8003fa0:	19d2      	adds	r2, r2, r7
 8003fa2:	8812      	ldrh	r2, [r2, #0]
 8003fa4:	60da      	str	r2, [r3, #12]
 8003fa6:	e05d      	b.n	8004064 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003fa8:	231a      	movs	r3, #26
 8003faa:	2218      	movs	r2, #24
 8003fac:	189b      	adds	r3, r3, r2
 8003fae:	19db      	adds	r3, r3, r7
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	701a      	strb	r2, [r3, #0]
 8003fb4:	e056      	b.n	8004064 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fb6:	231b      	movs	r3, #27
 8003fb8:	2218      	movs	r2, #24
 8003fba:	189b      	adds	r3, r3, r2
 8003fbc:	19db      	adds	r3, r3, r7
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d822      	bhi.n	800400a <UART_SetConfig+0x47e>
 8003fc4:	009a      	lsls	r2, r3, #2
 8003fc6:	4b32      	ldr	r3, [pc, #200]	@ (8004090 <UART_SetConfig+0x504>)
 8003fc8:	18d3      	adds	r3, r2, r3
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fce:	f7fe ff07 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 8003fd2:	0003      	movs	r3, r0
 8003fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003fd6:	e021      	b.n	800401c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fd8:	f7fe ff18 	bl	8002e0c <HAL_RCC_GetPCLK2Freq>
 8003fdc:	0003      	movs	r3, r0
 8003fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003fe0:	e01c      	b.n	800401c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fe2:	4b28      	ldr	r3, [pc, #160]	@ (8004084 <UART_SetConfig+0x4f8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2210      	movs	r2, #16
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d002      	beq.n	8003ff2 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003fec:	4b26      	ldr	r3, [pc, #152]	@ (8004088 <UART_SetConfig+0x4fc>)
 8003fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003ff0:	e014      	b.n	800401c <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8003ff2:	4b26      	ldr	r3, [pc, #152]	@ (800408c <UART_SetConfig+0x500>)
 8003ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ff6:	e011      	b.n	800401c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff8:	f7fe fe42 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004000:	e00c      	b.n	800401c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004002:	2380      	movs	r3, #128	@ 0x80
 8004004:	021b      	lsls	r3, r3, #8
 8004006:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004008:	e008      	b.n	800401c <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800400e:	231a      	movs	r3, #26
 8004010:	2218      	movs	r2, #24
 8004012:	189b      	adds	r3, r3, r2
 8004014:	19db      	adds	r3, r3, r7
 8004016:	2201      	movs	r2, #1
 8004018:	701a      	strb	r2, [r3, #0]
        break;
 800401a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800401c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d020      	beq.n	8004064 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	085a      	lsrs	r2, r3, #1
 8004028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402a:	18d2      	adds	r2, r2, r3
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	0019      	movs	r1, r3
 8004032:	0010      	movs	r0, r2
 8004034:	f7fc f872 	bl	800011c <__udivsi3>
 8004038:	0003      	movs	r3, r0
 800403a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800403c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403e:	2b0f      	cmp	r3, #15
 8004040:	d90a      	bls.n	8004058 <UART_SetConfig+0x4cc>
 8004042:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004044:	2380      	movs	r3, #128	@ 0x80
 8004046:	025b      	lsls	r3, r3, #9
 8004048:	429a      	cmp	r2, r3
 800404a:	d205      	bcs.n	8004058 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800404c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404e:	b29a      	uxth	r2, r3
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	e005      	b.n	8004064 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004058:	231a      	movs	r3, #26
 800405a:	2218      	movs	r2, #24
 800405c:	189b      	adds	r3, r3, r2
 800405e:	19db      	adds	r3, r3, r7
 8004060:	2201      	movs	r2, #1
 8004062:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	2200      	movs	r2, #0
 8004068:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	2200      	movs	r2, #0
 800406e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004070:	231a      	movs	r3, #26
 8004072:	2218      	movs	r2, #24
 8004074:	189b      	adds	r3, r3, r2
 8004076:	19db      	adds	r3, r3, r7
 8004078:	781b      	ldrb	r3, [r3, #0]
}
 800407a:	0018      	movs	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	b00e      	add	sp, #56	@ 0x38
 8004080:	bdb0      	pop	{r4, r5, r7, pc}
 8004082:	46c0      	nop			@ (mov r8, r8)
 8004084:	40021000 	.word	0x40021000
 8004088:	003d0900 	.word	0x003d0900
 800408c:	00f42400 	.word	0x00f42400
 8004090:	0800563c 	.word	0x0800563c

08004094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a0:	2201      	movs	r2, #1
 80040a2:	4013      	ands	r3, r2
 80040a4:	d00b      	beq.n	80040be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	4a4a      	ldr	r2, [pc, #296]	@ (80041d8 <UART_AdvFeatureConfig+0x144>)
 80040ae:	4013      	ands	r3, r2
 80040b0:	0019      	movs	r1, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	2202      	movs	r2, #2
 80040c4:	4013      	ands	r3, r2
 80040c6:	d00b      	beq.n	80040e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	4a43      	ldr	r2, [pc, #268]	@ (80041dc <UART_AdvFeatureConfig+0x148>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	0019      	movs	r1, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	2204      	movs	r2, #4
 80040e6:	4013      	ands	r3, r2
 80040e8:	d00b      	beq.n	8004102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4a3b      	ldr	r2, [pc, #236]	@ (80041e0 <UART_AdvFeatureConfig+0x14c>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	0019      	movs	r1, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	2208      	movs	r2, #8
 8004108:	4013      	ands	r3, r2
 800410a:	d00b      	beq.n	8004124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	4a34      	ldr	r2, [pc, #208]	@ (80041e4 <UART_AdvFeatureConfig+0x150>)
 8004114:	4013      	ands	r3, r2
 8004116:	0019      	movs	r1, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	2210      	movs	r2, #16
 800412a:	4013      	ands	r3, r2
 800412c:	d00b      	beq.n	8004146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4a2c      	ldr	r2, [pc, #176]	@ (80041e8 <UART_AdvFeatureConfig+0x154>)
 8004136:	4013      	ands	r3, r2
 8004138:	0019      	movs	r1, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	2220      	movs	r2, #32
 800414c:	4013      	ands	r3, r2
 800414e:	d00b      	beq.n	8004168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	4a25      	ldr	r2, [pc, #148]	@ (80041ec <UART_AdvFeatureConfig+0x158>)
 8004158:	4013      	ands	r3, r2
 800415a:	0019      	movs	r1, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416c:	2240      	movs	r2, #64	@ 0x40
 800416e:	4013      	ands	r3, r2
 8004170:	d01d      	beq.n	80041ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4a1d      	ldr	r2, [pc, #116]	@ (80041f0 <UART_AdvFeatureConfig+0x15c>)
 800417a:	4013      	ands	r3, r2
 800417c:	0019      	movs	r1, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800418e:	2380      	movs	r3, #128	@ 0x80
 8004190:	035b      	lsls	r3, r3, #13
 8004192:	429a      	cmp	r2, r3
 8004194:	d10b      	bne.n	80041ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	4a15      	ldr	r2, [pc, #84]	@ (80041f4 <UART_AdvFeatureConfig+0x160>)
 800419e:	4013      	ands	r3, r2
 80041a0:	0019      	movs	r1, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b2:	2280      	movs	r2, #128	@ 0x80
 80041b4:	4013      	ands	r3, r2
 80041b6:	d00b      	beq.n	80041d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	4a0e      	ldr	r2, [pc, #56]	@ (80041f8 <UART_AdvFeatureConfig+0x164>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	0019      	movs	r1, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	605a      	str	r2, [r3, #4]
  }
}
 80041d0:	46c0      	nop			@ (mov r8, r8)
 80041d2:	46bd      	mov	sp, r7
 80041d4:	b002      	add	sp, #8
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	fffdffff 	.word	0xfffdffff
 80041dc:	fffeffff 	.word	0xfffeffff
 80041e0:	fffbffff 	.word	0xfffbffff
 80041e4:	ffff7fff 	.word	0xffff7fff
 80041e8:	ffffefff 	.word	0xffffefff
 80041ec:	ffffdfff 	.word	0xffffdfff
 80041f0:	ffefffff 	.word	0xffefffff
 80041f4:	ff9fffff 	.word	0xff9fffff
 80041f8:	fff7ffff 	.word	0xfff7ffff

080041fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b092      	sub	sp, #72	@ 0x48
 8004200:	af02      	add	r7, sp, #8
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2284      	movs	r2, #132	@ 0x84
 8004208:	2100      	movs	r1, #0
 800420a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800420c:	f7fd f972 	bl	80014f4 <HAL_GetTick>
 8004210:	0003      	movs	r3, r0
 8004212:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2208      	movs	r2, #8
 800421c:	4013      	ands	r3, r2
 800421e:	2b08      	cmp	r3, #8
 8004220:	d12c      	bne.n	800427c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004224:	2280      	movs	r2, #128	@ 0x80
 8004226:	0391      	lsls	r1, r2, #14
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	4a46      	ldr	r2, [pc, #280]	@ (8004344 <UART_CheckIdleState+0x148>)
 800422c:	9200      	str	r2, [sp, #0]
 800422e:	2200      	movs	r2, #0
 8004230:	f000 f88c 	bl	800434c <UART_WaitOnFlagUntilTimeout>
 8004234:	1e03      	subs	r3, r0, #0
 8004236:	d021      	beq.n	800427c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004238:	f3ef 8310 	mrs	r3, PRIMASK
 800423c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004240:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004242:	2301      	movs	r3, #1
 8004244:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004248:	f383 8810 	msr	PRIMASK, r3
}
 800424c:	46c0      	nop			@ (mov r8, r8)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2180      	movs	r1, #128	@ 0x80
 800425a:	438a      	bics	r2, r1
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004260:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004264:	f383 8810 	msr	PRIMASK, r3
}
 8004268:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2220      	movs	r2, #32
 800426e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2278      	movs	r2, #120	@ 0x78
 8004274:	2100      	movs	r1, #0
 8004276:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e05f      	b.n	800433c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2204      	movs	r2, #4
 8004284:	4013      	ands	r3, r2
 8004286:	2b04      	cmp	r3, #4
 8004288:	d146      	bne.n	8004318 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800428a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800428c:	2280      	movs	r2, #128	@ 0x80
 800428e:	03d1      	lsls	r1, r2, #15
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4a2c      	ldr	r2, [pc, #176]	@ (8004344 <UART_CheckIdleState+0x148>)
 8004294:	9200      	str	r2, [sp, #0]
 8004296:	2200      	movs	r2, #0
 8004298:	f000 f858 	bl	800434c <UART_WaitOnFlagUntilTimeout>
 800429c:	1e03      	subs	r3, r0, #0
 800429e:	d03b      	beq.n	8004318 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042a0:	f3ef 8310 	mrs	r3, PRIMASK
 80042a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80042a6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80042aa:	2301      	movs	r3, #1
 80042ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f383 8810 	msr	PRIMASK, r3
}
 80042b4:	46c0      	nop			@ (mov r8, r8)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4921      	ldr	r1, [pc, #132]	@ (8004348 <UART_CheckIdleState+0x14c>)
 80042c2:	400a      	ands	r2, r1
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f383 8810 	msr	PRIMASK, r3
}
 80042d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d2:	f3ef 8310 	mrs	r3, PRIMASK
 80042d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80042d8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042da:	633b      	str	r3, [r7, #48]	@ 0x30
 80042dc:	2301      	movs	r3, #1
 80042de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f383 8810 	msr	PRIMASK, r3
}
 80042e6:	46c0      	nop			@ (mov r8, r8)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2101      	movs	r1, #1
 80042f4:	438a      	bics	r2, r1
 80042f6:	609a      	str	r2, [r3, #8]
 80042f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	f383 8810 	msr	PRIMASK, r3
}
 8004302:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2280      	movs	r2, #128	@ 0x80
 8004308:	2120      	movs	r1, #32
 800430a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2278      	movs	r2, #120	@ 0x78
 8004310:	2100      	movs	r1, #0
 8004312:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e011      	b.n	800433c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2280      	movs	r2, #128	@ 0x80
 8004322:	2120      	movs	r1, #32
 8004324:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2278      	movs	r2, #120	@ 0x78
 8004336:	2100      	movs	r1, #0
 8004338:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	0018      	movs	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	b010      	add	sp, #64	@ 0x40
 8004342:	bd80      	pop	{r7, pc}
 8004344:	01ffffff 	.word	0x01ffffff
 8004348:	fffffedf 	.word	0xfffffedf

0800434c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	1dfb      	adds	r3, r7, #7
 800435a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800435c:	e04b      	b.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	3301      	adds	r3, #1
 8004362:	d048      	beq.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004364:	f7fd f8c6 	bl	80014f4 <HAL_GetTick>
 8004368:	0002      	movs	r2, r0
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	429a      	cmp	r2, r3
 8004372:	d302      	bcc.n	800437a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e04b      	b.n	8004416 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2204      	movs	r2, #4
 8004386:	4013      	ands	r3, r2
 8004388:	d035      	beq.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	2208      	movs	r2, #8
 8004392:	4013      	ands	r3, r2
 8004394:	2b08      	cmp	r3, #8
 8004396:	d111      	bne.n	80043bc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2208      	movs	r2, #8
 800439e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	0018      	movs	r0, r3
 80043a4:	f000 f906 	bl	80045b4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2284      	movs	r2, #132	@ 0x84
 80043ac:	2108      	movs	r1, #8
 80043ae:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2278      	movs	r2, #120	@ 0x78
 80043b4:	2100      	movs	r1, #0
 80043b6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e02c      	b.n	8004416 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69da      	ldr	r2, [r3, #28]
 80043c2:	2380      	movs	r3, #128	@ 0x80
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	401a      	ands	r2, r3
 80043c8:	2380      	movs	r3, #128	@ 0x80
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d112      	bne.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2280      	movs	r2, #128	@ 0x80
 80043d6:	0112      	lsls	r2, r2, #4
 80043d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	0018      	movs	r0, r3
 80043de:	f000 f8e9 	bl	80045b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2284      	movs	r2, #132	@ 0x84
 80043e6:	2120      	movs	r1, #32
 80043e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2278      	movs	r2, #120	@ 0x78
 80043ee:	2100      	movs	r1, #0
 80043f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e00f      	b.n	8004416 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	4013      	ands	r3, r2
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	425a      	negs	r2, r3
 8004406:	4153      	adcs	r3, r2
 8004408:	b2db      	uxtb	r3, r3
 800440a:	001a      	movs	r2, r3
 800440c:	1dfb      	adds	r3, r7, #7
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d0a4      	beq.n	800435e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	0018      	movs	r0, r3
 8004418:	46bd      	mov	sp, r7
 800441a:	b004      	add	sp, #16
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b090      	sub	sp, #64	@ 0x40
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	1dbb      	adds	r3, r7, #6
 800442c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	1dba      	adds	r2, r7, #6
 8004438:	2158      	movs	r1, #88	@ 0x58
 800443a:	8812      	ldrh	r2, [r2, #0]
 800443c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1dba      	adds	r2, r7, #6
 8004442:	215a      	movs	r1, #90	@ 0x5a
 8004444:	8812      	ldrh	r2, [r2, #0]
 8004446:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	2380      	movs	r3, #128	@ 0x80
 8004454:	015b      	lsls	r3, r3, #5
 8004456:	429a      	cmp	r2, r3
 8004458:	d10d      	bne.n	8004476 <UART_Start_Receive_IT+0x56>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d104      	bne.n	800446c <UART_Start_Receive_IT+0x4c>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	225c      	movs	r2, #92	@ 0x5c
 8004466:	4950      	ldr	r1, [pc, #320]	@ (80045a8 <UART_Start_Receive_IT+0x188>)
 8004468:	5299      	strh	r1, [r3, r2]
 800446a:	e02e      	b.n	80044ca <UART_Start_Receive_IT+0xaa>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	225c      	movs	r2, #92	@ 0x5c
 8004470:	21ff      	movs	r1, #255	@ 0xff
 8004472:	5299      	strh	r1, [r3, r2]
 8004474:	e029      	b.n	80044ca <UART_Start_Receive_IT+0xaa>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10d      	bne.n	800449a <UART_Start_Receive_IT+0x7a>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d104      	bne.n	8004490 <UART_Start_Receive_IT+0x70>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	225c      	movs	r2, #92	@ 0x5c
 800448a:	21ff      	movs	r1, #255	@ 0xff
 800448c:	5299      	strh	r1, [r3, r2]
 800448e:	e01c      	b.n	80044ca <UART_Start_Receive_IT+0xaa>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	225c      	movs	r2, #92	@ 0x5c
 8004494:	217f      	movs	r1, #127	@ 0x7f
 8004496:	5299      	strh	r1, [r3, r2]
 8004498:	e017      	b.n	80044ca <UART_Start_Receive_IT+0xaa>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	2380      	movs	r3, #128	@ 0x80
 80044a0:	055b      	lsls	r3, r3, #21
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d10d      	bne.n	80044c2 <UART_Start_Receive_IT+0xa2>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d104      	bne.n	80044b8 <UART_Start_Receive_IT+0x98>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	225c      	movs	r2, #92	@ 0x5c
 80044b2:	217f      	movs	r1, #127	@ 0x7f
 80044b4:	5299      	strh	r1, [r3, r2]
 80044b6:	e008      	b.n	80044ca <UART_Start_Receive_IT+0xaa>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	225c      	movs	r2, #92	@ 0x5c
 80044bc:	213f      	movs	r1, #63	@ 0x3f
 80044be:	5299      	strh	r1, [r3, r2]
 80044c0:	e003      	b.n	80044ca <UART_Start_Receive_IT+0xaa>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	225c      	movs	r2, #92	@ 0x5c
 80044c6:	2100      	movs	r1, #0
 80044c8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2284      	movs	r2, #132	@ 0x84
 80044ce:	2100      	movs	r1, #0
 80044d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2280      	movs	r2, #128	@ 0x80
 80044d6:	2122      	movs	r1, #34	@ 0x22
 80044d8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044da:	f3ef 8310 	mrs	r3, PRIMASK
 80044de:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80044e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044e4:	2301      	movs	r3, #1
 80044e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ea:	f383 8810 	msr	PRIMASK, r3
}
 80044ee:	46c0      	nop			@ (mov r8, r8)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2101      	movs	r1, #1
 80044fc:	430a      	orrs	r2, r1
 80044fe:	609a      	str	r2, [r3, #8]
 8004500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004502:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004506:	f383 8810 	msr	PRIMASK, r3
}
 800450a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	2380      	movs	r3, #128	@ 0x80
 8004512:	015b      	lsls	r3, r3, #5
 8004514:	429a      	cmp	r2, r3
 8004516:	d107      	bne.n	8004528 <UART_Start_Receive_IT+0x108>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d103      	bne.n	8004528 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4a22      	ldr	r2, [pc, #136]	@ (80045ac <UART_Start_Receive_IT+0x18c>)
 8004524:	669a      	str	r2, [r3, #104]	@ 0x68
 8004526:	e002      	b.n	800452e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4a21      	ldr	r2, [pc, #132]	@ (80045b0 <UART_Start_Receive_IT+0x190>)
 800452c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d019      	beq.n	800456a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004536:	f3ef 8310 	mrs	r3, PRIMASK
 800453a:	61fb      	str	r3, [r7, #28]
  return(result);
 800453c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800453e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004540:	2301      	movs	r3, #1
 8004542:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	f383 8810 	msr	PRIMASK, r3
}
 800454a:	46c0      	nop			@ (mov r8, r8)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2190      	movs	r1, #144	@ 0x90
 8004558:	0049      	lsls	r1, r1, #1
 800455a:	430a      	orrs	r2, r1
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004560:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	f383 8810 	msr	PRIMASK, r3
}
 8004568:	e018      	b.n	800459c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800456a:	f3ef 8310 	mrs	r3, PRIMASK
 800456e:	613b      	str	r3, [r7, #16]
  return(result);
 8004570:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004572:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004574:	2301      	movs	r3, #1
 8004576:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f383 8810 	msr	PRIMASK, r3
}
 800457e:	46c0      	nop			@ (mov r8, r8)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2120      	movs	r1, #32
 800458c:	430a      	orrs	r2, r1
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004592:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	f383 8810 	msr	PRIMASK, r3
}
 800459a:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	0018      	movs	r0, r3
 80045a0:	46bd      	mov	sp, r7
 80045a2:	b010      	add	sp, #64	@ 0x40
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	46c0      	nop			@ (mov r8, r8)
 80045a8:	000001ff 	.word	0x000001ff
 80045ac:	08004a35 	.word	0x08004a35
 80045b0:	08004871 	.word	0x08004871

080045b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08e      	sub	sp, #56	@ 0x38
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045bc:	f3ef 8310 	mrs	r3, PRIMASK
 80045c0:	617b      	str	r3, [r7, #20]
  return(result);
 80045c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80045c6:	2301      	movs	r3, #1
 80045c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	f383 8810 	msr	PRIMASK, r3
}
 80045d0:	46c0      	nop			@ (mov r8, r8)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4926      	ldr	r1, [pc, #152]	@ (8004678 <UART_EndRxTransfer+0xc4>)
 80045de:	400a      	ands	r2, r1
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	f383 8810 	msr	PRIMASK, r3
}
 80045ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ee:	f3ef 8310 	mrs	r3, PRIMASK
 80045f2:	623b      	str	r3, [r7, #32]
  return(result);
 80045f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80045f8:	2301      	movs	r3, #1
 80045fa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fe:	f383 8810 	msr	PRIMASK, r3
}
 8004602:	46c0      	nop			@ (mov r8, r8)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2101      	movs	r1, #1
 8004610:	438a      	bics	r2, r1
 8004612:	609a      	str	r2, [r3, #8]
 8004614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004616:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461a:	f383 8810 	msr	PRIMASK, r3
}
 800461e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004624:	2b01      	cmp	r3, #1
 8004626:	d118      	bne.n	800465a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004628:	f3ef 8310 	mrs	r3, PRIMASK
 800462c:	60bb      	str	r3, [r7, #8]
  return(result);
 800462e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004630:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004632:	2301      	movs	r3, #1
 8004634:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f383 8810 	msr	PRIMASK, r3
}
 800463c:	46c0      	nop			@ (mov r8, r8)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2110      	movs	r1, #16
 800464a:	438a      	bics	r2, r1
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004650:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f383 8810 	msr	PRIMASK, r3
}
 8004658:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2280      	movs	r2, #128	@ 0x80
 800465e:	2120      	movs	r1, #32
 8004660:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800466e:	46c0      	nop			@ (mov r8, r8)
 8004670:	46bd      	mov	sp, r7
 8004672:	b00e      	add	sp, #56	@ 0x38
 8004674:	bd80      	pop	{r7, pc}
 8004676:	46c0      	nop			@ (mov r8, r8)
 8004678:	fffffedf 	.word	0xfffffedf

0800467c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004688:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	225a      	movs	r2, #90	@ 0x5a
 800468e:	2100      	movs	r1, #0
 8004690:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2252      	movs	r2, #82	@ 0x52
 8004696:	2100      	movs	r1, #0
 8004698:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	0018      	movs	r0, r3
 800469e:	f7ff fa61 	bl	8003b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046a2:	46c0      	nop			@ (mov r8, r8)
 80046a4:	46bd      	mov	sp, r7
 80046a6:	b004      	add	sp, #16
 80046a8:	bd80      	pop	{r7, pc}

080046aa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b08a      	sub	sp, #40	@ 0x28
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046b6:	2b21      	cmp	r3, #33	@ 0x21
 80046b8:	d14c      	bne.n	8004754 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2252      	movs	r2, #82	@ 0x52
 80046be:	5a9b      	ldrh	r3, [r3, r2]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d132      	bne.n	800472c <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046c6:	f3ef 8310 	mrs	r3, PRIMASK
 80046ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80046cc:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80046ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80046d0:	2301      	movs	r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f383 8810 	msr	PRIMASK, r3
}
 80046da:	46c0      	nop			@ (mov r8, r8)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2180      	movs	r1, #128	@ 0x80
 80046e8:	438a      	bics	r2, r1
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f383 8810 	msr	PRIMASK, r3
}
 80046f6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f8:	f3ef 8310 	mrs	r3, PRIMASK
 80046fc:	617b      	str	r3, [r7, #20]
  return(result);
 80046fe:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004700:	623b      	str	r3, [r7, #32]
 8004702:	2301      	movs	r3, #1
 8004704:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	f383 8810 	msr	PRIMASK, r3
}
 800470c:	46c0      	nop			@ (mov r8, r8)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2140      	movs	r1, #64	@ 0x40
 800471a:	430a      	orrs	r2, r1
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	f383 8810 	msr	PRIMASK, r3
}
 8004728:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800472a:	e013      	b.n	8004754 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004730:	781a      	ldrb	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2252      	movs	r2, #82	@ 0x52
 8004746:	5a9b      	ldrh	r3, [r3, r2]
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	b299      	uxth	r1, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2252      	movs	r2, #82	@ 0x52
 8004752:	5299      	strh	r1, [r3, r2]
}
 8004754:	46c0      	nop			@ (mov r8, r8)
 8004756:	46bd      	mov	sp, r7
 8004758:	b00a      	add	sp, #40	@ 0x28
 800475a:	bd80      	pop	{r7, pc}

0800475c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08c      	sub	sp, #48	@ 0x30
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004768:	2b21      	cmp	r3, #33	@ 0x21
 800476a:	d151      	bne.n	8004810 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2252      	movs	r2, #82	@ 0x52
 8004770:	5a9b      	ldrh	r3, [r3, r2]
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d132      	bne.n	80047de <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004778:	f3ef 8310 	mrs	r3, PRIMASK
 800477c:	60fb      	str	r3, [r7, #12]
  return(result);
 800477e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004780:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004782:	2301      	movs	r3, #1
 8004784:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f383 8810 	msr	PRIMASK, r3
}
 800478c:	46c0      	nop			@ (mov r8, r8)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2180      	movs	r1, #128	@ 0x80
 800479a:	438a      	bics	r2, r1
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f383 8810 	msr	PRIMASK, r3
}
 80047a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047aa:	f3ef 8310 	mrs	r3, PRIMASK
 80047ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80047b0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80047b4:	2301      	movs	r3, #1
 80047b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f383 8810 	msr	PRIMASK, r3
}
 80047be:	46c0      	nop			@ (mov r8, r8)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2140      	movs	r1, #64	@ 0x40
 80047cc:	430a      	orrs	r2, r1
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	f383 8810 	msr	PRIMASK, r3
}
 80047da:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80047dc:	e018      	b.n	8004810 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80047e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	001a      	movs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	05d2      	lsls	r2, r2, #23
 80047f0:	0dd2      	lsrs	r2, r2, #23
 80047f2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047f8:	1c9a      	adds	r2, r3, #2
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2252      	movs	r2, #82	@ 0x52
 8004802:	5a9b      	ldrh	r3, [r3, r2]
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b299      	uxth	r1, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2252      	movs	r2, #82	@ 0x52
 800480e:	5299      	strh	r1, [r3, r2]
}
 8004810:	46c0      	nop			@ (mov r8, r8)
 8004812:	46bd      	mov	sp, r7
 8004814:	b00c      	add	sp, #48	@ 0x30
 8004816:	bd80      	pop	{r7, pc}

08004818 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004820:	f3ef 8310 	mrs	r3, PRIMASK
 8004824:	60bb      	str	r3, [r7, #8]
  return(result);
 8004826:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	2301      	movs	r3, #1
 800482c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f383 8810 	msr	PRIMASK, r3
}
 8004834:	46c0      	nop			@ (mov r8, r8)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2140      	movs	r1, #64	@ 0x40
 8004842:	438a      	bics	r2, r1
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f383 8810 	msr	PRIMASK, r3
}
 8004850:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2220      	movs	r2, #32
 8004856:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	0018      	movs	r0, r3
 8004862:	f7ff f977 	bl	8003b54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004866:	46c0      	nop			@ (mov r8, r8)
 8004868:	46bd      	mov	sp, r7
 800486a:	b006      	add	sp, #24
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b094      	sub	sp, #80	@ 0x50
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004878:	204e      	movs	r0, #78	@ 0x4e
 800487a:	183b      	adds	r3, r7, r0
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	215c      	movs	r1, #92	@ 0x5c
 8004880:	5a52      	ldrh	r2, [r2, r1]
 8004882:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2280      	movs	r2, #128	@ 0x80
 8004888:	589b      	ldr	r3, [r3, r2]
 800488a:	2b22      	cmp	r3, #34	@ 0x22
 800488c:	d000      	beq.n	8004890 <UART_RxISR_8BIT+0x20>
 800488e:	e0bf      	b.n	8004a10 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004896:	214c      	movs	r1, #76	@ 0x4c
 8004898:	187b      	adds	r3, r7, r1
 800489a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800489c:	187b      	adds	r3, r7, r1
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	183b      	adds	r3, r7, r0
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	b2d9      	uxtb	r1, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ac:	400a      	ands	r2, r1
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	225a      	movs	r2, #90	@ 0x5a
 80048c0:	5a9b      	ldrh	r3, [r3, r2]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	3b01      	subs	r3, #1
 80048c6:	b299      	uxth	r1, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	225a      	movs	r2, #90	@ 0x5a
 80048cc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	225a      	movs	r2, #90	@ 0x5a
 80048d2:	5a9b      	ldrh	r3, [r3, r2]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d000      	beq.n	80048dc <UART_RxISR_8BIT+0x6c>
 80048da:	e0a1      	b.n	8004a20 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048dc:	f3ef 8310 	mrs	r3, PRIMASK
 80048e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80048e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048e6:	2301      	movs	r3, #1
 80048e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ec:	f383 8810 	msr	PRIMASK, r3
}
 80048f0:	46c0      	nop			@ (mov r8, r8)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	494a      	ldr	r1, [pc, #296]	@ (8004a28 <UART_RxISR_8BIT+0x1b8>)
 80048fe:	400a      	ands	r2, r1
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004908:	f383 8810 	msr	PRIMASK, r3
}
 800490c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800490e:	f3ef 8310 	mrs	r3, PRIMASK
 8004912:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004916:	647b      	str	r3, [r7, #68]	@ 0x44
 8004918:	2301      	movs	r3, #1
 800491a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800491e:	f383 8810 	msr	PRIMASK, r3
}
 8004922:	46c0      	nop			@ (mov r8, r8)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2101      	movs	r1, #1
 8004930:	438a      	bics	r2, r1
 8004932:	609a      	str	r2, [r3, #8]
 8004934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004936:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493a:	f383 8810 	msr	PRIMASK, r3
}
 800493e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2280      	movs	r2, #128	@ 0x80
 8004944:	2120      	movs	r1, #32
 8004946:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a34      	ldr	r2, [pc, #208]	@ (8004a2c <UART_RxISR_8BIT+0x1bc>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d01f      	beq.n	800499e <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	2380      	movs	r3, #128	@ 0x80
 8004966:	041b      	lsls	r3, r3, #16
 8004968:	4013      	ands	r3, r2
 800496a:	d018      	beq.n	800499e <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800496c:	f3ef 8310 	mrs	r3, PRIMASK
 8004970:	61bb      	str	r3, [r7, #24]
  return(result);
 8004972:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004974:	643b      	str	r3, [r7, #64]	@ 0x40
 8004976:	2301      	movs	r3, #1
 8004978:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	f383 8810 	msr	PRIMASK, r3
}
 8004980:	46c0      	nop			@ (mov r8, r8)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4928      	ldr	r1, [pc, #160]	@ (8004a30 <UART_RxISR_8BIT+0x1c0>)
 800498e:	400a      	ands	r2, r1
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004994:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	f383 8810 	msr	PRIMASK, r3
}
 800499c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d12f      	bne.n	8004a06 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ac:	f3ef 8310 	mrs	r3, PRIMASK
 80049b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80049b2:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049b6:	2301      	movs	r3, #1
 80049b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f383 8810 	msr	PRIMASK, r3
}
 80049c0:	46c0      	nop			@ (mov r8, r8)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2110      	movs	r1, #16
 80049ce:	438a      	bics	r2, r1
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f383 8810 	msr	PRIMASK, r3
}
 80049dc:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	2210      	movs	r2, #16
 80049e6:	4013      	ands	r3, r2
 80049e8:	2b10      	cmp	r3, #16
 80049ea:	d103      	bne.n	80049f4 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2210      	movs	r2, #16
 80049f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2258      	movs	r2, #88	@ 0x58
 80049f8:	5a9a      	ldrh	r2, [r3, r2]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	0011      	movs	r1, r2
 80049fe:	0018      	movs	r0, r3
 8004a00:	f7ff f8b8 	bl	8003b74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a04:	e00c      	b.n	8004a20 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f7fb fe47 	bl	800069c <HAL_UART_RxCpltCallback>
}
 8004a0e:	e007      	b.n	8004a20 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2108      	movs	r1, #8
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	619a      	str	r2, [r3, #24]
}
 8004a20:	46c0      	nop			@ (mov r8, r8)
 8004a22:	46bd      	mov	sp, r7
 8004a24:	b014      	add	sp, #80	@ 0x50
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	fffffedf 	.word	0xfffffedf
 8004a2c:	40004800 	.word	0x40004800
 8004a30:	fbffffff 	.word	0xfbffffff

08004a34 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b094      	sub	sp, #80	@ 0x50
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004a3c:	204e      	movs	r0, #78	@ 0x4e
 8004a3e:	183b      	adds	r3, r7, r0
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	215c      	movs	r1, #92	@ 0x5c
 8004a44:	5a52      	ldrh	r2, [r2, r1]
 8004a46:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2280      	movs	r2, #128	@ 0x80
 8004a4c:	589b      	ldr	r3, [r3, r2]
 8004a4e:	2b22      	cmp	r3, #34	@ 0x22
 8004a50:	d000      	beq.n	8004a54 <UART_RxISR_16BIT+0x20>
 8004a52:	e0bf      	b.n	8004bd4 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a5a:	214c      	movs	r1, #76	@ 0x4c
 8004a5c:	187b      	adds	r3, r7, r1
 8004a5e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a64:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004a66:	187b      	adds	r3, r7, r1
 8004a68:	183a      	adds	r2, r7, r0
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	8812      	ldrh	r2, [r2, #0]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a74:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7a:	1c9a      	adds	r2, r3, #2
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	225a      	movs	r2, #90	@ 0x5a
 8004a84:	5a9b      	ldrh	r3, [r3, r2]
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b299      	uxth	r1, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	225a      	movs	r2, #90	@ 0x5a
 8004a90:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	225a      	movs	r2, #90	@ 0x5a
 8004a96:	5a9b      	ldrh	r3, [r3, r2]
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d000      	beq.n	8004aa0 <UART_RxISR_16BIT+0x6c>
 8004a9e:	e0a1      	b.n	8004be4 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8004aa4:	623b      	str	r3, [r7, #32]
  return(result);
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aaa:	2301      	movs	r3, #1
 8004aac:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	f383 8810 	msr	PRIMASK, r3
}
 8004ab4:	46c0      	nop			@ (mov r8, r8)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	494a      	ldr	r1, [pc, #296]	@ (8004bec <UART_RxISR_16BIT+0x1b8>)
 8004ac2:	400a      	ands	r2, r1
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004acc:	f383 8810 	msr	PRIMASK, r3
}
 8004ad0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ada:	643b      	str	r3, [r7, #64]	@ 0x40
 8004adc:	2301      	movs	r3, #1
 8004ade:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae2:	f383 8810 	msr	PRIMASK, r3
}
 8004ae6:	46c0      	nop			@ (mov r8, r8)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2101      	movs	r1, #1
 8004af4:	438a      	bics	r2, r1
 8004af6:	609a      	str	r2, [r3, #8]
 8004af8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004afa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004afe:	f383 8810 	msr	PRIMASK, r3
}
 8004b02:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2280      	movs	r2, #128	@ 0x80
 8004b08:	2120      	movs	r1, #32
 8004b0a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a34      	ldr	r2, [pc, #208]	@ (8004bf0 <UART_RxISR_16BIT+0x1bc>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d01f      	beq.n	8004b62 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	2380      	movs	r3, #128	@ 0x80
 8004b2a:	041b      	lsls	r3, r3, #16
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d018      	beq.n	8004b62 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b30:	f3ef 8310 	mrs	r3, PRIMASK
 8004b34:	617b      	str	r3, [r7, #20]
  return(result);
 8004b36:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	f383 8810 	msr	PRIMASK, r3
}
 8004b44:	46c0      	nop			@ (mov r8, r8)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4928      	ldr	r1, [pc, #160]	@ (8004bf4 <UART_RxISR_16BIT+0x1c0>)
 8004b52:	400a      	ands	r2, r1
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	f383 8810 	msr	PRIMASK, r3
}
 8004b60:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d12f      	bne.n	8004bca <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b70:	f3ef 8310 	mrs	r3, PRIMASK
 8004b74:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b76:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f383 8810 	msr	PRIMASK, r3
}
 8004b84:	46c0      	nop			@ (mov r8, r8)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2110      	movs	r1, #16
 8004b92:	438a      	bics	r2, r1
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f383 8810 	msr	PRIMASK, r3
}
 8004ba0:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	2210      	movs	r2, #16
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d103      	bne.n	8004bb8 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2210      	movs	r2, #16
 8004bb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2258      	movs	r2, #88	@ 0x58
 8004bbc:	5a9a      	ldrh	r2, [r3, r2]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	0011      	movs	r1, r2
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	f7fe ffd6 	bl	8003b74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bc8:	e00c      	b.n	8004be4 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f7fb fd65 	bl	800069c <HAL_UART_RxCpltCallback>
}
 8004bd2:	e007      	b.n	8004be4 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699a      	ldr	r2, [r3, #24]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2108      	movs	r1, #8
 8004be0:	430a      	orrs	r2, r1
 8004be2:	619a      	str	r2, [r3, #24]
}
 8004be4:	46c0      	nop			@ (mov r8, r8)
 8004be6:	46bd      	mov	sp, r7
 8004be8:	b014      	add	sp, #80	@ 0x50
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	fffffedf 	.word	0xfffffedf
 8004bf0:	40004800 	.word	0x40004800
 8004bf4:	fbffffff 	.word	0xfbffffff

08004bf8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c00:	46c0      	nop			@ (mov r8, r8)
 8004c02:	46bd      	mov	sp, r7
 8004c04:	b002      	add	sp, #8
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <siprintf>:
 8004c08:	b40e      	push	{r1, r2, r3}
 8004c0a:	b500      	push	{lr}
 8004c0c:	490b      	ldr	r1, [pc, #44]	@ (8004c3c <siprintf+0x34>)
 8004c0e:	b09c      	sub	sp, #112	@ 0x70
 8004c10:	ab1d      	add	r3, sp, #116	@ 0x74
 8004c12:	9002      	str	r0, [sp, #8]
 8004c14:	9006      	str	r0, [sp, #24]
 8004c16:	9107      	str	r1, [sp, #28]
 8004c18:	9104      	str	r1, [sp, #16]
 8004c1a:	4809      	ldr	r0, [pc, #36]	@ (8004c40 <siprintf+0x38>)
 8004c1c:	4909      	ldr	r1, [pc, #36]	@ (8004c44 <siprintf+0x3c>)
 8004c1e:	cb04      	ldmia	r3!, {r2}
 8004c20:	9105      	str	r1, [sp, #20]
 8004c22:	6800      	ldr	r0, [r0, #0]
 8004c24:	a902      	add	r1, sp, #8
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	f000 f9a8 	bl	8004f7c <_svfiprintf_r>
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	9b02      	ldr	r3, [sp, #8]
 8004c30:	701a      	strb	r2, [r3, #0]
 8004c32:	b01c      	add	sp, #112	@ 0x70
 8004c34:	bc08      	pop	{r3}
 8004c36:	b003      	add	sp, #12
 8004c38:	4718      	bx	r3
 8004c3a:	46c0      	nop			@ (mov r8, r8)
 8004c3c:	7fffffff 	.word	0x7fffffff
 8004c40:	2000000c 	.word	0x2000000c
 8004c44:	ffff0208 	.word	0xffff0208

08004c48 <memset>:
 8004c48:	0003      	movs	r3, r0
 8004c4a:	1882      	adds	r2, r0, r2
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d100      	bne.n	8004c52 <memset+0xa>
 8004c50:	4770      	bx	lr
 8004c52:	7019      	strb	r1, [r3, #0]
 8004c54:	3301      	adds	r3, #1
 8004c56:	e7f9      	b.n	8004c4c <memset+0x4>

08004c58 <__errno>:
 8004c58:	4b01      	ldr	r3, [pc, #4]	@ (8004c60 <__errno+0x8>)
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	4770      	bx	lr
 8004c5e:	46c0      	nop			@ (mov r8, r8)
 8004c60:	2000000c 	.word	0x2000000c

08004c64 <__libc_init_array>:
 8004c64:	b570      	push	{r4, r5, r6, lr}
 8004c66:	2600      	movs	r6, #0
 8004c68:	4c0c      	ldr	r4, [pc, #48]	@ (8004c9c <__libc_init_array+0x38>)
 8004c6a:	4d0d      	ldr	r5, [pc, #52]	@ (8004ca0 <__libc_init_array+0x3c>)
 8004c6c:	1b64      	subs	r4, r4, r5
 8004c6e:	10a4      	asrs	r4, r4, #2
 8004c70:	42a6      	cmp	r6, r4
 8004c72:	d109      	bne.n	8004c88 <__libc_init_array+0x24>
 8004c74:	2600      	movs	r6, #0
 8004c76:	f000 fc65 	bl	8005544 <_init>
 8004c7a:	4c0a      	ldr	r4, [pc, #40]	@ (8004ca4 <__libc_init_array+0x40>)
 8004c7c:	4d0a      	ldr	r5, [pc, #40]	@ (8004ca8 <__libc_init_array+0x44>)
 8004c7e:	1b64      	subs	r4, r4, r5
 8004c80:	10a4      	asrs	r4, r4, #2
 8004c82:	42a6      	cmp	r6, r4
 8004c84:	d105      	bne.n	8004c92 <__libc_init_array+0x2e>
 8004c86:	bd70      	pop	{r4, r5, r6, pc}
 8004c88:	00b3      	lsls	r3, r6, #2
 8004c8a:	58eb      	ldr	r3, [r5, r3]
 8004c8c:	4798      	blx	r3
 8004c8e:	3601      	adds	r6, #1
 8004c90:	e7ee      	b.n	8004c70 <__libc_init_array+0xc>
 8004c92:	00b3      	lsls	r3, r6, #2
 8004c94:	58eb      	ldr	r3, [r5, r3]
 8004c96:	4798      	blx	r3
 8004c98:	3601      	adds	r6, #1
 8004c9a:	e7f2      	b.n	8004c82 <__libc_init_array+0x1e>
 8004c9c:	0800579c 	.word	0x0800579c
 8004ca0:	0800579c 	.word	0x0800579c
 8004ca4:	080057a0 	.word	0x080057a0
 8004ca8:	0800579c 	.word	0x0800579c

08004cac <__retarget_lock_acquire_recursive>:
 8004cac:	4770      	bx	lr

08004cae <__retarget_lock_release_recursive>:
 8004cae:	4770      	bx	lr

08004cb0 <memcpy>:
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	b510      	push	{r4, lr}
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d100      	bne.n	8004cba <memcpy+0xa>
 8004cb8:	bd10      	pop	{r4, pc}
 8004cba:	5ccc      	ldrb	r4, [r1, r3]
 8004cbc:	54c4      	strb	r4, [r0, r3]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	e7f8      	b.n	8004cb4 <memcpy+0x4>
	...

08004cc4 <_free_r>:
 8004cc4:	b570      	push	{r4, r5, r6, lr}
 8004cc6:	0005      	movs	r5, r0
 8004cc8:	1e0c      	subs	r4, r1, #0
 8004cca:	d010      	beq.n	8004cee <_free_r+0x2a>
 8004ccc:	3c04      	subs	r4, #4
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	da00      	bge.n	8004cd6 <_free_r+0x12>
 8004cd4:	18e4      	adds	r4, r4, r3
 8004cd6:	0028      	movs	r0, r5
 8004cd8:	f000 f8e0 	bl	8004e9c <__malloc_lock>
 8004cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8004d54 <_free_r+0x90>)
 8004cde:	6813      	ldr	r3, [r2, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d105      	bne.n	8004cf0 <_free_r+0x2c>
 8004ce4:	6063      	str	r3, [r4, #4]
 8004ce6:	6014      	str	r4, [r2, #0]
 8004ce8:	0028      	movs	r0, r5
 8004cea:	f000 f8df 	bl	8004eac <__malloc_unlock>
 8004cee:	bd70      	pop	{r4, r5, r6, pc}
 8004cf0:	42a3      	cmp	r3, r4
 8004cf2:	d908      	bls.n	8004d06 <_free_r+0x42>
 8004cf4:	6820      	ldr	r0, [r4, #0]
 8004cf6:	1821      	adds	r1, r4, r0
 8004cf8:	428b      	cmp	r3, r1
 8004cfa:	d1f3      	bne.n	8004ce4 <_free_r+0x20>
 8004cfc:	6819      	ldr	r1, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	1809      	adds	r1, r1, r0
 8004d02:	6021      	str	r1, [r4, #0]
 8004d04:	e7ee      	b.n	8004ce4 <_free_r+0x20>
 8004d06:	001a      	movs	r2, r3
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <_free_r+0x4e>
 8004d0e:	42a3      	cmp	r3, r4
 8004d10:	d9f9      	bls.n	8004d06 <_free_r+0x42>
 8004d12:	6811      	ldr	r1, [r2, #0]
 8004d14:	1850      	adds	r0, r2, r1
 8004d16:	42a0      	cmp	r0, r4
 8004d18:	d10b      	bne.n	8004d32 <_free_r+0x6e>
 8004d1a:	6820      	ldr	r0, [r4, #0]
 8004d1c:	1809      	adds	r1, r1, r0
 8004d1e:	1850      	adds	r0, r2, r1
 8004d20:	6011      	str	r1, [r2, #0]
 8004d22:	4283      	cmp	r3, r0
 8004d24:	d1e0      	bne.n	8004ce8 <_free_r+0x24>
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	1841      	adds	r1, r0, r1
 8004d2c:	6011      	str	r1, [r2, #0]
 8004d2e:	6053      	str	r3, [r2, #4]
 8004d30:	e7da      	b.n	8004ce8 <_free_r+0x24>
 8004d32:	42a0      	cmp	r0, r4
 8004d34:	d902      	bls.n	8004d3c <_free_r+0x78>
 8004d36:	230c      	movs	r3, #12
 8004d38:	602b      	str	r3, [r5, #0]
 8004d3a:	e7d5      	b.n	8004ce8 <_free_r+0x24>
 8004d3c:	6820      	ldr	r0, [r4, #0]
 8004d3e:	1821      	adds	r1, r4, r0
 8004d40:	428b      	cmp	r3, r1
 8004d42:	d103      	bne.n	8004d4c <_free_r+0x88>
 8004d44:	6819      	ldr	r1, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	1809      	adds	r1, r1, r0
 8004d4a:	6021      	str	r1, [r4, #0]
 8004d4c:	6063      	str	r3, [r4, #4]
 8004d4e:	6054      	str	r4, [r2, #4]
 8004d50:	e7ca      	b.n	8004ce8 <_free_r+0x24>
 8004d52:	46c0      	nop			@ (mov r8, r8)
 8004d54:	200007d0 	.word	0x200007d0

08004d58 <sbrk_aligned>:
 8004d58:	b570      	push	{r4, r5, r6, lr}
 8004d5a:	4e0f      	ldr	r6, [pc, #60]	@ (8004d98 <sbrk_aligned+0x40>)
 8004d5c:	000d      	movs	r5, r1
 8004d5e:	6831      	ldr	r1, [r6, #0]
 8004d60:	0004      	movs	r4, r0
 8004d62:	2900      	cmp	r1, #0
 8004d64:	d102      	bne.n	8004d6c <sbrk_aligned+0x14>
 8004d66:	f000 fb99 	bl	800549c <_sbrk_r>
 8004d6a:	6030      	str	r0, [r6, #0]
 8004d6c:	0029      	movs	r1, r5
 8004d6e:	0020      	movs	r0, r4
 8004d70:	f000 fb94 	bl	800549c <_sbrk_r>
 8004d74:	1c43      	adds	r3, r0, #1
 8004d76:	d103      	bne.n	8004d80 <sbrk_aligned+0x28>
 8004d78:	2501      	movs	r5, #1
 8004d7a:	426d      	negs	r5, r5
 8004d7c:	0028      	movs	r0, r5
 8004d7e:	bd70      	pop	{r4, r5, r6, pc}
 8004d80:	2303      	movs	r3, #3
 8004d82:	1cc5      	adds	r5, r0, #3
 8004d84:	439d      	bics	r5, r3
 8004d86:	42a8      	cmp	r0, r5
 8004d88:	d0f8      	beq.n	8004d7c <sbrk_aligned+0x24>
 8004d8a:	1a29      	subs	r1, r5, r0
 8004d8c:	0020      	movs	r0, r4
 8004d8e:	f000 fb85 	bl	800549c <_sbrk_r>
 8004d92:	3001      	adds	r0, #1
 8004d94:	d1f2      	bne.n	8004d7c <sbrk_aligned+0x24>
 8004d96:	e7ef      	b.n	8004d78 <sbrk_aligned+0x20>
 8004d98:	200007cc 	.word	0x200007cc

08004d9c <_malloc_r>:
 8004d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d9e:	2203      	movs	r2, #3
 8004da0:	1ccb      	adds	r3, r1, #3
 8004da2:	4393      	bics	r3, r2
 8004da4:	3308      	adds	r3, #8
 8004da6:	0005      	movs	r5, r0
 8004da8:	001f      	movs	r7, r3
 8004daa:	2b0c      	cmp	r3, #12
 8004dac:	d234      	bcs.n	8004e18 <_malloc_r+0x7c>
 8004dae:	270c      	movs	r7, #12
 8004db0:	42b9      	cmp	r1, r7
 8004db2:	d833      	bhi.n	8004e1c <_malloc_r+0x80>
 8004db4:	0028      	movs	r0, r5
 8004db6:	f000 f871 	bl	8004e9c <__malloc_lock>
 8004dba:	4e37      	ldr	r6, [pc, #220]	@ (8004e98 <_malloc_r+0xfc>)
 8004dbc:	6833      	ldr	r3, [r6, #0]
 8004dbe:	001c      	movs	r4, r3
 8004dc0:	2c00      	cmp	r4, #0
 8004dc2:	d12f      	bne.n	8004e24 <_malloc_r+0x88>
 8004dc4:	0039      	movs	r1, r7
 8004dc6:	0028      	movs	r0, r5
 8004dc8:	f7ff ffc6 	bl	8004d58 <sbrk_aligned>
 8004dcc:	0004      	movs	r4, r0
 8004dce:	1c43      	adds	r3, r0, #1
 8004dd0:	d15f      	bne.n	8004e92 <_malloc_r+0xf6>
 8004dd2:	6834      	ldr	r4, [r6, #0]
 8004dd4:	9400      	str	r4, [sp, #0]
 8004dd6:	9b00      	ldr	r3, [sp, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d14a      	bne.n	8004e72 <_malloc_r+0xd6>
 8004ddc:	2c00      	cmp	r4, #0
 8004dde:	d052      	beq.n	8004e86 <_malloc_r+0xea>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	0028      	movs	r0, r5
 8004de4:	18e3      	adds	r3, r4, r3
 8004de6:	9900      	ldr	r1, [sp, #0]
 8004de8:	9301      	str	r3, [sp, #4]
 8004dea:	f000 fb57 	bl	800549c <_sbrk_r>
 8004dee:	9b01      	ldr	r3, [sp, #4]
 8004df0:	4283      	cmp	r3, r0
 8004df2:	d148      	bne.n	8004e86 <_malloc_r+0xea>
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	0028      	movs	r0, r5
 8004df8:	1aff      	subs	r7, r7, r3
 8004dfa:	0039      	movs	r1, r7
 8004dfc:	f7ff ffac 	bl	8004d58 <sbrk_aligned>
 8004e00:	3001      	adds	r0, #1
 8004e02:	d040      	beq.n	8004e86 <_malloc_r+0xea>
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	19db      	adds	r3, r3, r7
 8004e08:	6023      	str	r3, [r4, #0]
 8004e0a:	6833      	ldr	r3, [r6, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	2a00      	cmp	r2, #0
 8004e10:	d133      	bne.n	8004e7a <_malloc_r+0xde>
 8004e12:	9b00      	ldr	r3, [sp, #0]
 8004e14:	6033      	str	r3, [r6, #0]
 8004e16:	e019      	b.n	8004e4c <_malloc_r+0xb0>
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	dac9      	bge.n	8004db0 <_malloc_r+0x14>
 8004e1c:	230c      	movs	r3, #12
 8004e1e:	602b      	str	r3, [r5, #0]
 8004e20:	2000      	movs	r0, #0
 8004e22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e24:	6821      	ldr	r1, [r4, #0]
 8004e26:	1bc9      	subs	r1, r1, r7
 8004e28:	d420      	bmi.n	8004e6c <_malloc_r+0xd0>
 8004e2a:	290b      	cmp	r1, #11
 8004e2c:	d90a      	bls.n	8004e44 <_malloc_r+0xa8>
 8004e2e:	19e2      	adds	r2, r4, r7
 8004e30:	6027      	str	r7, [r4, #0]
 8004e32:	42a3      	cmp	r3, r4
 8004e34:	d104      	bne.n	8004e40 <_malloc_r+0xa4>
 8004e36:	6032      	str	r2, [r6, #0]
 8004e38:	6863      	ldr	r3, [r4, #4]
 8004e3a:	6011      	str	r1, [r2, #0]
 8004e3c:	6053      	str	r3, [r2, #4]
 8004e3e:	e005      	b.n	8004e4c <_malloc_r+0xb0>
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	e7f9      	b.n	8004e38 <_malloc_r+0x9c>
 8004e44:	6862      	ldr	r2, [r4, #4]
 8004e46:	42a3      	cmp	r3, r4
 8004e48:	d10e      	bne.n	8004e68 <_malloc_r+0xcc>
 8004e4a:	6032      	str	r2, [r6, #0]
 8004e4c:	0028      	movs	r0, r5
 8004e4e:	f000 f82d 	bl	8004eac <__malloc_unlock>
 8004e52:	0020      	movs	r0, r4
 8004e54:	2207      	movs	r2, #7
 8004e56:	300b      	adds	r0, #11
 8004e58:	1d23      	adds	r3, r4, #4
 8004e5a:	4390      	bics	r0, r2
 8004e5c:	1ac2      	subs	r2, r0, r3
 8004e5e:	4298      	cmp	r0, r3
 8004e60:	d0df      	beq.n	8004e22 <_malloc_r+0x86>
 8004e62:	1a1b      	subs	r3, r3, r0
 8004e64:	50a3      	str	r3, [r4, r2]
 8004e66:	e7dc      	b.n	8004e22 <_malloc_r+0x86>
 8004e68:	605a      	str	r2, [r3, #4]
 8004e6a:	e7ef      	b.n	8004e4c <_malloc_r+0xb0>
 8004e6c:	0023      	movs	r3, r4
 8004e6e:	6864      	ldr	r4, [r4, #4]
 8004e70:	e7a6      	b.n	8004dc0 <_malloc_r+0x24>
 8004e72:	9c00      	ldr	r4, [sp, #0]
 8004e74:	6863      	ldr	r3, [r4, #4]
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	e7ad      	b.n	8004dd6 <_malloc_r+0x3a>
 8004e7a:	001a      	movs	r2, r3
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	42a3      	cmp	r3, r4
 8004e80:	d1fb      	bne.n	8004e7a <_malloc_r+0xde>
 8004e82:	2300      	movs	r3, #0
 8004e84:	e7da      	b.n	8004e3c <_malloc_r+0xa0>
 8004e86:	230c      	movs	r3, #12
 8004e88:	0028      	movs	r0, r5
 8004e8a:	602b      	str	r3, [r5, #0]
 8004e8c:	f000 f80e 	bl	8004eac <__malloc_unlock>
 8004e90:	e7c6      	b.n	8004e20 <_malloc_r+0x84>
 8004e92:	6007      	str	r7, [r0, #0]
 8004e94:	e7da      	b.n	8004e4c <_malloc_r+0xb0>
 8004e96:	46c0      	nop			@ (mov r8, r8)
 8004e98:	200007d0 	.word	0x200007d0

08004e9c <__malloc_lock>:
 8004e9c:	b510      	push	{r4, lr}
 8004e9e:	4802      	ldr	r0, [pc, #8]	@ (8004ea8 <__malloc_lock+0xc>)
 8004ea0:	f7ff ff04 	bl	8004cac <__retarget_lock_acquire_recursive>
 8004ea4:	bd10      	pop	{r4, pc}
 8004ea6:	46c0      	nop			@ (mov r8, r8)
 8004ea8:	200007c8 	.word	0x200007c8

08004eac <__malloc_unlock>:
 8004eac:	b510      	push	{r4, lr}
 8004eae:	4802      	ldr	r0, [pc, #8]	@ (8004eb8 <__malloc_unlock+0xc>)
 8004eb0:	f7ff fefd 	bl	8004cae <__retarget_lock_release_recursive>
 8004eb4:	bd10      	pop	{r4, pc}
 8004eb6:	46c0      	nop			@ (mov r8, r8)
 8004eb8:	200007c8 	.word	0x200007c8

08004ebc <__ssputs_r>:
 8004ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ebe:	688e      	ldr	r6, [r1, #8]
 8004ec0:	b085      	sub	sp, #20
 8004ec2:	001f      	movs	r7, r3
 8004ec4:	000c      	movs	r4, r1
 8004ec6:	680b      	ldr	r3, [r1, #0]
 8004ec8:	9002      	str	r0, [sp, #8]
 8004eca:	9203      	str	r2, [sp, #12]
 8004ecc:	42be      	cmp	r6, r7
 8004ece:	d830      	bhi.n	8004f32 <__ssputs_r+0x76>
 8004ed0:	210c      	movs	r1, #12
 8004ed2:	5e62      	ldrsh	r2, [r4, r1]
 8004ed4:	2190      	movs	r1, #144	@ 0x90
 8004ed6:	00c9      	lsls	r1, r1, #3
 8004ed8:	420a      	tst	r2, r1
 8004eda:	d028      	beq.n	8004f2e <__ssputs_r+0x72>
 8004edc:	2003      	movs	r0, #3
 8004ede:	6921      	ldr	r1, [r4, #16]
 8004ee0:	1a5b      	subs	r3, r3, r1
 8004ee2:	9301      	str	r3, [sp, #4]
 8004ee4:	6963      	ldr	r3, [r4, #20]
 8004ee6:	4343      	muls	r3, r0
 8004ee8:	9801      	ldr	r0, [sp, #4]
 8004eea:	0fdd      	lsrs	r5, r3, #31
 8004eec:	18ed      	adds	r5, r5, r3
 8004eee:	1c7b      	adds	r3, r7, #1
 8004ef0:	181b      	adds	r3, r3, r0
 8004ef2:	106d      	asrs	r5, r5, #1
 8004ef4:	42ab      	cmp	r3, r5
 8004ef6:	d900      	bls.n	8004efa <__ssputs_r+0x3e>
 8004ef8:	001d      	movs	r5, r3
 8004efa:	0552      	lsls	r2, r2, #21
 8004efc:	d528      	bpl.n	8004f50 <__ssputs_r+0x94>
 8004efe:	0029      	movs	r1, r5
 8004f00:	9802      	ldr	r0, [sp, #8]
 8004f02:	f7ff ff4b 	bl	8004d9c <_malloc_r>
 8004f06:	1e06      	subs	r6, r0, #0
 8004f08:	d02c      	beq.n	8004f64 <__ssputs_r+0xa8>
 8004f0a:	9a01      	ldr	r2, [sp, #4]
 8004f0c:	6921      	ldr	r1, [r4, #16]
 8004f0e:	f7ff fecf 	bl	8004cb0 <memcpy>
 8004f12:	89a2      	ldrh	r2, [r4, #12]
 8004f14:	4b18      	ldr	r3, [pc, #96]	@ (8004f78 <__ssputs_r+0xbc>)
 8004f16:	401a      	ands	r2, r3
 8004f18:	2380      	movs	r3, #128	@ 0x80
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	81a3      	strh	r3, [r4, #12]
 8004f1e:	9b01      	ldr	r3, [sp, #4]
 8004f20:	6126      	str	r6, [r4, #16]
 8004f22:	18f6      	adds	r6, r6, r3
 8004f24:	6026      	str	r6, [r4, #0]
 8004f26:	003e      	movs	r6, r7
 8004f28:	6165      	str	r5, [r4, #20]
 8004f2a:	1aed      	subs	r5, r5, r3
 8004f2c:	60a5      	str	r5, [r4, #8]
 8004f2e:	42be      	cmp	r6, r7
 8004f30:	d900      	bls.n	8004f34 <__ssputs_r+0x78>
 8004f32:	003e      	movs	r6, r7
 8004f34:	0032      	movs	r2, r6
 8004f36:	9903      	ldr	r1, [sp, #12]
 8004f38:	6820      	ldr	r0, [r4, #0]
 8004f3a:	f000 fa9b 	bl	8005474 <memmove>
 8004f3e:	2000      	movs	r0, #0
 8004f40:	68a3      	ldr	r3, [r4, #8]
 8004f42:	1b9b      	subs	r3, r3, r6
 8004f44:	60a3      	str	r3, [r4, #8]
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	199b      	adds	r3, r3, r6
 8004f4a:	6023      	str	r3, [r4, #0]
 8004f4c:	b005      	add	sp, #20
 8004f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f50:	002a      	movs	r2, r5
 8004f52:	9802      	ldr	r0, [sp, #8]
 8004f54:	f000 fabf 	bl	80054d6 <_realloc_r>
 8004f58:	1e06      	subs	r6, r0, #0
 8004f5a:	d1e0      	bne.n	8004f1e <__ssputs_r+0x62>
 8004f5c:	6921      	ldr	r1, [r4, #16]
 8004f5e:	9802      	ldr	r0, [sp, #8]
 8004f60:	f7ff feb0 	bl	8004cc4 <_free_r>
 8004f64:	230c      	movs	r3, #12
 8004f66:	2001      	movs	r0, #1
 8004f68:	9a02      	ldr	r2, [sp, #8]
 8004f6a:	4240      	negs	r0, r0
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	89a2      	ldrh	r2, [r4, #12]
 8004f70:	3334      	adds	r3, #52	@ 0x34
 8004f72:	4313      	orrs	r3, r2
 8004f74:	81a3      	strh	r3, [r4, #12]
 8004f76:	e7e9      	b.n	8004f4c <__ssputs_r+0x90>
 8004f78:	fffffb7f 	.word	0xfffffb7f

08004f7c <_svfiprintf_r>:
 8004f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f7e:	b0a1      	sub	sp, #132	@ 0x84
 8004f80:	9003      	str	r0, [sp, #12]
 8004f82:	001d      	movs	r5, r3
 8004f84:	898b      	ldrh	r3, [r1, #12]
 8004f86:	000f      	movs	r7, r1
 8004f88:	0016      	movs	r6, r2
 8004f8a:	061b      	lsls	r3, r3, #24
 8004f8c:	d511      	bpl.n	8004fb2 <_svfiprintf_r+0x36>
 8004f8e:	690b      	ldr	r3, [r1, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10e      	bne.n	8004fb2 <_svfiprintf_r+0x36>
 8004f94:	2140      	movs	r1, #64	@ 0x40
 8004f96:	f7ff ff01 	bl	8004d9c <_malloc_r>
 8004f9a:	6038      	str	r0, [r7, #0]
 8004f9c:	6138      	str	r0, [r7, #16]
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	d105      	bne.n	8004fae <_svfiprintf_r+0x32>
 8004fa2:	230c      	movs	r3, #12
 8004fa4:	9a03      	ldr	r2, [sp, #12]
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	2001      	movs	r0, #1
 8004faa:	4240      	negs	r0, r0
 8004fac:	e0cf      	b.n	800514e <_svfiprintf_r+0x1d2>
 8004fae:	2340      	movs	r3, #64	@ 0x40
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	ac08      	add	r4, sp, #32
 8004fb6:	6163      	str	r3, [r4, #20]
 8004fb8:	3320      	adds	r3, #32
 8004fba:	7663      	strb	r3, [r4, #25]
 8004fbc:	3310      	adds	r3, #16
 8004fbe:	76a3      	strb	r3, [r4, #26]
 8004fc0:	9507      	str	r5, [sp, #28]
 8004fc2:	0035      	movs	r5, r6
 8004fc4:	782b      	ldrb	r3, [r5, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <_svfiprintf_r+0x52>
 8004fca:	2b25      	cmp	r3, #37	@ 0x25
 8004fcc:	d148      	bne.n	8005060 <_svfiprintf_r+0xe4>
 8004fce:	1bab      	subs	r3, r5, r6
 8004fd0:	9305      	str	r3, [sp, #20]
 8004fd2:	42b5      	cmp	r5, r6
 8004fd4:	d00b      	beq.n	8004fee <_svfiprintf_r+0x72>
 8004fd6:	0032      	movs	r2, r6
 8004fd8:	0039      	movs	r1, r7
 8004fda:	9803      	ldr	r0, [sp, #12]
 8004fdc:	f7ff ff6e 	bl	8004ebc <__ssputs_r>
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	d100      	bne.n	8004fe6 <_svfiprintf_r+0x6a>
 8004fe4:	e0ae      	b.n	8005144 <_svfiprintf_r+0x1c8>
 8004fe6:	6963      	ldr	r3, [r4, #20]
 8004fe8:	9a05      	ldr	r2, [sp, #20]
 8004fea:	189b      	adds	r3, r3, r2
 8004fec:	6163      	str	r3, [r4, #20]
 8004fee:	782b      	ldrb	r3, [r5, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d100      	bne.n	8004ff6 <_svfiprintf_r+0x7a>
 8004ff4:	e0a6      	b.n	8005144 <_svfiprintf_r+0x1c8>
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	4252      	negs	r2, r2
 8004ffc:	6062      	str	r2, [r4, #4]
 8004ffe:	a904      	add	r1, sp, #16
 8005000:	3254      	adds	r2, #84	@ 0x54
 8005002:	1852      	adds	r2, r2, r1
 8005004:	1c6e      	adds	r6, r5, #1
 8005006:	6023      	str	r3, [r4, #0]
 8005008:	60e3      	str	r3, [r4, #12]
 800500a:	60a3      	str	r3, [r4, #8]
 800500c:	7013      	strb	r3, [r2, #0]
 800500e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005010:	4b54      	ldr	r3, [pc, #336]	@ (8005164 <_svfiprintf_r+0x1e8>)
 8005012:	2205      	movs	r2, #5
 8005014:	0018      	movs	r0, r3
 8005016:	7831      	ldrb	r1, [r6, #0]
 8005018:	9305      	str	r3, [sp, #20]
 800501a:	f000 fa51 	bl	80054c0 <memchr>
 800501e:	1c75      	adds	r5, r6, #1
 8005020:	2800      	cmp	r0, #0
 8005022:	d11f      	bne.n	8005064 <_svfiprintf_r+0xe8>
 8005024:	6822      	ldr	r2, [r4, #0]
 8005026:	06d3      	lsls	r3, r2, #27
 8005028:	d504      	bpl.n	8005034 <_svfiprintf_r+0xb8>
 800502a:	2353      	movs	r3, #83	@ 0x53
 800502c:	a904      	add	r1, sp, #16
 800502e:	185b      	adds	r3, r3, r1
 8005030:	2120      	movs	r1, #32
 8005032:	7019      	strb	r1, [r3, #0]
 8005034:	0713      	lsls	r3, r2, #28
 8005036:	d504      	bpl.n	8005042 <_svfiprintf_r+0xc6>
 8005038:	2353      	movs	r3, #83	@ 0x53
 800503a:	a904      	add	r1, sp, #16
 800503c:	185b      	adds	r3, r3, r1
 800503e:	212b      	movs	r1, #43	@ 0x2b
 8005040:	7019      	strb	r1, [r3, #0]
 8005042:	7833      	ldrb	r3, [r6, #0]
 8005044:	2b2a      	cmp	r3, #42	@ 0x2a
 8005046:	d016      	beq.n	8005076 <_svfiprintf_r+0xfa>
 8005048:	0035      	movs	r5, r6
 800504a:	2100      	movs	r1, #0
 800504c:	200a      	movs	r0, #10
 800504e:	68e3      	ldr	r3, [r4, #12]
 8005050:	782a      	ldrb	r2, [r5, #0]
 8005052:	1c6e      	adds	r6, r5, #1
 8005054:	3a30      	subs	r2, #48	@ 0x30
 8005056:	2a09      	cmp	r2, #9
 8005058:	d950      	bls.n	80050fc <_svfiprintf_r+0x180>
 800505a:	2900      	cmp	r1, #0
 800505c:	d111      	bne.n	8005082 <_svfiprintf_r+0x106>
 800505e:	e017      	b.n	8005090 <_svfiprintf_r+0x114>
 8005060:	3501      	adds	r5, #1
 8005062:	e7af      	b.n	8004fc4 <_svfiprintf_r+0x48>
 8005064:	9b05      	ldr	r3, [sp, #20]
 8005066:	6822      	ldr	r2, [r4, #0]
 8005068:	1ac0      	subs	r0, r0, r3
 800506a:	2301      	movs	r3, #1
 800506c:	4083      	lsls	r3, r0
 800506e:	4313      	orrs	r3, r2
 8005070:	002e      	movs	r6, r5
 8005072:	6023      	str	r3, [r4, #0]
 8005074:	e7cc      	b.n	8005010 <_svfiprintf_r+0x94>
 8005076:	9b07      	ldr	r3, [sp, #28]
 8005078:	1d19      	adds	r1, r3, #4
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	9107      	str	r1, [sp, #28]
 800507e:	2b00      	cmp	r3, #0
 8005080:	db01      	blt.n	8005086 <_svfiprintf_r+0x10a>
 8005082:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005084:	e004      	b.n	8005090 <_svfiprintf_r+0x114>
 8005086:	425b      	negs	r3, r3
 8005088:	60e3      	str	r3, [r4, #12]
 800508a:	2302      	movs	r3, #2
 800508c:	4313      	orrs	r3, r2
 800508e:	6023      	str	r3, [r4, #0]
 8005090:	782b      	ldrb	r3, [r5, #0]
 8005092:	2b2e      	cmp	r3, #46	@ 0x2e
 8005094:	d10c      	bne.n	80050b0 <_svfiprintf_r+0x134>
 8005096:	786b      	ldrb	r3, [r5, #1]
 8005098:	2b2a      	cmp	r3, #42	@ 0x2a
 800509a:	d134      	bne.n	8005106 <_svfiprintf_r+0x18a>
 800509c:	9b07      	ldr	r3, [sp, #28]
 800509e:	3502      	adds	r5, #2
 80050a0:	1d1a      	adds	r2, r3, #4
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	9207      	str	r2, [sp, #28]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	da01      	bge.n	80050ae <_svfiprintf_r+0x132>
 80050aa:	2301      	movs	r3, #1
 80050ac:	425b      	negs	r3, r3
 80050ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80050b0:	4e2d      	ldr	r6, [pc, #180]	@ (8005168 <_svfiprintf_r+0x1ec>)
 80050b2:	2203      	movs	r2, #3
 80050b4:	0030      	movs	r0, r6
 80050b6:	7829      	ldrb	r1, [r5, #0]
 80050b8:	f000 fa02 	bl	80054c0 <memchr>
 80050bc:	2800      	cmp	r0, #0
 80050be:	d006      	beq.n	80050ce <_svfiprintf_r+0x152>
 80050c0:	2340      	movs	r3, #64	@ 0x40
 80050c2:	1b80      	subs	r0, r0, r6
 80050c4:	4083      	lsls	r3, r0
 80050c6:	6822      	ldr	r2, [r4, #0]
 80050c8:	3501      	adds	r5, #1
 80050ca:	4313      	orrs	r3, r2
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	7829      	ldrb	r1, [r5, #0]
 80050d0:	2206      	movs	r2, #6
 80050d2:	4826      	ldr	r0, [pc, #152]	@ (800516c <_svfiprintf_r+0x1f0>)
 80050d4:	1c6e      	adds	r6, r5, #1
 80050d6:	7621      	strb	r1, [r4, #24]
 80050d8:	f000 f9f2 	bl	80054c0 <memchr>
 80050dc:	2800      	cmp	r0, #0
 80050de:	d038      	beq.n	8005152 <_svfiprintf_r+0x1d6>
 80050e0:	4b23      	ldr	r3, [pc, #140]	@ (8005170 <_svfiprintf_r+0x1f4>)
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d122      	bne.n	800512c <_svfiprintf_r+0x1b0>
 80050e6:	2207      	movs	r2, #7
 80050e8:	9b07      	ldr	r3, [sp, #28]
 80050ea:	3307      	adds	r3, #7
 80050ec:	4393      	bics	r3, r2
 80050ee:	3308      	adds	r3, #8
 80050f0:	9307      	str	r3, [sp, #28]
 80050f2:	6963      	ldr	r3, [r4, #20]
 80050f4:	9a04      	ldr	r2, [sp, #16]
 80050f6:	189b      	adds	r3, r3, r2
 80050f8:	6163      	str	r3, [r4, #20]
 80050fa:	e762      	b.n	8004fc2 <_svfiprintf_r+0x46>
 80050fc:	4343      	muls	r3, r0
 80050fe:	0035      	movs	r5, r6
 8005100:	2101      	movs	r1, #1
 8005102:	189b      	adds	r3, r3, r2
 8005104:	e7a4      	b.n	8005050 <_svfiprintf_r+0xd4>
 8005106:	2300      	movs	r3, #0
 8005108:	200a      	movs	r0, #10
 800510a:	0019      	movs	r1, r3
 800510c:	3501      	adds	r5, #1
 800510e:	6063      	str	r3, [r4, #4]
 8005110:	782a      	ldrb	r2, [r5, #0]
 8005112:	1c6e      	adds	r6, r5, #1
 8005114:	3a30      	subs	r2, #48	@ 0x30
 8005116:	2a09      	cmp	r2, #9
 8005118:	d903      	bls.n	8005122 <_svfiprintf_r+0x1a6>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0c8      	beq.n	80050b0 <_svfiprintf_r+0x134>
 800511e:	9109      	str	r1, [sp, #36]	@ 0x24
 8005120:	e7c6      	b.n	80050b0 <_svfiprintf_r+0x134>
 8005122:	4341      	muls	r1, r0
 8005124:	0035      	movs	r5, r6
 8005126:	2301      	movs	r3, #1
 8005128:	1889      	adds	r1, r1, r2
 800512a:	e7f1      	b.n	8005110 <_svfiprintf_r+0x194>
 800512c:	aa07      	add	r2, sp, #28
 800512e:	9200      	str	r2, [sp, #0]
 8005130:	0021      	movs	r1, r4
 8005132:	003a      	movs	r2, r7
 8005134:	4b0f      	ldr	r3, [pc, #60]	@ (8005174 <_svfiprintf_r+0x1f8>)
 8005136:	9803      	ldr	r0, [sp, #12]
 8005138:	e000      	b.n	800513c <_svfiprintf_r+0x1c0>
 800513a:	bf00      	nop
 800513c:	9004      	str	r0, [sp, #16]
 800513e:	9b04      	ldr	r3, [sp, #16]
 8005140:	3301      	adds	r3, #1
 8005142:	d1d6      	bne.n	80050f2 <_svfiprintf_r+0x176>
 8005144:	89bb      	ldrh	r3, [r7, #12]
 8005146:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005148:	065b      	lsls	r3, r3, #25
 800514a:	d500      	bpl.n	800514e <_svfiprintf_r+0x1d2>
 800514c:	e72c      	b.n	8004fa8 <_svfiprintf_r+0x2c>
 800514e:	b021      	add	sp, #132	@ 0x84
 8005150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005152:	aa07      	add	r2, sp, #28
 8005154:	9200      	str	r2, [sp, #0]
 8005156:	0021      	movs	r1, r4
 8005158:	003a      	movs	r2, r7
 800515a:	4b06      	ldr	r3, [pc, #24]	@ (8005174 <_svfiprintf_r+0x1f8>)
 800515c:	9803      	ldr	r0, [sp, #12]
 800515e:	f000 f87b 	bl	8005258 <_printf_i>
 8005162:	e7eb      	b.n	800513c <_svfiprintf_r+0x1c0>
 8005164:	08005761 	.word	0x08005761
 8005168:	08005767 	.word	0x08005767
 800516c:	0800576b 	.word	0x0800576b
 8005170:	00000000 	.word	0x00000000
 8005174:	08004ebd 	.word	0x08004ebd

08005178 <_printf_common>:
 8005178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800517a:	0016      	movs	r6, r2
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	688a      	ldr	r2, [r1, #8]
 8005180:	690b      	ldr	r3, [r1, #16]
 8005182:	000c      	movs	r4, r1
 8005184:	9000      	str	r0, [sp, #0]
 8005186:	4293      	cmp	r3, r2
 8005188:	da00      	bge.n	800518c <_printf_common+0x14>
 800518a:	0013      	movs	r3, r2
 800518c:	0022      	movs	r2, r4
 800518e:	6033      	str	r3, [r6, #0]
 8005190:	3243      	adds	r2, #67	@ 0x43
 8005192:	7812      	ldrb	r2, [r2, #0]
 8005194:	2a00      	cmp	r2, #0
 8005196:	d001      	beq.n	800519c <_printf_common+0x24>
 8005198:	3301      	adds	r3, #1
 800519a:	6033      	str	r3, [r6, #0]
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	069b      	lsls	r3, r3, #26
 80051a0:	d502      	bpl.n	80051a8 <_printf_common+0x30>
 80051a2:	6833      	ldr	r3, [r6, #0]
 80051a4:	3302      	adds	r3, #2
 80051a6:	6033      	str	r3, [r6, #0]
 80051a8:	6822      	ldr	r2, [r4, #0]
 80051aa:	2306      	movs	r3, #6
 80051ac:	0015      	movs	r5, r2
 80051ae:	401d      	ands	r5, r3
 80051b0:	421a      	tst	r2, r3
 80051b2:	d027      	beq.n	8005204 <_printf_common+0x8c>
 80051b4:	0023      	movs	r3, r4
 80051b6:	3343      	adds	r3, #67	@ 0x43
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	1e5a      	subs	r2, r3, #1
 80051bc:	4193      	sbcs	r3, r2
 80051be:	6822      	ldr	r2, [r4, #0]
 80051c0:	0692      	lsls	r2, r2, #26
 80051c2:	d430      	bmi.n	8005226 <_printf_common+0xae>
 80051c4:	0022      	movs	r2, r4
 80051c6:	9901      	ldr	r1, [sp, #4]
 80051c8:	9800      	ldr	r0, [sp, #0]
 80051ca:	9d08      	ldr	r5, [sp, #32]
 80051cc:	3243      	adds	r2, #67	@ 0x43
 80051ce:	47a8      	blx	r5
 80051d0:	3001      	adds	r0, #1
 80051d2:	d025      	beq.n	8005220 <_printf_common+0xa8>
 80051d4:	2206      	movs	r2, #6
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	2500      	movs	r5, #0
 80051da:	4013      	ands	r3, r2
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d105      	bne.n	80051ec <_printf_common+0x74>
 80051e0:	6833      	ldr	r3, [r6, #0]
 80051e2:	68e5      	ldr	r5, [r4, #12]
 80051e4:	1aed      	subs	r5, r5, r3
 80051e6:	43eb      	mvns	r3, r5
 80051e8:	17db      	asrs	r3, r3, #31
 80051ea:	401d      	ands	r5, r3
 80051ec:	68a3      	ldr	r3, [r4, #8]
 80051ee:	6922      	ldr	r2, [r4, #16]
 80051f0:	4293      	cmp	r3, r2
 80051f2:	dd01      	ble.n	80051f8 <_printf_common+0x80>
 80051f4:	1a9b      	subs	r3, r3, r2
 80051f6:	18ed      	adds	r5, r5, r3
 80051f8:	2600      	movs	r6, #0
 80051fa:	42b5      	cmp	r5, r6
 80051fc:	d120      	bne.n	8005240 <_printf_common+0xc8>
 80051fe:	2000      	movs	r0, #0
 8005200:	e010      	b.n	8005224 <_printf_common+0xac>
 8005202:	3501      	adds	r5, #1
 8005204:	68e3      	ldr	r3, [r4, #12]
 8005206:	6832      	ldr	r2, [r6, #0]
 8005208:	1a9b      	subs	r3, r3, r2
 800520a:	42ab      	cmp	r3, r5
 800520c:	ddd2      	ble.n	80051b4 <_printf_common+0x3c>
 800520e:	0022      	movs	r2, r4
 8005210:	2301      	movs	r3, #1
 8005212:	9901      	ldr	r1, [sp, #4]
 8005214:	9800      	ldr	r0, [sp, #0]
 8005216:	9f08      	ldr	r7, [sp, #32]
 8005218:	3219      	adds	r2, #25
 800521a:	47b8      	blx	r7
 800521c:	3001      	adds	r0, #1
 800521e:	d1f0      	bne.n	8005202 <_printf_common+0x8a>
 8005220:	2001      	movs	r0, #1
 8005222:	4240      	negs	r0, r0
 8005224:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005226:	2030      	movs	r0, #48	@ 0x30
 8005228:	18e1      	adds	r1, r4, r3
 800522a:	3143      	adds	r1, #67	@ 0x43
 800522c:	7008      	strb	r0, [r1, #0]
 800522e:	0021      	movs	r1, r4
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	3145      	adds	r1, #69	@ 0x45
 8005234:	7809      	ldrb	r1, [r1, #0]
 8005236:	18a2      	adds	r2, r4, r2
 8005238:	3243      	adds	r2, #67	@ 0x43
 800523a:	3302      	adds	r3, #2
 800523c:	7011      	strb	r1, [r2, #0]
 800523e:	e7c1      	b.n	80051c4 <_printf_common+0x4c>
 8005240:	0022      	movs	r2, r4
 8005242:	2301      	movs	r3, #1
 8005244:	9901      	ldr	r1, [sp, #4]
 8005246:	9800      	ldr	r0, [sp, #0]
 8005248:	9f08      	ldr	r7, [sp, #32]
 800524a:	321a      	adds	r2, #26
 800524c:	47b8      	blx	r7
 800524e:	3001      	adds	r0, #1
 8005250:	d0e6      	beq.n	8005220 <_printf_common+0xa8>
 8005252:	3601      	adds	r6, #1
 8005254:	e7d1      	b.n	80051fa <_printf_common+0x82>
	...

08005258 <_printf_i>:
 8005258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800525a:	b08b      	sub	sp, #44	@ 0x2c
 800525c:	9206      	str	r2, [sp, #24]
 800525e:	000a      	movs	r2, r1
 8005260:	3243      	adds	r2, #67	@ 0x43
 8005262:	9307      	str	r3, [sp, #28]
 8005264:	9005      	str	r0, [sp, #20]
 8005266:	9203      	str	r2, [sp, #12]
 8005268:	7e0a      	ldrb	r2, [r1, #24]
 800526a:	000c      	movs	r4, r1
 800526c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800526e:	2a78      	cmp	r2, #120	@ 0x78
 8005270:	d809      	bhi.n	8005286 <_printf_i+0x2e>
 8005272:	2a62      	cmp	r2, #98	@ 0x62
 8005274:	d80b      	bhi.n	800528e <_printf_i+0x36>
 8005276:	2a00      	cmp	r2, #0
 8005278:	d100      	bne.n	800527c <_printf_i+0x24>
 800527a:	e0bc      	b.n	80053f6 <_printf_i+0x19e>
 800527c:	497b      	ldr	r1, [pc, #492]	@ (800546c <_printf_i+0x214>)
 800527e:	9104      	str	r1, [sp, #16]
 8005280:	2a58      	cmp	r2, #88	@ 0x58
 8005282:	d100      	bne.n	8005286 <_printf_i+0x2e>
 8005284:	e090      	b.n	80053a8 <_printf_i+0x150>
 8005286:	0025      	movs	r5, r4
 8005288:	3542      	adds	r5, #66	@ 0x42
 800528a:	702a      	strb	r2, [r5, #0]
 800528c:	e022      	b.n	80052d4 <_printf_i+0x7c>
 800528e:	0010      	movs	r0, r2
 8005290:	3863      	subs	r0, #99	@ 0x63
 8005292:	2815      	cmp	r0, #21
 8005294:	d8f7      	bhi.n	8005286 <_printf_i+0x2e>
 8005296:	f7fa ff37 	bl	8000108 <__gnu_thumb1_case_shi>
 800529a:	0016      	.short	0x0016
 800529c:	fff6001f 	.word	0xfff6001f
 80052a0:	fff6fff6 	.word	0xfff6fff6
 80052a4:	001ffff6 	.word	0x001ffff6
 80052a8:	fff6fff6 	.word	0xfff6fff6
 80052ac:	fff6fff6 	.word	0xfff6fff6
 80052b0:	003600a1 	.word	0x003600a1
 80052b4:	fff60080 	.word	0xfff60080
 80052b8:	00b2fff6 	.word	0x00b2fff6
 80052bc:	0036fff6 	.word	0x0036fff6
 80052c0:	fff6fff6 	.word	0xfff6fff6
 80052c4:	0084      	.short	0x0084
 80052c6:	0025      	movs	r5, r4
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	3542      	adds	r5, #66	@ 0x42
 80052cc:	1d11      	adds	r1, r2, #4
 80052ce:	6019      	str	r1, [r3, #0]
 80052d0:	6813      	ldr	r3, [r2, #0]
 80052d2:	702b      	strb	r3, [r5, #0]
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0a0      	b.n	800541a <_printf_i+0x1c2>
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	6809      	ldr	r1, [r1, #0]
 80052dc:	1d02      	adds	r2, r0, #4
 80052de:	060d      	lsls	r5, r1, #24
 80052e0:	d50b      	bpl.n	80052fa <_printf_i+0xa2>
 80052e2:	6806      	ldr	r6, [r0, #0]
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	2e00      	cmp	r6, #0
 80052e8:	da03      	bge.n	80052f2 <_printf_i+0x9a>
 80052ea:	232d      	movs	r3, #45	@ 0x2d
 80052ec:	9a03      	ldr	r2, [sp, #12]
 80052ee:	4276      	negs	r6, r6
 80052f0:	7013      	strb	r3, [r2, #0]
 80052f2:	4b5e      	ldr	r3, [pc, #376]	@ (800546c <_printf_i+0x214>)
 80052f4:	270a      	movs	r7, #10
 80052f6:	9304      	str	r3, [sp, #16]
 80052f8:	e018      	b.n	800532c <_printf_i+0xd4>
 80052fa:	6806      	ldr	r6, [r0, #0]
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	0649      	lsls	r1, r1, #25
 8005300:	d5f1      	bpl.n	80052e6 <_printf_i+0x8e>
 8005302:	b236      	sxth	r6, r6
 8005304:	e7ef      	b.n	80052e6 <_printf_i+0x8e>
 8005306:	6808      	ldr	r0, [r1, #0]
 8005308:	6819      	ldr	r1, [r3, #0]
 800530a:	c940      	ldmia	r1!, {r6}
 800530c:	0605      	lsls	r5, r0, #24
 800530e:	d402      	bmi.n	8005316 <_printf_i+0xbe>
 8005310:	0640      	lsls	r0, r0, #25
 8005312:	d500      	bpl.n	8005316 <_printf_i+0xbe>
 8005314:	b2b6      	uxth	r6, r6
 8005316:	6019      	str	r1, [r3, #0]
 8005318:	4b54      	ldr	r3, [pc, #336]	@ (800546c <_printf_i+0x214>)
 800531a:	270a      	movs	r7, #10
 800531c:	9304      	str	r3, [sp, #16]
 800531e:	2a6f      	cmp	r2, #111	@ 0x6f
 8005320:	d100      	bne.n	8005324 <_printf_i+0xcc>
 8005322:	3f02      	subs	r7, #2
 8005324:	0023      	movs	r3, r4
 8005326:	2200      	movs	r2, #0
 8005328:	3343      	adds	r3, #67	@ 0x43
 800532a:	701a      	strb	r2, [r3, #0]
 800532c:	6863      	ldr	r3, [r4, #4]
 800532e:	60a3      	str	r3, [r4, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	db03      	blt.n	800533c <_printf_i+0xe4>
 8005334:	2104      	movs	r1, #4
 8005336:	6822      	ldr	r2, [r4, #0]
 8005338:	438a      	bics	r2, r1
 800533a:	6022      	str	r2, [r4, #0]
 800533c:	2e00      	cmp	r6, #0
 800533e:	d102      	bne.n	8005346 <_printf_i+0xee>
 8005340:	9d03      	ldr	r5, [sp, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00c      	beq.n	8005360 <_printf_i+0x108>
 8005346:	9d03      	ldr	r5, [sp, #12]
 8005348:	0030      	movs	r0, r6
 800534a:	0039      	movs	r1, r7
 800534c:	f7fa ff6c 	bl	8000228 <__aeabi_uidivmod>
 8005350:	9b04      	ldr	r3, [sp, #16]
 8005352:	3d01      	subs	r5, #1
 8005354:	5c5b      	ldrb	r3, [r3, r1]
 8005356:	702b      	strb	r3, [r5, #0]
 8005358:	0033      	movs	r3, r6
 800535a:	0006      	movs	r6, r0
 800535c:	429f      	cmp	r7, r3
 800535e:	d9f3      	bls.n	8005348 <_printf_i+0xf0>
 8005360:	2f08      	cmp	r7, #8
 8005362:	d109      	bne.n	8005378 <_printf_i+0x120>
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	07db      	lsls	r3, r3, #31
 8005368:	d506      	bpl.n	8005378 <_printf_i+0x120>
 800536a:	6862      	ldr	r2, [r4, #4]
 800536c:	6923      	ldr	r3, [r4, #16]
 800536e:	429a      	cmp	r2, r3
 8005370:	dc02      	bgt.n	8005378 <_printf_i+0x120>
 8005372:	2330      	movs	r3, #48	@ 0x30
 8005374:	3d01      	subs	r5, #1
 8005376:	702b      	strb	r3, [r5, #0]
 8005378:	9b03      	ldr	r3, [sp, #12]
 800537a:	1b5b      	subs	r3, r3, r5
 800537c:	6123      	str	r3, [r4, #16]
 800537e:	9b07      	ldr	r3, [sp, #28]
 8005380:	0021      	movs	r1, r4
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	9805      	ldr	r0, [sp, #20]
 8005386:	9b06      	ldr	r3, [sp, #24]
 8005388:	aa09      	add	r2, sp, #36	@ 0x24
 800538a:	f7ff fef5 	bl	8005178 <_printf_common>
 800538e:	3001      	adds	r0, #1
 8005390:	d148      	bne.n	8005424 <_printf_i+0x1cc>
 8005392:	2001      	movs	r0, #1
 8005394:	4240      	negs	r0, r0
 8005396:	b00b      	add	sp, #44	@ 0x2c
 8005398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800539a:	2220      	movs	r2, #32
 800539c:	6809      	ldr	r1, [r1, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	6022      	str	r2, [r4, #0]
 80053a2:	2278      	movs	r2, #120	@ 0x78
 80053a4:	4932      	ldr	r1, [pc, #200]	@ (8005470 <_printf_i+0x218>)
 80053a6:	9104      	str	r1, [sp, #16]
 80053a8:	0021      	movs	r1, r4
 80053aa:	3145      	adds	r1, #69	@ 0x45
 80053ac:	700a      	strb	r2, [r1, #0]
 80053ae:	6819      	ldr	r1, [r3, #0]
 80053b0:	6822      	ldr	r2, [r4, #0]
 80053b2:	c940      	ldmia	r1!, {r6}
 80053b4:	0610      	lsls	r0, r2, #24
 80053b6:	d402      	bmi.n	80053be <_printf_i+0x166>
 80053b8:	0650      	lsls	r0, r2, #25
 80053ba:	d500      	bpl.n	80053be <_printf_i+0x166>
 80053bc:	b2b6      	uxth	r6, r6
 80053be:	6019      	str	r1, [r3, #0]
 80053c0:	07d3      	lsls	r3, r2, #31
 80053c2:	d502      	bpl.n	80053ca <_printf_i+0x172>
 80053c4:	2320      	movs	r3, #32
 80053c6:	4313      	orrs	r3, r2
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	2e00      	cmp	r6, #0
 80053cc:	d001      	beq.n	80053d2 <_printf_i+0x17a>
 80053ce:	2710      	movs	r7, #16
 80053d0:	e7a8      	b.n	8005324 <_printf_i+0xcc>
 80053d2:	2220      	movs	r2, #32
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	4393      	bics	r3, r2
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	e7f8      	b.n	80053ce <_printf_i+0x176>
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	680d      	ldr	r5, [r1, #0]
 80053e0:	1d10      	adds	r0, r2, #4
 80053e2:	6949      	ldr	r1, [r1, #20]
 80053e4:	6018      	str	r0, [r3, #0]
 80053e6:	6813      	ldr	r3, [r2, #0]
 80053e8:	062e      	lsls	r6, r5, #24
 80053ea:	d501      	bpl.n	80053f0 <_printf_i+0x198>
 80053ec:	6019      	str	r1, [r3, #0]
 80053ee:	e002      	b.n	80053f6 <_printf_i+0x19e>
 80053f0:	066d      	lsls	r5, r5, #25
 80053f2:	d5fb      	bpl.n	80053ec <_printf_i+0x194>
 80053f4:	8019      	strh	r1, [r3, #0]
 80053f6:	2300      	movs	r3, #0
 80053f8:	9d03      	ldr	r5, [sp, #12]
 80053fa:	6123      	str	r3, [r4, #16]
 80053fc:	e7bf      	b.n	800537e <_printf_i+0x126>
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	1d11      	adds	r1, r2, #4
 8005402:	6019      	str	r1, [r3, #0]
 8005404:	6815      	ldr	r5, [r2, #0]
 8005406:	2100      	movs	r1, #0
 8005408:	0028      	movs	r0, r5
 800540a:	6862      	ldr	r2, [r4, #4]
 800540c:	f000 f858 	bl	80054c0 <memchr>
 8005410:	2800      	cmp	r0, #0
 8005412:	d001      	beq.n	8005418 <_printf_i+0x1c0>
 8005414:	1b40      	subs	r0, r0, r5
 8005416:	6060      	str	r0, [r4, #4]
 8005418:	6863      	ldr	r3, [r4, #4]
 800541a:	6123      	str	r3, [r4, #16]
 800541c:	2300      	movs	r3, #0
 800541e:	9a03      	ldr	r2, [sp, #12]
 8005420:	7013      	strb	r3, [r2, #0]
 8005422:	e7ac      	b.n	800537e <_printf_i+0x126>
 8005424:	002a      	movs	r2, r5
 8005426:	6923      	ldr	r3, [r4, #16]
 8005428:	9906      	ldr	r1, [sp, #24]
 800542a:	9805      	ldr	r0, [sp, #20]
 800542c:	9d07      	ldr	r5, [sp, #28]
 800542e:	47a8      	blx	r5
 8005430:	3001      	adds	r0, #1
 8005432:	d0ae      	beq.n	8005392 <_printf_i+0x13a>
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	079b      	lsls	r3, r3, #30
 8005438:	d415      	bmi.n	8005466 <_printf_i+0x20e>
 800543a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800543c:	68e0      	ldr	r0, [r4, #12]
 800543e:	4298      	cmp	r0, r3
 8005440:	daa9      	bge.n	8005396 <_printf_i+0x13e>
 8005442:	0018      	movs	r0, r3
 8005444:	e7a7      	b.n	8005396 <_printf_i+0x13e>
 8005446:	0022      	movs	r2, r4
 8005448:	2301      	movs	r3, #1
 800544a:	9906      	ldr	r1, [sp, #24]
 800544c:	9805      	ldr	r0, [sp, #20]
 800544e:	9e07      	ldr	r6, [sp, #28]
 8005450:	3219      	adds	r2, #25
 8005452:	47b0      	blx	r6
 8005454:	3001      	adds	r0, #1
 8005456:	d09c      	beq.n	8005392 <_printf_i+0x13a>
 8005458:	3501      	adds	r5, #1
 800545a:	68e3      	ldr	r3, [r4, #12]
 800545c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800545e:	1a9b      	subs	r3, r3, r2
 8005460:	42ab      	cmp	r3, r5
 8005462:	dcf0      	bgt.n	8005446 <_printf_i+0x1ee>
 8005464:	e7e9      	b.n	800543a <_printf_i+0x1e2>
 8005466:	2500      	movs	r5, #0
 8005468:	e7f7      	b.n	800545a <_printf_i+0x202>
 800546a:	46c0      	nop			@ (mov r8, r8)
 800546c:	08005772 	.word	0x08005772
 8005470:	08005783 	.word	0x08005783

08005474 <memmove>:
 8005474:	b510      	push	{r4, lr}
 8005476:	4288      	cmp	r0, r1
 8005478:	d806      	bhi.n	8005488 <memmove+0x14>
 800547a:	2300      	movs	r3, #0
 800547c:	429a      	cmp	r2, r3
 800547e:	d008      	beq.n	8005492 <memmove+0x1e>
 8005480:	5ccc      	ldrb	r4, [r1, r3]
 8005482:	54c4      	strb	r4, [r0, r3]
 8005484:	3301      	adds	r3, #1
 8005486:	e7f9      	b.n	800547c <memmove+0x8>
 8005488:	188b      	adds	r3, r1, r2
 800548a:	4298      	cmp	r0, r3
 800548c:	d2f5      	bcs.n	800547a <memmove+0x6>
 800548e:	3a01      	subs	r2, #1
 8005490:	d200      	bcs.n	8005494 <memmove+0x20>
 8005492:	bd10      	pop	{r4, pc}
 8005494:	5c8b      	ldrb	r3, [r1, r2]
 8005496:	5483      	strb	r3, [r0, r2]
 8005498:	e7f9      	b.n	800548e <memmove+0x1a>
	...

0800549c <_sbrk_r>:
 800549c:	2300      	movs	r3, #0
 800549e:	b570      	push	{r4, r5, r6, lr}
 80054a0:	4d06      	ldr	r5, [pc, #24]	@ (80054bc <_sbrk_r+0x20>)
 80054a2:	0004      	movs	r4, r0
 80054a4:	0008      	movs	r0, r1
 80054a6:	602b      	str	r3, [r5, #0]
 80054a8:	f7fb ff58 	bl	800135c <_sbrk>
 80054ac:	1c43      	adds	r3, r0, #1
 80054ae:	d103      	bne.n	80054b8 <_sbrk_r+0x1c>
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d000      	beq.n	80054b8 <_sbrk_r+0x1c>
 80054b6:	6023      	str	r3, [r4, #0]
 80054b8:	bd70      	pop	{r4, r5, r6, pc}
 80054ba:	46c0      	nop			@ (mov r8, r8)
 80054bc:	200007c4 	.word	0x200007c4

080054c0 <memchr>:
 80054c0:	b2c9      	uxtb	r1, r1
 80054c2:	1882      	adds	r2, r0, r2
 80054c4:	4290      	cmp	r0, r2
 80054c6:	d101      	bne.n	80054cc <memchr+0xc>
 80054c8:	2000      	movs	r0, #0
 80054ca:	4770      	bx	lr
 80054cc:	7803      	ldrb	r3, [r0, #0]
 80054ce:	428b      	cmp	r3, r1
 80054d0:	d0fb      	beq.n	80054ca <memchr+0xa>
 80054d2:	3001      	adds	r0, #1
 80054d4:	e7f6      	b.n	80054c4 <memchr+0x4>

080054d6 <_realloc_r>:
 80054d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054d8:	0006      	movs	r6, r0
 80054da:	000c      	movs	r4, r1
 80054dc:	0015      	movs	r5, r2
 80054de:	2900      	cmp	r1, #0
 80054e0:	d105      	bne.n	80054ee <_realloc_r+0x18>
 80054e2:	0011      	movs	r1, r2
 80054e4:	f7ff fc5a 	bl	8004d9c <_malloc_r>
 80054e8:	0004      	movs	r4, r0
 80054ea:	0020      	movs	r0, r4
 80054ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80054ee:	2a00      	cmp	r2, #0
 80054f0:	d103      	bne.n	80054fa <_realloc_r+0x24>
 80054f2:	f7ff fbe7 	bl	8004cc4 <_free_r>
 80054f6:	2400      	movs	r4, #0
 80054f8:	e7f7      	b.n	80054ea <_realloc_r+0x14>
 80054fa:	f000 f81b 	bl	8005534 <_malloc_usable_size_r>
 80054fe:	0007      	movs	r7, r0
 8005500:	4285      	cmp	r5, r0
 8005502:	d802      	bhi.n	800550a <_realloc_r+0x34>
 8005504:	0843      	lsrs	r3, r0, #1
 8005506:	42ab      	cmp	r3, r5
 8005508:	d3ef      	bcc.n	80054ea <_realloc_r+0x14>
 800550a:	0029      	movs	r1, r5
 800550c:	0030      	movs	r0, r6
 800550e:	f7ff fc45 	bl	8004d9c <_malloc_r>
 8005512:	9001      	str	r0, [sp, #4]
 8005514:	2800      	cmp	r0, #0
 8005516:	d0ee      	beq.n	80054f6 <_realloc_r+0x20>
 8005518:	002a      	movs	r2, r5
 800551a:	42bd      	cmp	r5, r7
 800551c:	d900      	bls.n	8005520 <_realloc_r+0x4a>
 800551e:	003a      	movs	r2, r7
 8005520:	0021      	movs	r1, r4
 8005522:	9801      	ldr	r0, [sp, #4]
 8005524:	f7ff fbc4 	bl	8004cb0 <memcpy>
 8005528:	0021      	movs	r1, r4
 800552a:	0030      	movs	r0, r6
 800552c:	f7ff fbca 	bl	8004cc4 <_free_r>
 8005530:	9c01      	ldr	r4, [sp, #4]
 8005532:	e7da      	b.n	80054ea <_realloc_r+0x14>

08005534 <_malloc_usable_size_r>:
 8005534:	1f0b      	subs	r3, r1, #4
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	1f18      	subs	r0, r3, #4
 800553a:	2b00      	cmp	r3, #0
 800553c:	da01      	bge.n	8005542 <_malloc_usable_size_r+0xe>
 800553e:	580b      	ldr	r3, [r1, r0]
 8005540:	18c0      	adds	r0, r0, r3
 8005542:	4770      	bx	lr

08005544 <_init>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	46c0      	nop			@ (mov r8, r8)
 8005548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554a:	bc08      	pop	{r3}
 800554c:	469e      	mov	lr, r3
 800554e:	4770      	bx	lr

08005550 <_fini>:
 8005550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005552:	46c0      	nop			@ (mov r8, r8)
 8005554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005556:	bc08      	pop	{r3}
 8005558:	469e      	mov	lr, r3
 800555a:	4770      	bx	lr
