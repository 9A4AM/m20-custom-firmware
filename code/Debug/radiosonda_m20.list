
radiosonda_m20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bb8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004c78  08004c78  00014c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cec  08004cec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cec  08004cec  00014cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cf4  08004cf4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cf4  08004cf4  00014cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cf8  08004cf8  00014cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004cfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000000c  08004d08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08004d08  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010513  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002583  00000000  00000000  0003058a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb0  00000000  00000000  00032b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b7a  00000000  00000000  000339c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001363d  00000000  00000000  0003453a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f65  00000000  00000000  00047b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078d4c  00000000  00000000  00058adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003508  00000000  00000000  000d1828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d4d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c60 	.word	0x08004c60

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004c60 	.word	0x08004c60

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8d8 	bl	8000490 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8d3 	bl	8000490 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzsi2>:
 8000454:	211c      	movs	r1, #28
 8000456:	2301      	movs	r3, #1
 8000458:	041b      	lsls	r3, r3, #16
 800045a:	4298      	cmp	r0, r3
 800045c:	d301      	bcc.n	8000462 <__clzsi2+0xe>
 800045e:	0c00      	lsrs	r0, r0, #16
 8000460:	3910      	subs	r1, #16
 8000462:	0a1b      	lsrs	r3, r3, #8
 8000464:	4298      	cmp	r0, r3
 8000466:	d301      	bcc.n	800046c <__clzsi2+0x18>
 8000468:	0a00      	lsrs	r0, r0, #8
 800046a:	3908      	subs	r1, #8
 800046c:	091b      	lsrs	r3, r3, #4
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__clzsi2+0x22>
 8000472:	0900      	lsrs	r0, r0, #4
 8000474:	3904      	subs	r1, #4
 8000476:	a202      	add	r2, pc, #8	; (adr r2, 8000480 <__clzsi2+0x2c>)
 8000478:	5c10      	ldrb	r0, [r2, r0]
 800047a:	1840      	adds	r0, r0, r1
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	02020304 	.word	0x02020304
 8000484:	01010101 	.word	0x01010101
	...

08000490 <__clzdi2>:
 8000490:	b510      	push	{r4, lr}
 8000492:	2900      	cmp	r1, #0
 8000494:	d103      	bne.n	800049e <__clzdi2+0xe>
 8000496:	f7ff ffdd 	bl	8000454 <__clzsi2>
 800049a:	3020      	adds	r0, #32
 800049c:	e002      	b.n	80004a4 <__clzdi2+0x14>
 800049e:	0008      	movs	r0, r1
 80004a0:	f7ff ffd8 	bl	8000454 <__clzsi2>
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <myspi>:

	HAL_Delay(100);
}

void myspi(uint32_t data)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	//uint32_t delay = 0;
	HAL_GPIO_WritePin(ADF_LE_GPIO_Port, ADF_LE_Pin, GPIO_PIN_RESET);
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	482f      	ldr	r0, [pc, #188]	; (8000574 <myspi+0xcc>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	0019      	movs	r1, r3
 80004ba:	f001 fd01 	bl	8001ec0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ADF_Data_GPIO_Port, ADF_Data_Pin, GPIO_PIN_RESET);
 80004be:	2380      	movs	r3, #128	; 0x80
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	482c      	ldr	r0, [pc, #176]	; (8000574 <myspi+0xcc>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	0019      	movs	r1, r3
 80004c8:	f001 fcfa 	bl	8001ec0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADF_CLK_GPIO_Port, ADF_CLK_Pin, GPIO_PIN_RESET);
 80004cc:	4b29      	ldr	r3, [pc, #164]	; (8000574 <myspi+0xcc>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	2180      	movs	r1, #128	; 0x80
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 fcf4 	bl	8001ec0 <HAL_GPIO_WritePin>
	//HAL_Delay(delay);
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004d8:	4b27      	ldr	r3, [pc, #156]	; (8000578 <myspi+0xd0>)
 80004da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004dc:	4b26      	ldr	r3, [pc, #152]	; (8000578 <myspi+0xd0>)
 80004de:	2101      	movs	r1, #1
 80004e0:	430a      	orrs	r2, r1
 80004e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80004e4:	4b24      	ldr	r3, [pc, #144]	; (8000578 <myspi+0xd0>)
 80004e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e8:	2201      	movs	r2, #1
 80004ea:	4013      	ands	r3, r2
 80004ec:	60bb      	str	r3, [r7, #8]
 80004ee:	68bb      	ldr	r3, [r7, #8]
	for (int i = 0; i < 32; i++) {
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	e023      	b.n	800053e <myspi+0x96>
		HAL_GPIO_WritePin(ADF_CLK_GPIO_Port, ADF_CLK_Pin, GPIO_PIN_RESET);
 80004f6:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <myspi+0xcc>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	2180      	movs	r1, #128	; 0x80
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 fcdf 	bl	8001ec0 <HAL_GPIO_WritePin>
		if (data & 0b10000000000000000000000000000000)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2b00      	cmp	r3, #0
 8000506:	da07      	bge.n	8000518 <myspi+0x70>
		{
			HAL_GPIO_WritePin(ADF_Data_GPIO_Port, ADF_Data_Pin, GPIO_PIN_SET);
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	4819      	ldr	r0, [pc, #100]	; (8000574 <myspi+0xcc>)
 800050e:	2201      	movs	r2, #1
 8000510:	0019      	movs	r1, r3
 8000512:	f001 fcd5 	bl	8001ec0 <HAL_GPIO_WritePin>
 8000516:	e006      	b.n	8000526 <myspi+0x7e>
		} else {
			HAL_GPIO_WritePin(ADF_Data_GPIO_Port, ADF_Data_Pin, GPIO_PIN_RESET);
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	4815      	ldr	r0, [pc, #84]	; (8000574 <myspi+0xcc>)
 800051e:	2200      	movs	r2, #0
 8000520:	0019      	movs	r1, r3
 8000522:	f001 fccd 	bl	8001ec0 <HAL_GPIO_WritePin>
		}
		//HAL_Delay(delay);
		HAL_GPIO_WritePin(ADF_CLK_GPIO_Port, ADF_CLK_Pin, GPIO_PIN_SET);
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <myspi+0xcc>)
 8000528:	2201      	movs	r2, #1
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	0018      	movs	r0, r3
 800052e:	f001 fcc7 	bl	8001ec0 <HAL_GPIO_WritePin>
		data = data << 1;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 32; i++) {
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	3301      	adds	r3, #1
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	2b1f      	cmp	r3, #31
 8000542:	ddd8      	ble.n	80004f6 <myspi+0x4e>
	}
	HAL_GPIO_WritePin(ADF_LE_GPIO_Port, ADF_LE_Pin, GPIO_PIN_SET);
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	480a      	ldr	r0, [pc, #40]	; (8000574 <myspi+0xcc>)
 800054a:	2201      	movs	r2, #1
 800054c:	0019      	movs	r1, r3
 800054e:	f001 fcb7 	bl	8001ec0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADF_LE_GPIO_Port, ADF_LE_Pin, GPIO_PIN_RESET);
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4807      	ldr	r0, [pc, #28]	; (8000574 <myspi+0xcc>)
 8000558:	2200      	movs	r2, #0
 800055a:	0019      	movs	r1, r3
 800055c:	f001 fcb0 	bl	8001ec0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADF_CLK_GPIO_Port, ADF_CLK_Pin, GPIO_PIN_RESET);
 8000560:	4b04      	ldr	r3, [pc, #16]	; (8000574 <myspi+0xcc>)
 8000562:	2200      	movs	r2, #0
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	0018      	movs	r0, r3
 8000568:	f001 fcaa 	bl	8001ec0 <HAL_GPIO_WritePin>

}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b004      	add	sp, #16
 8000572:	bd80      	pop	{r7, pc}
 8000574:	50000800 	.word	0x50000800
 8000578:	40021000 	.word	0x40021000

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b095      	sub	sp, #84	; 0x54
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int count = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	64fb      	str	r3, [r7, #76]	; 0x4c
	int countb = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	64bb      	str	r3, [r7, #72]	; 0x48
    uint8_t onebyte[1];
    uint8_t header[4] = {170, 170, 170, 3};
 800058a:	2340      	movs	r3, #64	; 0x40
 800058c:	18fb      	adds	r3, r7, r3
 800058e:	4a6f      	ldr	r2, [pc, #444]	; (800074c <main+0x1d0>)
 8000590:	601a      	str	r2, [r3, #0]
    uint8_t data[58];
    bool dt = false;
 8000592:	2347      	movs	r3, #71	; 0x47
 8000594:	18fb      	adds	r3, r7, r3
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fde1 	bl	8001160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f8e9 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 faf1 	bl	8000b88 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a6:	f000 fad1 	bl	8000b4c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005aa:	f000 f9e3 	bl	8000974 <MX_LPUART1_UART_Init>
  MX_ADC_Init();
 80005ae:	f000 f95d 	bl	800086c <MX_ADC_Init>
  MX_USART1_UART_Init();
 80005b2:	f000 fa0d 	bl	80009d0 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80005b6:	f000 fa3b 	bl	8000a30 <MX_SPI1_Init>
  MX_TIM21_Init();
 80005ba:	f000 fa71 	bl	8000aa0 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(DC_boost_GPIO_Port, DC_boost_Pin, GPIO_PIN_SET);
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	0159      	lsls	r1, r3, #5
 80005c2:	23a0      	movs	r3, #160	; 0xa0
 80005c4:	05db      	lsls	r3, r3, #23
 80005c6:	2201      	movs	r2, #1
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 fc79 	bl	8001ec0 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80005ce:	20c8      	movs	r0, #200	; 0xc8
 80005d0:	f000 fe36 	bl	8001240 <HAL_Delay>
 //HAL_GPIO_WritePin(Battery_on_GPIO_Port, Battery_on_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(RADIO_EN_GPIO_Port, RADIO_EN_Pin, GPIO_PIN_RESET);
 80005d4:	2380      	movs	r3, #128	; 0x80
 80005d6:	021b      	lsls	r3, r3, #8
 80005d8:	485d      	ldr	r0, [pc, #372]	; (8000750 <main+0x1d4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	0019      	movs	r1, r3
 80005de:	f001 fc6f 	bl	8001ec0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPS_ON_GPIO_Port, GPS_ON_Pin, GPIO_PIN_SET);
 80005e2:	2380      	movs	r3, #128	; 0x80
 80005e4:	01db      	lsls	r3, r3, #7
 80005e6:	485a      	ldr	r0, [pc, #360]	; (8000750 <main+0x1d4>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	0019      	movs	r1, r3
 80005ec:	f001 fc68 	bl	8001ec0 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80005f0:	20c8      	movs	r0, #200	; 0xc8
 80005f2:	f000 fe25 	bl	8001240 <HAL_Delay>

  	//activeMode++;

  myspi(0b00000000000000000010000000100010);
 80005f6:	4b57      	ldr	r3, [pc, #348]	; (8000754 <main+0x1d8>)
 80005f8:	0018      	movs	r0, r3
 80005fa:	f7ff ff55 	bl	80004a8 <myspi>
  myspi(0b00000000011101000001100010101111);
 80005fe:	4b56      	ldr	r3, [pc, #344]	; (8000758 <main+0x1dc>)
 8000600:	0018      	movs	r0, r3
 8000602:	f7ff ff51 	bl	80004a8 <myspi>
  myspi(0b00000011110001000010000001001100);
 8000606:	4b55      	ldr	r3, [pc, #340]	; (800075c <main+0x1e0>)
 8000608:	0018      	movs	r0, r3
 800060a:	f7ff ff4d 	bl	80004a8 <myspi>
  myspi(0b00000000000011011111000011001101);
 800060e:	4b54      	ldr	r3, [pc, #336]	; (8000760 <main+0x1e4>)
 8000610:	0018      	movs	r0, r3
 8000612:	f7ff ff49 	bl	80004a8 <myspi>

  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000616:	2380      	movs	r3, #128	; 0x80
 8000618:	01db      	lsls	r3, r3, #7
 800061a:	4a52      	ldr	r2, [pc, #328]	; (8000764 <main+0x1e8>)
 800061c:	0019      	movs	r1, r3
 800061e:	0010      	movs	r0, r2
 8000620:	f001 fc6b 	bl	8001efa <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 8000624:	20c8      	movs	r0, #200	; 0xc8
 8000626:	f000 fe0b 	bl	8001240 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800062a:	2380      	movs	r3, #128	; 0x80
 800062c:	01db      	lsls	r3, r3, #7
 800062e:	4a4d      	ldr	r2, [pc, #308]	; (8000764 <main+0x1e8>)
 8000630:	0019      	movs	r1, r3
 8000632:	0010      	movs	r0, r2
 8000634:	f001 fc61 	bl	8001efa <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 8000638:	20c8      	movs	r0, #200	; 0xc8
 800063a:	f000 fe01 	bl	8001240 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800063e:	2380      	movs	r3, #128	; 0x80
 8000640:	01db      	lsls	r3, r3, #7
 8000642:	4a48      	ldr	r2, [pc, #288]	; (8000764 <main+0x1e8>)
 8000644:	0019      	movs	r1, r3
 8000646:	0010      	movs	r0, r2
 8000648:	f001 fc57 	bl	8001efa <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 800064c:	20c8      	movs	r0, #200	; 0xc8
 800064e:	f000 fdf7 	bl	8001240 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	01db      	lsls	r3, r3, #7
 8000656:	4a43      	ldr	r2, [pc, #268]	; (8000764 <main+0x1e8>)
 8000658:	0019      	movs	r1, r3
 800065a:	0010      	movs	r0, r2
 800065c:	f001 fc4d 	bl	8001efa <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 8000660:	20c8      	movs	r0, #200	; 0xc8
 8000662:	f000 fded 	bl	8001240 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000666:	2380      	movs	r3, #128	; 0x80
 8000668:	01db      	lsls	r3, r3, #7
 800066a:	4a3e      	ldr	r2, [pc, #248]	; (8000764 <main+0x1e8>)
 800066c:	0019      	movs	r1, r3
 800066e:	0010      	movs	r0, r2
 8000670:	f001 fc43 	bl	8001efa <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 8000674:	20c8      	movs	r0, #200	; 0xc8
 8000676:	f000 fde3 	bl	8001240 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	01db      	lsls	r3, r3, #7
 800067e:	4a39      	ldr	r2, [pc, #228]	; (8000764 <main+0x1e8>)
 8000680:	0019      	movs	r1, r3
 8000682:	0010      	movs	r0, r2
 8000684:	f001 fc39 	bl	8001efa <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 8000688:	20c8      	movs	r0, #200	; 0xc8
 800068a:	f000 fdd9 	bl	8001240 <HAL_Delay>
  HAL_UART_Transmit_IT(&huart1, "START\n", 6);
 800068e:	4936      	ldr	r1, [pc, #216]	; (8000768 <main+0x1ec>)
 8000690:	4b36      	ldr	r3, [pc, #216]	; (800076c <main+0x1f0>)
 8000692:	2206      	movs	r2, #6
 8000694:	0018      	movs	r0, r3
 8000696:	f003 f999 	bl	80039cc <HAL_UART_Transmit_IT>
  /* USER CODE BEGIN WHILE */
  while (1){
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
        if(HAL_OK == HAL_UART_Receive(&hlpuart1,onebyte,1,10)){
 800069a:	2444      	movs	r4, #68	; 0x44
 800069c:	1939      	adds	r1, r7, r4
 800069e:	4834      	ldr	r0, [pc, #208]	; (8000770 <main+0x1f4>)
 80006a0:	230a      	movs	r3, #10
 80006a2:	2201      	movs	r2, #1
 80006a4:	f003 f8ac 	bl	8003800 <HAL_UART_Receive>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d1f6      	bne.n	800069a <main+0x11e>
            HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin);
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	01db      	lsls	r3, r3, #7
 80006b0:	4a2c      	ldr	r2, [pc, #176]	; (8000764 <main+0x1e8>)
 80006b2:	0019      	movs	r1, r3
 80006b4:	0010      	movs	r0, r2
 80006b6:	f001 fc20 	bl	8001efa <HAL_GPIO_TogglePin>
            if(dt){
 80006ba:	2347      	movs	r3, #71	; 0x47
 80006bc:	18fb      	adds	r3, r7, r3
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d021      	beq.n	8000708 <main+0x18c>
            	if(countb < 58){
 80006c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006c6:	2b39      	cmp	r3, #57	; 0x39
 80006c8:	dc0a      	bgt.n	80006e0 <main+0x164>
            		data[countb]=onebyte[0];
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	7819      	ldrb	r1, [r3, #0]
 80006ce:	1d3a      	adds	r2, r7, #4
 80006d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006d2:	18d3      	adds	r3, r2, r3
 80006d4:	1c0a      	adds	r2, r1, #0
 80006d6:	701a      	strb	r2, [r3, #0]
            		countb++;
 80006d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006da:	3301      	adds	r3, #1
 80006dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80006de:	e02d      	b.n	800073c <main+0x1c0>
            	}else{
            		countb=0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	64bb      	str	r3, [r7, #72]	; 0x48
            		HAL_UART_Transmit(&huart1, header, 4,10);
 80006e4:	2340      	movs	r3, #64	; 0x40
 80006e6:	18f9      	adds	r1, r7, r3
 80006e8:	4820      	ldr	r0, [pc, #128]	; (800076c <main+0x1f0>)
 80006ea:	230a      	movs	r3, #10
 80006ec:	2204      	movs	r2, #4
 80006ee:	f002 ffe7 	bl	80036c0 <HAL_UART_Transmit>
            		HAL_UART_Transmit(&huart1, data, 58,10);
 80006f2:	1d39      	adds	r1, r7, #4
 80006f4:	481d      	ldr	r0, [pc, #116]	; (800076c <main+0x1f0>)
 80006f6:	230a      	movs	r3, #10
 80006f8:	223a      	movs	r2, #58	; 0x3a
 80006fa:	f002 ffe1 	bl	80036c0 <HAL_UART_Transmit>
            		dt = false;
 80006fe:	2347      	movs	r3, #71	; 0x47
 8000700:	18fb      	adds	r3, r7, r3
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
 8000706:	e019      	b.n	800073c <main+0x1c0>
            	}
            }else{
            	if(onebyte[0] == header[count]){
 8000708:	2344      	movs	r3, #68	; 0x44
 800070a:	18fb      	adds	r3, r7, r3
 800070c:	781a      	ldrb	r2, [r3, #0]
 800070e:	2340      	movs	r3, #64	; 0x40
 8000710:	18f9      	adds	r1, r7, r3
 8000712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000714:	18cb      	adds	r3, r1, r3
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	429a      	cmp	r2, r3
 800071a:	d10d      	bne.n	8000738 <main+0x1bc>
            		if(count == 3){
 800071c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800071e:	2b03      	cmp	r3, #3
 8000720:	d106      	bne.n	8000730 <main+0x1b4>
            			dt = true;
 8000722:	2347      	movs	r3, #71	; 0x47
 8000724:	18fb      	adds	r3, r7, r3
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]
            			count = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800072e:	e005      	b.n	800073c <main+0x1c0>
            		}else{
            			count++;
 8000730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000732:	3301      	adds	r3, #1
 8000734:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000736:	e001      	b.n	800073c <main+0x1c0>
            		}
        		}else{
        			count = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	64fb      	str	r3, [r7, #76]	; 0x4c
        		}
        	}
            //HAL_UART_Transmit(&huart1, onebyte, 1,10);
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	01db      	lsls	r3, r3, #7
 8000740:	4a08      	ldr	r2, [pc, #32]	; (8000764 <main+0x1e8>)
 8000742:	0019      	movs	r1, r3
 8000744:	0010      	movs	r0, r2
 8000746:	f001 fbd8 	bl	8001efa <HAL_GPIO_TogglePin>
        if(HAL_OK == HAL_UART_Receive(&hlpuart1,onebyte,1,10)){
 800074a:	e7a6      	b.n	800069a <main+0x11e>
 800074c:	03aaaaaa 	.word	0x03aaaaaa
 8000750:	50000400 	.word	0x50000400
 8000754:	00002022 	.word	0x00002022
 8000758:	007418af 	.word	0x007418af
 800075c:	03c4204c 	.word	0x03c4204c
 8000760:	000df0cd 	.word	0x000df0cd
 8000764:	50000800 	.word	0x50000800
 8000768:	08004c78 	.word	0x08004c78
 800076c:	2000010c 	.word	0x2000010c
 8000770:	20000084 	.word	0x20000084

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b09b      	sub	sp, #108	; 0x6c
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	2434      	movs	r4, #52	; 0x34
 800077c:	193b      	adds	r3, r7, r4
 800077e:	0018      	movs	r0, r3
 8000780:	2334      	movs	r3, #52	; 0x34
 8000782:	001a      	movs	r2, r3
 8000784:	2100      	movs	r1, #0
 8000786:	f004 fa3e 	bl	8004c06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078a:	2320      	movs	r3, #32
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	0018      	movs	r0, r3
 8000790:	2314      	movs	r3, #20
 8000792:	001a      	movs	r2, r3
 8000794:	2100      	movs	r1, #0
 8000796:	f004 fa36 	bl	8004c06 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	0018      	movs	r0, r3
 800079e:	231c      	movs	r3, #28
 80007a0:	001a      	movs	r2, r3
 80007a2:	2100      	movs	r1, #0
 80007a4:	f004 fa2f 	bl	8004c06 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a8:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <SystemClock_Config+0xf0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a2e      	ldr	r2, [pc, #184]	; (8000868 <SystemClock_Config+0xf4>)
 80007ae:	401a      	ands	r2, r3
 80007b0:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <SystemClock_Config+0xf0>)
 80007b2:	2180      	movs	r1, #128	; 0x80
 80007b4:	0109      	lsls	r1, r1, #4
 80007b6:	430a      	orrs	r2, r1
 80007b8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ba:	0021      	movs	r1, r4
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2201      	movs	r2, #1
 80007c0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	0252      	lsls	r2, r2, #9
 80007c8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2202      	movs	r2, #2
 80007ce:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2280      	movs	r2, #128	; 0x80
 80007d4:	0252      	lsls	r2, r2, #9
 80007d6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2200      	movs	r2, #0
 80007dc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	0412      	lsls	r2, r2, #16
 80007e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	0018      	movs	r0, r3
 80007ea:	f001 fba1 	bl	8001f30 <HAL_RCC_OscConfig>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007f2:	f000 fabf 	bl	8000d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f6:	2120      	movs	r1, #32
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	220f      	movs	r2, #15
 80007fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2203      	movs	r2, #3
 8000802:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2100      	movs	r1, #0
 800081a:	0018      	movs	r0, r3
 800081c:	f001 fef2 	bl	8002604 <HAL_RCC_ClockConfig>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000824:	f000 faa6 	bl	8000d74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2205      	movs	r2, #5
 800082c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	0018      	movs	r0, r3
 800083e:	f002 f9b3 	bl	8002ba8 <HAL_RCCEx_PeriphCLKConfig>
 8000842:	1e03      	subs	r3, r0, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000846:	f000 fa95 	bl	8000d74 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 800084a:	2380      	movs	r3, #128	; 0x80
 800084c:	045b      	lsls	r3, r3, #17
 800084e:	2200      	movs	r2, #0
 8000850:	0019      	movs	r1, r3
 8000852:	2000      	movs	r0, #0
 8000854:	f002 f81e 	bl	8002894 <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000858:	f002 f8a0 	bl	800299c <HAL_RCC_EnableCSS>
}
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	b01b      	add	sp, #108	; 0x6c
 8000862:	bd90      	pop	{r4, r7, pc}
 8000864:	40007000 	.word	0x40007000
 8000868:	ffffe7ff 	.word	0xffffe7ff

0800086c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000872:	003b      	movs	r3, r7
 8000874:	0018      	movs	r0, r3
 8000876:	2308      	movs	r3, #8
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f004 f9c3 	bl	8004c06 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000880:	4b37      	ldr	r3, [pc, #220]	; (8000960 <MX_ADC_Init+0xf4>)
 8000882:	4a38      	ldr	r2, [pc, #224]	; (8000964 <MX_ADC_Init+0xf8>)
 8000884:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000886:	4b36      	ldr	r3, [pc, #216]	; (8000960 <MX_ADC_Init+0xf4>)
 8000888:	2200      	movs	r2, #0
 800088a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800088c:	4b34      	ldr	r3, [pc, #208]	; (8000960 <MX_ADC_Init+0xf4>)
 800088e:	22c0      	movs	r2, #192	; 0xc0
 8000890:	0612      	lsls	r2, r2, #24
 8000892:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000894:	4b32      	ldr	r3, [pc, #200]	; (8000960 <MX_ADC_Init+0xf4>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800089a:	4b31      	ldr	r3, [pc, #196]	; (8000960 <MX_ADC_Init+0xf4>)
 800089c:	2200      	movs	r2, #0
 800089e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80008a0:	4b2f      	ldr	r3, [pc, #188]	; (8000960 <MX_ADC_Init+0xf4>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a6:	4b2e      	ldr	r3, [pc, #184]	; (8000960 <MX_ADC_Init+0xf4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80008ac:	4b2c      	ldr	r3, [pc, #176]	; (8000960 <MX_ADC_Init+0xf4>)
 80008ae:	2220      	movs	r2, #32
 80008b0:	2100      	movs	r1, #0
 80008b2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80008b4:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <MX_ADC_Init+0xf4>)
 80008b6:	2221      	movs	r2, #33	; 0x21
 80008b8:	2100      	movs	r1, #0
 80008ba:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008bc:	4b28      	ldr	r3, [pc, #160]	; (8000960 <MX_ADC_Init+0xf4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c2:	4b27      	ldr	r3, [pc, #156]	; (8000960 <MX_ADC_Init+0xf4>)
 80008c4:	22c2      	movs	r2, #194	; 0xc2
 80008c6:	32ff      	adds	r2, #255	; 0xff
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80008ca:	4b25      	ldr	r3, [pc, #148]	; (8000960 <MX_ADC_Init+0xf4>)
 80008cc:	222c      	movs	r2, #44	; 0x2c
 80008ce:	2100      	movs	r1, #0
 80008d0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d2:	4b23      	ldr	r3, [pc, #140]	; (8000960 <MX_ADC_Init+0xf4>)
 80008d4:	2204      	movs	r2, #4
 80008d6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008d8:	4b21      	ldr	r3, [pc, #132]	; (8000960 <MX_ADC_Init+0xf4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <MX_ADC_Init+0xf4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <MX_ADC_Init+0xf4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80008ea:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_ADC_Init+0xf4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <MX_ADC_Init+0xf4>)
 80008f2:	0018      	movs	r0, r3
 80008f4:	f000 fcc8 	bl	8001288 <HAL_ADC_Init>
 80008f8:	1e03      	subs	r3, r0, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80008fc:	f000 fa3a 	bl	8000d74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000900:	003b      	movs	r3, r7
 8000902:	4a19      	ldr	r2, [pc, #100]	; (8000968 <MX_ADC_Init+0xfc>)
 8000904:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000906:	003b      	movs	r3, r7
 8000908:	2280      	movs	r2, #128	; 0x80
 800090a:	0152      	lsls	r2, r2, #5
 800090c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800090e:	003a      	movs	r2, r7
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_ADC_Init+0xf4>)
 8000912:	0011      	movs	r1, r2
 8000914:	0018      	movs	r0, r3
 8000916:	f000 fe2b 	bl	8001570 <HAL_ADC_ConfigChannel>
 800091a:	1e03      	subs	r3, r0, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800091e:	f000 fa29 	bl	8000d74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000922:	003b      	movs	r3, r7
 8000924:	4a11      	ldr	r2, [pc, #68]	; (800096c <MX_ADC_Init+0x100>)
 8000926:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000928:	003a      	movs	r2, r7
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <MX_ADC_Init+0xf4>)
 800092c:	0011      	movs	r1, r2
 800092e:	0018      	movs	r0, r3
 8000930:	f000 fe1e 	bl	8001570 <HAL_ADC_ConfigChannel>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d001      	beq.n	800093c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000938:	f000 fa1c 	bl	8000d74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800093c:	003b      	movs	r3, r7
 800093e:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <MX_ADC_Init+0x104>)
 8000940:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000942:	003a      	movs	r2, r7
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_ADC_Init+0xf4>)
 8000946:	0011      	movs	r1, r2
 8000948:	0018      	movs	r0, r3
 800094a:	f000 fe11 	bl	8001570 <HAL_ADC_ConfigChannel>
 800094e:	1e03      	subs	r3, r0, #0
 8000950:	d001      	beq.n	8000956 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000952:	f000 fa0f 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b002      	add	sp, #8
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	20000028 	.word	0x20000028
 8000964:	40012400 	.word	0x40012400
 8000968:	24000200 	.word	0x24000200
 800096c:	34002000 	.word	0x34002000
 8000970:	38004000 	.word	0x38004000

08000974 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_LPUART1_UART_Init+0x54>)
 800097a:	4a14      	ldr	r2, [pc, #80]	; (80009cc <MX_LPUART1_UART_Init+0x58>)
 800097c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 38400;
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_LPUART1_UART_Init+0x54>)
 8000980:	2296      	movs	r2, #150	; 0x96
 8000982:	0212      	lsls	r2, r2, #8
 8000984:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <MX_LPUART1_UART_Init+0x54>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_LPUART1_UART_Init+0x54>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <MX_LPUART1_UART_Init+0x54>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_LPUART1_UART_Init+0x54>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_LPUART1_UART_Init+0x54>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_LPUART1_UART_Init+0x54>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009aa:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <MX_LPUART1_UART_Init+0x54>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <MX_LPUART1_UART_Init+0x54>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f002 fe30 	bl	8003618 <HAL_UART_Init>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80009bc:	f000 f9da 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	20000084 	.word	0x20000084
 80009cc:	40004800 	.word	0x40004800

080009d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_USART1_UART_Init+0x58>)
 80009d6:	4a15      	ldr	r2, [pc, #84]	; (8000a2c <MX_USART1_UART_Init+0x5c>)
 80009d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <MX_USART1_UART_Init+0x58>)
 80009dc:	22e1      	movs	r2, #225	; 0xe1
 80009de:	0252      	lsls	r2, r2, #9
 80009e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_USART1_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_USART1_UART_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_USART1_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_USART1_UART_Init+0x58>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_USART1_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_USART1_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_USART1_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_USART1_UART_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <MX_USART1_UART_Init+0x58>)
 8000a14:	0018      	movs	r0, r3
 8000a16:	f002 fdff 	bl	8003618 <HAL_UART_Init>
 8000a1a:	1e03      	subs	r3, r0, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a1e:	f000 f9a9 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2000010c 	.word	0x2000010c
 8000a2c:	40013800 	.word	0x40013800

08000a30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a36:	4a19      	ldr	r2, [pc, #100]	; (8000a9c <MX_SPI1_Init+0x6c>)
 8000a38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a3c:	2282      	movs	r2, #130	; 0x82
 8000a3e:	0052      	lsls	r2, r2, #1
 8000a40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a5c:	2280      	movs	r2, #128	; 0x80
 8000a5e:	02d2      	lsls	r2, r2, #11
 8000a60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a7a:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <MX_SPI1_Init+0x68>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f002 f9ca 	bl	8002e1c <HAL_SPI_Init>
 8000a88:	1e03      	subs	r3, r0, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a8c:	f000 f972 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	200001dc 	.word	0x200001dc
 8000a9c:	40013000 	.word	0x40013000

08000aa0 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa6:	2308      	movs	r3, #8
 8000aa8:	18fb      	adds	r3, r7, r3
 8000aaa:	0018      	movs	r0, r3
 8000aac:	2310      	movs	r3, #16
 8000aae:	001a      	movs	r2, r3
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	f004 f8a8 	bl	8004c06 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab6:	003b      	movs	r3, r7
 8000ab8:	0018      	movs	r0, r3
 8000aba:	2308      	movs	r3, #8
 8000abc:	001a      	movs	r2, r3
 8000abe:	2100      	movs	r1, #0
 8000ac0:	f004 f8a1 	bl	8004c06 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <MX_TIM21_Init+0xa0>)
 8000ac6:	4a1f      	ldr	r2, [pc, #124]	; (8000b44 <MX_TIM21_Init+0xa4>)
 8000ac8:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8000aca:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_TIM21_Init+0xa0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_TIM21_Init+0xa0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_TIM21_Init+0xa0>)
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <MX_TIM21_Init+0xa8>)
 8000ada:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_TIM21_Init+0xa0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <MX_TIM21_Init+0xa0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_TIM21_Init+0xa0>)
 8000aea:	0018      	movs	r0, r3
 8000aec:	f002 fa2a 	bl	8002f44 <HAL_TIM_Base_Init>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000af4:	f000 f93e 	bl	8000d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af8:	2108      	movs	r1, #8
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2280      	movs	r2, #128	; 0x80
 8000afe:	0152      	lsls	r2, r2, #5
 8000b00:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000b02:	187a      	adds	r2, r7, r1
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_TIM21_Init+0xa0>)
 8000b06:	0011      	movs	r1, r2
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f002 fb43 	bl	8003194 <HAL_TIM_ConfigClockSource>
 8000b0e:	1e03      	subs	r3, r0, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 8000b12:	f000 f92f 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b16:	003b      	movs	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	003b      	movs	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000b22:	003a      	movs	r2, r7
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_TIM21_Init+0xa0>)
 8000b26:	0011      	movs	r1, r2
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f002 fd1d 	bl	8003568 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8000b32:	f000 f91f 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b006      	add	sp, #24
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	20000234 	.word	0x20000234
 8000b44:	40010800 	.word	0x40010800
 8000b48:	0000ffff 	.word	0x0000ffff

08000b4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_DMA_Init+0x38>)
 8000b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_DMA_Init+0x38>)
 8000b58:	2101      	movs	r1, #1
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	631a      	str	r2, [r3, #48]	; 0x30
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_DMA_Init+0x38>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	2201      	movs	r2, #1
 8000b64:	4013      	ands	r3, r2
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	200a      	movs	r0, #10
 8000b70:	f000 fe50 	bl	8001814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000b74:	200a      	movs	r0, #10
 8000b76:	f000 fe62 	bl	800183e <HAL_NVIC_EnableIRQ>

}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b002      	add	sp, #8
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	40021000 	.word	0x40021000

08000b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b08b      	sub	sp, #44	; 0x2c
 8000b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	2414      	movs	r4, #20
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	0018      	movs	r0, r3
 8000b94:	2314      	movs	r3, #20
 8000b96:	001a      	movs	r2, r3
 8000b98:	2100      	movs	r1, #0
 8000b9a:	f004 f834 	bl	8004c06 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9e:	4b6e      	ldr	r3, [pc, #440]	; (8000d58 <MX_GPIO_Init+0x1d0>)
 8000ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ba2:	4b6d      	ldr	r3, [pc, #436]	; (8000d58 <MX_GPIO_Init+0x1d0>)
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000baa:	4b6b      	ldr	r3, [pc, #428]	; (8000d58 <MX_GPIO_Init+0x1d0>)
 8000bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bae:	2204      	movs	r2, #4
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb6:	4b68      	ldr	r3, [pc, #416]	; (8000d58 <MX_GPIO_Init+0x1d0>)
 8000bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bba:	4b67      	ldr	r3, [pc, #412]	; (8000d58 <MX_GPIO_Init+0x1d0>)
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bc2:	4b65      	ldr	r3, [pc, #404]	; (8000d58 <MX_GPIO_Init+0x1d0>)
 8000bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b62      	ldr	r3, [pc, #392]	; (8000d58 <MX_GPIO_Init+0x1d0>)
 8000bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bd2:	4b61      	ldr	r3, [pc, #388]	; (8000d58 <MX_GPIO_Init+0x1d0>)
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bda:	4b5f      	ldr	r3, [pc, #380]	; (8000d58 <MX_GPIO_Init+0x1d0>)
 8000bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bde:	2201      	movs	r2, #1
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	4b5c      	ldr	r3, [pc, #368]	; (8000d58 <MX_GPIO_Init+0x1d0>)
 8000be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bea:	4b5b      	ldr	r3, [pc, #364]	; (8000d58 <MX_GPIO_Init+0x1d0>)
 8000bec:	2102      	movs	r1, #2
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bf2:	4b59      	ldr	r3, [pc, #356]	; (8000d58 <MX_GPIO_Init+0x1d0>)
 8000bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	4b56      	ldr	r3, [pc, #344]	; (8000d58 <MX_GPIO_Init+0x1d0>)
 8000c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c02:	4b55      	ldr	r3, [pc, #340]	; (8000d58 <MX_GPIO_Init+0x1d0>)
 8000c04:	2108      	movs	r1, #8
 8000c06:	430a      	orrs	r2, r1
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c0a:	4b53      	ldr	r3, [pc, #332]	; (8000d58 <MX_GPIO_Init+0x1d0>)
 8000c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0e:	2208      	movs	r2, #8
 8000c10:	4013      	ands	r3, r2
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|EXPANSION_1_Pin|EXPANSION_2_Pin|Temp_EN_Pin
 8000c16:	4951      	ldr	r1, [pc, #324]	; (8000d5c <MX_GPIO_Init+0x1d4>)
 8000c18:	4b51      	ldr	r3, [pc, #324]	; (8000d60 <MX_GPIO_Init+0x1d8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f001 f94f 	bl	8001ec0 <HAL_GPIO_WritePin>
                          |ADF_CLK_Pin|ADF_Data_Pin|ADF_LE_Pin|Heater_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EXPANSION_4_Pin|EXPANSION_PS_Pin|DC_boost_Pin, GPIO_PIN_RESET);
 8000c22:	4950      	ldr	r1, [pc, #320]	; (8000d64 <MX_GPIO_Init+0x1dc>)
 8000c24:	23a0      	movs	r3, #160	; 0xa0
 8000c26:	05db      	lsls	r3, r3, #23
 8000c28:	2200      	movs	r2, #0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f001 f948 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RF_Boost_Pin|ADF_TX_Data_Pin|GPS_ON_Pin|RADIO_EN_Pin
 8000c30:	494d      	ldr	r1, [pc, #308]	; (8000d68 <MX_GPIO_Init+0x1e0>)
 8000c32:	4b4e      	ldr	r3, [pc, #312]	; (8000d6c <MX_GPIO_Init+0x1e4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	0018      	movs	r0, r3
 8000c38:	f001 f942 	bl	8001ec0 <HAL_GPIO_WritePin>
                          |Trmp_R4_Pin|Temp_R2_Pin|Temp_R1_Pin|EXPANSION_3_Pin
                          |Temp_R5_Pin|Temp_R3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Battery_on_GPIO_Port, Battery_on_Pin, GPIO_PIN_RESET);
 8000c3c:	4b4c      	ldr	r3, [pc, #304]	; (8000d70 <MX_GPIO_Init+0x1e8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2104      	movs	r1, #4
 8000c42:	0018      	movs	r0, r3
 8000c44:	f001 f93c 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_Pin TL555_in_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|TL555_in_Pin;
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	2281      	movs	r2, #129	; 0x81
 8000c4c:	0192      	lsls	r2, r2, #6
 8000c4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	2200      	movs	r2, #0
 8000c54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	193b      	adds	r3, r7, r4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	4a40      	ldr	r2, [pc, #256]	; (8000d60 <MX_GPIO_Init+0x1d8>)
 8000c60:	0019      	movs	r1, r3
 8000c62:	0010      	movs	r0, r2
 8000c64:	f000 ffb6 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin EXPANSION_1_Pin EXPANSION_2_Pin Temp_EN_Pin
                           ADF_CLK_Pin ADF_Data_Pin ADF_LE_Pin Heater_Pin */
  GPIO_InitStruct.Pin = LED_Pin|EXPANSION_1_Pin|EXPANSION_2_Pin|Temp_EN_Pin
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	4a3c      	ldr	r2, [pc, #240]	; (8000d5c <MX_GPIO_Init+0x1d4>)
 8000c6c:	601a      	str	r2, [r3, #0]
                          |ADF_CLK_Pin|ADF_Data_Pin|ADF_LE_Pin|Heater_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	2201      	movs	r2, #1
 8000c72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c80:	193b      	adds	r3, r7, r4
 8000c82:	4a37      	ldr	r2, [pc, #220]	; (8000d60 <MX_GPIO_Init+0x1d8>)
 8000c84:	0019      	movs	r1, r3
 8000c86:	0010      	movs	r0, r2
 8000c88:	f000 ffa4 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_RX_Pin */
  GPIO_InitStruct.Pin = IR_RX_Pin;
 8000c8c:	193b      	adds	r3, r7, r4
 8000c8e:	2202      	movs	r2, #2
 8000c90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	2200      	movs	r2, #0
 8000c96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	193b      	adds	r3, r7, r4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IR_RX_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	193a      	adds	r2, r7, r4
 8000ca0:	23a0      	movs	r3, #160	; 0xa0
 8000ca2:	05db      	lsls	r3, r3, #23
 8000ca4:	0011      	movs	r1, r2
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f000 ff94 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXPANSION_4_Pin EXPANSION_PS_Pin DC_boost_Pin */
  GPIO_InitStruct.Pin = EXPANSION_4_Pin|EXPANSION_PS_Pin|DC_boost_Pin;
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	4a2d      	ldr	r2, [pc, #180]	; (8000d64 <MX_GPIO_Init+0x1dc>)
 8000cb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	193b      	adds	r3, r7, r4
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	193a      	adds	r2, r7, r4
 8000cc6:	23a0      	movs	r3, #160	; 0xa0
 8000cc8:	05db      	lsls	r3, r3, #23
 8000cca:	0011      	movs	r1, r2
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f000 ff81 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_Boost_Pin ADF_TX_Data_Pin GPS_ON_Pin RADIO_EN_Pin
                           Trmp_R4_Pin Temp_R2_Pin Temp_R1_Pin EXPANSION_3_Pin
                           Temp_R5_Pin Temp_R3_Pin */
  GPIO_InitStruct.Pin = RF_Boost_Pin|ADF_TX_Data_Pin|GPS_ON_Pin|RADIO_EN_Pin
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	4a24      	ldr	r2, [pc, #144]	; (8000d68 <MX_GPIO_Init+0x1e0>)
 8000cd6:	601a      	str	r2, [r3, #0]
                          |Trmp_R4_Pin|Temp_R2_Pin|Temp_R1_Pin|EXPANSION_3_Pin
                          |Temp_R5_Pin|Temp_R3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	193b      	adds	r3, r7, r4
 8000cda:	2201      	movs	r2, #1
 8000cdc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	193b      	adds	r3, r7, r4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	193b      	adds	r3, r7, r4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	4a1f      	ldr	r2, [pc, #124]	; (8000d6c <MX_GPIO_Init+0x1e4>)
 8000cee:	0019      	movs	r1, r3
 8000cf0:	0010      	movs	r0, r2
 8000cf2:	f000 ff6f 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cf6:	0021      	movs	r1, r4
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2280      	movs	r2, #128	; 0x80
 8000cfc:	0052      	lsls	r2, r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	000c      	movs	r4, r1
 8000d02:	193b      	adds	r3, r7, r4
 8000d04:	2202      	movs	r2, #2
 8000d06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	193b      	adds	r3, r7, r4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	193a      	adds	r2, r7, r4
 8000d1c:	23a0      	movs	r3, #160	; 0xa0
 8000d1e:	05db      	lsls	r3, r3, #23
 8000d20:	0011      	movs	r1, r2
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 ff56 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Battery_on_Pin */
  GPIO_InitStruct.Pin = Battery_on_Pin;
 8000d28:	0021      	movs	r1, r4
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2201      	movs	r2, #1
 8000d34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Battery_on_GPIO_Port, &GPIO_InitStruct);
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <MX_GPIO_Init+0x1e8>)
 8000d46:	0019      	movs	r1, r3
 8000d48:	0010      	movs	r0, r2
 8000d4a:	f000 ff43 	bl	8001bd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b00b      	add	sp, #44	; 0x2c
 8000d54:	bd90      	pop	{r4, r7, pc}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	000053a3 	.word	0x000053a3
 8000d60:	50000800 	.word	0x50000800
 8000d64:	0000100c 	.word	0x0000100c
 8000d68:	0000f3f0 	.word	0x0000f3f0
 8000d6c:	50000400 	.word	0x50000400
 8000d70:	50000c00 	.word	0x50000c00

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <Error_Handler+0x8>
	...

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <HAL_MspInit+0x24>)
 8000d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_MspInit+0x24>)
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <HAL_MspInit+0x24>)
 8000d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <HAL_MspInit+0x24>)
 8000d96:	2180      	movs	r1, #128	; 0x80
 8000d98:	0549      	lsls	r1, r1, #21
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40021000 	.word	0x40021000

08000da8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b08b      	sub	sp, #44	; 0x2c
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	2414      	movs	r4, #20
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	0018      	movs	r0, r3
 8000db6:	2314      	movs	r3, #20
 8000db8:	001a      	movs	r2, r3
 8000dba:	2100      	movs	r1, #0
 8000dbc:	f003 ff23 	bl	8004c06 <memset>
  if(hadc->Instance==ADC1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a22      	ldr	r2, [pc, #136]	; (8000e50 <HAL_ADC_MspInit+0xa8>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d13d      	bne.n	8000e46 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <HAL_ADC_MspInit+0xac>)
 8000dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dce:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <HAL_ADC_MspInit+0xac>)
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	0089      	lsls	r1, r1, #2
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd8:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <HAL_ADC_MspInit+0xac>)
 8000dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <HAL_ADC_MspInit+0xac>)
 8000dde:	2104      	movs	r1, #4
 8000de0:	430a      	orrs	r2, r1
 8000de2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000de4:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <HAL_ADC_MspInit+0xac>)
 8000de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de8:	2204      	movs	r2, #4
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df0:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <HAL_ADC_MspInit+0xac>)
 8000df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <HAL_ADC_MspInit+0xac>)
 8000df6:	2102      	movs	r1, #2
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <HAL_ADC_MspInit+0xac>)
 8000dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e00:	2202      	movs	r2, #2
 8000e02:	4013      	ands	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC3     ------> ADC_IN13
    PC4     ------> ADC_IN14
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = Heater_ADC_2_Pin|Temp_ADC_Pin;
 8000e08:	193b      	adds	r3, r7, r4
 8000e0a:	2218      	movs	r2, #24
 8000e0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0e:	193b      	adds	r3, r7, r4
 8000e10:	2203      	movs	r2, #3
 8000e12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	193b      	adds	r3, r7, r4
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <HAL_ADC_MspInit+0xb0>)
 8000e1e:	0019      	movs	r1, r3
 8000e20:	0010      	movs	r0, r2
 8000e22:	f000 fed7 	bl	8001bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Heater_ADC_1_Pin;
 8000e26:	0021      	movs	r1, r4
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2203      	movs	r2, #3
 8000e32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Heater_ADC_1_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_ADC_MspInit+0xb4>)
 8000e3e:	0019      	movs	r1, r3
 8000e40:	0010      	movs	r0, r2
 8000e42:	f000 fec7 	bl	8001bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b00b      	add	sp, #44	; 0x2c
 8000e4c:	bd90      	pop	{r4, r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	40012400 	.word	0x40012400
 8000e54:	40021000 	.word	0x40021000
 8000e58:	50000800 	.word	0x50000800
 8000e5c:	50000400 	.word	0x50000400

08000e60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b08b      	sub	sp, #44	; 0x2c
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	2414      	movs	r4, #20
 8000e6a:	193b      	adds	r3, r7, r4
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	2314      	movs	r3, #20
 8000e70:	001a      	movs	r2, r3
 8000e72:	2100      	movs	r1, #0
 8000e74:	f003 fec7 	bl	8004c06 <memset>
  if(huart->Instance==LPUART1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a49      	ldr	r2, [pc, #292]	; (8000fa4 <HAL_UART_MspInit+0x144>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d12a      	bne.n	8000ed8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e82:	4b49      	ldr	r3, [pc, #292]	; (8000fa8 <HAL_UART_MspInit+0x148>)
 8000e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e86:	4b48      	ldr	r3, [pc, #288]	; (8000fa8 <HAL_UART_MspInit+0x148>)
 8000e88:	2180      	movs	r1, #128	; 0x80
 8000e8a:	02c9      	lsls	r1, r1, #11
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e90:	4b45      	ldr	r3, [pc, #276]	; (8000fa8 <HAL_UART_MspInit+0x148>)
 8000e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e94:	4b44      	ldr	r3, [pc, #272]	; (8000fa8 <HAL_UART_MspInit+0x148>)
 8000e96:	2104      	movs	r1, #4
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e9c:	4b42      	ldr	r3, [pc, #264]	; (8000fa8 <HAL_UART_MspInit+0x148>)
 8000e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PC10     ------> LPUART1_TX
    PC11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ea8:	193b      	adds	r3, r7, r4
 8000eaa:	22c0      	movs	r2, #192	; 0xc0
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	0021      	movs	r1, r4
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_LPUART1;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	4a37      	ldr	r2, [pc, #220]	; (8000fac <HAL_UART_MspInit+0x14c>)
 8000ece:	0019      	movs	r1, r3
 8000ed0:	0010      	movs	r0, r2
 8000ed2:	f000 fe7f 	bl	8001bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ed6:	e060      	b.n	8000f9a <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a34      	ldr	r2, [pc, #208]	; (8000fb0 <HAL_UART_MspInit+0x150>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d15b      	bne.n	8000f9a <HAL_UART_MspInit+0x13a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ee2:	4b31      	ldr	r3, [pc, #196]	; (8000fa8 <HAL_UART_MspInit+0x148>)
 8000ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ee6:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <HAL_UART_MspInit+0x148>)
 8000ee8:	2180      	movs	r1, #128	; 0x80
 8000eea:	01c9      	lsls	r1, r1, #7
 8000eec:	430a      	orrs	r2, r1
 8000eee:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <HAL_UART_MspInit+0x148>)
 8000ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef4:	4b2c      	ldr	r3, [pc, #176]	; (8000fa8 <HAL_UART_MspInit+0x148>)
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	62da      	str	r2, [r3, #44]	; 0x2c
 8000efc:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <HAL_UART_MspInit+0x148>)
 8000efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f00:	2201      	movs	r2, #1
 8000f02:	4013      	ands	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f08:	2114      	movs	r1, #20
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	22c0      	movs	r2, #192	; 0xc0
 8000f0e:	00d2      	lsls	r2, r2, #3
 8000f10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2202      	movs	r2, #2
 8000f16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2203      	movs	r2, #3
 8000f22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	2204      	movs	r2, #4
 8000f28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	187a      	adds	r2, r7, r1
 8000f2c:	23a0      	movs	r3, #160	; 0xa0
 8000f2e:	05db      	lsls	r3, r3, #23
 8000f30:	0011      	movs	r1, r2
 8000f32:	0018      	movs	r0, r3
 8000f34:	f000 fe4e 	bl	8001bd4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000f38:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <HAL_UART_MspInit+0x154>)
 8000f3a:	4a1f      	ldr	r2, [pc, #124]	; (8000fb8 <HAL_UART_MspInit+0x158>)
 8000f3c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <HAL_UART_MspInit+0x154>)
 8000f40:	2203      	movs	r2, #3
 8000f42:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <HAL_UART_MspInit+0x154>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <HAL_UART_MspInit+0x154>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <HAL_UART_MspInit+0x154>)
 8000f52:	2280      	movs	r2, #128	; 0x80
 8000f54:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_UART_MspInit+0x154>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_UART_MspInit+0x154>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_UART_MspInit+0x154>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_UART_MspInit+0x154>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_UART_MspInit+0x154>)
 8000f70:	0018      	movs	r0, r3
 8000f72:	f000 fc81 	bl	8001878 <HAL_DMA_Init>
 8000f76:	1e03      	subs	r3, r0, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_UART_MspInit+0x11e>
      Error_Handler();
 8000f7a:	f7ff fefb 	bl	8000d74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a0c      	ldr	r2, [pc, #48]	; (8000fb4 <HAL_UART_MspInit+0x154>)
 8000f82:	675a      	str	r2, [r3, #116]	; 0x74
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_UART_MspInit+0x154>)
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	201b      	movs	r0, #27
 8000f90:	f000 fc40 	bl	8001814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f94:	201b      	movs	r0, #27
 8000f96:	f000 fc52 	bl	800183e <HAL_NVIC_EnableIRQ>
}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b00b      	add	sp, #44	; 0x2c
 8000fa0:	bd90      	pop	{r4, r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	40004800 	.word	0x40004800
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	50000800 	.word	0x50000800
 8000fb0:	40013800 	.word	0x40013800
 8000fb4:	20000194 	.word	0x20000194
 8000fb8:	40020030 	.word	0x40020030

08000fbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	240c      	movs	r4, #12
 8000fc6:	193b      	adds	r3, r7, r4
 8000fc8:	0018      	movs	r0, r3
 8000fca:	2314      	movs	r3, #20
 8000fcc:	001a      	movs	r2, r3
 8000fce:	2100      	movs	r1, #0
 8000fd0:	f003 fe19 	bl	8004c06 <memset>
  if(hspi->Instance==SPI1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a18      	ldr	r2, [pc, #96]	; (800103c <HAL_SPI_MspInit+0x80>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d129      	bne.n	8001032 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_SPI_MspInit+0x84>)
 8000fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_SPI_MspInit+0x84>)
 8000fe4:	2180      	movs	r1, #128	; 0x80
 8000fe6:	0149      	lsls	r1, r1, #5
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_SPI_MspInit+0x84>)
 8000fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <HAL_SPI_MspInit+0x84>)
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_SPI_MspInit+0x84>)
 8000ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4013      	ands	r3, r2
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001004:	0021      	movs	r1, r4
 8001006:	187b      	adds	r3, r7, r1
 8001008:	22f0      	movs	r2, #240	; 0xf0
 800100a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	187b      	adds	r3, r7, r1
 800100e:	2202      	movs	r2, #2
 8001010:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	187b      	adds	r3, r7, r1
 800101a:	2203      	movs	r2, #3
 800101c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800101e:	187b      	adds	r3, r7, r1
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	187a      	adds	r2, r7, r1
 8001026:	23a0      	movs	r3, #160	; 0xa0
 8001028:	05db      	lsls	r3, r3, #23
 800102a:	0011      	movs	r1, r2
 800102c:	0018      	movs	r0, r3
 800102e:	f000 fdd1 	bl	8001bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	b009      	add	sp, #36	; 0x24
 8001038:	bd90      	pop	{r4, r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	40013000 	.word	0x40013000
 8001040:	40021000 	.word	0x40021000

08001044 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0a      	ldr	r2, [pc, #40]	; (800107c <HAL_TIM_Base_MspInit+0x38>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d10d      	bne.n	8001072 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_TIM_Base_MspInit+0x3c>)
 8001058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_TIM_Base_MspInit+0x3c>)
 800105c:	2104      	movs	r1, #4
 800105e:	430a      	orrs	r2, r1
 8001060:	635a      	str	r2, [r3, #52]	; 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2014      	movs	r0, #20
 8001068:	f000 fbd4 	bl	8001814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 800106c:	2014      	movs	r0, #20
 800106e:	f000 fbe6 	bl	800183e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b002      	add	sp, #8
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	40010800 	.word	0x40010800
 8001080:	40021000 	.word	0x40021000

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001088:	f001 fd72 	bl	8002b70 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800108c:	e7fe      	b.n	800108c <NMI_Handler+0x8>

0800108e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <HardFault_Handler+0x4>

08001094 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ac:	f000 f8ac 	bl	8001208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <DMA1_Channel2_3_IRQHandler+0x14>)
 80010be:	0018      	movs	r0, r3
 80010c0:	f000 fcd9 	bl	8001a76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80010c4:	46c0      	nop			; (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	20000194 	.word	0x20000194

080010d0 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <TIM21_IRQHandler+0x14>)
 80010d6:	0018      	movs	r0, r3
 80010d8:	f001 ff74 	bl	8002fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	20000234 	.word	0x20000234

080010e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <USART1_IRQHandler+0x14>)
 80010ee:	0018      	movs	r0, r3
 80010f0:	f002 fcdc 	bl	8003aac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	2000010c 	.word	0x2000010c

08001100 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001104:	46c0      	nop			; (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800110c:	480d      	ldr	r0, [pc, #52]	; (8001144 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800110e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001110:	f7ff fff6 	bl	8001100 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001114:	480c      	ldr	r0, [pc, #48]	; (8001148 <LoopForever+0x6>)
  ldr r1, =_edata
 8001116:	490d      	ldr	r1, [pc, #52]	; (800114c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001118:	4a0d      	ldr	r2, [pc, #52]	; (8001150 <LoopForever+0xe>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <LoopForever+0x12>)
  ldr r4, =_ebss
 800112c:	4c0a      	ldr	r4, [pc, #40]	; (8001158 <LoopForever+0x16>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113a:	f003 fd6d 	bl	8004c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113e:	f7ff fa1d 	bl	800057c <main>

08001142 <LoopForever>:

LoopForever:
    b LoopForever
 8001142:	e7fe      	b.n	8001142 <LoopForever>
   ldr   r0, =_estack
 8001144:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800114c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001150:	08004cfc 	.word	0x08004cfc
  ldr r2, =_sbss
 8001154:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001158:	20000278 	.word	0x20000278

0800115c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC1_COMP_IRQHandler>
	...

08001160 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <HAL_Init+0x3c>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_Init+0x3c>)
 8001172:	2140      	movs	r1, #64	; 0x40
 8001174:	430a      	orrs	r2, r1
 8001176:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001178:	2003      	movs	r0, #3
 800117a:	f000 f811 	bl	80011a0 <HAL_InitTick>
 800117e:	1e03      	subs	r3, r0, #0
 8001180:	d003      	beq.n	800118a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
 8001188:	e001      	b.n	800118e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800118a:	f7ff fdf9 	bl	8000d80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	781b      	ldrb	r3, [r3, #0]
}
 8001192:	0018      	movs	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	b002      	add	sp, #8
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	40022000 	.word	0x40022000

080011a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HAL_InitTick+0x5c>)
 80011aa:	681c      	ldr	r4, [r3, #0]
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_InitTick+0x60>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	0019      	movs	r1, r3
 80011b2:	23fa      	movs	r3, #250	; 0xfa
 80011b4:	0098      	lsls	r0, r3, #2
 80011b6:	f7fe ffa7 	bl	8000108 <__udivsi3>
 80011ba:	0003      	movs	r3, r0
 80011bc:	0019      	movs	r1, r3
 80011be:	0020      	movs	r0, r4
 80011c0:	f7fe ffa2 	bl	8000108 <__udivsi3>
 80011c4:	0003      	movs	r3, r0
 80011c6:	0018      	movs	r0, r3
 80011c8:	f000 fb49 	bl	800185e <HAL_SYSTICK_Config>
 80011cc:	1e03      	subs	r3, r0, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e00f      	b.n	80011f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d80b      	bhi.n	80011f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	2301      	movs	r3, #1
 80011de:	425b      	negs	r3, r3
 80011e0:	2200      	movs	r2, #0
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 fb16 	bl	8001814 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_InitTick+0x64>)
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e000      	b.n	80011f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	0018      	movs	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	b003      	add	sp, #12
 80011fa:	bd90      	pop	{r4, r7, pc}
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000008 	.word	0x20000008
 8001204:	20000004 	.word	0x20000004

08001208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_IncTick+0x1c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	001a      	movs	r2, r3
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_IncTick+0x20>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	18d2      	adds	r2, r2, r3
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_IncTick+0x20>)
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	20000008 	.word	0x20000008
 8001228:	20000274 	.word	0x20000274

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b02      	ldr	r3, [pc, #8]	; (800123c <HAL_GetTick+0x10>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	20000274 	.word	0x20000274

08001240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001248:	f7ff fff0 	bl	800122c <HAL_GetTick>
 800124c:	0003      	movs	r3, r0
 800124e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3301      	adds	r3, #1
 8001258:	d005      	beq.n	8001266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_Delay+0x44>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	001a      	movs	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	189b      	adds	r3, r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	f7ff ffe0 	bl	800122c <HAL_GetTick>
 800126c:	0002      	movs	r2, r0
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d8f7      	bhi.n	8001268 <HAL_Delay+0x28>
  {
  }
}
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	46bd      	mov	sp, r7
 800127e:	b004      	add	sp, #16
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	20000008 	.word	0x20000008

08001288 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e159      	b.n	800154e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10a      	bne.n	80012b8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2250      	movs	r2, #80	; 0x50
 80012ac:	2100      	movs	r1, #0
 80012ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	0018      	movs	r0, r3
 80012b4:	f7ff fd78 	bl	8000da8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012bc:	2210      	movs	r2, #16
 80012be:	4013      	ands	r3, r2
 80012c0:	2b10      	cmp	r3, #16
 80012c2:	d005      	beq.n	80012d0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2204      	movs	r2, #4
 80012cc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80012ce:	d00b      	beq.n	80012e8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d4:	2210      	movs	r2, #16
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2250      	movs	r2, #80	; 0x50
 80012e0:	2100      	movs	r1, #0
 80012e2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e132      	b.n	800154e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ec:	4a9a      	ldr	r2, [pc, #616]	; (8001558 <HAL_ADC_Init+0x2d0>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	2202      	movs	r2, #2
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2203      	movs	r2, #3
 8001300:	4013      	ands	r3, r2
 8001302:	2b01      	cmp	r3, #1
 8001304:	d108      	bne.n	8001318 <HAL_ADC_Init+0x90>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2201      	movs	r2, #1
 800130e:	4013      	ands	r3, r2
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <HAL_ADC_Init+0x90>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <HAL_ADC_Init+0x92>
 8001318:	2300      	movs	r3, #0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d149      	bne.n	80013b2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	23c0      	movs	r3, #192	; 0xc0
 8001324:	061b      	lsls	r3, r3, #24
 8001326:	429a      	cmp	r2, r3
 8001328:	d00b      	beq.n	8001342 <HAL_ADC_Init+0xba>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	05db      	lsls	r3, r3, #23
 8001332:	429a      	cmp	r2, r3
 8001334:	d005      	beq.n	8001342 <HAL_ADC_Init+0xba>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	061b      	lsls	r3, r3, #24
 800133e:	429a      	cmp	r2, r3
 8001340:	d111      	bne.n	8001366 <HAL_ADC_Init+0xde>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	0092      	lsls	r2, r2, #2
 800134e:	0892      	lsrs	r2, r2, #2
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6919      	ldr	r1, [r3, #16]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	e014      	b.n	8001390 <HAL_ADC_Init+0x108>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	691a      	ldr	r2, [r3, #16]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	0092      	lsls	r2, r2, #2
 8001372:	0892      	lsrs	r2, r2, #2
 8001374:	611a      	str	r2, [r3, #16]
 8001376:	4b79      	ldr	r3, [pc, #484]	; (800155c <HAL_ADC_Init+0x2d4>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b78      	ldr	r3, [pc, #480]	; (800155c <HAL_ADC_Init+0x2d4>)
 800137c:	4978      	ldr	r1, [pc, #480]	; (8001560 <HAL_ADC_Init+0x2d8>)
 800137e:	400a      	ands	r2, r1
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	4b76      	ldr	r3, [pc, #472]	; (800155c <HAL_ADC_Init+0x2d4>)
 8001384:	6819      	ldr	r1, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	4b74      	ldr	r3, [pc, #464]	; (800155c <HAL_ADC_Init+0x2d4>)
 800138c:	430a      	orrs	r2, r1
 800138e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68da      	ldr	r2, [r3, #12]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2118      	movs	r1, #24
 800139c:	438a      	bics	r2, r1
 800139e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68d9      	ldr	r1, [r3, #12]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80013b2:	4b6a      	ldr	r3, [pc, #424]	; (800155c <HAL_ADC_Init+0x2d4>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b69      	ldr	r3, [pc, #420]	; (800155c <HAL_ADC_Init+0x2d4>)
 80013b8:	496a      	ldr	r1, [pc, #424]	; (8001564 <HAL_ADC_Init+0x2dc>)
 80013ba:	400a      	ands	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80013be:	4b67      	ldr	r3, [pc, #412]	; (800155c <HAL_ADC_Init+0x2d4>)
 80013c0:	6819      	ldr	r1, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c6:	065a      	lsls	r2, r3, #25
 80013c8:	4b64      	ldr	r3, [pc, #400]	; (800155c <HAL_ADC_Init+0x2d4>)
 80013ca:	430a      	orrs	r2, r1
 80013cc:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	055b      	lsls	r3, r3, #21
 80013d8:	4013      	ands	r3, r2
 80013da:	d108      	bne.n	80013ee <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	0549      	lsls	r1, r1, #21
 80013ea:	430a      	orrs	r2, r1
 80013ec:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	495b      	ldr	r1, [pc, #364]	; (8001568 <HAL_ADC_Init+0x2e0>)
 80013fa:	400a      	ands	r2, r1
 80013fc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68d9      	ldr	r1, [r3, #12]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d101      	bne.n	8001414 <HAL_ADC_Init+0x18c>
 8001410:	2304      	movs	r3, #4
 8001412:	e000      	b.n	8001416 <HAL_ADC_Init+0x18e>
 8001414:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001416:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2020      	movs	r0, #32
 800141c:	5c1b      	ldrb	r3, [r3, r0]
 800141e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001420:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	202c      	movs	r0, #44	; 0x2c
 8001426:	5c1b      	ldrb	r3, [r3, r0]
 8001428:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800142a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001430:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001438:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001440:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800144e:	23c2      	movs	r3, #194	; 0xc2
 8001450:	33ff      	adds	r3, #255	; 0xff
 8001452:	429a      	cmp	r2, r3
 8001454:	d00b      	beq.n	800146e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68d9      	ldr	r1, [r3, #12]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2221      	movs	r2, #33	; 0x21
 8001472:	5c9b      	ldrb	r3, [r3, r2]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d11a      	bne.n	80014ae <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2220      	movs	r2, #32
 800147c:	5c9b      	ldrb	r3, [r3, r2]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d109      	bne.n	8001496 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2180      	movs	r1, #128	; 0x80
 800148e:	0249      	lsls	r1, r1, #9
 8001490:	430a      	orrs	r2, r1
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	e00b      	b.n	80014ae <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149a:	2220      	movs	r2, #32
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a6:	2201      	movs	r2, #1
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d11f      	bne.n	80014f6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	492a      	ldr	r1, [pc, #168]	; (800156c <HAL_ADC_Init+0x2e4>)
 80014c2:	400a      	ands	r2, r1
 80014c4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6919      	ldr	r1, [r3, #16]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80014d4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80014da:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	691a      	ldr	r2, [r3, #16]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2101      	movs	r1, #1
 80014f0:	430a      	orrs	r2, r1
 80014f2:	611a      	str	r2, [r3, #16]
 80014f4:	e00e      	b.n	8001514 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	2201      	movs	r2, #1
 80014fe:	4013      	ands	r3, r2
 8001500:	2b01      	cmp	r3, #1
 8001502:	d107      	bne.n	8001514 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	691a      	ldr	r2, [r3, #16]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2101      	movs	r1, #1
 8001510:	438a      	bics	r2, r1
 8001512:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	695a      	ldr	r2, [r3, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2107      	movs	r1, #7
 8001520:	438a      	bics	r2, r1
 8001522:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6959      	ldr	r1, [r3, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001540:	2203      	movs	r2, #3
 8001542:	4393      	bics	r3, r2
 8001544:	2201      	movs	r2, #1
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	0018      	movs	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	b002      	add	sp, #8
 8001554:	bd80      	pop	{r7, pc}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	fffffefd 	.word	0xfffffefd
 800155c:	40012708 	.word	0x40012708
 8001560:	ffc3ffff 	.word	0xffc3ffff
 8001564:	fdffffff 	.word	0xfdffffff
 8001568:	fffe0219 	.word	0xfffe0219
 800156c:	fffffc03 	.word	0xfffffc03

08001570 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2250      	movs	r2, #80	; 0x50
 800157e:	5c9b      	ldrb	r3, [r3, r2]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d101      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x18>
 8001584:	2302      	movs	r3, #2
 8001586:	e06c      	b.n	8001662 <HAL_ADC_ConfigChannel+0xf2>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2250      	movs	r2, #80	; 0x50
 800158c:	2101      	movs	r1, #1
 800158e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2204      	movs	r2, #4
 8001598:	4013      	ands	r3, r2
 800159a:	d00b      	beq.n	80015b4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a0:	2220      	movs	r2, #32
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2250      	movs	r2, #80	; 0x50
 80015ac:	2100      	movs	r1, #0
 80015ae:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e056      	b.n	8001662 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4a2c      	ldr	r2, [pc, #176]	; (800166c <HAL_ADC_ConfigChannel+0xfc>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d028      	beq.n	8001610 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	035b      	lsls	r3, r3, #13
 80015ca:	0b5a      	lsrs	r2, r3, #13
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	02db      	lsls	r3, r3, #11
 80015dc:	4013      	ands	r3, r2
 80015de:	d009      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80015e0:	4b23      	ldr	r3, [pc, #140]	; (8001670 <HAL_ADC_ConfigChannel+0x100>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b22      	ldr	r3, [pc, #136]	; (8001670 <HAL_ADC_ConfigChannel+0x100>)
 80015e6:	2180      	movs	r1, #128	; 0x80
 80015e8:	0409      	lsls	r1, r1, #16
 80015ea:	430a      	orrs	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80015ee:	200a      	movs	r0, #10
 80015f0:	f000 f844 	bl	800167c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	029b      	lsls	r3, r3, #10
 80015fc:	4013      	ands	r3, r2
 80015fe:	d02b      	beq.n	8001658 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <HAL_ADC_ConfigChannel+0x100>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <HAL_ADC_ConfigChannel+0x100>)
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	03c9      	lsls	r1, r1, #15
 800160a:	430a      	orrs	r2, r1
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	e023      	b.n	8001658 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	035b      	lsls	r3, r3, #13
 800161c:	0b5b      	lsrs	r3, r3, #13
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	400a      	ands	r2, r1
 8001626:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	02db      	lsls	r3, r3, #11
 8001630:	4013      	ands	r3, r2
 8001632:	d005      	beq.n	8001640 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_ADC_ConfigChannel+0x100>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <HAL_ADC_ConfigChannel+0x100>)
 800163a:	490e      	ldr	r1, [pc, #56]	; (8001674 <HAL_ADC_ConfigChannel+0x104>)
 800163c:	400a      	ands	r2, r1
 800163e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	029b      	lsls	r3, r3, #10
 8001648:	4013      	ands	r3, r2
 800164a:	d005      	beq.n	8001658 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_ADC_ConfigChannel+0x100>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <HAL_ADC_ConfigChannel+0x100>)
 8001652:	4909      	ldr	r1, [pc, #36]	; (8001678 <HAL_ADC_ConfigChannel+0x108>)
 8001654:	400a      	ands	r2, r1
 8001656:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2250      	movs	r2, #80	; 0x50
 800165c:	2100      	movs	r1, #0
 800165e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	0018      	movs	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	b002      	add	sp, #8
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	00001001 	.word	0x00001001
 8001670:	40012708 	.word	0x40012708
 8001674:	ff7fffff 	.word	0xff7fffff
 8001678:	ffbfffff 	.word	0xffbfffff

0800167c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <ADC_DelayMicroSecond+0x38>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	490b      	ldr	r1, [pc, #44]	; (80016b8 <ADC_DelayMicroSecond+0x3c>)
 800168a:	0018      	movs	r0, r3
 800168c:	f7fe fd3c 	bl	8000108 <__udivsi3>
 8001690:	0003      	movs	r3, r0
 8001692:	001a      	movs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4353      	muls	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800169a:	e002      	b.n	80016a2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3b01      	subs	r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f9      	bne.n	800169c <ADC_DelayMicroSecond+0x20>
  }
}
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b004      	add	sp, #16
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	20000000 	.word	0x20000000
 80016b8:	000f4240 	.word	0x000f4240

080016bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	0002      	movs	r2, r0
 80016c4:	1dfb      	adds	r3, r7, #7
 80016c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016c8:	1dfb      	adds	r3, r7, #7
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b7f      	cmp	r3, #127	; 0x7f
 80016ce:	d809      	bhi.n	80016e4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d0:	1dfb      	adds	r3, r7, #7
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	001a      	movs	r2, r3
 80016d6:	231f      	movs	r3, #31
 80016d8:	401a      	ands	r2, r3
 80016da:	4b04      	ldr	r3, [pc, #16]	; (80016ec <__NVIC_EnableIRQ+0x30>)
 80016dc:	2101      	movs	r1, #1
 80016de:	4091      	lsls	r1, r2
 80016e0:	000a      	movs	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]
  }
}
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b002      	add	sp, #8
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	e000e100 	.word	0xe000e100

080016f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	0002      	movs	r2, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016fe:	1dfb      	adds	r3, r7, #7
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b7f      	cmp	r3, #127	; 0x7f
 8001704:	d828      	bhi.n	8001758 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001706:	4a2f      	ldr	r2, [pc, #188]	; (80017c4 <__NVIC_SetPriority+0xd4>)
 8001708:	1dfb      	adds	r3, r7, #7
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b25b      	sxtb	r3, r3
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	33c0      	adds	r3, #192	; 0xc0
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	589b      	ldr	r3, [r3, r2]
 8001716:	1dfa      	adds	r2, r7, #7
 8001718:	7812      	ldrb	r2, [r2, #0]
 800171a:	0011      	movs	r1, r2
 800171c:	2203      	movs	r2, #3
 800171e:	400a      	ands	r2, r1
 8001720:	00d2      	lsls	r2, r2, #3
 8001722:	21ff      	movs	r1, #255	; 0xff
 8001724:	4091      	lsls	r1, r2
 8001726:	000a      	movs	r2, r1
 8001728:	43d2      	mvns	r2, r2
 800172a:	401a      	ands	r2, r3
 800172c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	019b      	lsls	r3, r3, #6
 8001732:	22ff      	movs	r2, #255	; 0xff
 8001734:	401a      	ands	r2, r3
 8001736:	1dfb      	adds	r3, r7, #7
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	0018      	movs	r0, r3
 800173c:	2303      	movs	r3, #3
 800173e:	4003      	ands	r3, r0
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001744:	481f      	ldr	r0, [pc, #124]	; (80017c4 <__NVIC_SetPriority+0xd4>)
 8001746:	1dfb      	adds	r3, r7, #7
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b25b      	sxtb	r3, r3
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	430a      	orrs	r2, r1
 8001750:	33c0      	adds	r3, #192	; 0xc0
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001756:	e031      	b.n	80017bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001758:	4a1b      	ldr	r2, [pc, #108]	; (80017c8 <__NVIC_SetPriority+0xd8>)
 800175a:	1dfb      	adds	r3, r7, #7
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	0019      	movs	r1, r3
 8001760:	230f      	movs	r3, #15
 8001762:	400b      	ands	r3, r1
 8001764:	3b08      	subs	r3, #8
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	3306      	adds	r3, #6
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	18d3      	adds	r3, r2, r3
 800176e:	3304      	adds	r3, #4
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	1dfa      	adds	r2, r7, #7
 8001774:	7812      	ldrb	r2, [r2, #0]
 8001776:	0011      	movs	r1, r2
 8001778:	2203      	movs	r2, #3
 800177a:	400a      	ands	r2, r1
 800177c:	00d2      	lsls	r2, r2, #3
 800177e:	21ff      	movs	r1, #255	; 0xff
 8001780:	4091      	lsls	r1, r2
 8001782:	000a      	movs	r2, r1
 8001784:	43d2      	mvns	r2, r2
 8001786:	401a      	ands	r2, r3
 8001788:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	019b      	lsls	r3, r3, #6
 800178e:	22ff      	movs	r2, #255	; 0xff
 8001790:	401a      	ands	r2, r3
 8001792:	1dfb      	adds	r3, r7, #7
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	0018      	movs	r0, r3
 8001798:	2303      	movs	r3, #3
 800179a:	4003      	ands	r3, r0
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017a0:	4809      	ldr	r0, [pc, #36]	; (80017c8 <__NVIC_SetPriority+0xd8>)
 80017a2:	1dfb      	adds	r3, r7, #7
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	001c      	movs	r4, r3
 80017a8:	230f      	movs	r3, #15
 80017aa:	4023      	ands	r3, r4
 80017ac:	3b08      	subs	r3, #8
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	430a      	orrs	r2, r1
 80017b2:	3306      	adds	r3, #6
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	18c3      	adds	r3, r0, r3
 80017b8:	3304      	adds	r3, #4
 80017ba:	601a      	str	r2, [r3, #0]
}
 80017bc:	46c0      	nop			; (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	b003      	add	sp, #12
 80017c2:	bd90      	pop	{r4, r7, pc}
 80017c4:	e000e100 	.word	0xe000e100
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	1e5a      	subs	r2, r3, #1
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	045b      	lsls	r3, r3, #17
 80017dc:	429a      	cmp	r2, r3
 80017de:	d301      	bcc.n	80017e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e0:	2301      	movs	r3, #1
 80017e2:	e010      	b.n	8001806 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <SysTick_Config+0x44>)
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	3a01      	subs	r2, #1
 80017ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ec:	2301      	movs	r3, #1
 80017ee:	425b      	negs	r3, r3
 80017f0:	2103      	movs	r1, #3
 80017f2:	0018      	movs	r0, r3
 80017f4:	f7ff ff7c 	bl	80016f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x44>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x44>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	0018      	movs	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	b002      	add	sp, #8
 800180c:	bd80      	pop	{r7, pc}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	210f      	movs	r1, #15
 8001820:	187b      	adds	r3, r7, r1
 8001822:	1c02      	adds	r2, r0, #0
 8001824:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	187b      	adds	r3, r7, r1
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b25b      	sxtb	r3, r3
 800182e:	0011      	movs	r1, r2
 8001830:	0018      	movs	r0, r3
 8001832:	f7ff ff5d 	bl	80016f0 <__NVIC_SetPriority>
}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	46bd      	mov	sp, r7
 800183a:	b004      	add	sp, #16
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	0002      	movs	r2, r0
 8001846:	1dfb      	adds	r3, r7, #7
 8001848:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800184a:	1dfb      	adds	r3, r7, #7
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b25b      	sxtb	r3, r3
 8001850:	0018      	movs	r0, r3
 8001852:	f7ff ff33 	bl	80016bc <__NVIC_EnableIRQ>
}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	46bd      	mov	sp, r7
 800185a:	b002      	add	sp, #8
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	0018      	movs	r0, r3
 800186a:	f7ff ffaf 	bl	80017cc <SysTick_Config>
 800186e:	0003      	movs	r3, r0
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	b002      	add	sp, #8
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e061      	b.n	800194e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a32      	ldr	r2, [pc, #200]	; (8001958 <HAL_DMA_Init+0xe0>)
 8001890:	4694      	mov	ip, r2
 8001892:	4463      	add	r3, ip
 8001894:	2114      	movs	r1, #20
 8001896:	0018      	movs	r0, r3
 8001898:	f7fe fc36 	bl	8000108 <__udivsi3>
 800189c:	0003      	movs	r3, r0
 800189e:	009a      	lsls	r2, r3, #2
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a2d      	ldr	r2, [pc, #180]	; (800195c <HAL_DMA_Init+0xe4>)
 80018a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2225      	movs	r2, #37	; 0x25
 80018ae:	2102      	movs	r1, #2
 80018b0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4a28      	ldr	r2, [pc, #160]	; (8001960 <HAL_DMA_Init+0xe8>)
 80018be:	4013      	ands	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	01db      	lsls	r3, r3, #7
 8001900:	429a      	cmp	r2, r3
 8001902:	d018      	beq.n	8001936 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <HAL_DMA_Init+0xec>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190c:	211c      	movs	r1, #28
 800190e:	400b      	ands	r3, r1
 8001910:	210f      	movs	r1, #15
 8001912:	4099      	lsls	r1, r3
 8001914:	000b      	movs	r3, r1
 8001916:	43d9      	mvns	r1, r3
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_DMA_Init+0xec>)
 800191a:	400a      	ands	r2, r1
 800191c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <HAL_DMA_Init+0xec>)
 8001920:	6819      	ldr	r1, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	201c      	movs	r0, #28
 800192c:	4003      	ands	r3, r0
 800192e:	409a      	lsls	r2, r3
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_DMA_Init+0xec>)
 8001932:	430a      	orrs	r2, r1
 8001934:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2225      	movs	r2, #37	; 0x25
 8001940:	2101      	movs	r1, #1
 8001942:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2224      	movs	r2, #36	; 0x24
 8001948:	2100      	movs	r1, #0
 800194a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	0018      	movs	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	b004      	add	sp, #16
 8001954:	bd80      	pop	{r7, pc}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	bffdfff8 	.word	0xbffdfff8
 800195c:	40020000 	.word	0x40020000
 8001960:	ffff800f 	.word	0xffff800f
 8001964:	400200a8 	.word	0x400200a8

08001968 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001970:	230f      	movs	r3, #15
 8001972:	18fb      	adds	r3, r7, r3
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2225      	movs	r2, #37	; 0x25
 800197c:	5c9b      	ldrb	r3, [r3, r2]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d008      	beq.n	8001996 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2204      	movs	r2, #4
 8001988:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2224      	movs	r2, #36	; 0x24
 800198e:	2100      	movs	r1, #0
 8001990:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e024      	b.n	80019e0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	210e      	movs	r1, #14
 80019a2:	438a      	bics	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2101      	movs	r1, #1
 80019b2:	438a      	bics	r2, r1
 80019b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	221c      	movs	r2, #28
 80019bc:	401a      	ands	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	2101      	movs	r1, #1
 80019c4:	4091      	lsls	r1, r2
 80019c6:	000a      	movs	r2, r1
 80019c8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2225      	movs	r2, #37	; 0x25
 80019ce:	2101      	movs	r1, #1
 80019d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2224      	movs	r2, #36	; 0x24
 80019d6:	2100      	movs	r1, #0
 80019d8:	5499      	strb	r1, [r3, r2]

    return status;
 80019da:	230f      	movs	r3, #15
 80019dc:	18fb      	adds	r3, r7, r3
 80019de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80019e0:	0018      	movs	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b004      	add	sp, #16
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019f0:	210f      	movs	r1, #15
 80019f2:	187b      	adds	r3, r7, r1
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2225      	movs	r2, #37	; 0x25
 80019fc:	5c9b      	ldrb	r3, [r3, r2]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d006      	beq.n	8001a12 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2204      	movs	r2, #4
 8001a08:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a0a:	187b      	adds	r3, r7, r1
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
 8001a10:	e02a      	b.n	8001a68 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	210e      	movs	r1, #14
 8001a1e:	438a      	bics	r2, r1
 8001a20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	438a      	bics	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	221c      	movs	r2, #28
 8001a38:	401a      	ands	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	2101      	movs	r1, #1
 8001a40:	4091      	lsls	r1, r2
 8001a42:	000a      	movs	r2, r1
 8001a44:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2225      	movs	r2, #37	; 0x25
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2224      	movs	r2, #36	; 0x24
 8001a52:	2100      	movs	r1, #0
 8001a54:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d004      	beq.n	8001a68 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	0010      	movs	r0, r2
 8001a66:	4798      	blx	r3
    }
  }
  return status;
 8001a68:	230f      	movs	r3, #15
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	781b      	ldrb	r3, [r3, #0]
}
 8001a6e:	0018      	movs	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b004      	add	sp, #16
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b084      	sub	sp, #16
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	221c      	movs	r2, #28
 8001a94:	4013      	ands	r3, r2
 8001a96:	2204      	movs	r2, #4
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	0013      	movs	r3, r2
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d026      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x7a>
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d022      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d107      	bne.n	8001ac6 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2104      	movs	r1, #4
 8001ac2:	438a      	bics	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	221c      	movs	r2, #28
 8001acc:	401a      	ands	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	4091      	lsls	r1, r2
 8001ad6:	000a      	movs	r2, r1
 8001ad8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d100      	bne.n	8001ae4 <HAL_DMA_IRQHandler+0x6e>
 8001ae2:	e071      	b.n	8001bc8 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	0010      	movs	r0, r2
 8001aec:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001aee:	e06b      	b.n	8001bc8 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af4:	221c      	movs	r2, #28
 8001af6:	4013      	ands	r3, r2
 8001af8:	2202      	movs	r2, #2
 8001afa:	409a      	lsls	r2, r3
 8001afc:	0013      	movs	r3, r2
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4013      	ands	r3, r2
 8001b02:	d02d      	beq.n	8001b60 <HAL_DMA_IRQHandler+0xea>
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2202      	movs	r2, #2
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d029      	beq.n	8001b60 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2220      	movs	r2, #32
 8001b14:	4013      	ands	r3, r2
 8001b16:	d10b      	bne.n	8001b30 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	210a      	movs	r1, #10
 8001b24:	438a      	bics	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2225      	movs	r2, #37	; 0x25
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b34:	221c      	movs	r2, #28
 8001b36:	401a      	ands	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	4091      	lsls	r1, r2
 8001b40:	000a      	movs	r2, r1
 8001b42:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2224      	movs	r2, #36	; 0x24
 8001b48:	2100      	movs	r1, #0
 8001b4a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d039      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	0010      	movs	r0, r2
 8001b5c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b5e:	e033      	b.n	8001bc8 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b64:	221c      	movs	r2, #28
 8001b66:	4013      	ands	r3, r2
 8001b68:	2208      	movs	r2, #8
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	0013      	movs	r3, r2
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	d02a      	beq.n	8001bca <HAL_DMA_IRQHandler+0x154>
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2208      	movs	r2, #8
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d026      	beq.n	8001bca <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	210e      	movs	r1, #14
 8001b88:	438a      	bics	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b90:	221c      	movs	r2, #28
 8001b92:	401a      	ands	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	2101      	movs	r1, #1
 8001b9a:	4091      	lsls	r1, r2
 8001b9c:	000a      	movs	r2, r1
 8001b9e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2225      	movs	r2, #37	; 0x25
 8001baa:	2101      	movs	r1, #1
 8001bac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2224      	movs	r2, #36	; 0x24
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d005      	beq.n	8001bca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	0010      	movs	r0, r2
 8001bc6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	46c0      	nop			; (mov r8, r8)
}
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b004      	add	sp, #16
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bea:	e14f      	b.n	8001e8c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4091      	lsls	r1, r2
 8001bf6:	000a      	movs	r2, r1
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d100      	bne.n	8001c04 <HAL_GPIO_Init+0x30>
 8001c02:	e140      	b.n	8001e86 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2203      	movs	r2, #3
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d005      	beq.n	8001c1c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2203      	movs	r2, #3
 8001c16:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d130      	bne.n	8001c7e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	0013      	movs	r3, r2
 8001c2c:	43da      	mvns	r2, r3
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	0013      	movs	r3, r2
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c52:	2201      	movs	r2, #1
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	409a      	lsls	r2, r3
 8001c58:	0013      	movs	r3, r2
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	091b      	lsrs	r3, r3, #4
 8001c68:	2201      	movs	r2, #1
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	0013      	movs	r3, r2
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2203      	movs	r2, #3
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d017      	beq.n	8001cba <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	2203      	movs	r2, #3
 8001c96:	409a      	lsls	r2, r3
 8001c98:	0013      	movs	r3, r2
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	409a      	lsls	r2, r3
 8001cac:	0013      	movs	r3, r2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d123      	bne.n	8001d0e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	08da      	lsrs	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3208      	adds	r2, #8
 8001cce:	0092      	lsls	r2, r2, #2
 8001cd0:	58d3      	ldr	r3, [r2, r3]
 8001cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2207      	movs	r2, #7
 8001cd8:	4013      	ands	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	220f      	movs	r2, #15
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	0013      	movs	r3, r2
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2107      	movs	r1, #7
 8001cf2:	400b      	ands	r3, r1
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	0013      	movs	r3, r2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	08da      	lsrs	r2, r3, #3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3208      	adds	r2, #8
 8001d08:	0092      	lsls	r2, r2, #2
 8001d0a:	6939      	ldr	r1, [r7, #16]
 8001d0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	2203      	movs	r2, #3
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	0013      	movs	r3, r2
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	401a      	ands	r2, r3
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	409a      	lsls	r2, r3
 8001d34:	0013      	movs	r3, r2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	23c0      	movs	r3, #192	; 0xc0
 8001d48:	029b      	lsls	r3, r3, #10
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d100      	bne.n	8001d50 <HAL_GPIO_Init+0x17c>
 8001d4e:	e09a      	b.n	8001e86 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d50:	4b54      	ldr	r3, [pc, #336]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d54:	4b53      	ldr	r3, [pc, #332]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001d56:	2101      	movs	r1, #1
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d5c:	4a52      	ldr	r2, [pc, #328]	; (8001ea8 <HAL_GPIO_Init+0x2d4>)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	089b      	lsrs	r3, r3, #2
 8001d62:	3302      	adds	r3, #2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	589b      	ldr	r3, [r3, r2]
 8001d68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	4013      	ands	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	220f      	movs	r2, #15
 8001d74:	409a      	lsls	r2, r3
 8001d76:	0013      	movs	r3, r2
 8001d78:	43da      	mvns	r2, r3
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	23a0      	movs	r3, #160	; 0xa0
 8001d84:	05db      	lsls	r3, r3, #23
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d019      	beq.n	8001dbe <HAL_GPIO_Init+0x1ea>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a47      	ldr	r2, [pc, #284]	; (8001eac <HAL_GPIO_Init+0x2d8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d013      	beq.n	8001dba <HAL_GPIO_Init+0x1e6>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a46      	ldr	r2, [pc, #280]	; (8001eb0 <HAL_GPIO_Init+0x2dc>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00d      	beq.n	8001db6 <HAL_GPIO_Init+0x1e2>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a45      	ldr	r2, [pc, #276]	; (8001eb4 <HAL_GPIO_Init+0x2e0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d007      	beq.n	8001db2 <HAL_GPIO_Init+0x1de>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a44      	ldr	r2, [pc, #272]	; (8001eb8 <HAL_GPIO_Init+0x2e4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d101      	bne.n	8001dae <HAL_GPIO_Init+0x1da>
 8001daa:	2305      	movs	r3, #5
 8001dac:	e008      	b.n	8001dc0 <HAL_GPIO_Init+0x1ec>
 8001dae:	2306      	movs	r3, #6
 8001db0:	e006      	b.n	8001dc0 <HAL_GPIO_Init+0x1ec>
 8001db2:	2303      	movs	r3, #3
 8001db4:	e004      	b.n	8001dc0 <HAL_GPIO_Init+0x1ec>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e002      	b.n	8001dc0 <HAL_GPIO_Init+0x1ec>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <HAL_GPIO_Init+0x1ec>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	2103      	movs	r1, #3
 8001dc4:	400a      	ands	r2, r1
 8001dc6:	0092      	lsls	r2, r2, #2
 8001dc8:	4093      	lsls	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd0:	4935      	ldr	r1, [pc, #212]	; (8001ea8 <HAL_GPIO_Init+0x2d4>)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dde:	4b37      	ldr	r3, [pc, #220]	; (8001ebc <HAL_GPIO_Init+0x2e8>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43da      	mvns	r2, r3
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	035b      	lsls	r3, r3, #13
 8001df6:	4013      	ands	r3, r2
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e02:	4b2e      	ldr	r3, [pc, #184]	; (8001ebc <HAL_GPIO_Init+0x2e8>)
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001e08:	4b2c      	ldr	r3, [pc, #176]	; (8001ebc <HAL_GPIO_Init+0x2e8>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	43da      	mvns	r2, r3
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	039b      	lsls	r3, r3, #14
 8001e20:	4013      	ands	r3, r2
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e2c:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <HAL_GPIO_Init+0x2e8>)
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001e32:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <HAL_GPIO_Init+0x2e8>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	029b      	lsls	r3, r3, #10
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e56:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_GPIO_Init+0x2e8>)
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e5c:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <HAL_GPIO_Init+0x2e8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	43da      	mvns	r2, r3
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	025b      	lsls	r3, r3, #9
 8001e74:	4013      	ands	r3, r2
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e80:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <HAL_GPIO_Init+0x2e8>)
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	40da      	lsrs	r2, r3
 8001e94:	1e13      	subs	r3, r2, #0
 8001e96:	d000      	beq.n	8001e9a <HAL_GPIO_Init+0x2c6>
 8001e98:	e6a8      	b.n	8001bec <HAL_GPIO_Init+0x18>
  }
}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	46c0      	nop			; (mov r8, r8)
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b006      	add	sp, #24
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40010000 	.word	0x40010000
 8001eac:	50000400 	.word	0x50000400
 8001eb0:	50000800 	.word	0x50000800
 8001eb4:	50000c00 	.word	0x50000c00
 8001eb8:	50001c00 	.word	0x50001c00
 8001ebc:	40010400 	.word	0x40010400

08001ec0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	0008      	movs	r0, r1
 8001eca:	0011      	movs	r1, r2
 8001ecc:	1cbb      	adds	r3, r7, #2
 8001ece:	1c02      	adds	r2, r0, #0
 8001ed0:	801a      	strh	r2, [r3, #0]
 8001ed2:	1c7b      	adds	r3, r7, #1
 8001ed4:	1c0a      	adds	r2, r1, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ed8:	1c7b      	adds	r3, r7, #1
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d004      	beq.n	8001eea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee0:	1cbb      	adds	r3, r7, #2
 8001ee2:	881a      	ldrh	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001ee8:	e003      	b.n	8001ef2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001eea:	1cbb      	adds	r3, r7, #2
 8001eec:	881a      	ldrh	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b002      	add	sp, #8
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	000a      	movs	r2, r1
 8001f04:	1cbb      	adds	r3, r7, #2
 8001f06:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f0e:	1cbb      	adds	r3, r7, #2
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4013      	ands	r3, r2
 8001f16:	041a      	lsls	r2, r3, #16
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	1cb9      	adds	r1, r7, #2
 8001f1e:	8809      	ldrh	r1, [r1, #0]
 8001f20:	400b      	ands	r3, r1
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	619a      	str	r2, [r3, #24]
}
 8001f28:	46c0      	nop			; (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b004      	add	sp, #16
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f30:	b5b0      	push	{r4, r5, r7, lr}
 8001f32:	b08a      	sub	sp, #40	; 0x28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d102      	bne.n	8001f44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	f000 fb5a 	bl	80025f8 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f44:	4bce      	ldr	r3, [pc, #824]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	220c      	movs	r2, #12
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f4e:	4bcc      	ldr	r3, [pc, #816]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	025b      	lsls	r3, r3, #9
 8001f56:	4013      	ands	r3, r2
 8001f58:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	4013      	ands	r3, r2
 8001f62:	d100      	bne.n	8001f66 <HAL_RCC_OscConfig+0x36>
 8001f64:	e07c      	b.n	8002060 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d007      	beq.n	8001f7c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	2b0c      	cmp	r3, #12
 8001f70:	d111      	bne.n	8001f96 <HAL_RCC_OscConfig+0x66>
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	025b      	lsls	r3, r3, #9
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d10c      	bne.n	8001f96 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	4bc0      	ldr	r3, [pc, #768]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	029b      	lsls	r3, r3, #10
 8001f84:	4013      	ands	r3, r2
 8001f86:	d100      	bne.n	8001f8a <HAL_RCC_OscConfig+0x5a>
 8001f88:	e069      	b.n	800205e <HAL_RCC_OscConfig+0x12e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d165      	bne.n	800205e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e330      	b.n	80025f8 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	025b      	lsls	r3, r3, #9
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d107      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x82>
 8001fa2:	4bb7      	ldr	r3, [pc, #732]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	4bb6      	ldr	r3, [pc, #728]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8001fa8:	2180      	movs	r1, #128	; 0x80
 8001faa:	0249      	lsls	r1, r1, #9
 8001fac:	430a      	orrs	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	e027      	b.n	8002002 <HAL_RCC_OscConfig+0xd2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	23a0      	movs	r3, #160	; 0xa0
 8001fb8:	02db      	lsls	r3, r3, #11
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d10e      	bne.n	8001fdc <HAL_RCC_OscConfig+0xac>
 8001fbe:	4bb0      	ldr	r3, [pc, #704]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4baf      	ldr	r3, [pc, #700]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8001fc4:	2180      	movs	r1, #128	; 0x80
 8001fc6:	02c9      	lsls	r1, r1, #11
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	4bac      	ldr	r3, [pc, #688]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4bab      	ldr	r3, [pc, #684]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8001fd2:	2180      	movs	r1, #128	; 0x80
 8001fd4:	0249      	lsls	r1, r1, #9
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	e012      	b.n	8002002 <HAL_RCC_OscConfig+0xd2>
 8001fdc:	4ba8      	ldr	r3, [pc, #672]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4ba7      	ldr	r3, [pc, #668]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8001fe2:	49a8      	ldr	r1, [pc, #672]	; (8002284 <HAL_RCC_OscConfig+0x354>)
 8001fe4:	400a      	ands	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	4ba5      	ldr	r3, [pc, #660]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	025b      	lsls	r3, r3, #9
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4ba2      	ldr	r3, [pc, #648]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	4ba1      	ldr	r3, [pc, #644]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8001ffc:	49a2      	ldr	r1, [pc, #648]	; (8002288 <HAL_RCC_OscConfig+0x358>)
 8001ffe:	400a      	ands	r2, r1
 8002000:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d014      	beq.n	8002034 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7ff f90f 	bl	800122c <HAL_GetTick>
 800200e:	0003      	movs	r3, r0
 8002010:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002014:	f7ff f90a 	bl	800122c <HAL_GetTick>
 8002018:	0002      	movs	r2, r0
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	; 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e2e8      	b.n	80025f8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002026:	4b96      	ldr	r3, [pc, #600]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	029b      	lsls	r3, r3, #10
 800202e:	4013      	ands	r3, r2
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0xe4>
 8002032:	e015      	b.n	8002060 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff f8fa 	bl	800122c <HAL_GetTick>
 8002038:	0003      	movs	r3, r0
 800203a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800203e:	f7ff f8f5 	bl	800122c <HAL_GetTick>
 8002042:	0002      	movs	r2, r0
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b64      	cmp	r3, #100	; 0x64
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e2d3      	b.n	80025f8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002050:	4b8b      	ldr	r3, [pc, #556]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	029b      	lsls	r3, r3, #10
 8002058:	4013      	ands	r3, r2
 800205a:	d1f0      	bne.n	800203e <HAL_RCC_OscConfig+0x10e>
 800205c:	e000      	b.n	8002060 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2202      	movs	r2, #2
 8002066:	4013      	ands	r3, r2
 8002068:	d100      	bne.n	800206c <HAL_RCC_OscConfig+0x13c>
 800206a:	e08b      	b.n	8002184 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	2b04      	cmp	r3, #4
 8002076:	d005      	beq.n	8002084 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	2b0c      	cmp	r3, #12
 800207c:	d13e      	bne.n	80020fc <HAL_RCC_OscConfig+0x1cc>
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d13b      	bne.n	80020fc <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002084:	4b7e      	ldr	r3, [pc, #504]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2204      	movs	r2, #4
 800208a:	4013      	ands	r3, r2
 800208c:	d004      	beq.n	8002098 <HAL_RCC_OscConfig+0x168>
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e2af      	b.n	80025f8 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002098:	4b79      	ldr	r3, [pc, #484]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4a7b      	ldr	r2, [pc, #492]	; (800228c <HAL_RCC_OscConfig+0x35c>)
 800209e:	4013      	ands	r3, r2
 80020a0:	0019      	movs	r1, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	021a      	lsls	r2, r3, #8
 80020a8:	4b75      	ldr	r3, [pc, #468]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 80020aa:	430a      	orrs	r2, r1
 80020ac:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80020ae:	4b74      	ldr	r3, [pc, #464]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2209      	movs	r2, #9
 80020b4:	4393      	bics	r3, r2
 80020b6:	0019      	movs	r1, r3
 80020b8:	4b71      	ldr	r3, [pc, #452]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	430a      	orrs	r2, r1
 80020be:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020c0:	f000 fc7a 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 80020c4:	0001      	movs	r1, r0
 80020c6:	4b6e      	ldr	r3, [pc, #440]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	220f      	movs	r2, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	4a6f      	ldr	r2, [pc, #444]	; (8002290 <HAL_RCC_OscConfig+0x360>)
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
 80020d4:	000a      	movs	r2, r1
 80020d6:	40da      	lsrs	r2, r3
 80020d8:	4b6e      	ldr	r3, [pc, #440]	; (8002294 <HAL_RCC_OscConfig+0x364>)
 80020da:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80020dc:	4b6e      	ldr	r3, [pc, #440]	; (8002298 <HAL_RCC_OscConfig+0x368>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2513      	movs	r5, #19
 80020e2:	197c      	adds	r4, r7, r5
 80020e4:	0018      	movs	r0, r3
 80020e6:	f7ff f85b 	bl	80011a0 <HAL_InitTick>
 80020ea:	0003      	movs	r3, r0
 80020ec:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80020ee:	197b      	adds	r3, r7, r5
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d046      	beq.n	8002184 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 80020f6:	197b      	adds	r3, r7, r5
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	e27d      	b.n	80025f8 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d027      	beq.n	8002152 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002102:	4b5f      	ldr	r3, [pc, #380]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2209      	movs	r2, #9
 8002108:	4393      	bics	r3, r2
 800210a:	0019      	movs	r1, r3
 800210c:	4b5c      	ldr	r3, [pc, #368]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff f88a 	bl	800122c <HAL_GetTick>
 8002118:	0003      	movs	r3, r0
 800211a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800211e:	f7ff f885 	bl	800122c <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e263      	b.n	80025f8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002130:	4b53      	ldr	r3, [pc, #332]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2204      	movs	r2, #4
 8002136:	4013      	ands	r3, r2
 8002138:	d0f1      	beq.n	800211e <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213a:	4b51      	ldr	r3, [pc, #324]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	4a53      	ldr	r2, [pc, #332]	; (800228c <HAL_RCC_OscConfig+0x35c>)
 8002140:	4013      	ands	r3, r2
 8002142:	0019      	movs	r1, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	021a      	lsls	r2, r3, #8
 800214a:	4b4d      	ldr	r3, [pc, #308]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 800214c:	430a      	orrs	r2, r1
 800214e:	605a      	str	r2, [r3, #4]
 8002150:	e018      	b.n	8002184 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002152:	4b4b      	ldr	r3, [pc, #300]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4b4a      	ldr	r3, [pc, #296]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8002158:	2101      	movs	r1, #1
 800215a:	438a      	bics	r2, r1
 800215c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215e:	f7ff f865 	bl	800122c <HAL_GetTick>
 8002162:	0003      	movs	r3, r0
 8002164:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002168:	f7ff f860 	bl	800122c <HAL_GetTick>
 800216c:	0002      	movs	r2, r0
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e23e      	b.n	80025f8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800217a:	4b41      	ldr	r3, [pc, #260]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2204      	movs	r2, #4
 8002180:	4013      	ands	r3, r2
 8002182:	d1f1      	bne.n	8002168 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2210      	movs	r2, #16
 800218a:	4013      	ands	r3, r2
 800218c:	d100      	bne.n	8002190 <HAL_RCC_OscConfig+0x260>
 800218e:	e0a1      	b.n	80022d4 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d140      	bne.n	8002218 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002196:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4013      	ands	r3, r2
 80021a0:	d005      	beq.n	80021ae <HAL_RCC_OscConfig+0x27e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e224      	b.n	80025f8 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ae:	4b34      	ldr	r3, [pc, #208]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	4a3a      	ldr	r2, [pc, #232]	; (800229c <HAL_RCC_OscConfig+0x36c>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	0019      	movs	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a1a      	ldr	r2, [r3, #32]
 80021bc:	4b30      	ldr	r3, [pc, #192]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 80021be:	430a      	orrs	r2, r1
 80021c0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021c2:	4b2f      	ldr	r3, [pc, #188]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	0a19      	lsrs	r1, r3, #8
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	061a      	lsls	r2, r3, #24
 80021d0:	4b2b      	ldr	r3, [pc, #172]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 80021d2:	430a      	orrs	r2, r1
 80021d4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	0b5b      	lsrs	r3, r3, #13
 80021dc:	3301      	adds	r3, #1
 80021de:	2280      	movs	r2, #128	; 0x80
 80021e0:	0212      	lsls	r2, r2, #8
 80021e2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80021e4:	4b26      	ldr	r3, [pc, #152]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	210f      	movs	r1, #15
 80021ec:	400b      	ands	r3, r1
 80021ee:	4928      	ldr	r1, [pc, #160]	; (8002290 <HAL_RCC_OscConfig+0x360>)
 80021f0:	5ccb      	ldrb	r3, [r1, r3]
 80021f2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021f4:	4b27      	ldr	r3, [pc, #156]	; (8002294 <HAL_RCC_OscConfig+0x364>)
 80021f6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HAL_RCC_OscConfig+0x368>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2513      	movs	r5, #19
 80021fe:	197c      	adds	r4, r7, r5
 8002200:	0018      	movs	r0, r3
 8002202:	f7fe ffcd 	bl	80011a0 <HAL_InitTick>
 8002206:	0003      	movs	r3, r0
 8002208:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800220a:	197b      	adds	r3, r7, r5
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d060      	beq.n	80022d4 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8002212:	197b      	adds	r3, r7, r5
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	e1ef      	b.n	80025f8 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d03f      	beq.n	80022a0 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002220:	4b17      	ldr	r3, [pc, #92]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b16      	ldr	r3, [pc, #88]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8002226:	2180      	movs	r1, #128	; 0x80
 8002228:	0049      	lsls	r1, r1, #1
 800222a:	430a      	orrs	r2, r1
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222e:	f7fe fffd 	bl	800122c <HAL_GetTick>
 8002232:	0003      	movs	r3, r0
 8002234:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002238:	f7fe fff8 	bl	800122c <HAL_GetTick>
 800223c:	0002      	movs	r2, r0
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e1d6      	b.n	80025f8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800224a:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4013      	ands	r3, r2
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	4a10      	ldr	r2, [pc, #64]	; (800229c <HAL_RCC_OscConfig+0x36c>)
 800225c:	4013      	ands	r3, r2
 800225e:	0019      	movs	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1a      	ldr	r2, [r3, #32]
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 8002266:	430a      	orrs	r2, r1
 8002268:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	0a19      	lsrs	r1, r3, #8
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	061a      	lsls	r2, r3, #24
 8002278:	4b01      	ldr	r3, [pc, #4]	; (8002280 <HAL_RCC_OscConfig+0x350>)
 800227a:	430a      	orrs	r2, r1
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	e029      	b.n	80022d4 <HAL_RCC_OscConfig+0x3a4>
 8002280:	40021000 	.word	0x40021000
 8002284:	fffeffff 	.word	0xfffeffff
 8002288:	fffbffff 	.word	0xfffbffff
 800228c:	ffffe0ff 	.word	0xffffe0ff
 8002290:	08004c80 	.word	0x08004c80
 8002294:	20000000 	.word	0x20000000
 8002298:	20000004 	.word	0x20000004
 800229c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022a0:	4bbe      	ldr	r3, [pc, #760]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4bbd      	ldr	r3, [pc, #756]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 80022a6:	49be      	ldr	r1, [pc, #760]	; (80025a0 <HAL_RCC_OscConfig+0x670>)
 80022a8:	400a      	ands	r2, r1
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7fe ffbe 	bl	800122c <HAL_GetTick>
 80022b0:	0003      	movs	r3, r0
 80022b2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022b6:	f7fe ffb9 	bl	800122c <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e197      	b.n	80025f8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022c8:	4bb4      	ldr	r3, [pc, #720]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4013      	ands	r3, r2
 80022d2:	d1f0      	bne.n	80022b6 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2208      	movs	r2, #8
 80022da:	4013      	ands	r3, r2
 80022dc:	d036      	beq.n	800234c <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d019      	beq.n	800231a <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e6:	4bad      	ldr	r3, [pc, #692]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 80022e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022ea:	4bac      	ldr	r3, [pc, #688]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 80022ec:	2101      	movs	r1, #1
 80022ee:	430a      	orrs	r2, r1
 80022f0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f2:	f7fe ff9b 	bl	800122c <HAL_GetTick>
 80022f6:	0003      	movs	r3, r0
 80022f8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022fc:	f7fe ff96 	bl	800122c <HAL_GetTick>
 8002300:	0002      	movs	r2, r0
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e174      	b.n	80025f8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800230e:	4ba3      	ldr	r3, [pc, #652]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 8002310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002312:	2202      	movs	r2, #2
 8002314:	4013      	ands	r3, r2
 8002316:	d0f1      	beq.n	80022fc <HAL_RCC_OscConfig+0x3cc>
 8002318:	e018      	b.n	800234c <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231a:	4ba0      	ldr	r3, [pc, #640]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 800231c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800231e:	4b9f      	ldr	r3, [pc, #636]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 8002320:	2101      	movs	r1, #1
 8002322:	438a      	bics	r2, r1
 8002324:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002326:	f7fe ff81 	bl	800122c <HAL_GetTick>
 800232a:	0003      	movs	r3, r0
 800232c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002330:	f7fe ff7c 	bl	800122c <HAL_GetTick>
 8002334:	0002      	movs	r2, r0
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e15a      	b.n	80025f8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002342:	4b96      	ldr	r3, [pc, #600]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 8002344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002346:	2202      	movs	r2, #2
 8002348:	4013      	ands	r3, r2
 800234a:	d1f1      	bne.n	8002330 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2204      	movs	r2, #4
 8002352:	4013      	ands	r3, r2
 8002354:	d100      	bne.n	8002358 <HAL_RCC_OscConfig+0x428>
 8002356:	e0ae      	b.n	80024b6 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002358:	2027      	movs	r0, #39	; 0x27
 800235a:	183b      	adds	r3, r7, r0
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002360:	4b8e      	ldr	r3, [pc, #568]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 8002362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	055b      	lsls	r3, r3, #21
 8002368:	4013      	ands	r3, r2
 800236a:	d109      	bne.n	8002380 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236c:	4b8b      	ldr	r3, [pc, #556]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 800236e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002370:	4b8a      	ldr	r3, [pc, #552]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 8002372:	2180      	movs	r1, #128	; 0x80
 8002374:	0549      	lsls	r1, r1, #21
 8002376:	430a      	orrs	r2, r1
 8002378:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800237a:	183b      	adds	r3, r7, r0
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	4b88      	ldr	r3, [pc, #544]	; (80025a4 <HAL_RCC_OscConfig+0x674>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4013      	ands	r3, r2
 800238a:	d11a      	bne.n	80023c2 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800238c:	4b85      	ldr	r3, [pc, #532]	; (80025a4 <HAL_RCC_OscConfig+0x674>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b84      	ldr	r3, [pc, #528]	; (80025a4 <HAL_RCC_OscConfig+0x674>)
 8002392:	2180      	movs	r1, #128	; 0x80
 8002394:	0049      	lsls	r1, r1, #1
 8002396:	430a      	orrs	r2, r1
 8002398:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800239a:	f7fe ff47 	bl	800122c <HAL_GetTick>
 800239e:	0003      	movs	r3, r0
 80023a0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a4:	f7fe ff42 	bl	800122c <HAL_GetTick>
 80023a8:	0002      	movs	r2, r0
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	; 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e120      	b.n	80025f8 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b7b      	ldr	r3, [pc, #492]	; (80025a4 <HAL_RCC_OscConfig+0x674>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4013      	ands	r3, r2
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d107      	bne.n	80023de <HAL_RCC_OscConfig+0x4ae>
 80023ce:	4b73      	ldr	r3, [pc, #460]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 80023d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023d2:	4b72      	ldr	r3, [pc, #456]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 80023d4:	2180      	movs	r1, #128	; 0x80
 80023d6:	0049      	lsls	r1, r1, #1
 80023d8:	430a      	orrs	r2, r1
 80023da:	651a      	str	r2, [r3, #80]	; 0x50
 80023dc:	e031      	b.n	8002442 <HAL_RCC_OscConfig+0x512>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x4d0>
 80023e6:	4b6d      	ldr	r3, [pc, #436]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 80023e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023ea:	4b6c      	ldr	r3, [pc, #432]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 80023ec:	496c      	ldr	r1, [pc, #432]	; (80025a0 <HAL_RCC_OscConfig+0x670>)
 80023ee:	400a      	ands	r2, r1
 80023f0:	651a      	str	r2, [r3, #80]	; 0x50
 80023f2:	4b6a      	ldr	r3, [pc, #424]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 80023f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023f6:	4b69      	ldr	r3, [pc, #420]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 80023f8:	496b      	ldr	r1, [pc, #428]	; (80025a8 <HAL_RCC_OscConfig+0x678>)
 80023fa:	400a      	ands	r2, r1
 80023fc:	651a      	str	r2, [r3, #80]	; 0x50
 80023fe:	e020      	b.n	8002442 <HAL_RCC_OscConfig+0x512>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	23a0      	movs	r3, #160	; 0xa0
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	429a      	cmp	r2, r3
 800240a:	d10e      	bne.n	800242a <HAL_RCC_OscConfig+0x4fa>
 800240c:	4b63      	ldr	r3, [pc, #396]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 800240e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002410:	4b62      	ldr	r3, [pc, #392]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 8002412:	2180      	movs	r1, #128	; 0x80
 8002414:	00c9      	lsls	r1, r1, #3
 8002416:	430a      	orrs	r2, r1
 8002418:	651a      	str	r2, [r3, #80]	; 0x50
 800241a:	4b60      	ldr	r3, [pc, #384]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 800241c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800241e:	4b5f      	ldr	r3, [pc, #380]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 8002420:	2180      	movs	r1, #128	; 0x80
 8002422:	0049      	lsls	r1, r1, #1
 8002424:	430a      	orrs	r2, r1
 8002426:	651a      	str	r2, [r3, #80]	; 0x50
 8002428:	e00b      	b.n	8002442 <HAL_RCC_OscConfig+0x512>
 800242a:	4b5c      	ldr	r3, [pc, #368]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 800242c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800242e:	4b5b      	ldr	r3, [pc, #364]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 8002430:	495b      	ldr	r1, [pc, #364]	; (80025a0 <HAL_RCC_OscConfig+0x670>)
 8002432:	400a      	ands	r2, r1
 8002434:	651a      	str	r2, [r3, #80]	; 0x50
 8002436:	4b59      	ldr	r3, [pc, #356]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 8002438:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800243a:	4b58      	ldr	r3, [pc, #352]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 800243c:	495a      	ldr	r1, [pc, #360]	; (80025a8 <HAL_RCC_OscConfig+0x678>)
 800243e:	400a      	ands	r2, r1
 8002440:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d015      	beq.n	8002476 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244a:	f7fe feef 	bl	800122c <HAL_GetTick>
 800244e:	0003      	movs	r3, r0
 8002450:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002452:	e009      	b.n	8002468 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002454:	f7fe feea 	bl	800122c <HAL_GetTick>
 8002458:	0002      	movs	r2, r0
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	4a53      	ldr	r2, [pc, #332]	; (80025ac <HAL_RCC_OscConfig+0x67c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e0c7      	b.n	80025f8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002468:	4b4c      	ldr	r3, [pc, #304]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 800246a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4013      	ands	r3, r2
 8002472:	d0ef      	beq.n	8002454 <HAL_RCC_OscConfig+0x524>
 8002474:	e014      	b.n	80024a0 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002476:	f7fe fed9 	bl	800122c <HAL_GetTick>
 800247a:	0003      	movs	r3, r0
 800247c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800247e:	e009      	b.n	8002494 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002480:	f7fe fed4 	bl	800122c <HAL_GetTick>
 8002484:	0002      	movs	r2, r0
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	4a48      	ldr	r2, [pc, #288]	; (80025ac <HAL_RCC_OscConfig+0x67c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e0b1      	b.n	80025f8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002494:	4b41      	ldr	r3, [pc, #260]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 8002496:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4013      	ands	r3, r2
 800249e:	d1ef      	bne.n	8002480 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024a0:	2327      	movs	r3, #39	; 0x27
 80024a2:	18fb      	adds	r3, r7, r3
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d105      	bne.n	80024b6 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024aa:	4b3c      	ldr	r3, [pc, #240]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 80024ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024ae:	4b3b      	ldr	r3, [pc, #236]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 80024b0:	493f      	ldr	r1, [pc, #252]	; (80025b0 <HAL_RCC_OscConfig+0x680>)
 80024b2:	400a      	ands	r2, r1
 80024b4:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d100      	bne.n	80024c0 <HAL_RCC_OscConfig+0x590>
 80024be:	e09a      	b.n	80025f6 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	2b0c      	cmp	r3, #12
 80024c4:	d064      	beq.n	8002590 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d145      	bne.n	800255a <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ce:	4b33      	ldr	r3, [pc, #204]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	4b32      	ldr	r3, [pc, #200]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 80024d4:	4937      	ldr	r1, [pc, #220]	; (80025b4 <HAL_RCC_OscConfig+0x684>)
 80024d6:	400a      	ands	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024da:	f7fe fea7 	bl	800122c <HAL_GetTick>
 80024de:	0003      	movs	r3, r0
 80024e0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe fea2 	bl	800122c <HAL_GetTick>
 80024e8:	0002      	movs	r2, r0
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e080      	b.n	80025f8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024f6:	4b29      	ldr	r3, [pc, #164]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	049b      	lsls	r3, r3, #18
 80024fe:	4013      	ands	r3, r2
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002502:	4b26      	ldr	r3, [pc, #152]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	4a2c      	ldr	r2, [pc, #176]	; (80025b8 <HAL_RCC_OscConfig+0x688>)
 8002508:	4013      	ands	r3, r2
 800250a:	0019      	movs	r1, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	431a      	orrs	r2, r3
 800251c:	4b1f      	ldr	r3, [pc, #124]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 800251e:	430a      	orrs	r2, r1
 8002520:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002522:	4b1e      	ldr	r3, [pc, #120]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 8002528:	2180      	movs	r1, #128	; 0x80
 800252a:	0449      	lsls	r1, r1, #17
 800252c:	430a      	orrs	r2, r1
 800252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7fe fe7c 	bl	800122c <HAL_GetTick>
 8002534:	0003      	movs	r3, r0
 8002536:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253a:	f7fe fe77 	bl	800122c <HAL_GetTick>
 800253e:	0002      	movs	r2, r0
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e055      	b.n	80025f8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	049b      	lsls	r3, r3, #18
 8002554:	4013      	ands	r3, r2
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x60a>
 8002558:	e04d      	b.n	80025f6 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4b0f      	ldr	r3, [pc, #60]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 8002560:	4914      	ldr	r1, [pc, #80]	; (80025b4 <HAL_RCC_OscConfig+0x684>)
 8002562:	400a      	ands	r2, r1
 8002564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002566:	f7fe fe61 	bl	800122c <HAL_GetTick>
 800256a:	0003      	movs	r3, r0
 800256c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002570:	f7fe fe5c 	bl	800122c <HAL_GetTick>
 8002574:	0002      	movs	r2, r0
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e03a      	b.n	80025f8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_RCC_OscConfig+0x66c>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	049b      	lsls	r3, r3, #18
 800258a:	4013      	ands	r3, r2
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0x640>
 800258e:	e032      	b.n	80025f6 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	2b01      	cmp	r3, #1
 8002596:	d111      	bne.n	80025bc <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e02d      	b.n	80025f8 <HAL_RCC_OscConfig+0x6c8>
 800259c:	40021000 	.word	0x40021000
 80025a0:	fffffeff 	.word	0xfffffeff
 80025a4:	40007000 	.word	0x40007000
 80025a8:	fffffbff 	.word	0xfffffbff
 80025ac:	00001388 	.word	0x00001388
 80025b0:	efffffff 	.word	0xefffffff
 80025b4:	feffffff 	.word	0xfeffffff
 80025b8:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025bc:	4b10      	ldr	r3, [pc, #64]	; (8002600 <HAL_RCC_OscConfig+0x6d0>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	025b      	lsls	r3, r3, #9
 80025c8:	401a      	ands	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d10f      	bne.n	80025f2 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	23f0      	movs	r3, #240	; 0xf0
 80025d6:	039b      	lsls	r3, r3, #14
 80025d8:	401a      	ands	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	23c0      	movs	r3, #192	; 0xc0
 80025e6:	041b      	lsls	r3, r3, #16
 80025e8:	401a      	ands	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b00a      	add	sp, #40	; 0x28
 80025fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002600:	40021000 	.word	0x40021000

08002604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002604:	b5b0      	push	{r4, r5, r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e128      	b.n	800286a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002618:	4b96      	ldr	r3, [pc, #600]	; (8002874 <HAL_RCC_ClockConfig+0x270>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2201      	movs	r2, #1
 800261e:	4013      	ands	r3, r2
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d91e      	bls.n	8002664 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	4b93      	ldr	r3, [pc, #588]	; (8002874 <HAL_RCC_ClockConfig+0x270>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2201      	movs	r2, #1
 800262c:	4393      	bics	r3, r2
 800262e:	0019      	movs	r1, r3
 8002630:	4b90      	ldr	r3, [pc, #576]	; (8002874 <HAL_RCC_ClockConfig+0x270>)
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002638:	f7fe fdf8 	bl	800122c <HAL_GetTick>
 800263c:	0003      	movs	r3, r0
 800263e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002640:	e009      	b.n	8002656 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002642:	f7fe fdf3 	bl	800122c <HAL_GetTick>
 8002646:	0002      	movs	r2, r0
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	4a8a      	ldr	r2, [pc, #552]	; (8002878 <HAL_RCC_ClockConfig+0x274>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e109      	b.n	800286a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002656:	4b87      	ldr	r3, [pc, #540]	; (8002874 <HAL_RCC_ClockConfig+0x270>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2201      	movs	r2, #1
 800265c:	4013      	ands	r3, r2
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d1ee      	bne.n	8002642 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2202      	movs	r2, #2
 800266a:	4013      	ands	r3, r2
 800266c:	d009      	beq.n	8002682 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800266e:	4b83      	ldr	r3, [pc, #524]	; (800287c <HAL_RCC_ClockConfig+0x278>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	22f0      	movs	r2, #240	; 0xf0
 8002674:	4393      	bics	r3, r2
 8002676:	0019      	movs	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	4b7f      	ldr	r3, [pc, #508]	; (800287c <HAL_RCC_ClockConfig+0x278>)
 800267e:	430a      	orrs	r2, r1
 8002680:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2201      	movs	r2, #1
 8002688:	4013      	ands	r3, r2
 800268a:	d100      	bne.n	800268e <HAL_RCC_ClockConfig+0x8a>
 800268c:	e089      	b.n	80027a2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002696:	4b79      	ldr	r3, [pc, #484]	; (800287c <HAL_RCC_ClockConfig+0x278>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	029b      	lsls	r3, r3, #10
 800269e:	4013      	ands	r3, r2
 80026a0:	d120      	bne.n	80026e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e0e1      	b.n	800286a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026ae:	4b73      	ldr	r3, [pc, #460]	; (800287c <HAL_RCC_ClockConfig+0x278>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	049b      	lsls	r3, r3, #18
 80026b6:	4013      	ands	r3, r2
 80026b8:	d114      	bne.n	80026e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0d5      	b.n	800286a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d106      	bne.n	80026d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026c6:	4b6d      	ldr	r3, [pc, #436]	; (800287c <HAL_RCC_ClockConfig+0x278>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2204      	movs	r2, #4
 80026cc:	4013      	ands	r3, r2
 80026ce:	d109      	bne.n	80026e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0ca      	b.n	800286a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026d4:	4b69      	ldr	r3, [pc, #420]	; (800287c <HAL_RCC_ClockConfig+0x278>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4013      	ands	r3, r2
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0c2      	b.n	800286a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e4:	4b65      	ldr	r3, [pc, #404]	; (800287c <HAL_RCC_ClockConfig+0x278>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	2203      	movs	r2, #3
 80026ea:	4393      	bics	r3, r2
 80026ec:	0019      	movs	r1, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	4b62      	ldr	r3, [pc, #392]	; (800287c <HAL_RCC_ClockConfig+0x278>)
 80026f4:	430a      	orrs	r2, r1
 80026f6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f8:	f7fe fd98 	bl	800122c <HAL_GetTick>
 80026fc:	0003      	movs	r3, r0
 80026fe:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b02      	cmp	r3, #2
 8002706:	d111      	bne.n	800272c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002708:	e009      	b.n	800271e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270a:	f7fe fd8f 	bl	800122c <HAL_GetTick>
 800270e:	0002      	movs	r2, r0
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	4a58      	ldr	r2, [pc, #352]	; (8002878 <HAL_RCC_ClockConfig+0x274>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e0a5      	b.n	800286a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800271e:	4b57      	ldr	r3, [pc, #348]	; (800287c <HAL_RCC_ClockConfig+0x278>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	220c      	movs	r2, #12
 8002724:	4013      	ands	r3, r2
 8002726:	2b08      	cmp	r3, #8
 8002728:	d1ef      	bne.n	800270a <HAL_RCC_ClockConfig+0x106>
 800272a:	e03a      	b.n	80027a2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d111      	bne.n	8002758 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002734:	e009      	b.n	800274a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002736:	f7fe fd79 	bl	800122c <HAL_GetTick>
 800273a:	0002      	movs	r2, r0
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	4a4d      	ldr	r2, [pc, #308]	; (8002878 <HAL_RCC_ClockConfig+0x274>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e08f      	b.n	800286a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800274a:	4b4c      	ldr	r3, [pc, #304]	; (800287c <HAL_RCC_ClockConfig+0x278>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	220c      	movs	r2, #12
 8002750:	4013      	ands	r3, r2
 8002752:	2b0c      	cmp	r3, #12
 8002754:	d1ef      	bne.n	8002736 <HAL_RCC_ClockConfig+0x132>
 8002756:	e024      	b.n	80027a2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d11b      	bne.n	8002798 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002760:	e009      	b.n	8002776 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002762:	f7fe fd63 	bl	800122c <HAL_GetTick>
 8002766:	0002      	movs	r2, r0
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	4a42      	ldr	r2, [pc, #264]	; (8002878 <HAL_RCC_ClockConfig+0x274>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e079      	b.n	800286a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002776:	4b41      	ldr	r3, [pc, #260]	; (800287c <HAL_RCC_ClockConfig+0x278>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	220c      	movs	r2, #12
 800277c:	4013      	ands	r3, r2
 800277e:	2b04      	cmp	r3, #4
 8002780:	d1ef      	bne.n	8002762 <HAL_RCC_ClockConfig+0x15e>
 8002782:	e00e      	b.n	80027a2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002784:	f7fe fd52 	bl	800122c <HAL_GetTick>
 8002788:	0002      	movs	r2, r0
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	4a3a      	ldr	r2, [pc, #232]	; (8002878 <HAL_RCC_ClockConfig+0x274>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e068      	b.n	800286a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002798:	4b38      	ldr	r3, [pc, #224]	; (800287c <HAL_RCC_ClockConfig+0x278>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	220c      	movs	r2, #12
 800279e:	4013      	ands	r3, r2
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027a2:	4b34      	ldr	r3, [pc, #208]	; (8002874 <HAL_RCC_ClockConfig+0x270>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2201      	movs	r2, #1
 80027a8:	4013      	ands	r3, r2
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d21e      	bcs.n	80027ee <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b0:	4b30      	ldr	r3, [pc, #192]	; (8002874 <HAL_RCC_ClockConfig+0x270>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2201      	movs	r2, #1
 80027b6:	4393      	bics	r3, r2
 80027b8:	0019      	movs	r1, r3
 80027ba:	4b2e      	ldr	r3, [pc, #184]	; (8002874 <HAL_RCC_ClockConfig+0x270>)
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027c2:	f7fe fd33 	bl	800122c <HAL_GetTick>
 80027c6:	0003      	movs	r3, r0
 80027c8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ca:	e009      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027cc:	f7fe fd2e 	bl	800122c <HAL_GetTick>
 80027d0:	0002      	movs	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	4a28      	ldr	r2, [pc, #160]	; (8002878 <HAL_RCC_ClockConfig+0x274>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e044      	b.n	800286a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e0:	4b24      	ldr	r3, [pc, #144]	; (8002874 <HAL_RCC_ClockConfig+0x270>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2201      	movs	r2, #1
 80027e6:	4013      	ands	r3, r2
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d1ee      	bne.n	80027cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2204      	movs	r2, #4
 80027f4:	4013      	ands	r3, r2
 80027f6:	d009      	beq.n	800280c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f8:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_RCC_ClockConfig+0x278>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a20      	ldr	r2, [pc, #128]	; (8002880 <HAL_RCC_ClockConfig+0x27c>)
 80027fe:	4013      	ands	r3, r2
 8002800:	0019      	movs	r1, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	4b1d      	ldr	r3, [pc, #116]	; (800287c <HAL_RCC_ClockConfig+0x278>)
 8002808:	430a      	orrs	r2, r1
 800280a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2208      	movs	r2, #8
 8002812:	4013      	ands	r3, r2
 8002814:	d00a      	beq.n	800282c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002816:	4b19      	ldr	r3, [pc, #100]	; (800287c <HAL_RCC_ClockConfig+0x278>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	4a1a      	ldr	r2, [pc, #104]	; (8002884 <HAL_RCC_ClockConfig+0x280>)
 800281c:	4013      	ands	r3, r2
 800281e:	0019      	movs	r1, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	00da      	lsls	r2, r3, #3
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <HAL_RCC_ClockConfig+0x278>)
 8002828:	430a      	orrs	r2, r1
 800282a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800282c:	f000 f8c4 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8002830:	0001      	movs	r1, r0
 8002832:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_RCC_ClockConfig+0x278>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	220f      	movs	r2, #15
 800283a:	4013      	ands	r3, r2
 800283c:	4a12      	ldr	r2, [pc, #72]	; (8002888 <HAL_RCC_ClockConfig+0x284>)
 800283e:	5cd3      	ldrb	r3, [r2, r3]
 8002840:	000a      	movs	r2, r1
 8002842:	40da      	lsrs	r2, r3
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_RCC_ClockConfig+0x288>)
 8002846:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_RCC_ClockConfig+0x28c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	250b      	movs	r5, #11
 800284e:	197c      	adds	r4, r7, r5
 8002850:	0018      	movs	r0, r3
 8002852:	f7fe fca5 	bl	80011a0 <HAL_InitTick>
 8002856:	0003      	movs	r3, r0
 8002858:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800285a:	197b      	adds	r3, r7, r5
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002862:	197b      	adds	r3, r7, r5
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	e000      	b.n	800286a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	0018      	movs	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	b004      	add	sp, #16
 8002870:	bdb0      	pop	{r4, r5, r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	40022000 	.word	0x40022000
 8002878:	00001388 	.word	0x00001388
 800287c:	40021000 	.word	0x40021000
 8002880:	fffff8ff 	.word	0xfffff8ff
 8002884:	ffffc7ff 	.word	0xffffc7ff
 8002888:	08004c80 	.word	0x08004c80
 800288c:	20000000 	.word	0x20000000
 8002890:	20000004 	.word	0x20000004

08002894 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002894:	b590      	push	{r4, r7, lr}
 8002896:	b08d      	sub	sp, #52	; 0x34
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0};
 80028a0:	241c      	movs	r4, #28
 80028a2:	193b      	adds	r3, r7, r4
 80028a4:	0018      	movs	r0, r3
 80028a6:	2314      	movs	r3, #20
 80028a8:	001a      	movs	r2, r3
 80028aa:	2100      	movs	r1, #0
 80028ac:	f002 f9ab 	bl	8004c06 <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80028b0:	0020      	movs	r0, r4
 80028b2:	183b      	adds	r3, r7, r0
 80028b4:	2202      	movs	r2, #2
 80028b6:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80028b8:	183b      	adds	r3, r7, r0
 80028ba:	2202      	movs	r2, #2
 80028bc:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 80028be:	183b      	adds	r3, r7, r0
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
  if(RCC_MCOx == RCC_MCO1)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d11a      	bne.n	8002900 <HAL_RCC_MCOConfig+0x6c>
  {
    gpio.Pin       = MCO1_PIN;
 80028ca:	183b      	adds	r3, r7, r0
 80028cc:	2280      	movs	r2, #128	; 0x80
 80028ce:	0052      	lsls	r2, r2, #1
 80028d0:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 80028d2:	183b      	adds	r3, r7, r0
 80028d4:	2200      	movs	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80028d8:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <HAL_RCC_MCOConfig+0xfc>)
 80028da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028dc:	4b2c      	ldr	r3, [pc, #176]	; (8002990 <HAL_RCC_MCOConfig+0xfc>)
 80028de:	2101      	movs	r1, #1
 80028e0:	430a      	orrs	r2, r1
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80028e4:	4b2a      	ldr	r3, [pc, #168]	; (8002990 <HAL_RCC_MCOConfig+0xfc>)
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	2201      	movs	r2, #1
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80028f0:	183a      	adds	r2, r7, r0
 80028f2:	23a0      	movs	r3, #160	; 0xa0
 80028f4:	05db      	lsls	r3, r3, #23
 80028f6:	0011      	movs	r1, r2
 80028f8:	0018      	movs	r0, r3
 80028fa:	f7ff f96b 	bl	8001bd4 <HAL_GPIO_Init>
 80028fe:	e038      	b.n	8002972 <HAL_RCC_MCOConfig+0xde>
  }
#if defined(RCC_MCO3_SUPPORT)
  else if (RCC_MCOx == RCC_MCO3)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d11a      	bne.n	800293c <HAL_RCC_MCOConfig+0xa8>
  {
    gpio.Pin       = MCO3_PIN;
 8002906:	201c      	movs	r0, #28
 8002908:	183b      	adds	r3, r7, r0
 800290a:	2280      	movs	r2, #128	; 0x80
 800290c:	0192      	lsls	r2, r2, #6
 800290e:	601a      	str	r2, [r3, #0]
    gpio.Alternate = MCO3_GPIO_AF;
 8002910:	183b      	adds	r3, r7, r0
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]

    /* MCO3 Clock Enable */
    MCO3_CLK_ENABLE();
 8002916:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <HAL_RCC_MCOConfig+0xfc>)
 8002918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800291a:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <HAL_RCC_MCOConfig+0xfc>)
 800291c:	2102      	movs	r1, #2
 800291e:	430a      	orrs	r2, r1
 8002920:	62da      	str	r2, [r3, #44]	; 0x2c
 8002922:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <HAL_RCC_MCOConfig+0xfc>)
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	2202      	movs	r2, #2
 8002928:	4013      	ands	r3, r2
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	697b      	ldr	r3, [r7, #20]
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 800292e:	183b      	adds	r3, r7, r0
 8002930:	4a18      	ldr	r2, [pc, #96]	; (8002994 <HAL_RCC_MCOConfig+0x100>)
 8002932:	0019      	movs	r1, r3
 8002934:	0010      	movs	r0, r2
 8002936:	f7ff f94d 	bl	8001bd4 <HAL_GPIO_Init>
 800293a:	e01a      	b.n	8002972 <HAL_RCC_MCOConfig+0xde>
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {
    gpio.Pin       = MCO2_PIN;
 800293c:	201c      	movs	r0, #28
 800293e:	183b      	adds	r3, r7, r0
 8002940:	2280      	movs	r2, #128	; 0x80
 8002942:	0092      	lsls	r2, r2, #2
 8002944:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8002946:	183b      	adds	r3, r7, r0
 8002948:	2200      	movs	r2, #0
 800294a:	611a      	str	r2, [r3, #16]

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 800294c:	4b10      	ldr	r3, [pc, #64]	; (8002990 <HAL_RCC_MCOConfig+0xfc>)
 800294e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002950:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <HAL_RCC_MCOConfig+0xfc>)
 8002952:	2101      	movs	r1, #1
 8002954:	430a      	orrs	r2, r1
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c
 8002958:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <HAL_RCC_MCOConfig+0xfc>)
 800295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295c:	2201      	movs	r2, #1
 800295e:	4013      	ands	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	693b      	ldr	r3, [r7, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 8002964:	183a      	adds	r2, r7, r0
 8002966:	23a0      	movs	r3, #160	; 0xa0
 8002968:	05db      	lsls	r3, r3, #23
 800296a:	0011      	movs	r1, r2
 800296c:	0018      	movs	r0, r3
 800296e:	f7ff f931 	bl	8001bd4 <HAL_GPIO_Init>
  }

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002972:	4b07      	ldr	r3, [pc, #28]	; (8002990 <HAL_RCC_MCOConfig+0xfc>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	4a08      	ldr	r2, [pc, #32]	; (8002998 <HAL_RCC_MCOConfig+0x104>)
 8002978:	4013      	ands	r3, r2
 800297a:	0019      	movs	r1, r3
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	431a      	orrs	r2, r3
 8002982:	4b03      	ldr	r3, [pc, #12]	; (8002990 <HAL_RCC_MCOConfig+0xfc>)
 8002984:	430a      	orrs	r2, r1
 8002986:	60da      	str	r2, [r3, #12]
}
 8002988:	46c0      	nop			; (mov r8, r8)
 800298a:	46bd      	mov	sp, r7
 800298c:	b00d      	add	sp, #52	; 0x34
 800298e:	bd90      	pop	{r4, r7, pc}
 8002990:	40021000 	.word	0x40021000
 8002994:	50000400 	.word	0x50000400
 8002998:	80ffffff 	.word	0x80ffffff

0800299c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <HAL_RCC_EnableCSS+0x18>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <HAL_RCC_EnableCSS+0x18>)
 80029a6:	2180      	movs	r1, #128	; 0x80
 80029a8:	0309      	lsls	r1, r1, #12
 80029aa:	430a      	orrs	r2, r1
 80029ac:	601a      	str	r2, [r3, #0]
}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021000 	.word	0x40021000

080029b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b8:	b5b0      	push	{r4, r5, r7, lr}
 80029ba:	b08e      	sub	sp, #56	; 0x38
 80029bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80029be:	4b4c      	ldr	r3, [pc, #304]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x138>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c6:	230c      	movs	r3, #12
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	d014      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0x40>
 80029ce:	d900      	bls.n	80029d2 <HAL_RCC_GetSysClockFreq+0x1a>
 80029d0:	e07b      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x112>
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d002      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x24>
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d00b      	beq.n	80029f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80029da:	e076      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80029dc:	4b44      	ldr	r3, [pc, #272]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x138>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2210      	movs	r2, #16
 80029e2:	4013      	ands	r3, r2
 80029e4:	d002      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80029e6:	4b43      	ldr	r3, [pc, #268]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80029e8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80029ea:	e07c      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80029ec:	4b42      	ldr	r3, [pc, #264]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x140>)
 80029ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029f0:	e079      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029f2:	4b42      	ldr	r3, [pc, #264]	; (8002afc <HAL_RCC_GetSysClockFreq+0x144>)
 80029f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029f6:	e076      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80029f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fa:	0c9a      	lsrs	r2, r3, #18
 80029fc:	230f      	movs	r3, #15
 80029fe:	401a      	ands	r2, r3
 8002a00:	4b3f      	ldr	r3, [pc, #252]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x148>)
 8002a02:	5c9b      	ldrb	r3, [r3, r2]
 8002a04:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a08:	0d9a      	lsrs	r2, r3, #22
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	3301      	adds	r3, #1
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a12:	4b37      	ldr	r3, [pc, #220]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	2380      	movs	r3, #128	; 0x80
 8002a18:	025b      	lsls	r3, r3, #9
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d01a      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	61bb      	str	r3, [r7, #24]
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
 8002a26:	4a35      	ldr	r2, [pc, #212]	; (8002afc <HAL_RCC_GetSysClockFreq+0x144>)
 8002a28:	2300      	movs	r3, #0
 8002a2a:	69b8      	ldr	r0, [r7, #24]
 8002a2c:	69f9      	ldr	r1, [r7, #28]
 8002a2e:	f7fd fc17 	bl	8000260 <__aeabi_lmul>
 8002a32:	0002      	movs	r2, r0
 8002a34:	000b      	movs	r3, r1
 8002a36:	0010      	movs	r0, r2
 8002a38:	0019      	movs	r1, r3
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f7fd fbeb 	bl	8000220 <__aeabi_uldivmod>
 8002a4a:	0002      	movs	r2, r0
 8002a4c:	000b      	movs	r3, r1
 8002a4e:	0013      	movs	r3, r2
 8002a50:	637b      	str	r3, [r7, #52]	; 0x34
 8002a52:	e037      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002a54:	4b26      	ldr	r3, [pc, #152]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2210      	movs	r2, #16
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d01a      	beq.n	8002a94 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	4a23      	ldr	r2, [pc, #140]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	68b8      	ldr	r0, [r7, #8]
 8002a6c:	68f9      	ldr	r1, [r7, #12]
 8002a6e:	f7fd fbf7 	bl	8000260 <__aeabi_lmul>
 8002a72:	0002      	movs	r2, r0
 8002a74:	000b      	movs	r3, r1
 8002a76:	0010      	movs	r0, r2
 8002a78:	0019      	movs	r1, r3
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	603b      	str	r3, [r7, #0]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f7fd fbcb 	bl	8000220 <__aeabi_uldivmod>
 8002a8a:	0002      	movs	r2, r0
 8002a8c:	000b      	movs	r3, r1
 8002a8e:	0013      	movs	r3, r2
 8002a90:	637b      	str	r3, [r7, #52]	; 0x34
 8002a92:	e017      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a96:	0018      	movs	r0, r3
 8002a98:	2300      	movs	r3, #0
 8002a9a:	0019      	movs	r1, r3
 8002a9c:	4a16      	ldr	r2, [pc, #88]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x140>)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f7fd fbde 	bl	8000260 <__aeabi_lmul>
 8002aa4:	0002      	movs	r2, r0
 8002aa6:	000b      	movs	r3, r1
 8002aa8:	0010      	movs	r0, r2
 8002aaa:	0019      	movs	r1, r3
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	001c      	movs	r4, r3
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	001d      	movs	r5, r3
 8002ab4:	0022      	movs	r2, r4
 8002ab6:	002b      	movs	r3, r5
 8002ab8:	f7fd fbb2 	bl	8000220 <__aeabi_uldivmod>
 8002abc:	0002      	movs	r2, r0
 8002abe:	000b      	movs	r3, r1
 8002ac0:	0013      	movs	r3, r2
 8002ac2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ac8:	e00d      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	0b5b      	lsrs	r3, r3, #13
 8002ad0:	2207      	movs	r2, #7
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	2280      	movs	r2, #128	; 0x80
 8002adc:	0212      	lsls	r2, r2, #8
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	0013      	movs	r3, r2
 8002ae2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ae4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002ae8:	0018      	movs	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b00e      	add	sp, #56	; 0x38
 8002aee:	bdb0      	pop	{r4, r5, r7, pc}
 8002af0:	40021000 	.word	0x40021000
 8002af4:	003d0900 	.word	0x003d0900
 8002af8:	00f42400 	.word	0x00f42400
 8002afc:	007a1200 	.word	0x007a1200
 8002b00:	08004c98 	.word	0x08004c98

08002b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b08:	4b02      	ldr	r3, [pc, #8]	; (8002b14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	20000000 	.word	0x20000000

08002b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b1c:	f7ff fff2 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8002b20:	0001      	movs	r1, r0
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	0a1b      	lsrs	r3, r3, #8
 8002b28:	2207      	movs	r2, #7
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b2e:	5cd3      	ldrb	r3, [r2, r3]
 8002b30:	40d9      	lsrs	r1, r3
 8002b32:	000b      	movs	r3, r1
}
 8002b34:	0018      	movs	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	08004c90 	.word	0x08004c90

08002b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b48:	f7ff ffdc 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8002b4c:	0001      	movs	r1, r0
 8002b4e:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	0adb      	lsrs	r3, r3, #11
 8002b54:	2207      	movs	r2, #7
 8002b56:	4013      	ands	r3, r2
 8002b58:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b5a:	5cd3      	ldrb	r3, [r2, r3]
 8002b5c:	40d9      	lsrs	r1, r3
 8002b5e:	000b      	movs	r3, r1
}
 8002b60:	0018      	movs	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	08004c90 	.word	0x08004c90

08002b70 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002b74:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <HAL_RCC_NMI_IRQHandler+0x28>)
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	401a      	ands	r2, r3
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d105      	bne.n	8002b92 <HAL_RCC_NMI_IRQHandler+0x22>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002b86:	f000 f809 	bl	8002b9c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002b8a:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <HAL_RCC_NMI_IRQHandler+0x28>)
 8002b8c:	2280      	movs	r2, #128	; 0x80
 8002b8e:	0052      	lsls	r2, r2, #1
 8002b90:	619a      	str	r2, [r3, #24]
  }
}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000

08002b9c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002bb0:	2017      	movs	r0, #23
 8002bb2:	183b      	adds	r3, r7, r0
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d100      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002bc2:	e0c7      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc4:	4b8b      	ldr	r3, [pc, #556]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	055b      	lsls	r3, r3, #21
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d109      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd0:	4b88      	ldr	r3, [pc, #544]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bd4:	4b87      	ldr	r3, [pc, #540]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002bd6:	2180      	movs	r1, #128	; 0x80
 8002bd8:	0549      	lsls	r1, r1, #21
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002bde:	183b      	adds	r3, r7, r0
 8002be0:	2201      	movs	r2, #1
 8002be2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be4:	4b84      	ldr	r3, [pc, #528]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4013      	ands	r3, r2
 8002bee:	d11a      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bf0:	4b81      	ldr	r3, [pc, #516]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4b80      	ldr	r3, [pc, #512]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002bf6:	2180      	movs	r1, #128	; 0x80
 8002bf8:	0049      	lsls	r1, r1, #1
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bfe:	f7fe fb15 	bl	800122c <HAL_GetTick>
 8002c02:	0003      	movs	r3, r0
 8002c04:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c06:	e008      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c08:	f7fe fb10 	bl	800122c <HAL_GetTick>
 8002c0c:	0002      	movs	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b64      	cmp	r3, #100	; 0x64
 8002c14:	d901      	bls.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e0e8      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1a:	4b77      	ldr	r3, [pc, #476]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4013      	ands	r3, r2
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002c26:	4b73      	ldr	r3, [pc, #460]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	23c0      	movs	r3, #192	; 0xc0
 8002c2c:	039b      	lsls	r3, r3, #14
 8002c2e:	4013      	ands	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	23c0      	movs	r3, #192	; 0xc0
 8002c38:	039b      	lsls	r3, r3, #14
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d013      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	23c0      	movs	r3, #192	; 0xc0
 8002c48:	029b      	lsls	r3, r3, #10
 8002c4a:	401a      	ands	r2, r3
 8002c4c:	23c0      	movs	r3, #192	; 0xc0
 8002c4e:	029b      	lsls	r3, r3, #10
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d10a      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002c54:	4b67      	ldr	r3, [pc, #412]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	029b      	lsls	r3, r3, #10
 8002c5c:	401a      	ands	r2, r3
 8002c5e:	2380      	movs	r3, #128	; 0x80
 8002c60:	029b      	lsls	r3, r3, #10
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d101      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e0c0      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002c6a:	4b62      	ldr	r3, [pc, #392]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c6e:	23c0      	movs	r3, #192	; 0xc0
 8002c70:	029b      	lsls	r3, r3, #10
 8002c72:	4013      	ands	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d03b      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	23c0      	movs	r3, #192	; 0xc0
 8002c82:	029b      	lsls	r3, r3, #10
 8002c84:	4013      	ands	r3, r2
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d033      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2220      	movs	r2, #32
 8002c92:	4013      	ands	r3, r2
 8002c94:	d02e      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002c96:	4b57      	ldr	r3, [pc, #348]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9a:	4a58      	ldr	r2, [pc, #352]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ca0:	4b54      	ldr	r3, [pc, #336]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002ca2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ca4:	4b53      	ldr	r3, [pc, #332]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002ca6:	2180      	movs	r1, #128	; 0x80
 8002ca8:	0309      	lsls	r1, r1, #12
 8002caa:	430a      	orrs	r2, r1
 8002cac:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cae:	4b51      	ldr	r3, [pc, #324]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cb2:	4b50      	ldr	r3, [pc, #320]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cb4:	4952      	ldr	r1, [pc, #328]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cb6:	400a      	ands	r2, r1
 8002cb8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002cba:	4b4e      	ldr	r3, [pc, #312]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d014      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cca:	f7fe faaf 	bl	800122c <HAL_GetTick>
 8002cce:	0003      	movs	r3, r0
 8002cd0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cd2:	e009      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd4:	f7fe faaa 	bl	800122c <HAL_GetTick>
 8002cd8:	0002      	movs	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	4a49      	ldr	r2, [pc, #292]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e081      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ce8:	4b42      	ldr	r3, [pc, #264]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d0ef      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d01f      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	23c0      	movs	r3, #192	; 0xc0
 8002d04:	029b      	lsls	r3, r3, #10
 8002d06:	401a      	ands	r2, r3
 8002d08:	23c0      	movs	r3, #192	; 0xc0
 8002d0a:	029b      	lsls	r3, r3, #10
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d10c      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002d10:	4b38      	ldr	r3, [pc, #224]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a3c      	ldr	r2, [pc, #240]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	0019      	movs	r1, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	23c0      	movs	r3, #192	; 0xc0
 8002d20:	039b      	lsls	r3, r3, #14
 8002d22:	401a      	ands	r2, r3
 8002d24:	4b33      	ldr	r3, [pc, #204]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d26:	430a      	orrs	r2, r1
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	4b32      	ldr	r3, [pc, #200]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d2c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	23c0      	movs	r3, #192	; 0xc0
 8002d34:	029b      	lsls	r3, r3, #10
 8002d36:	401a      	ands	r2, r3
 8002d38:	4b2e      	ldr	r3, [pc, #184]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d3e:	2317      	movs	r3, #23
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d105      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d48:	4b2a      	ldr	r3, [pc, #168]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d4c:	4b29      	ldr	r3, [pc, #164]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d4e:	492f      	ldr	r1, [pc, #188]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d50:	400a      	ands	r2, r1
 8002d52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d009      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d5e:	4b25      	ldr	r3, [pc, #148]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d62:	2203      	movs	r2, #3
 8002d64:	4393      	bics	r3, r2
 8002d66:	0019      	movs	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	4b21      	ldr	r3, [pc, #132]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2202      	movs	r2, #2
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d009      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d80:	220c      	movs	r2, #12
 8002d82:	4393      	bics	r3, r2
 8002d84:	0019      	movs	r1, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2204      	movs	r2, #4
 8002d96:	4013      	ands	r3, r2
 8002d98:	d009      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d9a:	4b16      	ldr	r3, [pc, #88]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9e:	4a1c      	ldr	r2, [pc, #112]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	0019      	movs	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002daa:	430a      	orrs	r2, r1
 8002dac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2208      	movs	r2, #8
 8002db4:	4013      	ands	r3, r2
 8002db6:	d009      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002db8:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dbc:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2280      	movs	r2, #128	; 0x80
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	d009      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002dd6:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dda:	4a0f      	ldr	r2, [pc, #60]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	0019      	movs	r1, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699a      	ldr	r2, [r3, #24]
 8002de4:	4b03      	ldr	r3, [pc, #12]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002de6:	430a      	orrs	r2, r1
 8002de8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	0018      	movs	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b006      	add	sp, #24
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40007000 	.word	0x40007000
 8002dfc:	fffcffff 	.word	0xfffcffff
 8002e00:	fff7ffff 	.word	0xfff7ffff
 8002e04:	00001388 	.word	0x00001388
 8002e08:	ffcfffff 	.word	0xffcfffff
 8002e0c:	efffffff 	.word	0xefffffff
 8002e10:	fffff3ff 	.word	0xfffff3ff
 8002e14:	ffffcfff 	.word	0xffffcfff
 8002e18:	fff3ffff 	.word	0xfff3ffff

08002e1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e083      	b.n	8002f36 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	2382      	movs	r3, #130	; 0x82
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d009      	beq.n	8002e56 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	61da      	str	r2, [r3, #28]
 8002e48:	e005      	b.n	8002e56 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2251      	movs	r2, #81	; 0x51
 8002e60:	5c9b      	ldrb	r3, [r3, r2]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d107      	bne.n	8002e78 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2250      	movs	r2, #80	; 0x50
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7fe f8a2 	bl	8000fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2251      	movs	r2, #81	; 0x51
 8002e7c:	2102      	movs	r1, #2
 8002e7e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2140      	movs	r1, #64	; 0x40
 8002e8c:	438a      	bics	r2, r1
 8002e8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	2382      	movs	r3, #130	; 0x82
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	401a      	ands	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6899      	ldr	r1, [r3, #8]
 8002e9e:	2384      	movs	r3, #132	; 0x84
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	400b      	ands	r3, r1
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68d9      	ldr	r1, [r3, #12]
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	400b      	ands	r3, r1
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	400b      	ands	r3, r1
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	400b      	ands	r3, r1
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6999      	ldr	r1, [r3, #24]
 8002eca:	2380      	movs	r3, #128	; 0x80
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	400b      	ands	r3, r1
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	2138      	movs	r1, #56	; 0x38
 8002ed8:	400b      	ands	r3, r1
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	2180      	movs	r1, #128	; 0x80
 8002ee2:	400b      	ands	r3, r1
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	0011      	movs	r1, r2
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	019b      	lsls	r3, r3, #6
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	0c1b      	lsrs	r3, r3, #16
 8002f00:	2204      	movs	r2, #4
 8002f02:	4013      	ands	r3, r2
 8002f04:	0019      	movs	r1, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	2210      	movs	r2, #16
 8002f0c:	401a      	ands	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4907      	ldr	r1, [pc, #28]	; (8002f40 <HAL_SPI_Init+0x124>)
 8002f22:	400a      	ands	r2, r1
 8002f24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2251      	movs	r2, #81	; 0x51
 8002f30:	2101      	movs	r1, #1
 8002f32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	0018      	movs	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b002      	add	sp, #8
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	fffff7ff 	.word	0xfffff7ff

08002f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e032      	b.n	8002fbc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2239      	movs	r2, #57	; 0x39
 8002f5a:	5c9b      	ldrb	r3, [r3, r2]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d107      	bne.n	8002f72 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2238      	movs	r2, #56	; 0x38
 8002f66:	2100      	movs	r1, #0
 8002f68:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f7fe f869 	bl	8001044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2239      	movs	r2, #57	; 0x39
 8002f76:	2102      	movs	r1, #2
 8002f78:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3304      	adds	r3, #4
 8002f82:	0019      	movs	r1, r3
 8002f84:	0010      	movs	r0, r2
 8002f86:	f000 fa01 	bl	800338c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	223e      	movs	r2, #62	; 0x3e
 8002f8e:	2101      	movs	r1, #1
 8002f90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	223a      	movs	r2, #58	; 0x3a
 8002f96:	2101      	movs	r1, #1
 8002f98:	5499      	strb	r1, [r3, r2]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	223b      	movs	r2, #59	; 0x3b
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	5499      	strb	r1, [r3, r2]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	223c      	movs	r2, #60	; 0x3c
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	5499      	strb	r1, [r3, r2]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	223d      	movs	r2, #61	; 0x3d
 8002fae:	2101      	movs	r1, #1
 8002fb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2239      	movs	r2, #57	; 0x39
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b002      	add	sp, #8
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d124      	bne.n	8003024 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d11d      	bne.n	8003024 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2203      	movs	r2, #3
 8002fee:	4252      	negs	r2, r2
 8002ff0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	2203      	movs	r2, #3
 8003000:	4013      	ands	r3, r2
 8003002:	d004      	beq.n	800300e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	0018      	movs	r0, r3
 8003008:	f000 f9a8 	bl	800335c <HAL_TIM_IC_CaptureCallback>
 800300c:	e007      	b.n	800301e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	0018      	movs	r0, r3
 8003012:	f000 f99b 	bl	800334c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	0018      	movs	r0, r3
 800301a:	f000 f9a7 	bl	800336c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2204      	movs	r2, #4
 800302c:	4013      	ands	r3, r2
 800302e:	2b04      	cmp	r3, #4
 8003030:	d125      	bne.n	800307e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	2204      	movs	r2, #4
 800303a:	4013      	ands	r3, r2
 800303c:	2b04      	cmp	r3, #4
 800303e:	d11e      	bne.n	800307e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2205      	movs	r2, #5
 8003046:	4252      	negs	r2, r2
 8003048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2202      	movs	r2, #2
 800304e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699a      	ldr	r2, [r3, #24]
 8003056:	23c0      	movs	r3, #192	; 0xc0
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4013      	ands	r3, r2
 800305c:	d004      	beq.n	8003068 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	0018      	movs	r0, r3
 8003062:	f000 f97b 	bl	800335c <HAL_TIM_IC_CaptureCallback>
 8003066:	e007      	b.n	8003078 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	0018      	movs	r0, r3
 800306c:	f000 f96e 	bl	800334c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	0018      	movs	r0, r3
 8003074:	f000 f97a 	bl	800336c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	2208      	movs	r2, #8
 8003086:	4013      	ands	r3, r2
 8003088:	2b08      	cmp	r3, #8
 800308a:	d124      	bne.n	80030d6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	2208      	movs	r2, #8
 8003094:	4013      	ands	r3, r2
 8003096:	2b08      	cmp	r3, #8
 8003098:	d11d      	bne.n	80030d6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2209      	movs	r2, #9
 80030a0:	4252      	negs	r2, r2
 80030a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2204      	movs	r2, #4
 80030a8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	2203      	movs	r2, #3
 80030b2:	4013      	ands	r3, r2
 80030b4:	d004      	beq.n	80030c0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	0018      	movs	r0, r3
 80030ba:	f000 f94f 	bl	800335c <HAL_TIM_IC_CaptureCallback>
 80030be:	e007      	b.n	80030d0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	0018      	movs	r0, r3
 80030c4:	f000 f942 	bl	800334c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	0018      	movs	r0, r3
 80030cc:	f000 f94e 	bl	800336c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2210      	movs	r2, #16
 80030de:	4013      	ands	r3, r2
 80030e0:	2b10      	cmp	r3, #16
 80030e2:	d125      	bne.n	8003130 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	2210      	movs	r2, #16
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b10      	cmp	r3, #16
 80030f0:	d11e      	bne.n	8003130 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2211      	movs	r2, #17
 80030f8:	4252      	negs	r2, r2
 80030fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2208      	movs	r2, #8
 8003100:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69da      	ldr	r2, [r3, #28]
 8003108:	23c0      	movs	r3, #192	; 0xc0
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4013      	ands	r3, r2
 800310e:	d004      	beq.n	800311a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	0018      	movs	r0, r3
 8003114:	f000 f922 	bl	800335c <HAL_TIM_IC_CaptureCallback>
 8003118:	e007      	b.n	800312a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	0018      	movs	r0, r3
 800311e:	f000 f915 	bl	800334c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	0018      	movs	r0, r3
 8003126:	f000 f921 	bl	800336c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2201      	movs	r2, #1
 8003138:	4013      	ands	r3, r2
 800313a:	2b01      	cmp	r3, #1
 800313c:	d10f      	bne.n	800315e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2201      	movs	r2, #1
 8003146:	4013      	ands	r3, r2
 8003148:	2b01      	cmp	r3, #1
 800314a:	d108      	bne.n	800315e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2202      	movs	r2, #2
 8003152:	4252      	negs	r2, r2
 8003154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	0018      	movs	r0, r3
 800315a:	f000 f8ef 	bl	800333c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	2240      	movs	r2, #64	; 0x40
 8003166:	4013      	ands	r3, r2
 8003168:	2b40      	cmp	r3, #64	; 0x40
 800316a:	d10f      	bne.n	800318c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2240      	movs	r2, #64	; 0x40
 8003174:	4013      	ands	r3, r2
 8003176:	2b40      	cmp	r3, #64	; 0x40
 8003178:	d108      	bne.n	800318c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2241      	movs	r2, #65	; 0x41
 8003180:	4252      	negs	r2, r2
 8003182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	0018      	movs	r0, r3
 8003188:	f000 f8f8 	bl	800337c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800318c:	46c0      	nop			; (mov r8, r8)
 800318e:	46bd      	mov	sp, r7
 8003190:	b002      	add	sp, #8
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800319e:	230f      	movs	r3, #15
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2238      	movs	r2, #56	; 0x38
 80031aa:	5c9b      	ldrb	r3, [r3, r2]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_TIM_ConfigClockSource+0x20>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e0bc      	b.n	800332e <HAL_TIM_ConfigClockSource+0x19a>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2238      	movs	r2, #56	; 0x38
 80031b8:	2101      	movs	r1, #1
 80031ba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2239      	movs	r2, #57	; 0x39
 80031c0:	2102      	movs	r1, #2
 80031c2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2277      	movs	r2, #119	; 0x77
 80031d0:	4393      	bics	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4a58      	ldr	r2, [pc, #352]	; (8003338 <HAL_TIM_ConfigClockSource+0x1a4>)
 80031d8:	4013      	ands	r3, r2
 80031da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2280      	movs	r2, #128	; 0x80
 80031ea:	0192      	lsls	r2, r2, #6
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d040      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0xde>
 80031f0:	2280      	movs	r2, #128	; 0x80
 80031f2:	0192      	lsls	r2, r2, #6
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d900      	bls.n	80031fa <HAL_TIM_ConfigClockSource+0x66>
 80031f8:	e088      	b.n	800330c <HAL_TIM_ConfigClockSource+0x178>
 80031fa:	2280      	movs	r2, #128	; 0x80
 80031fc:	0152      	lsls	r2, r2, #5
 80031fe:	4293      	cmp	r3, r2
 8003200:	d100      	bne.n	8003204 <HAL_TIM_ConfigClockSource+0x70>
 8003202:	e088      	b.n	8003316 <HAL_TIM_ConfigClockSource+0x182>
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	0152      	lsls	r2, r2, #5
 8003208:	4293      	cmp	r3, r2
 800320a:	d900      	bls.n	800320e <HAL_TIM_ConfigClockSource+0x7a>
 800320c:	e07e      	b.n	800330c <HAL_TIM_ConfigClockSource+0x178>
 800320e:	2b70      	cmp	r3, #112	; 0x70
 8003210:	d018      	beq.n	8003244 <HAL_TIM_ConfigClockSource+0xb0>
 8003212:	d900      	bls.n	8003216 <HAL_TIM_ConfigClockSource+0x82>
 8003214:	e07a      	b.n	800330c <HAL_TIM_ConfigClockSource+0x178>
 8003216:	2b60      	cmp	r3, #96	; 0x60
 8003218:	d04f      	beq.n	80032ba <HAL_TIM_ConfigClockSource+0x126>
 800321a:	d900      	bls.n	800321e <HAL_TIM_ConfigClockSource+0x8a>
 800321c:	e076      	b.n	800330c <HAL_TIM_ConfigClockSource+0x178>
 800321e:	2b50      	cmp	r3, #80	; 0x50
 8003220:	d03b      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x106>
 8003222:	d900      	bls.n	8003226 <HAL_TIM_ConfigClockSource+0x92>
 8003224:	e072      	b.n	800330c <HAL_TIM_ConfigClockSource+0x178>
 8003226:	2b40      	cmp	r3, #64	; 0x40
 8003228:	d057      	beq.n	80032da <HAL_TIM_ConfigClockSource+0x146>
 800322a:	d900      	bls.n	800322e <HAL_TIM_ConfigClockSource+0x9a>
 800322c:	e06e      	b.n	800330c <HAL_TIM_ConfigClockSource+0x178>
 800322e:	2b30      	cmp	r3, #48	; 0x30
 8003230:	d063      	beq.n	80032fa <HAL_TIM_ConfigClockSource+0x166>
 8003232:	d86b      	bhi.n	800330c <HAL_TIM_ConfigClockSource+0x178>
 8003234:	2b20      	cmp	r3, #32
 8003236:	d060      	beq.n	80032fa <HAL_TIM_ConfigClockSource+0x166>
 8003238:	d868      	bhi.n	800330c <HAL_TIM_ConfigClockSource+0x178>
 800323a:	2b00      	cmp	r3, #0
 800323c:	d05d      	beq.n	80032fa <HAL_TIM_ConfigClockSource+0x166>
 800323e:	2b10      	cmp	r3, #16
 8003240:	d05b      	beq.n	80032fa <HAL_TIM_ConfigClockSource+0x166>
 8003242:	e063      	b.n	800330c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003254:	f000 f968 	bl	8003528 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2277      	movs	r2, #119	; 0x77
 8003264:	4313      	orrs	r3, r2
 8003266:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	609a      	str	r2, [r3, #8]
      break;
 8003270:	e052      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003282:	f000 f951 	bl	8003528 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2180      	movs	r1, #128	; 0x80
 8003292:	01c9      	lsls	r1, r1, #7
 8003294:	430a      	orrs	r2, r1
 8003296:	609a      	str	r2, [r3, #8]
      break;
 8003298:	e03e      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032a6:	001a      	movs	r2, r3
 80032a8:	f000 f8c4 	bl	8003434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2150      	movs	r1, #80	; 0x50
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 f91e 	bl	80034f4 <TIM_ITRx_SetConfig>
      break;
 80032b8:	e02e      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032c6:	001a      	movs	r2, r3
 80032c8:	f000 f8e2 	bl	8003490 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2160      	movs	r1, #96	; 0x60
 80032d2:	0018      	movs	r0, r3
 80032d4:	f000 f90e 	bl	80034f4 <TIM_ITRx_SetConfig>
      break;
 80032d8:	e01e      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e6:	001a      	movs	r2, r3
 80032e8:	f000 f8a4 	bl	8003434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2140      	movs	r1, #64	; 0x40
 80032f2:	0018      	movs	r0, r3
 80032f4:	f000 f8fe 	bl	80034f4 <TIM_ITRx_SetConfig>
      break;
 80032f8:	e00e      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	0019      	movs	r1, r3
 8003304:	0010      	movs	r0, r2
 8003306:	f000 f8f5 	bl	80034f4 <TIM_ITRx_SetConfig>
      break;
 800330a:	e005      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800330c:	230f      	movs	r3, #15
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	2201      	movs	r2, #1
 8003312:	701a      	strb	r2, [r3, #0]
      break;
 8003314:	e000      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003316:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2239      	movs	r2, #57	; 0x39
 800331c:	2101      	movs	r1, #1
 800331e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2238      	movs	r2, #56	; 0x38
 8003324:	2100      	movs	r1, #0
 8003326:	5499      	strb	r1, [r3, r2]

  return status;
 8003328:	230f      	movs	r3, #15
 800332a:	18fb      	adds	r3, r7, r3
 800332c:	781b      	ldrb	r3, [r3, #0]
}
 800332e:	0018      	movs	r0, r3
 8003330:	46bd      	mov	sp, r7
 8003332:	b004      	add	sp, #16
 8003334:	bd80      	pop	{r7, pc}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	ffff00ff 	.word	0xffff00ff

0800333c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003344:	46c0      	nop			; (mov r8, r8)
 8003346:	46bd      	mov	sp, r7
 8003348:	b002      	add	sp, #8
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003354:	46c0      	nop			; (mov r8, r8)
 8003356:	46bd      	mov	sp, r7
 8003358:	b002      	add	sp, #8
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	b002      	add	sp, #8
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003374:	46c0      	nop			; (mov r8, r8)
 8003376:	46bd      	mov	sp, r7
 8003378:	b002      	add	sp, #8
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003384:	46c0      	nop			; (mov r8, r8)
 8003386:	46bd      	mov	sp, r7
 8003388:	b002      	add	sp, #8
 800338a:	bd80      	pop	{r7, pc}

0800338c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	2380      	movs	r3, #128	; 0x80
 80033a0:	05db      	lsls	r3, r3, #23
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d007      	beq.n	80033b6 <TIM_Base_SetConfig+0x2a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a1f      	ldr	r2, [pc, #124]	; (8003428 <TIM_Base_SetConfig+0x9c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d003      	beq.n	80033b6 <TIM_Base_SetConfig+0x2a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a1e      	ldr	r2, [pc, #120]	; (800342c <TIM_Base_SetConfig+0xa0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d108      	bne.n	80033c8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2270      	movs	r2, #112	; 0x70
 80033ba:	4393      	bics	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	05db      	lsls	r3, r3, #23
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d007      	beq.n	80033e2 <TIM_Base_SetConfig+0x56>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a14      	ldr	r2, [pc, #80]	; (8003428 <TIM_Base_SetConfig+0x9c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d003      	beq.n	80033e2 <TIM_Base_SetConfig+0x56>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a13      	ldr	r2, [pc, #76]	; (800342c <TIM_Base_SetConfig+0xa0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d108      	bne.n	80033f4 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4a12      	ldr	r2, [pc, #72]	; (8003430 <TIM_Base_SetConfig+0xa4>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2280      	movs	r2, #128	; 0x80
 80033f8:	4393      	bics	r3, r2
 80033fa:	001a      	movs	r2, r3
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	615a      	str	r2, [r3, #20]
}
 8003420:	46c0      	nop			; (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	b004      	add	sp, #16
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40010800 	.word	0x40010800
 800342c:	40011400 	.word	0x40011400
 8003430:	fffffcff 	.word	0xfffffcff

08003434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	2201      	movs	r2, #1
 800344c:	4393      	bics	r3, r2
 800344e:	001a      	movs	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	22f0      	movs	r2, #240	; 0xf0
 800345e:	4393      	bics	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	220a      	movs	r2, #10
 8003470:	4393      	bics	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	621a      	str	r2, [r3, #32]
}
 8003488:	46c0      	nop			; (mov r8, r8)
 800348a:	46bd      	mov	sp, r7
 800348c:	b006      	add	sp, #24
 800348e:	bd80      	pop	{r7, pc}

08003490 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	2210      	movs	r2, #16
 80034a2:	4393      	bics	r3, r2
 80034a4:	001a      	movs	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	4a0d      	ldr	r2, [pc, #52]	; (80034f0 <TIM_TI2_ConfigInputStage+0x60>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	031b      	lsls	r3, r3, #12
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	22a0      	movs	r2, #160	; 0xa0
 80034cc:	4393      	bics	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	621a      	str	r2, [r3, #32]
}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b006      	add	sp, #24
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	ffff0fff 	.word	0xffff0fff

080034f4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2270      	movs	r2, #112	; 0x70
 8003508:	4393      	bics	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4313      	orrs	r3, r2
 8003512:	2207      	movs	r2, #7
 8003514:	4313      	orrs	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	609a      	str	r2, [r3, #8]
}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	46bd      	mov	sp, r7
 8003522:	b004      	add	sp, #16
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	4a09      	ldr	r2, [pc, #36]	; (8003564 <TIM_ETR_SetConfig+0x3c>)
 8003540:	4013      	ands	r3, r2
 8003542:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	021a      	lsls	r2, r3, #8
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	431a      	orrs	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4313      	orrs	r3, r2
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	609a      	str	r2, [r3, #8]
}
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	46bd      	mov	sp, r7
 8003560:	b006      	add	sp, #24
 8003562:	bd80      	pop	{r7, pc}
 8003564:	ffff00ff 	.word	0xffff00ff

08003568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2238      	movs	r2, #56	; 0x38
 8003576:	5c9b      	ldrb	r3, [r3, r2]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800357c:	2302      	movs	r3, #2
 800357e:	e042      	b.n	8003606 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2238      	movs	r2, #56	; 0x38
 8003584:	2101      	movs	r1, #1
 8003586:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2239      	movs	r2, #57	; 0x39
 800358c:	2102      	movs	r1, #2
 800358e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2270      	movs	r2, #112	; 0x70
 80035a4:	4393      	bics	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	2380      	movs	r3, #128	; 0x80
 80035c0:	05db      	lsls	r3, r3, #23
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d009      	beq.n	80035da <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a11      	ldr	r2, [pc, #68]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d004      	beq.n	80035da <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a0f      	ldr	r2, [pc, #60]	; (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d10c      	bne.n	80035f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2280      	movs	r2, #128	; 0x80
 80035de:	4393      	bics	r3, r2
 80035e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2239      	movs	r2, #57	; 0x39
 80035f8:	2101      	movs	r1, #1
 80035fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2238      	movs	r2, #56	; 0x38
 8003600:	2100      	movs	r1, #0
 8003602:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	0018      	movs	r0, r3
 8003608:	46bd      	mov	sp, r7
 800360a:	b004      	add	sp, #16
 800360c:	bd80      	pop	{r7, pc}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	40010800 	.word	0x40010800
 8003614:	40011400 	.word	0x40011400

08003618 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e044      	b.n	80036b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800362e:	2b00      	cmp	r3, #0
 8003630:	d107      	bne.n	8003642 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2278      	movs	r2, #120	; 0x78
 8003636:	2100      	movs	r1, #0
 8003638:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	0018      	movs	r0, r3
 800363e:	f7fd fc0f 	bl	8000e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2224      	movs	r2, #36	; 0x24
 8003646:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2101      	movs	r1, #1
 8003654:	438a      	bics	r2, r1
 8003656:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	0018      	movs	r0, r3
 800365c:	f000 fd24 	bl	80040a8 <UART_SetConfig>
 8003660:	0003      	movs	r3, r0
 8003662:	2b01      	cmp	r3, #1
 8003664:	d101      	bne.n	800366a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e024      	b.n	80036b4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	0018      	movs	r0, r3
 8003676:	f000 ff9b 	bl	80045b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	490d      	ldr	r1, [pc, #52]	; (80036bc <HAL_UART_Init+0xa4>)
 8003686:	400a      	ands	r2, r1
 8003688:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	212a      	movs	r1, #42	; 0x2a
 8003696:	438a      	bics	r2, r1
 8003698:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2101      	movs	r1, #1
 80036a6:	430a      	orrs	r2, r1
 80036a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	0018      	movs	r0, r3
 80036ae:	f001 f833 	bl	8004718 <UART_CheckIdleState>
 80036b2:	0003      	movs	r3, r0
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b002      	add	sp, #8
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	ffffb7ff 	.word	0xffffb7ff

080036c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	; 0x28
 80036c4:	af02      	add	r7, sp, #8
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d000      	beq.n	80036da <HAL_UART_Transmit+0x1a>
 80036d8:	e08c      	b.n	80037f4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <HAL_UART_Transmit+0x28>
 80036e0:	1dbb      	adds	r3, r7, #6
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e084      	b.n	80037f6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	015b      	lsls	r3, r3, #5
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d109      	bne.n	800370c <HAL_UART_Transmit+0x4c>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d105      	bne.n	800370c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2201      	movs	r2, #1
 8003704:	4013      	ands	r3, r2
 8003706:	d001      	beq.n	800370c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e074      	b.n	80037f6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2284      	movs	r2, #132	; 0x84
 8003710:	2100      	movs	r1, #0
 8003712:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2221      	movs	r2, #33	; 0x21
 8003718:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800371a:	f7fd fd87 	bl	800122c <HAL_GetTick>
 800371e:	0003      	movs	r3, r0
 8003720:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1dba      	adds	r2, r7, #6
 8003726:	2150      	movs	r1, #80	; 0x50
 8003728:	8812      	ldrh	r2, [r2, #0]
 800372a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1dba      	adds	r2, r7, #6
 8003730:	2152      	movs	r1, #82	; 0x52
 8003732:	8812      	ldrh	r2, [r2, #0]
 8003734:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	2380      	movs	r3, #128	; 0x80
 800373c:	015b      	lsls	r3, r3, #5
 800373e:	429a      	cmp	r2, r3
 8003740:	d108      	bne.n	8003754 <HAL_UART_Transmit+0x94>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d104      	bne.n	8003754 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	e003      	b.n	800375c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003758:	2300      	movs	r3, #0
 800375a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800375c:	e02f      	b.n	80037be <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	0013      	movs	r3, r2
 8003768:	2200      	movs	r2, #0
 800376a:	2180      	movs	r1, #128	; 0x80
 800376c:	f001 f87c 	bl	8004868 <UART_WaitOnFlagUntilTimeout>
 8003770:	1e03      	subs	r3, r0, #0
 8003772:	d004      	beq.n	800377e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e03b      	b.n	80037f6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10b      	bne.n	800379c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	001a      	movs	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	05d2      	lsls	r2, r2, #23
 8003790:	0dd2      	lsrs	r2, r2, #23
 8003792:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	3302      	adds	r3, #2
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	e007      	b.n	80037ac <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	781a      	ldrb	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3301      	adds	r3, #1
 80037aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2252      	movs	r2, #82	; 0x52
 80037b0:	5a9b      	ldrh	r3, [r3, r2]
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b299      	uxth	r1, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2252      	movs	r2, #82	; 0x52
 80037bc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2252      	movs	r2, #82	; 0x52
 80037c2:	5a9b      	ldrh	r3, [r3, r2]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1c9      	bne.n	800375e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	0013      	movs	r3, r2
 80037d4:	2200      	movs	r2, #0
 80037d6:	2140      	movs	r1, #64	; 0x40
 80037d8:	f001 f846 	bl	8004868 <UART_WaitOnFlagUntilTimeout>
 80037dc:	1e03      	subs	r3, r0, #0
 80037de:	d004      	beq.n	80037ea <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e005      	b.n	80037f6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	e000      	b.n	80037f6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80037f4:	2302      	movs	r3, #2
  }
}
 80037f6:	0018      	movs	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	b008      	add	sp, #32
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	; 0x28
 8003804:	af02      	add	r7, sp, #8
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	1dbb      	adds	r3, r7, #6
 800380e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2280      	movs	r2, #128	; 0x80
 8003814:	589b      	ldr	r3, [r3, r2]
 8003816:	2b20      	cmp	r3, #32
 8003818:	d000      	beq.n	800381c <HAL_UART_Receive+0x1c>
 800381a:	e0d0      	b.n	80039be <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_UART_Receive+0x2a>
 8003822:	1dbb      	adds	r3, r7, #6
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e0c8      	b.n	80039c0 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	2380      	movs	r3, #128	; 0x80
 8003834:	015b      	lsls	r3, r3, #5
 8003836:	429a      	cmp	r2, r3
 8003838:	d109      	bne.n	800384e <HAL_UART_Receive+0x4e>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d105      	bne.n	800384e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2201      	movs	r2, #1
 8003846:	4013      	ands	r3, r2
 8003848:	d001      	beq.n	800384e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e0b8      	b.n	80039c0 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2284      	movs	r2, #132	; 0x84
 8003852:	2100      	movs	r1, #0
 8003854:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2280      	movs	r2, #128	; 0x80
 800385a:	2122      	movs	r1, #34	; 0x22
 800385c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003864:	f7fd fce2 	bl	800122c <HAL_GetTick>
 8003868:	0003      	movs	r3, r0
 800386a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	1dba      	adds	r2, r7, #6
 8003870:	2158      	movs	r1, #88	; 0x58
 8003872:	8812      	ldrh	r2, [r2, #0]
 8003874:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1dba      	adds	r2, r7, #6
 800387a:	215a      	movs	r1, #90	; 0x5a
 800387c:	8812      	ldrh	r2, [r2, #0]
 800387e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	015b      	lsls	r3, r3, #5
 8003888:	429a      	cmp	r2, r3
 800388a:	d10d      	bne.n	80038a8 <HAL_UART_Receive+0xa8>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d104      	bne.n	800389e <HAL_UART_Receive+0x9e>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	225c      	movs	r2, #92	; 0x5c
 8003898:	494b      	ldr	r1, [pc, #300]	; (80039c8 <HAL_UART_Receive+0x1c8>)
 800389a:	5299      	strh	r1, [r3, r2]
 800389c:	e02e      	b.n	80038fc <HAL_UART_Receive+0xfc>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	225c      	movs	r2, #92	; 0x5c
 80038a2:	21ff      	movs	r1, #255	; 0xff
 80038a4:	5299      	strh	r1, [r3, r2]
 80038a6:	e029      	b.n	80038fc <HAL_UART_Receive+0xfc>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10d      	bne.n	80038cc <HAL_UART_Receive+0xcc>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d104      	bne.n	80038c2 <HAL_UART_Receive+0xc2>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	225c      	movs	r2, #92	; 0x5c
 80038bc:	21ff      	movs	r1, #255	; 0xff
 80038be:	5299      	strh	r1, [r3, r2]
 80038c0:	e01c      	b.n	80038fc <HAL_UART_Receive+0xfc>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	225c      	movs	r2, #92	; 0x5c
 80038c6:	217f      	movs	r1, #127	; 0x7f
 80038c8:	5299      	strh	r1, [r3, r2]
 80038ca:	e017      	b.n	80038fc <HAL_UART_Receive+0xfc>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	055b      	lsls	r3, r3, #21
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d10d      	bne.n	80038f4 <HAL_UART_Receive+0xf4>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d104      	bne.n	80038ea <HAL_UART_Receive+0xea>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	225c      	movs	r2, #92	; 0x5c
 80038e4:	217f      	movs	r1, #127	; 0x7f
 80038e6:	5299      	strh	r1, [r3, r2]
 80038e8:	e008      	b.n	80038fc <HAL_UART_Receive+0xfc>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	225c      	movs	r2, #92	; 0x5c
 80038ee:	213f      	movs	r1, #63	; 0x3f
 80038f0:	5299      	strh	r1, [r3, r2]
 80038f2:	e003      	b.n	80038fc <HAL_UART_Receive+0xfc>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	225c      	movs	r2, #92	; 0x5c
 80038f8:	2100      	movs	r1, #0
 80038fa:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80038fc:	2312      	movs	r3, #18
 80038fe:	18fb      	adds	r3, r7, r3
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	215c      	movs	r1, #92	; 0x5c
 8003904:	5a52      	ldrh	r2, [r2, r1]
 8003906:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	2380      	movs	r3, #128	; 0x80
 800390e:	015b      	lsls	r3, r3, #5
 8003910:	429a      	cmp	r2, r3
 8003912:	d108      	bne.n	8003926 <HAL_UART_Receive+0x126>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d104      	bne.n	8003926 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800391c:	2300      	movs	r3, #0
 800391e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	61bb      	str	r3, [r7, #24]
 8003924:	e003      	b.n	800392e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800392a:	2300      	movs	r3, #0
 800392c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800392e:	e03a      	b.n	80039a6 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	0013      	movs	r3, r2
 800393a:	2200      	movs	r2, #0
 800393c:	2120      	movs	r1, #32
 800393e:	f000 ff93 	bl	8004868 <UART_WaitOnFlagUntilTimeout>
 8003942:	1e03      	subs	r3, r0, #0
 8003944:	d005      	beq.n	8003952 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2280      	movs	r2, #128	; 0x80
 800394a:	2120      	movs	r1, #32
 800394c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e036      	b.n	80039c0 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10e      	bne.n	8003976 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	b29b      	uxth	r3, r3
 8003960:	2212      	movs	r2, #18
 8003962:	18ba      	adds	r2, r7, r2
 8003964:	8812      	ldrh	r2, [r2, #0]
 8003966:	4013      	ands	r3, r2
 8003968:	b29a      	uxth	r2, r3
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	3302      	adds	r3, #2
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	e00e      	b.n	8003994 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2212      	movs	r2, #18
 8003980:	18ba      	adds	r2, r7, r2
 8003982:	8812      	ldrh	r2, [r2, #0]
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	4013      	ands	r3, r2
 8003988:	b2da      	uxtb	r2, r3
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3301      	adds	r3, #1
 8003992:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	225a      	movs	r2, #90	; 0x5a
 8003998:	5a9b      	ldrh	r3, [r3, r2]
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b299      	uxth	r1, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	225a      	movs	r2, #90	; 0x5a
 80039a4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	225a      	movs	r2, #90	; 0x5a
 80039aa:	5a9b      	ldrh	r3, [r3, r2]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1be      	bne.n	8003930 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2280      	movs	r2, #128	; 0x80
 80039b6:	2120      	movs	r1, #32
 80039b8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e000      	b.n	80039c0 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80039be:	2302      	movs	r3, #2
  }
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b008      	add	sp, #32
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	000001ff 	.word	0x000001ff

080039cc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	1dbb      	adds	r3, r7, #6
 80039d8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d15b      	bne.n	8003a9a <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_UART_Transmit_IT+0x24>
 80039e8:	1dbb      	adds	r3, r7, #6
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e053      	b.n	8003a9c <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	2380      	movs	r3, #128	; 0x80
 80039fa:	015b      	lsls	r3, r3, #5
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d109      	bne.n	8003a14 <HAL_UART_Transmit_IT+0x48>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d105      	bne.n	8003a14 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d001      	beq.n	8003a14 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e043      	b.n	8003a9c <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1dba      	adds	r2, r7, #6
 8003a1e:	2150      	movs	r1, #80	; 0x50
 8003a20:	8812      	ldrh	r2, [r2, #0]
 8003a22:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	1dba      	adds	r2, r7, #6
 8003a28:	2152      	movs	r1, #82	; 0x52
 8003a2a:	8812      	ldrh	r2, [r2, #0]
 8003a2c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2284      	movs	r2, #132	; 0x84
 8003a38:	2100      	movs	r1, #0
 8003a3a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2221      	movs	r2, #33	; 0x21
 8003a40:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	2380      	movs	r3, #128	; 0x80
 8003a48:	015b      	lsls	r3, r3, #5
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d107      	bne.n	8003a5e <HAL_UART_Transmit_IT+0x92>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d103      	bne.n	8003a5e <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <HAL_UART_Transmit_IT+0xd8>)
 8003a5a:	66da      	str	r2, [r3, #108]	; 0x6c
 8003a5c:	e002      	b.n	8003a64 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4a11      	ldr	r2, [pc, #68]	; (8003aa8 <HAL_UART_Transmit_IT+0xdc>)
 8003a62:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a64:	f3ef 8310 	mrs	r3, PRIMASK
 8003a68:	613b      	str	r3, [r7, #16]
  return(result);
 8003a6a:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003a6c:	61fb      	str	r3, [r7, #28]
 8003a6e:	2301      	movs	r3, #1
 8003a70:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f383 8810 	msr	PRIMASK, r3
}
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	430a      	orrs	r2, r1
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f383 8810 	msr	PRIMASK, r3
}
 8003a94:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e000      	b.n	8003a9c <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8003a9a:	2302      	movs	r3, #2
  }
}
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b008      	add	sp, #32
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	08004ae5 	.word	0x08004ae5
 8003aa8:	08004a33 	.word	0x08004a33

08003aac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003aac:	b590      	push	{r4, r7, lr}
 8003aae:	b0ab      	sub	sp, #172	; 0xac
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	22a4      	movs	r2, #164	; 0xa4
 8003abc:	18b9      	adds	r1, r7, r2
 8003abe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	20a0      	movs	r0, #160	; 0xa0
 8003ac8:	1839      	adds	r1, r7, r0
 8003aca:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	219c      	movs	r1, #156	; 0x9c
 8003ad4:	1879      	adds	r1, r7, r1
 8003ad6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ad8:	0011      	movs	r1, r2
 8003ada:	18bb      	adds	r3, r7, r2
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a99      	ldr	r2, [pc, #612]	; (8003d44 <HAL_UART_IRQHandler+0x298>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2298      	movs	r2, #152	; 0x98
 8003ae4:	18bc      	adds	r4, r7, r2
 8003ae6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003ae8:	18bb      	adds	r3, r7, r2
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d114      	bne.n	8003b1a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003af0:	187b      	adds	r3, r7, r1
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2220      	movs	r2, #32
 8003af6:	4013      	ands	r3, r2
 8003af8:	d00f      	beq.n	8003b1a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003afa:	183b      	adds	r3, r7, r0
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2220      	movs	r2, #32
 8003b00:	4013      	ands	r3, r2
 8003b02:	d00a      	beq.n	8003b1a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d100      	bne.n	8003b0e <HAL_UART_IRQHandler+0x62>
 8003b0c:	e2a0      	b.n	8004050 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	0010      	movs	r0, r2
 8003b16:	4798      	blx	r3
      }
      return;
 8003b18:	e29a      	b.n	8004050 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b1a:	2398      	movs	r3, #152	; 0x98
 8003b1c:	18fb      	adds	r3, r7, r3
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d100      	bne.n	8003b26 <HAL_UART_IRQHandler+0x7a>
 8003b24:	e114      	b.n	8003d50 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b26:	239c      	movs	r3, #156	; 0x9c
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d106      	bne.n	8003b40 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b32:	23a0      	movs	r3, #160	; 0xa0
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a83      	ldr	r2, [pc, #524]	; (8003d48 <HAL_UART_IRQHandler+0x29c>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d100      	bne.n	8003b40 <HAL_UART_IRQHandler+0x94>
 8003b3e:	e107      	b.n	8003d50 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b40:	23a4      	movs	r3, #164	; 0xa4
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2201      	movs	r2, #1
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d012      	beq.n	8003b72 <HAL_UART_IRQHandler+0xc6>
 8003b4c:	23a0      	movs	r3, #160	; 0xa0
 8003b4e:	18fb      	adds	r3, r7, r3
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	4013      	ands	r3, r2
 8003b58:	d00b      	beq.n	8003b72 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2284      	movs	r2, #132	; 0x84
 8003b66:	589b      	ldr	r3, [r3, r2]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2184      	movs	r1, #132	; 0x84
 8003b70:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b72:	23a4      	movs	r3, #164	; 0xa4
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d011      	beq.n	8003ba2 <HAL_UART_IRQHandler+0xf6>
 8003b7e:	239c      	movs	r3, #156	; 0x9c
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2201      	movs	r2, #1
 8003b86:	4013      	ands	r3, r2
 8003b88:	d00b      	beq.n	8003ba2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2284      	movs	r2, #132	; 0x84
 8003b96:	589b      	ldr	r3, [r3, r2]
 8003b98:	2204      	movs	r2, #4
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2184      	movs	r1, #132	; 0x84
 8003ba0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ba2:	23a4      	movs	r3, #164	; 0xa4
 8003ba4:	18fb      	adds	r3, r7, r3
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2204      	movs	r2, #4
 8003baa:	4013      	ands	r3, r2
 8003bac:	d011      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x126>
 8003bae:	239c      	movs	r3, #156	; 0x9c
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d00b      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2204      	movs	r2, #4
 8003bc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2284      	movs	r2, #132	; 0x84
 8003bc6:	589b      	ldr	r3, [r3, r2]
 8003bc8:	2202      	movs	r2, #2
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2184      	movs	r1, #132	; 0x84
 8003bd0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003bd2:	23a4      	movs	r3, #164	; 0xa4
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2208      	movs	r2, #8
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d017      	beq.n	8003c0e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bde:	23a0      	movs	r3, #160	; 0xa0
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2220      	movs	r2, #32
 8003be6:	4013      	ands	r3, r2
 8003be8:	d105      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003bea:	239c      	movs	r3, #156	; 0x9c
 8003bec:	18fb      	adds	r3, r7, r3
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bf4:	d00b      	beq.n	8003c0e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2208      	movs	r2, #8
 8003bfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2284      	movs	r2, #132	; 0x84
 8003c02:	589b      	ldr	r3, [r3, r2]
 8003c04:	2208      	movs	r2, #8
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2184      	movs	r1, #132	; 0x84
 8003c0c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c0e:	23a4      	movs	r3, #164	; 0xa4
 8003c10:	18fb      	adds	r3, r7, r3
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	2380      	movs	r3, #128	; 0x80
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d013      	beq.n	8003c44 <HAL_UART_IRQHandler+0x198>
 8003c1c:	23a0      	movs	r3, #160	; 0xa0
 8003c1e:	18fb      	adds	r3, r7, r3
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	2380      	movs	r3, #128	; 0x80
 8003c24:	04db      	lsls	r3, r3, #19
 8003c26:	4013      	ands	r3, r2
 8003c28:	d00c      	beq.n	8003c44 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2280      	movs	r2, #128	; 0x80
 8003c30:	0112      	lsls	r2, r2, #4
 8003c32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2284      	movs	r2, #132	; 0x84
 8003c38:	589b      	ldr	r3, [r3, r2]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2184      	movs	r1, #132	; 0x84
 8003c42:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2284      	movs	r2, #132	; 0x84
 8003c48:	589b      	ldr	r3, [r3, r2]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d100      	bne.n	8003c50 <HAL_UART_IRQHandler+0x1a4>
 8003c4e:	e201      	b.n	8004054 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c50:	23a4      	movs	r3, #164	; 0xa4
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2220      	movs	r2, #32
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d00e      	beq.n	8003c7a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c5c:	23a0      	movs	r3, #160	; 0xa0
 8003c5e:	18fb      	adds	r3, r7, r3
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2220      	movs	r2, #32
 8003c64:	4013      	ands	r3, r2
 8003c66:	d008      	beq.n	8003c7a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d004      	beq.n	8003c7a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	0010      	movs	r0, r2
 8003c78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2284      	movs	r2, #132	; 0x84
 8003c7e:	589b      	ldr	r3, [r3, r2]
 8003c80:	2194      	movs	r1, #148	; 0x94
 8003c82:	187a      	adds	r2, r7, r1
 8003c84:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2240      	movs	r2, #64	; 0x40
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b40      	cmp	r3, #64	; 0x40
 8003c92:	d004      	beq.n	8003c9e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c94:	187b      	adds	r3, r7, r1
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2228      	movs	r2, #40	; 0x28
 8003c9a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c9c:	d047      	beq.n	8003d2e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f000 fe4b 	bl	800493c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2240      	movs	r2, #64	; 0x40
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b40      	cmp	r3, #64	; 0x40
 8003cb2:	d137      	bne.n	8003d24 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003cb8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003cba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cbc:	2090      	movs	r0, #144	; 0x90
 8003cbe:	183a      	adds	r2, r7, r0
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cc8:	f383 8810 	msr	PRIMASK, r3
}
 8003ccc:	46c0      	nop			; (mov r8, r8)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2140      	movs	r1, #64	; 0x40
 8003cda:	438a      	bics	r2, r1
 8003cdc:	609a      	str	r2, [r3, #8]
 8003cde:	183b      	adds	r3, r7, r0
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ce6:	f383 8810 	msr	PRIMASK, r3
}
 8003cea:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d012      	beq.n	8003d1a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf8:	4a14      	ldr	r2, [pc, #80]	; (8003d4c <HAL_UART_IRQHandler+0x2a0>)
 8003cfa:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d00:	0018      	movs	r0, r3
 8003d02:	f7fd fe71 	bl	80019e8 <HAL_DMA_Abort_IT>
 8003d06:	1e03      	subs	r3, r0, #0
 8003d08:	d01a      	beq.n	8003d40 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d14:	0018      	movs	r0, r3
 8003d16:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d18:	e012      	b.n	8003d40 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f000 f9af 	bl	8004080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d22:	e00d      	b.n	8003d40 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	0018      	movs	r0, r3
 8003d28:	f000 f9aa 	bl	8004080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d2c:	e008      	b.n	8003d40 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	0018      	movs	r0, r3
 8003d32:	f000 f9a5 	bl	8004080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2284      	movs	r2, #132	; 0x84
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003d3e:	e189      	b.n	8004054 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d40:	46c0      	nop			; (mov r8, r8)
    return;
 8003d42:	e187      	b.n	8004054 <HAL_UART_IRQHandler+0x5a8>
 8003d44:	0000080f 	.word	0x0000080f
 8003d48:	04000120 	.word	0x04000120
 8003d4c:	08004a05 	.word	0x08004a05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d000      	beq.n	8003d5a <HAL_UART_IRQHandler+0x2ae>
 8003d58:	e13b      	b.n	8003fd2 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d5a:	23a4      	movs	r3, #164	; 0xa4
 8003d5c:	18fb      	adds	r3, r7, r3
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2210      	movs	r2, #16
 8003d62:	4013      	ands	r3, r2
 8003d64:	d100      	bne.n	8003d68 <HAL_UART_IRQHandler+0x2bc>
 8003d66:	e134      	b.n	8003fd2 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d68:	23a0      	movs	r3, #160	; 0xa0
 8003d6a:	18fb      	adds	r3, r7, r3
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2210      	movs	r2, #16
 8003d70:	4013      	ands	r3, r2
 8003d72:	d100      	bne.n	8003d76 <HAL_UART_IRQHandler+0x2ca>
 8003d74:	e12d      	b.n	8003fd2 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2210      	movs	r2, #16
 8003d7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	2240      	movs	r2, #64	; 0x40
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d000      	beq.n	8003d8e <HAL_UART_IRQHandler+0x2e2>
 8003d8c:	e0a1      	b.n	8003ed2 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	217e      	movs	r1, #126	; 0x7e
 8003d98:	187b      	adds	r3, r7, r1
 8003d9a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003d9c:	187b      	adds	r3, r7, r1
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d100      	bne.n	8003da6 <HAL_UART_IRQHandler+0x2fa>
 8003da4:	e158      	b.n	8004058 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2258      	movs	r2, #88	; 0x58
 8003daa:	5a9b      	ldrh	r3, [r3, r2]
 8003dac:	187a      	adds	r2, r7, r1
 8003dae:	8812      	ldrh	r2, [r2, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d300      	bcc.n	8003db6 <HAL_UART_IRQHandler+0x30a>
 8003db4:	e150      	b.n	8004058 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	187a      	adds	r2, r7, r1
 8003dba:	215a      	movs	r1, #90	; 0x5a
 8003dbc:	8812      	ldrh	r2, [r2, #0]
 8003dbe:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d16f      	bne.n	8003eae <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dce:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dd6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dd8:	2301      	movs	r3, #1
 8003dda:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dde:	f383 8810 	msr	PRIMASK, r3
}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	499e      	ldr	r1, [pc, #632]	; (8004068 <HAL_UART_IRQHandler+0x5bc>)
 8003df0:	400a      	ands	r2, r1
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003df6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfa:	f383 8810 	msr	PRIMASK, r3
}
 8003dfe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e00:	f3ef 8310 	mrs	r3, PRIMASK
 8003e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e08:	677b      	str	r3, [r7, #116]	; 0x74
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e10:	f383 8810 	msr	PRIMASK, r3
}
 8003e14:	46c0      	nop			; (mov r8, r8)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2101      	movs	r1, #1
 8003e22:	438a      	bics	r2, r1
 8003e24:	609a      	str	r2, [r3, #8]
 8003e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e28:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e2c:	f383 8810 	msr	PRIMASK, r3
}
 8003e30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e32:	f3ef 8310 	mrs	r3, PRIMASK
 8003e36:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3a:	673b      	str	r3, [r7, #112]	; 0x70
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e42:	f383 8810 	msr	PRIMASK, r3
}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2140      	movs	r1, #64	; 0x40
 8003e54:	438a      	bics	r2, r1
 8003e56:	609a      	str	r2, [r3, #8]
 8003e58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e5a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e5e:	f383 8810 	msr	PRIMASK, r3
}
 8003e62:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2280      	movs	r2, #128	; 0x80
 8003e68:	2120      	movs	r1, #32
 8003e6a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e72:	f3ef 8310 	mrs	r3, PRIMASK
 8003e76:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e82:	f383 8810 	msr	PRIMASK, r3
}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2110      	movs	r1, #16
 8003e94:	438a      	bics	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ea2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f7fd fd5d 	bl	8001968 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2258      	movs	r2, #88	; 0x58
 8003eb8:	5a9a      	ldrh	r2, [r3, r2]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	215a      	movs	r1, #90	; 0x5a
 8003ebe:	5a5b      	ldrh	r3, [r3, r1]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	0011      	movs	r1, r2
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f000 f8e0 	bl	8004090 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ed0:	e0c2      	b.n	8004058 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2258      	movs	r2, #88	; 0x58
 8003ed6:	5a99      	ldrh	r1, [r3, r2]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	225a      	movs	r2, #90	; 0x5a
 8003edc:	5a9b      	ldrh	r3, [r3, r2]
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	208e      	movs	r0, #142	; 0x8e
 8003ee2:	183b      	adds	r3, r7, r0
 8003ee4:	1a8a      	subs	r2, r1, r2
 8003ee6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	225a      	movs	r2, #90	; 0x5a
 8003eec:	5a9b      	ldrh	r3, [r3, r2]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d100      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x44a>
 8003ef4:	e0b2      	b.n	800405c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003ef6:	183b      	adds	r3, r7, r0
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d100      	bne.n	8003f00 <HAL_UART_IRQHandler+0x454>
 8003efe:	e0ad      	b.n	800405c <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f00:	f3ef 8310 	mrs	r3, PRIMASK
 8003f04:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f06:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f08:	2488      	movs	r4, #136	; 0x88
 8003f0a:	193a      	adds	r2, r7, r4
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	2301      	movs	r3, #1
 8003f10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f383 8810 	msr	PRIMASK, r3
}
 8003f18:	46c0      	nop			; (mov r8, r8)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4951      	ldr	r1, [pc, #324]	; (800406c <HAL_UART_IRQHandler+0x5c0>)
 8003f26:	400a      	ands	r2, r1
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	193b      	adds	r3, r7, r4
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f383 8810 	msr	PRIMASK, r3
}
 8003f36:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f38:	f3ef 8310 	mrs	r3, PRIMASK
 8003f3c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f3e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f40:	2484      	movs	r4, #132	; 0x84
 8003f42:	193a      	adds	r2, r7, r4
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	2301      	movs	r3, #1
 8003f48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	f383 8810 	msr	PRIMASK, r3
}
 8003f50:	46c0      	nop			; (mov r8, r8)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	438a      	bics	r2, r1
 8003f60:	609a      	str	r2, [r3, #8]
 8003f62:	193b      	adds	r3, r7, r4
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	f383 8810 	msr	PRIMASK, r3
}
 8003f6e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2280      	movs	r2, #128	; 0x80
 8003f74:	2120      	movs	r1, #32
 8003f76:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f84:	f3ef 8310 	mrs	r3, PRIMASK
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f8c:	2480      	movs	r4, #128	; 0x80
 8003f8e:	193a      	adds	r2, r7, r4
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	2301      	movs	r3, #1
 8003f94:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f98:	f383 8810 	msr	PRIMASK, r3
}
 8003f9c:	46c0      	nop			; (mov r8, r8)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2110      	movs	r1, #16
 8003faa:	438a      	bics	r2, r1
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	193b      	adds	r3, r7, r4
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb6:	f383 8810 	msr	PRIMASK, r3
}
 8003fba:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fc2:	183b      	adds	r3, r7, r0
 8003fc4:	881a      	ldrh	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	0011      	movs	r1, r2
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f000 f860 	bl	8004090 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fd0:	e044      	b.n	800405c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003fd2:	23a4      	movs	r3, #164	; 0xa4
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	2380      	movs	r3, #128	; 0x80
 8003fda:	035b      	lsls	r3, r3, #13
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d010      	beq.n	8004002 <HAL_UART_IRQHandler+0x556>
 8003fe0:	239c      	movs	r3, #156	; 0x9c
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	2380      	movs	r3, #128	; 0x80
 8003fe8:	03db      	lsls	r3, r3, #15
 8003fea:	4013      	ands	r3, r2
 8003fec:	d009      	beq.n	8004002 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2280      	movs	r2, #128	; 0x80
 8003ff4:	0352      	lsls	r2, r2, #13
 8003ff6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f000 fdfb 	bl	8004bf6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004000:	e02f      	b.n	8004062 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004002:	23a4      	movs	r3, #164	; 0xa4
 8004004:	18fb      	adds	r3, r7, r3
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2280      	movs	r2, #128	; 0x80
 800400a:	4013      	ands	r3, r2
 800400c:	d00f      	beq.n	800402e <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800400e:	23a0      	movs	r3, #160	; 0xa0
 8004010:	18fb      	adds	r3, r7, r3
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2280      	movs	r2, #128	; 0x80
 8004016:	4013      	ands	r3, r2
 8004018:	d009      	beq.n	800402e <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d01e      	beq.n	8004060 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	0010      	movs	r0, r2
 800402a:	4798      	blx	r3
    }
    return;
 800402c:	e018      	b.n	8004060 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800402e:	23a4      	movs	r3, #164	; 0xa4
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2240      	movs	r2, #64	; 0x40
 8004036:	4013      	ands	r3, r2
 8004038:	d013      	beq.n	8004062 <HAL_UART_IRQHandler+0x5b6>
 800403a:	23a0      	movs	r3, #160	; 0xa0
 800403c:	18fb      	adds	r3, r7, r3
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2240      	movs	r2, #64	; 0x40
 8004042:	4013      	ands	r3, r2
 8004044:	d00d      	beq.n	8004062 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	0018      	movs	r0, r3
 800404a:	f000 fda9 	bl	8004ba0 <UART_EndTransmit_IT>
    return;
 800404e:	e008      	b.n	8004062 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004050:	46c0      	nop			; (mov r8, r8)
 8004052:	e006      	b.n	8004062 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004054:	46c0      	nop			; (mov r8, r8)
 8004056:	e004      	b.n	8004062 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004058:	46c0      	nop			; (mov r8, r8)
 800405a:	e002      	b.n	8004062 <HAL_UART_IRQHandler+0x5b6>
      return;
 800405c:	46c0      	nop			; (mov r8, r8)
 800405e:	e000      	b.n	8004062 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004060:	46c0      	nop			; (mov r8, r8)
  }

}
 8004062:	46bd      	mov	sp, r7
 8004064:	b02b      	add	sp, #172	; 0xac
 8004066:	bd90      	pop	{r4, r7, pc}
 8004068:	fffffeff 	.word	0xfffffeff
 800406c:	fffffedf 	.word	0xfffffedf

08004070 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004078:	46c0      	nop			; (mov r8, r8)
 800407a:	46bd      	mov	sp, r7
 800407c:	b002      	add	sp, #8
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004088:	46c0      	nop			; (mov r8, r8)
 800408a:	46bd      	mov	sp, r7
 800408c:	b002      	add	sp, #8
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	000a      	movs	r2, r1
 800409a:	1cbb      	adds	r3, r7, #2
 800409c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	46bd      	mov	sp, r7
 80040a2:	b002      	add	sp, #8
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040a8:	b5b0      	push	{r4, r5, r7, lr}
 80040aa:	b08e      	sub	sp, #56	; 0x38
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040b0:	231a      	movs	r3, #26
 80040b2:	2218      	movs	r2, #24
 80040b4:	189b      	adds	r3, r3, r2
 80040b6:	19db      	adds	r3, r3, r7
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4ac6      	ldr	r2, [pc, #792]	; (80043f4 <UART_SetConfig+0x34c>)
 80040dc:	4013      	ands	r3, r2
 80040de:	0019      	movs	r1, r3
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040e6:	430a      	orrs	r2, r1
 80040e8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4ac1      	ldr	r2, [pc, #772]	; (80043f8 <UART_SetConfig+0x350>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	0019      	movs	r1, r3
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4abb      	ldr	r2, [pc, #748]	; (80043fc <UART_SetConfig+0x354>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d004      	beq.n	800411c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004118:	4313      	orrs	r3, r2
 800411a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	4ab7      	ldr	r2, [pc, #732]	; (8004400 <UART_SetConfig+0x358>)
 8004124:	4013      	ands	r3, r2
 8004126:	0019      	movs	r1, r3
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800412e:	430a      	orrs	r2, r1
 8004130:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4ab3      	ldr	r2, [pc, #716]	; (8004404 <UART_SetConfig+0x35c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d131      	bne.n	80041a0 <UART_SetConfig+0xf8>
 800413c:	4bb2      	ldr	r3, [pc, #712]	; (8004408 <UART_SetConfig+0x360>)
 800413e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004140:	2203      	movs	r2, #3
 8004142:	4013      	ands	r3, r2
 8004144:	2b03      	cmp	r3, #3
 8004146:	d01d      	beq.n	8004184 <UART_SetConfig+0xdc>
 8004148:	d823      	bhi.n	8004192 <UART_SetConfig+0xea>
 800414a:	2b02      	cmp	r3, #2
 800414c:	d00c      	beq.n	8004168 <UART_SetConfig+0xc0>
 800414e:	d820      	bhi.n	8004192 <UART_SetConfig+0xea>
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <UART_SetConfig+0xb2>
 8004154:	2b01      	cmp	r3, #1
 8004156:	d00e      	beq.n	8004176 <UART_SetConfig+0xce>
 8004158:	e01b      	b.n	8004192 <UART_SetConfig+0xea>
 800415a:	231b      	movs	r3, #27
 800415c:	2218      	movs	r2, #24
 800415e:	189b      	adds	r3, r3, r2
 8004160:	19db      	adds	r3, r3, r7
 8004162:	2201      	movs	r2, #1
 8004164:	701a      	strb	r2, [r3, #0]
 8004166:	e09c      	b.n	80042a2 <UART_SetConfig+0x1fa>
 8004168:	231b      	movs	r3, #27
 800416a:	2218      	movs	r2, #24
 800416c:	189b      	adds	r3, r3, r2
 800416e:	19db      	adds	r3, r3, r7
 8004170:	2202      	movs	r2, #2
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	e095      	b.n	80042a2 <UART_SetConfig+0x1fa>
 8004176:	231b      	movs	r3, #27
 8004178:	2218      	movs	r2, #24
 800417a:	189b      	adds	r3, r3, r2
 800417c:	19db      	adds	r3, r3, r7
 800417e:	2204      	movs	r2, #4
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	e08e      	b.n	80042a2 <UART_SetConfig+0x1fa>
 8004184:	231b      	movs	r3, #27
 8004186:	2218      	movs	r2, #24
 8004188:	189b      	adds	r3, r3, r2
 800418a:	19db      	adds	r3, r3, r7
 800418c:	2208      	movs	r2, #8
 800418e:	701a      	strb	r2, [r3, #0]
 8004190:	e087      	b.n	80042a2 <UART_SetConfig+0x1fa>
 8004192:	231b      	movs	r3, #27
 8004194:	2218      	movs	r2, #24
 8004196:	189b      	adds	r3, r3, r2
 8004198:	19db      	adds	r3, r3, r7
 800419a:	2210      	movs	r2, #16
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	e080      	b.n	80042a2 <UART_SetConfig+0x1fa>
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a99      	ldr	r2, [pc, #612]	; (800440c <UART_SetConfig+0x364>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d131      	bne.n	800420e <UART_SetConfig+0x166>
 80041aa:	4b97      	ldr	r3, [pc, #604]	; (8004408 <UART_SetConfig+0x360>)
 80041ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ae:	220c      	movs	r2, #12
 80041b0:	4013      	ands	r3, r2
 80041b2:	2b0c      	cmp	r3, #12
 80041b4:	d01d      	beq.n	80041f2 <UART_SetConfig+0x14a>
 80041b6:	d823      	bhi.n	8004200 <UART_SetConfig+0x158>
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d00c      	beq.n	80041d6 <UART_SetConfig+0x12e>
 80041bc:	d820      	bhi.n	8004200 <UART_SetConfig+0x158>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <UART_SetConfig+0x120>
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d00e      	beq.n	80041e4 <UART_SetConfig+0x13c>
 80041c6:	e01b      	b.n	8004200 <UART_SetConfig+0x158>
 80041c8:	231b      	movs	r3, #27
 80041ca:	2218      	movs	r2, #24
 80041cc:	189b      	adds	r3, r3, r2
 80041ce:	19db      	adds	r3, r3, r7
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	e065      	b.n	80042a2 <UART_SetConfig+0x1fa>
 80041d6:	231b      	movs	r3, #27
 80041d8:	2218      	movs	r2, #24
 80041da:	189b      	adds	r3, r3, r2
 80041dc:	19db      	adds	r3, r3, r7
 80041de:	2202      	movs	r2, #2
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	e05e      	b.n	80042a2 <UART_SetConfig+0x1fa>
 80041e4:	231b      	movs	r3, #27
 80041e6:	2218      	movs	r2, #24
 80041e8:	189b      	adds	r3, r3, r2
 80041ea:	19db      	adds	r3, r3, r7
 80041ec:	2204      	movs	r2, #4
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	e057      	b.n	80042a2 <UART_SetConfig+0x1fa>
 80041f2:	231b      	movs	r3, #27
 80041f4:	2218      	movs	r2, #24
 80041f6:	189b      	adds	r3, r3, r2
 80041f8:	19db      	adds	r3, r3, r7
 80041fa:	2208      	movs	r2, #8
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	e050      	b.n	80042a2 <UART_SetConfig+0x1fa>
 8004200:	231b      	movs	r3, #27
 8004202:	2218      	movs	r2, #24
 8004204:	189b      	adds	r3, r3, r2
 8004206:	19db      	adds	r3, r3, r7
 8004208:	2210      	movs	r2, #16
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	e049      	b.n	80042a2 <UART_SetConfig+0x1fa>
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a7a      	ldr	r2, [pc, #488]	; (80043fc <UART_SetConfig+0x354>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d13e      	bne.n	8004296 <UART_SetConfig+0x1ee>
 8004218:	4b7b      	ldr	r3, [pc, #492]	; (8004408 <UART_SetConfig+0x360>)
 800421a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800421c:	23c0      	movs	r3, #192	; 0xc0
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	4013      	ands	r3, r2
 8004222:	22c0      	movs	r2, #192	; 0xc0
 8004224:	0112      	lsls	r2, r2, #4
 8004226:	4293      	cmp	r3, r2
 8004228:	d027      	beq.n	800427a <UART_SetConfig+0x1d2>
 800422a:	22c0      	movs	r2, #192	; 0xc0
 800422c:	0112      	lsls	r2, r2, #4
 800422e:	4293      	cmp	r3, r2
 8004230:	d82a      	bhi.n	8004288 <UART_SetConfig+0x1e0>
 8004232:	2280      	movs	r2, #128	; 0x80
 8004234:	0112      	lsls	r2, r2, #4
 8004236:	4293      	cmp	r3, r2
 8004238:	d011      	beq.n	800425e <UART_SetConfig+0x1b6>
 800423a:	2280      	movs	r2, #128	; 0x80
 800423c:	0112      	lsls	r2, r2, #4
 800423e:	4293      	cmp	r3, r2
 8004240:	d822      	bhi.n	8004288 <UART_SetConfig+0x1e0>
 8004242:	2b00      	cmp	r3, #0
 8004244:	d004      	beq.n	8004250 <UART_SetConfig+0x1a8>
 8004246:	2280      	movs	r2, #128	; 0x80
 8004248:	00d2      	lsls	r2, r2, #3
 800424a:	4293      	cmp	r3, r2
 800424c:	d00e      	beq.n	800426c <UART_SetConfig+0x1c4>
 800424e:	e01b      	b.n	8004288 <UART_SetConfig+0x1e0>
 8004250:	231b      	movs	r3, #27
 8004252:	2218      	movs	r2, #24
 8004254:	189b      	adds	r3, r3, r2
 8004256:	19db      	adds	r3, r3, r7
 8004258:	2200      	movs	r2, #0
 800425a:	701a      	strb	r2, [r3, #0]
 800425c:	e021      	b.n	80042a2 <UART_SetConfig+0x1fa>
 800425e:	231b      	movs	r3, #27
 8004260:	2218      	movs	r2, #24
 8004262:	189b      	adds	r3, r3, r2
 8004264:	19db      	adds	r3, r3, r7
 8004266:	2202      	movs	r2, #2
 8004268:	701a      	strb	r2, [r3, #0]
 800426a:	e01a      	b.n	80042a2 <UART_SetConfig+0x1fa>
 800426c:	231b      	movs	r3, #27
 800426e:	2218      	movs	r2, #24
 8004270:	189b      	adds	r3, r3, r2
 8004272:	19db      	adds	r3, r3, r7
 8004274:	2204      	movs	r2, #4
 8004276:	701a      	strb	r2, [r3, #0]
 8004278:	e013      	b.n	80042a2 <UART_SetConfig+0x1fa>
 800427a:	231b      	movs	r3, #27
 800427c:	2218      	movs	r2, #24
 800427e:	189b      	adds	r3, r3, r2
 8004280:	19db      	adds	r3, r3, r7
 8004282:	2208      	movs	r2, #8
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	e00c      	b.n	80042a2 <UART_SetConfig+0x1fa>
 8004288:	231b      	movs	r3, #27
 800428a:	2218      	movs	r2, #24
 800428c:	189b      	adds	r3, r3, r2
 800428e:	19db      	adds	r3, r3, r7
 8004290:	2210      	movs	r2, #16
 8004292:	701a      	strb	r2, [r3, #0]
 8004294:	e005      	b.n	80042a2 <UART_SetConfig+0x1fa>
 8004296:	231b      	movs	r3, #27
 8004298:	2218      	movs	r2, #24
 800429a:	189b      	adds	r3, r3, r2
 800429c:	19db      	adds	r3, r3, r7
 800429e:	2210      	movs	r2, #16
 80042a0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a55      	ldr	r2, [pc, #340]	; (80043fc <UART_SetConfig+0x354>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d000      	beq.n	80042ae <UART_SetConfig+0x206>
 80042ac:	e084      	b.n	80043b8 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042ae:	231b      	movs	r3, #27
 80042b0:	2218      	movs	r2, #24
 80042b2:	189b      	adds	r3, r3, r2
 80042b4:	19db      	adds	r3, r3, r7
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d01d      	beq.n	80042f8 <UART_SetConfig+0x250>
 80042bc:	dc20      	bgt.n	8004300 <UART_SetConfig+0x258>
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d015      	beq.n	80042ee <UART_SetConfig+0x246>
 80042c2:	dc1d      	bgt.n	8004300 <UART_SetConfig+0x258>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <UART_SetConfig+0x226>
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d005      	beq.n	80042d8 <UART_SetConfig+0x230>
 80042cc:	e018      	b.n	8004300 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042ce:	f7fe fc23 	bl	8002b18 <HAL_RCC_GetPCLK1Freq>
 80042d2:	0003      	movs	r3, r0
 80042d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042d6:	e01c      	b.n	8004312 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042d8:	4b4b      	ldr	r3, [pc, #300]	; (8004408 <UART_SetConfig+0x360>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2210      	movs	r2, #16
 80042de:	4013      	ands	r3, r2
 80042e0:	d002      	beq.n	80042e8 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80042e2:	4b4b      	ldr	r3, [pc, #300]	; (8004410 <UART_SetConfig+0x368>)
 80042e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80042e6:	e014      	b.n	8004312 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80042e8:	4b4a      	ldr	r3, [pc, #296]	; (8004414 <UART_SetConfig+0x36c>)
 80042ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042ec:	e011      	b.n	8004312 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ee:	f7fe fb63 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 80042f2:	0003      	movs	r3, r0
 80042f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042f6:	e00c      	b.n	8004312 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	021b      	lsls	r3, r3, #8
 80042fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042fe:	e008      	b.n	8004312 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004304:	231a      	movs	r3, #26
 8004306:	2218      	movs	r2, #24
 8004308:	189b      	adds	r3, r3, r2
 800430a:	19db      	adds	r3, r3, r7
 800430c:	2201      	movs	r2, #1
 800430e:	701a      	strb	r2, [r3, #0]
        break;
 8004310:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004314:	2b00      	cmp	r3, #0
 8004316:	d100      	bne.n	800431a <UART_SetConfig+0x272>
 8004318:	e132      	b.n	8004580 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	0013      	movs	r3, r2
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	189b      	adds	r3, r3, r2
 8004324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004326:	429a      	cmp	r2, r3
 8004328:	d305      	bcc.n	8004336 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004332:	429a      	cmp	r2, r3
 8004334:	d906      	bls.n	8004344 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8004336:	231a      	movs	r3, #26
 8004338:	2218      	movs	r2, #24
 800433a:	189b      	adds	r3, r3, r2
 800433c:	19db      	adds	r3, r3, r7
 800433e:	2201      	movs	r2, #1
 8004340:	701a      	strb	r2, [r3, #0]
 8004342:	e11d      	b.n	8004580 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	6939      	ldr	r1, [r7, #16]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	000b      	movs	r3, r1
 8004352:	0e1b      	lsrs	r3, r3, #24
 8004354:	0010      	movs	r0, r2
 8004356:	0205      	lsls	r5, r0, #8
 8004358:	431d      	orrs	r5, r3
 800435a:	000b      	movs	r3, r1
 800435c:	021c      	lsls	r4, r3, #8
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	085b      	lsrs	r3, r3, #1
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	68b8      	ldr	r0, [r7, #8]
 800436c:	68f9      	ldr	r1, [r7, #12]
 800436e:	1900      	adds	r0, r0, r4
 8004370:	4169      	adcs	r1, r5
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	2300      	movs	r3, #0
 800437a:	607b      	str	r3, [r7, #4]
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f7fb ff4e 	bl	8000220 <__aeabi_uldivmod>
 8004384:	0002      	movs	r2, r0
 8004386:	000b      	movs	r3, r1
 8004388:	0013      	movs	r3, r2
 800438a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800438c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800438e:	23c0      	movs	r3, #192	; 0xc0
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	429a      	cmp	r2, r3
 8004394:	d309      	bcc.n	80043aa <UART_SetConfig+0x302>
 8004396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004398:	2380      	movs	r3, #128	; 0x80
 800439a:	035b      	lsls	r3, r3, #13
 800439c:	429a      	cmp	r2, r3
 800439e:	d204      	bcs.n	80043aa <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043a6:	60da      	str	r2, [r3, #12]
 80043a8:	e0ea      	b.n	8004580 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80043aa:	231a      	movs	r3, #26
 80043ac:	2218      	movs	r2, #24
 80043ae:	189b      	adds	r3, r3, r2
 80043b0:	19db      	adds	r3, r3, r7
 80043b2:	2201      	movs	r2, #1
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	e0e3      	b.n	8004580 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	69da      	ldr	r2, [r3, #28]
 80043bc:	2380      	movs	r3, #128	; 0x80
 80043be:	021b      	lsls	r3, r3, #8
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d000      	beq.n	80043c6 <UART_SetConfig+0x31e>
 80043c4:	e085      	b.n	80044d2 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80043c6:	231b      	movs	r3, #27
 80043c8:	2218      	movs	r2, #24
 80043ca:	189b      	adds	r3, r3, r2
 80043cc:	19db      	adds	r3, r3, r7
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d837      	bhi.n	8004444 <UART_SetConfig+0x39c>
 80043d4:	009a      	lsls	r2, r3, #2
 80043d6:	4b10      	ldr	r3, [pc, #64]	; (8004418 <UART_SetConfig+0x370>)
 80043d8:	18d3      	adds	r3, r2, r3
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043de:	f7fe fb9b 	bl	8002b18 <HAL_RCC_GetPCLK1Freq>
 80043e2:	0003      	movs	r3, r0
 80043e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043e6:	e036      	b.n	8004456 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043e8:	f7fe fbac 	bl	8002b44 <HAL_RCC_GetPCLK2Freq>
 80043ec:	0003      	movs	r3, r0
 80043ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043f0:	e031      	b.n	8004456 <UART_SetConfig+0x3ae>
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	efff69f3 	.word	0xefff69f3
 80043f8:	ffffcfff 	.word	0xffffcfff
 80043fc:	40004800 	.word	0x40004800
 8004400:	fffff4ff 	.word	0xfffff4ff
 8004404:	40013800 	.word	0x40013800
 8004408:	40021000 	.word	0x40021000
 800440c:	40004400 	.word	0x40004400
 8004410:	003d0900 	.word	0x003d0900
 8004414:	00f42400 	.word	0x00f42400
 8004418:	08004ca4 	.word	0x08004ca4
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800441c:	4b60      	ldr	r3, [pc, #384]	; (80045a0 <UART_SetConfig+0x4f8>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2210      	movs	r2, #16
 8004422:	4013      	ands	r3, r2
 8004424:	d002      	beq.n	800442c <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004426:	4b5f      	ldr	r3, [pc, #380]	; (80045a4 <UART_SetConfig+0x4fc>)
 8004428:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800442a:	e014      	b.n	8004456 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 800442c:	4b5e      	ldr	r3, [pc, #376]	; (80045a8 <UART_SetConfig+0x500>)
 800442e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004430:	e011      	b.n	8004456 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004432:	f7fe fac1 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8004436:	0003      	movs	r3, r0
 8004438:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800443a:	e00c      	b.n	8004456 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800443c:	2380      	movs	r3, #128	; 0x80
 800443e:	021b      	lsls	r3, r3, #8
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004442:	e008      	b.n	8004456 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004448:	231a      	movs	r3, #26
 800444a:	2218      	movs	r2, #24
 800444c:	189b      	adds	r3, r3, r2
 800444e:	19db      	adds	r3, r3, r7
 8004450:	2201      	movs	r2, #1
 8004452:	701a      	strb	r2, [r3, #0]
        break;
 8004454:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d100      	bne.n	800445e <UART_SetConfig+0x3b6>
 800445c:	e090      	b.n	8004580 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800445e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004460:	005a      	lsls	r2, r3, #1
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	085b      	lsrs	r3, r3, #1
 8004468:	18d2      	adds	r2, r2, r3
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	0019      	movs	r1, r3
 8004470:	0010      	movs	r0, r2
 8004472:	f7fb fe49 	bl	8000108 <__udivsi3>
 8004476:	0003      	movs	r3, r0
 8004478:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447c:	2b0f      	cmp	r3, #15
 800447e:	d921      	bls.n	80044c4 <UART_SetConfig+0x41c>
 8004480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	025b      	lsls	r3, r3, #9
 8004486:	429a      	cmp	r2, r3
 8004488:	d21c      	bcs.n	80044c4 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	b29a      	uxth	r2, r3
 800448e:	200e      	movs	r0, #14
 8004490:	2418      	movs	r4, #24
 8004492:	1903      	adds	r3, r0, r4
 8004494:	19db      	adds	r3, r3, r7
 8004496:	210f      	movs	r1, #15
 8004498:	438a      	bics	r2, r1
 800449a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	085b      	lsrs	r3, r3, #1
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2207      	movs	r2, #7
 80044a4:	4013      	ands	r3, r2
 80044a6:	b299      	uxth	r1, r3
 80044a8:	1903      	adds	r3, r0, r4
 80044aa:	19db      	adds	r3, r3, r7
 80044ac:	1902      	adds	r2, r0, r4
 80044ae:	19d2      	adds	r2, r2, r7
 80044b0:	8812      	ldrh	r2, [r2, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	1902      	adds	r2, r0, r4
 80044bc:	19d2      	adds	r2, r2, r7
 80044be:	8812      	ldrh	r2, [r2, #0]
 80044c0:	60da      	str	r2, [r3, #12]
 80044c2:	e05d      	b.n	8004580 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80044c4:	231a      	movs	r3, #26
 80044c6:	2218      	movs	r2, #24
 80044c8:	189b      	adds	r3, r3, r2
 80044ca:	19db      	adds	r3, r3, r7
 80044cc:	2201      	movs	r2, #1
 80044ce:	701a      	strb	r2, [r3, #0]
 80044d0:	e056      	b.n	8004580 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044d2:	231b      	movs	r3, #27
 80044d4:	2218      	movs	r2, #24
 80044d6:	189b      	adds	r3, r3, r2
 80044d8:	19db      	adds	r3, r3, r7
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d822      	bhi.n	8004526 <UART_SetConfig+0x47e>
 80044e0:	009a      	lsls	r2, r3, #2
 80044e2:	4b32      	ldr	r3, [pc, #200]	; (80045ac <UART_SetConfig+0x504>)
 80044e4:	18d3      	adds	r3, r2, r3
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ea:	f7fe fb15 	bl	8002b18 <HAL_RCC_GetPCLK1Freq>
 80044ee:	0003      	movs	r3, r0
 80044f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044f2:	e021      	b.n	8004538 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044f4:	f7fe fb26 	bl	8002b44 <HAL_RCC_GetPCLK2Freq>
 80044f8:	0003      	movs	r3, r0
 80044fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044fc:	e01c      	b.n	8004538 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044fe:	4b28      	ldr	r3, [pc, #160]	; (80045a0 <UART_SetConfig+0x4f8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2210      	movs	r2, #16
 8004504:	4013      	ands	r3, r2
 8004506:	d002      	beq.n	800450e <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004508:	4b26      	ldr	r3, [pc, #152]	; (80045a4 <UART_SetConfig+0x4fc>)
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800450c:	e014      	b.n	8004538 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 800450e:	4b26      	ldr	r3, [pc, #152]	; (80045a8 <UART_SetConfig+0x500>)
 8004510:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004512:	e011      	b.n	8004538 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004514:	f7fe fa50 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8004518:	0003      	movs	r3, r0
 800451a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800451c:	e00c      	b.n	8004538 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800451e:	2380      	movs	r3, #128	; 0x80
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004524:	e008      	b.n	8004538 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800452a:	231a      	movs	r3, #26
 800452c:	2218      	movs	r2, #24
 800452e:	189b      	adds	r3, r3, r2
 8004530:	19db      	adds	r3, r3, r7
 8004532:	2201      	movs	r2, #1
 8004534:	701a      	strb	r2, [r3, #0]
        break;
 8004536:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453a:	2b00      	cmp	r3, #0
 800453c:	d020      	beq.n	8004580 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	085a      	lsrs	r2, r3, #1
 8004544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004546:	18d2      	adds	r2, r2, r3
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	0019      	movs	r1, r3
 800454e:	0010      	movs	r0, r2
 8004550:	f7fb fdda 	bl	8000108 <__udivsi3>
 8004554:	0003      	movs	r3, r0
 8004556:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	2b0f      	cmp	r3, #15
 800455c:	d90a      	bls.n	8004574 <UART_SetConfig+0x4cc>
 800455e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	025b      	lsls	r3, r3, #9
 8004564:	429a      	cmp	r2, r3
 8004566:	d205      	bcs.n	8004574 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	b29a      	uxth	r2, r3
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60da      	str	r2, [r3, #12]
 8004572:	e005      	b.n	8004580 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004574:	231a      	movs	r3, #26
 8004576:	2218      	movs	r2, #24
 8004578:	189b      	adds	r3, r3, r2
 800457a:	19db      	adds	r3, r3, r7
 800457c:	2201      	movs	r2, #1
 800457e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	2200      	movs	r2, #0
 8004584:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	2200      	movs	r2, #0
 800458a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800458c:	231a      	movs	r3, #26
 800458e:	2218      	movs	r2, #24
 8004590:	189b      	adds	r3, r3, r2
 8004592:	19db      	adds	r3, r3, r7
 8004594:	781b      	ldrb	r3, [r3, #0]
}
 8004596:	0018      	movs	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	b00e      	add	sp, #56	; 0x38
 800459c:	bdb0      	pop	{r4, r5, r7, pc}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	40021000 	.word	0x40021000
 80045a4:	003d0900 	.word	0x003d0900
 80045a8:	00f42400 	.word	0x00f42400
 80045ac:	08004cc8 	.word	0x08004cc8

080045b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	2201      	movs	r2, #1
 80045be:	4013      	ands	r3, r2
 80045c0:	d00b      	beq.n	80045da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4a4a      	ldr	r2, [pc, #296]	; (80046f4 <UART_AdvFeatureConfig+0x144>)
 80045ca:	4013      	ands	r3, r2
 80045cc:	0019      	movs	r1, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	2202      	movs	r2, #2
 80045e0:	4013      	ands	r3, r2
 80045e2:	d00b      	beq.n	80045fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	4a43      	ldr	r2, [pc, #268]	; (80046f8 <UART_AdvFeatureConfig+0x148>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	0019      	movs	r1, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	2204      	movs	r2, #4
 8004602:	4013      	ands	r3, r2
 8004604:	d00b      	beq.n	800461e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	4a3b      	ldr	r2, [pc, #236]	; (80046fc <UART_AdvFeatureConfig+0x14c>)
 800460e:	4013      	ands	r3, r2
 8004610:	0019      	movs	r1, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	2208      	movs	r2, #8
 8004624:	4013      	ands	r3, r2
 8004626:	d00b      	beq.n	8004640 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	4a34      	ldr	r2, [pc, #208]	; (8004700 <UART_AdvFeatureConfig+0x150>)
 8004630:	4013      	ands	r3, r2
 8004632:	0019      	movs	r1, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	2210      	movs	r2, #16
 8004646:	4013      	ands	r3, r2
 8004648:	d00b      	beq.n	8004662 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	4a2c      	ldr	r2, [pc, #176]	; (8004704 <UART_AdvFeatureConfig+0x154>)
 8004652:	4013      	ands	r3, r2
 8004654:	0019      	movs	r1, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	2220      	movs	r2, #32
 8004668:	4013      	ands	r3, r2
 800466a:	d00b      	beq.n	8004684 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	4a25      	ldr	r2, [pc, #148]	; (8004708 <UART_AdvFeatureConfig+0x158>)
 8004674:	4013      	ands	r3, r2
 8004676:	0019      	movs	r1, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	2240      	movs	r2, #64	; 0x40
 800468a:	4013      	ands	r3, r2
 800468c:	d01d      	beq.n	80046ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	4a1d      	ldr	r2, [pc, #116]	; (800470c <UART_AdvFeatureConfig+0x15c>)
 8004696:	4013      	ands	r3, r2
 8004698:	0019      	movs	r1, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046aa:	2380      	movs	r3, #128	; 0x80
 80046ac:	035b      	lsls	r3, r3, #13
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d10b      	bne.n	80046ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	4a15      	ldr	r2, [pc, #84]	; (8004710 <UART_AdvFeatureConfig+0x160>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	0019      	movs	r1, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	2280      	movs	r2, #128	; 0x80
 80046d0:	4013      	ands	r3, r2
 80046d2:	d00b      	beq.n	80046ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	4a0e      	ldr	r2, [pc, #56]	; (8004714 <UART_AdvFeatureConfig+0x164>)
 80046dc:	4013      	ands	r3, r2
 80046de:	0019      	movs	r1, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	605a      	str	r2, [r3, #4]
  }
}
 80046ec:	46c0      	nop			; (mov r8, r8)
 80046ee:	46bd      	mov	sp, r7
 80046f0:	b002      	add	sp, #8
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	fffdffff 	.word	0xfffdffff
 80046f8:	fffeffff 	.word	0xfffeffff
 80046fc:	fffbffff 	.word	0xfffbffff
 8004700:	ffff7fff 	.word	0xffff7fff
 8004704:	ffffefff 	.word	0xffffefff
 8004708:	ffffdfff 	.word	0xffffdfff
 800470c:	ffefffff 	.word	0xffefffff
 8004710:	ff9fffff 	.word	0xff9fffff
 8004714:	fff7ffff 	.word	0xfff7ffff

08004718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b092      	sub	sp, #72	; 0x48
 800471c:	af02      	add	r7, sp, #8
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2284      	movs	r2, #132	; 0x84
 8004724:	2100      	movs	r1, #0
 8004726:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004728:	f7fc fd80 	bl	800122c <HAL_GetTick>
 800472c:	0003      	movs	r3, r0
 800472e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2208      	movs	r2, #8
 8004738:	4013      	ands	r3, r2
 800473a:	2b08      	cmp	r3, #8
 800473c:	d12c      	bne.n	8004798 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800473e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004740:	2280      	movs	r2, #128	; 0x80
 8004742:	0391      	lsls	r1, r2, #14
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	4a46      	ldr	r2, [pc, #280]	; (8004860 <UART_CheckIdleState+0x148>)
 8004748:	9200      	str	r2, [sp, #0]
 800474a:	2200      	movs	r2, #0
 800474c:	f000 f88c 	bl	8004868 <UART_WaitOnFlagUntilTimeout>
 8004750:	1e03      	subs	r3, r0, #0
 8004752:	d021      	beq.n	8004798 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004754:	f3ef 8310 	mrs	r3, PRIMASK
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800475c:	63bb      	str	r3, [r7, #56]	; 0x38
 800475e:	2301      	movs	r3, #1
 8004760:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	f383 8810 	msr	PRIMASK, r3
}
 8004768:	46c0      	nop			; (mov r8, r8)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2180      	movs	r1, #128	; 0x80
 8004776:	438a      	bics	r2, r1
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004780:	f383 8810 	msr	PRIMASK, r3
}
 8004784:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2278      	movs	r2, #120	; 0x78
 8004790:	2100      	movs	r1, #0
 8004792:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e05f      	b.n	8004858 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2204      	movs	r2, #4
 80047a0:	4013      	ands	r3, r2
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d146      	bne.n	8004834 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a8:	2280      	movs	r2, #128	; 0x80
 80047aa:	03d1      	lsls	r1, r2, #15
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	4a2c      	ldr	r2, [pc, #176]	; (8004860 <UART_CheckIdleState+0x148>)
 80047b0:	9200      	str	r2, [sp, #0]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f000 f858 	bl	8004868 <UART_WaitOnFlagUntilTimeout>
 80047b8:	1e03      	subs	r3, r0, #0
 80047ba:	d03b      	beq.n	8004834 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047bc:	f3ef 8310 	mrs	r3, PRIMASK
 80047c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80047c2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047c4:	637b      	str	r3, [r7, #52]	; 0x34
 80047c6:	2301      	movs	r3, #1
 80047c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	f383 8810 	msr	PRIMASK, r3
}
 80047d0:	46c0      	nop			; (mov r8, r8)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4921      	ldr	r1, [pc, #132]	; (8004864 <UART_CheckIdleState+0x14c>)
 80047de:	400a      	ands	r2, r1
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f383 8810 	msr	PRIMASK, r3
}
 80047ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ee:	f3ef 8310 	mrs	r3, PRIMASK
 80047f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80047f4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f6:	633b      	str	r3, [r7, #48]	; 0x30
 80047f8:	2301      	movs	r3, #1
 80047fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f383 8810 	msr	PRIMASK, r3
}
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2101      	movs	r1, #1
 8004810:	438a      	bics	r2, r1
 8004812:	609a      	str	r2, [r3, #8]
 8004814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004816:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	f383 8810 	msr	PRIMASK, r3
}
 800481e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2280      	movs	r2, #128	; 0x80
 8004824:	2120      	movs	r1, #32
 8004826:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2278      	movs	r2, #120	; 0x78
 800482c:	2100      	movs	r1, #0
 800482e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e011      	b.n	8004858 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2220      	movs	r2, #32
 8004838:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2280      	movs	r2, #128	; 0x80
 800483e:	2120      	movs	r1, #32
 8004840:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2278      	movs	r2, #120	; 0x78
 8004852:	2100      	movs	r1, #0
 8004854:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	0018      	movs	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	b010      	add	sp, #64	; 0x40
 800485e:	bd80      	pop	{r7, pc}
 8004860:	01ffffff 	.word	0x01ffffff
 8004864:	fffffedf 	.word	0xfffffedf

08004868 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	1dfb      	adds	r3, r7, #7
 8004876:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004878:	e04b      	b.n	8004912 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	3301      	adds	r3, #1
 800487e:	d048      	beq.n	8004912 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004880:	f7fc fcd4 	bl	800122c <HAL_GetTick>
 8004884:	0002      	movs	r2, r0
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	429a      	cmp	r2, r3
 800488e:	d302      	bcc.n	8004896 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e04b      	b.n	8004932 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2204      	movs	r2, #4
 80048a2:	4013      	ands	r3, r2
 80048a4:	d035      	beq.n	8004912 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	2208      	movs	r2, #8
 80048ae:	4013      	ands	r3, r2
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d111      	bne.n	80048d8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2208      	movs	r2, #8
 80048ba:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	0018      	movs	r0, r3
 80048c0:	f000 f83c 	bl	800493c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2284      	movs	r2, #132	; 0x84
 80048c8:	2108      	movs	r1, #8
 80048ca:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2278      	movs	r2, #120	; 0x78
 80048d0:	2100      	movs	r1, #0
 80048d2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e02c      	b.n	8004932 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	69da      	ldr	r2, [r3, #28]
 80048de:	2380      	movs	r3, #128	; 0x80
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	401a      	ands	r2, r3
 80048e4:	2380      	movs	r3, #128	; 0x80
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d112      	bne.n	8004912 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2280      	movs	r2, #128	; 0x80
 80048f2:	0112      	lsls	r2, r2, #4
 80048f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	0018      	movs	r0, r3
 80048fa:	f000 f81f 	bl	800493c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2284      	movs	r2, #132	; 0x84
 8004902:	2120      	movs	r1, #32
 8004904:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2278      	movs	r2, #120	; 0x78
 800490a:	2100      	movs	r1, #0
 800490c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e00f      	b.n	8004932 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	4013      	ands	r3, r2
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	425a      	negs	r2, r3
 8004922:	4153      	adcs	r3, r2
 8004924:	b2db      	uxtb	r3, r3
 8004926:	001a      	movs	r2, r3
 8004928:	1dfb      	adds	r3, r7, #7
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d0a4      	beq.n	800487a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	0018      	movs	r0, r3
 8004934:	46bd      	mov	sp, r7
 8004936:	b004      	add	sp, #16
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08e      	sub	sp, #56	; 0x38
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004944:	f3ef 8310 	mrs	r3, PRIMASK
 8004948:	617b      	str	r3, [r7, #20]
  return(result);
 800494a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800494c:	637b      	str	r3, [r7, #52]	; 0x34
 800494e:	2301      	movs	r3, #1
 8004950:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	f383 8810 	msr	PRIMASK, r3
}
 8004958:	46c0      	nop			; (mov r8, r8)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4926      	ldr	r1, [pc, #152]	; (8004a00 <UART_EndRxTransfer+0xc4>)
 8004966:	400a      	ands	r2, r1
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f383 8810 	msr	PRIMASK, r3
}
 8004974:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004976:	f3ef 8310 	mrs	r3, PRIMASK
 800497a:	623b      	str	r3, [r7, #32]
  return(result);
 800497c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497e:	633b      	str	r3, [r7, #48]	; 0x30
 8004980:	2301      	movs	r3, #1
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	f383 8810 	msr	PRIMASK, r3
}
 800498a:	46c0      	nop			; (mov r8, r8)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689a      	ldr	r2, [r3, #8]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2101      	movs	r1, #1
 8004998:	438a      	bics	r2, r1
 800499a:	609a      	str	r2, [r3, #8]
 800499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	f383 8810 	msr	PRIMASK, r3
}
 80049a6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d118      	bne.n	80049e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049b0:	f3ef 8310 	mrs	r3, PRIMASK
 80049b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80049b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ba:	2301      	movs	r3, #1
 80049bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f383 8810 	msr	PRIMASK, r3
}
 80049c4:	46c0      	nop			; (mov r8, r8)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2110      	movs	r1, #16
 80049d2:	438a      	bics	r2, r1
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f383 8810 	msr	PRIMASK, r3
}
 80049e0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2280      	movs	r2, #128	; 0x80
 80049e6:	2120      	movs	r1, #32
 80049e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	46bd      	mov	sp, r7
 80049fa:	b00e      	add	sp, #56	; 0x38
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	46c0      	nop			; (mov r8, r8)
 8004a00:	fffffedf 	.word	0xfffffedf

08004a04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	225a      	movs	r2, #90	; 0x5a
 8004a16:	2100      	movs	r1, #0
 8004a18:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2252      	movs	r2, #82	; 0x52
 8004a1e:	2100      	movs	r1, #0
 8004a20:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f7ff fb2b 	bl	8004080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	b004      	add	sp, #16
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b08a      	sub	sp, #40	; 0x28
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a3e:	2b21      	cmp	r3, #33	; 0x21
 8004a40:	d14c      	bne.n	8004adc <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2252      	movs	r2, #82	; 0x52
 8004a46:	5a9b      	ldrh	r3, [r3, r2]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d132      	bne.n	8004ab4 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a52:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a54:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
 8004a58:	2301      	movs	r3, #1
 8004a5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f383 8810 	msr	PRIMASK, r3
}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2180      	movs	r1, #128	; 0x80
 8004a70:	438a      	bics	r2, r1
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f383 8810 	msr	PRIMASK, r3
}
 8004a7e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a80:	f3ef 8310 	mrs	r3, PRIMASK
 8004a84:	617b      	str	r3, [r7, #20]
  return(result);
 8004a86:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a88:	623b      	str	r3, [r7, #32]
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	f383 8810 	msr	PRIMASK, r3
}
 8004a94:	46c0      	nop			; (mov r8, r8)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2140      	movs	r1, #64	; 0x40
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	f383 8810 	msr	PRIMASK, r3
}
 8004ab0:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004ab2:	e013      	b.n	8004adc <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab8:	781a      	ldrb	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2252      	movs	r2, #82	; 0x52
 8004ace:	5a9b      	ldrh	r3, [r3, r2]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b299      	uxth	r1, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2252      	movs	r2, #82	; 0x52
 8004ada:	5299      	strh	r1, [r3, r2]
}
 8004adc:	46c0      	nop			; (mov r8, r8)
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b00a      	add	sp, #40	; 0x28
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08c      	sub	sp, #48	; 0x30
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004af0:	2b21      	cmp	r3, #33	; 0x21
 8004af2:	d151      	bne.n	8004b98 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2252      	movs	r2, #82	; 0x52
 8004af8:	5a9b      	ldrh	r3, [r3, r2]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d132      	bne.n	8004b66 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b00:	f3ef 8310 	mrs	r3, PRIMASK
 8004b04:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b06:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f383 8810 	msr	PRIMASK, r3
}
 8004b14:	46c0      	nop			; (mov r8, r8)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2180      	movs	r1, #128	; 0x80
 8004b22:	438a      	bics	r2, r1
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f383 8810 	msr	PRIMASK, r3
}
 8004b30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b32:	f3ef 8310 	mrs	r3, PRIMASK
 8004b36:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b38:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f383 8810 	msr	PRIMASK, r3
}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2140      	movs	r1, #64	; 0x40
 8004b54:	430a      	orrs	r2, r1
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	f383 8810 	msr	PRIMASK, r3
}
 8004b62:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004b64:	e018      	b.n	8004b98 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	001a      	movs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	05d2      	lsls	r2, r2, #23
 8004b78:	0dd2      	lsrs	r2, r2, #23
 8004b7a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b80:	1c9a      	adds	r2, r3, #2
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2252      	movs	r2, #82	; 0x52
 8004b8a:	5a9b      	ldrh	r3, [r3, r2]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	b299      	uxth	r1, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2252      	movs	r2, #82	; 0x52
 8004b96:	5299      	strh	r1, [r3, r2]
}
 8004b98:	46c0      	nop			; (mov r8, r8)
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b00c      	add	sp, #48	; 0x30
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bac:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bae:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f383 8810 	msr	PRIMASK, r3
}
 8004bbc:	46c0      	nop			; (mov r8, r8)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2140      	movs	r1, #64	; 0x40
 8004bca:	438a      	bics	r2, r1
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f383 8810 	msr	PRIMASK, r3
}
 8004bd8:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	0018      	movs	r0, r3
 8004bea:	f7ff fa41 	bl	8004070 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b006      	add	sp, #24
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b082      	sub	sp, #8
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b002      	add	sp, #8
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <memset>:
 8004c06:	0003      	movs	r3, r0
 8004c08:	1882      	adds	r2, r0, r2
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d100      	bne.n	8004c10 <memset+0xa>
 8004c0e:	4770      	bx	lr
 8004c10:	7019      	strb	r1, [r3, #0]
 8004c12:	3301      	adds	r3, #1
 8004c14:	e7f9      	b.n	8004c0a <memset+0x4>
	...

08004c18 <__libc_init_array>:
 8004c18:	b570      	push	{r4, r5, r6, lr}
 8004c1a:	2600      	movs	r6, #0
 8004c1c:	4c0c      	ldr	r4, [pc, #48]	; (8004c50 <__libc_init_array+0x38>)
 8004c1e:	4d0d      	ldr	r5, [pc, #52]	; (8004c54 <__libc_init_array+0x3c>)
 8004c20:	1b64      	subs	r4, r4, r5
 8004c22:	10a4      	asrs	r4, r4, #2
 8004c24:	42a6      	cmp	r6, r4
 8004c26:	d109      	bne.n	8004c3c <__libc_init_array+0x24>
 8004c28:	2600      	movs	r6, #0
 8004c2a:	f000 f819 	bl	8004c60 <_init>
 8004c2e:	4c0a      	ldr	r4, [pc, #40]	; (8004c58 <__libc_init_array+0x40>)
 8004c30:	4d0a      	ldr	r5, [pc, #40]	; (8004c5c <__libc_init_array+0x44>)
 8004c32:	1b64      	subs	r4, r4, r5
 8004c34:	10a4      	asrs	r4, r4, #2
 8004c36:	42a6      	cmp	r6, r4
 8004c38:	d105      	bne.n	8004c46 <__libc_init_array+0x2e>
 8004c3a:	bd70      	pop	{r4, r5, r6, pc}
 8004c3c:	00b3      	lsls	r3, r6, #2
 8004c3e:	58eb      	ldr	r3, [r5, r3]
 8004c40:	4798      	blx	r3
 8004c42:	3601      	adds	r6, #1
 8004c44:	e7ee      	b.n	8004c24 <__libc_init_array+0xc>
 8004c46:	00b3      	lsls	r3, r6, #2
 8004c48:	58eb      	ldr	r3, [r5, r3]
 8004c4a:	4798      	blx	r3
 8004c4c:	3601      	adds	r6, #1
 8004c4e:	e7f2      	b.n	8004c36 <__libc_init_array+0x1e>
 8004c50:	08004cf4 	.word	0x08004cf4
 8004c54:	08004cf4 	.word	0x08004cf4
 8004c58:	08004cf8 	.word	0x08004cf8
 8004c5c:	08004cf4 	.word	0x08004cf4

08004c60 <_init>:
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c66:	bc08      	pop	{r3}
 8004c68:	469e      	mov	lr, r3
 8004c6a:	4770      	bx	lr

08004c6c <_fini>:
 8004c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c72:	bc08      	pop	{r3}
 8004c74:	469e      	mov	lr, r3
 8004c76:	4770      	bx	lr
