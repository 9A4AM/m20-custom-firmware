
radiosonda_m20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800489c  0800489c  0001489c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004910  08004910  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004918  08004918  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004918  08004918  00014918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800491c  0800491c  0001491c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000000c  0800492c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  0800492c  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010452  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002572  00000000  00000000  000304c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb0  00000000  00000000  00032a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b7a  00000000  00000000  000338f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012bf1  00000000  00000000  0003446a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ddb  00000000  00000000  0004705b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000755f8  00000000  00000000  00057e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003508  00000000  00000000  000cd430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d0938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004884 	.word	0x08004884

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004884 	.word	0x08004884

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8d8 	bl	8000490 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8d3 	bl	8000490 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzsi2>:
 8000454:	211c      	movs	r1, #28
 8000456:	2301      	movs	r3, #1
 8000458:	041b      	lsls	r3, r3, #16
 800045a:	4298      	cmp	r0, r3
 800045c:	d301      	bcc.n	8000462 <__clzsi2+0xe>
 800045e:	0c00      	lsrs	r0, r0, #16
 8000460:	3910      	subs	r1, #16
 8000462:	0a1b      	lsrs	r3, r3, #8
 8000464:	4298      	cmp	r0, r3
 8000466:	d301      	bcc.n	800046c <__clzsi2+0x18>
 8000468:	0a00      	lsrs	r0, r0, #8
 800046a:	3908      	subs	r1, #8
 800046c:	091b      	lsrs	r3, r3, #4
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__clzsi2+0x22>
 8000472:	0900      	lsrs	r0, r0, #4
 8000474:	3904      	subs	r1, #4
 8000476:	a202      	add	r2, pc, #8	; (adr r2, 8000480 <__clzsi2+0x2c>)
 8000478:	5c10      	ldrb	r0, [r2, r0]
 800047a:	1840      	adds	r0, r0, r1
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	02020304 	.word	0x02020304
 8000484:	01010101 	.word	0x01010101
	...

08000490 <__clzdi2>:
 8000490:	b510      	push	{r4, lr}
 8000492:	2900      	cmp	r1, #0
 8000494:	d103      	bne.n	800049e <__clzdi2+0xe>
 8000496:	f7ff ffdd 	bl	8000454 <__clzsi2>
 800049a:	3020      	adds	r0, #32
 800049c:	e002      	b.n	80004a4 <__clzdi2+0x14>
 800049e:	0008      	movs	r0, r1
 80004a0:	f7ff ffd8 	bl	8000454 <__clzsi2>
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <myspi>:

	HAL_Delay(100);
}

void myspi(uint32_t data)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	//uint32_t delay = 0;
	HAL_GPIO_WritePin(ADF_LE_GPIO_Port, ADF_LE_Pin, GPIO_PIN_RESET);
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	482f      	ldr	r0, [pc, #188]	; (8000574 <myspi+0xcc>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	0019      	movs	r1, r3
 80004ba:	f001 fc99 	bl	8001df0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ADF_Data_GPIO_Port, ADF_Data_Pin, GPIO_PIN_RESET);
 80004be:	2380      	movs	r3, #128	; 0x80
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	482c      	ldr	r0, [pc, #176]	; (8000574 <myspi+0xcc>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	0019      	movs	r1, r3
 80004c8:	f001 fc92 	bl	8001df0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADF_CLK_GPIO_Port, ADF_CLK_Pin, GPIO_PIN_RESET);
 80004cc:	4b29      	ldr	r3, [pc, #164]	; (8000574 <myspi+0xcc>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	2180      	movs	r1, #128	; 0x80
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 fc8c 	bl	8001df0 <HAL_GPIO_WritePin>
	//HAL_Delay(delay);
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004d8:	4b27      	ldr	r3, [pc, #156]	; (8000578 <myspi+0xd0>)
 80004da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004dc:	4b26      	ldr	r3, [pc, #152]	; (8000578 <myspi+0xd0>)
 80004de:	2101      	movs	r1, #1
 80004e0:	430a      	orrs	r2, r1
 80004e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80004e4:	4b24      	ldr	r3, [pc, #144]	; (8000578 <myspi+0xd0>)
 80004e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e8:	2201      	movs	r2, #1
 80004ea:	4013      	ands	r3, r2
 80004ec:	60bb      	str	r3, [r7, #8]
 80004ee:	68bb      	ldr	r3, [r7, #8]
	for (int i = 0; i < 32; i++) {
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	e023      	b.n	800053e <myspi+0x96>
		HAL_GPIO_WritePin(ADF_CLK_GPIO_Port, ADF_CLK_Pin, GPIO_PIN_RESET);
 80004f6:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <myspi+0xcc>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	2180      	movs	r1, #128	; 0x80
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 fc77 	bl	8001df0 <HAL_GPIO_WritePin>
		if (data & 0b10000000000000000000000000000000)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2b00      	cmp	r3, #0
 8000506:	da07      	bge.n	8000518 <myspi+0x70>
		{
			HAL_GPIO_WritePin(ADF_Data_GPIO_Port, ADF_Data_Pin, GPIO_PIN_SET);
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	4819      	ldr	r0, [pc, #100]	; (8000574 <myspi+0xcc>)
 800050e:	2201      	movs	r2, #1
 8000510:	0019      	movs	r1, r3
 8000512:	f001 fc6d 	bl	8001df0 <HAL_GPIO_WritePin>
 8000516:	e006      	b.n	8000526 <myspi+0x7e>
		} else {
			HAL_GPIO_WritePin(ADF_Data_GPIO_Port, ADF_Data_Pin, GPIO_PIN_RESET);
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	4815      	ldr	r0, [pc, #84]	; (8000574 <myspi+0xcc>)
 800051e:	2200      	movs	r2, #0
 8000520:	0019      	movs	r1, r3
 8000522:	f001 fc65 	bl	8001df0 <HAL_GPIO_WritePin>
		}
		//HAL_Delay(delay);
		HAL_GPIO_WritePin(ADF_CLK_GPIO_Port, ADF_CLK_Pin, GPIO_PIN_SET);
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <myspi+0xcc>)
 8000528:	2201      	movs	r2, #1
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	0018      	movs	r0, r3
 800052e:	f001 fc5f 	bl	8001df0 <HAL_GPIO_WritePin>
		data = data << 1;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 32; i++) {
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	3301      	adds	r3, #1
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	2b1f      	cmp	r3, #31
 8000542:	ddd8      	ble.n	80004f6 <myspi+0x4e>
	}
	HAL_GPIO_WritePin(ADF_LE_GPIO_Port, ADF_LE_Pin, GPIO_PIN_SET);
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	480a      	ldr	r0, [pc, #40]	; (8000574 <myspi+0xcc>)
 800054a:	2201      	movs	r2, #1
 800054c:	0019      	movs	r1, r3
 800054e:	f001 fc4f 	bl	8001df0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADF_LE_GPIO_Port, ADF_LE_Pin, GPIO_PIN_RESET);
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4807      	ldr	r0, [pc, #28]	; (8000574 <myspi+0xcc>)
 8000558:	2200      	movs	r2, #0
 800055a:	0019      	movs	r1, r3
 800055c:	f001 fc48 	bl	8001df0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADF_CLK_GPIO_Port, ADF_CLK_Pin, GPIO_PIN_RESET);
 8000560:	4b04      	ldr	r3, [pc, #16]	; (8000574 <myspi+0xcc>)
 8000562:	2200      	movs	r2, #0
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	0018      	movs	r0, r3
 8000568:	f001 fc42 	bl	8001df0 <HAL_GPIO_WritePin>

}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b004      	add	sp, #16
 8000572:	bd80      	pop	{r7, pc}
 8000574:	50000800 	.word	0x50000800
 8000578:	40021000 	.word	0x40021000

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fd85 	bl	8001090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f88d 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 fa95 	bl	8000ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 800058e:	f000 fa75 	bl	8000a7c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000592:	f000 f987 	bl	80008a4 <MX_LPUART1_UART_Init>
  MX_ADC_Init();
 8000596:	f000 f901 	bl	800079c <MX_ADC_Init>
  MX_USART1_UART_Init();
 800059a:	f000 f9b1 	bl	8000900 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800059e:	f000 f9df 	bl	8000960 <MX_SPI1_Init>
  MX_TIM21_Init();
 80005a2:	f000 fa15 	bl	80009d0 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(DC_boost_GPIO_Port, DC_boost_Pin, GPIO_PIN_SET);
 80005a6:	2380      	movs	r3, #128	; 0x80
 80005a8:	0159      	lsls	r1, r3, #5
 80005aa:	23a0      	movs	r3, #160	; 0xa0
 80005ac:	05db      	lsls	r3, r3, #23
 80005ae:	2201      	movs	r2, #1
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fc1d 	bl	8001df0 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80005b6:	20c8      	movs	r0, #200	; 0xc8
 80005b8:	f000 fdda 	bl	8001170 <HAL_Delay>
 //HAL_GPIO_WritePin(Battery_on_GPIO_Port, Battery_on_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(RADIO_EN_GPIO_Port, RADIO_EN_Pin, GPIO_PIN_RESET);
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	021b      	lsls	r3, r3, #8
 80005c0:	4830      	ldr	r0, [pc, #192]	; (8000684 <main+0x108>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	0019      	movs	r1, r3
 80005c6:	f001 fc13 	bl	8001df0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPS_ON_GPIO_Port, GPS_ON_Pin, GPIO_PIN_RESET);
 80005ca:	2380      	movs	r3, #128	; 0x80
 80005cc:	01db      	lsls	r3, r3, #7
 80005ce:	482d      	ldr	r0, [pc, #180]	; (8000684 <main+0x108>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	0019      	movs	r1, r3
 80005d4:	f001 fc0c 	bl	8001df0 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80005d8:	20c8      	movs	r0, #200	; 0xc8
 80005da:	f000 fdc9 	bl	8001170 <HAL_Delay>

  	//activeMode++;

  myspi(0b00000000000000000010000000100010);
 80005de:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <main+0x10c>)
 80005e0:	0018      	movs	r0, r3
 80005e2:	f7ff ff61 	bl	80004a8 <myspi>
  myspi(0b00000000011101000001100010101111);
 80005e6:	4b29      	ldr	r3, [pc, #164]	; (800068c <main+0x110>)
 80005e8:	0018      	movs	r0, r3
 80005ea:	f7ff ff5d 	bl	80004a8 <myspi>
  myspi(0b00000011110001000010000001001100);
 80005ee:	4b28      	ldr	r3, [pc, #160]	; (8000690 <main+0x114>)
 80005f0:	0018      	movs	r0, r3
 80005f2:	f7ff ff59 	bl	80004a8 <myspi>
  myspi(0b00000000000011011111000011001101);
 80005f6:	4b27      	ldr	r3, [pc, #156]	; (8000694 <main+0x118>)
 80005f8:	0018      	movs	r0, r3
 80005fa:	f7ff ff55 	bl	80004a8 <myspi>

  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005fe:	2380      	movs	r3, #128	; 0x80
 8000600:	01db      	lsls	r3, r3, #7
 8000602:	4a25      	ldr	r2, [pc, #148]	; (8000698 <main+0x11c>)
 8000604:	0019      	movs	r1, r3
 8000606:	0010      	movs	r0, r2
 8000608:	f001 fc0f 	bl	8001e2a <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 800060c:	20c8      	movs	r0, #200	; 0xc8
 800060e:	f000 fdaf 	bl	8001170 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000612:	2380      	movs	r3, #128	; 0x80
 8000614:	01db      	lsls	r3, r3, #7
 8000616:	4a20      	ldr	r2, [pc, #128]	; (8000698 <main+0x11c>)
 8000618:	0019      	movs	r1, r3
 800061a:	0010      	movs	r0, r2
 800061c:	f001 fc05 	bl	8001e2a <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 8000620:	20c8      	movs	r0, #200	; 0xc8
 8000622:	f000 fda5 	bl	8001170 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000626:	2380      	movs	r3, #128	; 0x80
 8000628:	01db      	lsls	r3, r3, #7
 800062a:	4a1b      	ldr	r2, [pc, #108]	; (8000698 <main+0x11c>)
 800062c:	0019      	movs	r1, r3
 800062e:	0010      	movs	r0, r2
 8000630:	f001 fbfb 	bl	8001e2a <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 8000634:	20c8      	movs	r0, #200	; 0xc8
 8000636:	f000 fd9b 	bl	8001170 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800063a:	2380      	movs	r3, #128	; 0x80
 800063c:	01db      	lsls	r3, r3, #7
 800063e:	4a16      	ldr	r2, [pc, #88]	; (8000698 <main+0x11c>)
 8000640:	0019      	movs	r1, r3
 8000642:	0010      	movs	r0, r2
 8000644:	f001 fbf1 	bl	8001e2a <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 8000648:	20c8      	movs	r0, #200	; 0xc8
 800064a:	f000 fd91 	bl	8001170 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800064e:	2380      	movs	r3, #128	; 0x80
 8000650:	01db      	lsls	r3, r3, #7
 8000652:	4a11      	ldr	r2, [pc, #68]	; (8000698 <main+0x11c>)
 8000654:	0019      	movs	r1, r3
 8000656:	0010      	movs	r0, r2
 8000658:	f001 fbe7 	bl	8001e2a <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 800065c:	20c8      	movs	r0, #200	; 0xc8
 800065e:	f000 fd87 	bl	8001170 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000662:	2380      	movs	r3, #128	; 0x80
 8000664:	01db      	lsls	r3, r3, #7
 8000666:	4a0c      	ldr	r2, [pc, #48]	; (8000698 <main+0x11c>)
 8000668:	0019      	movs	r1, r3
 800066a:	0010      	movs	r0, r2
 800066c:	f001 fbdd 	bl	8001e2a <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 8000670:	20c8      	movs	r0, #200	; 0xc8
 8000672:	f000 fd7d 	bl	8001170 <HAL_Delay>
  HAL_UART_Transmit_IT(&huart1, "START\n", 6);
 8000676:	4909      	ldr	r1, [pc, #36]	; (800069c <main+0x120>)
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <main+0x124>)
 800067a:	2206      	movs	r2, #6
 800067c:	0018      	movs	r0, r3
 800067e:	f002 ffb7 	bl	80035f0 <HAL_UART_Transmit_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000682:	e7fe      	b.n	8000682 <main+0x106>
 8000684:	50000400 	.word	0x50000400
 8000688:	00002022 	.word	0x00002022
 800068c:	007418af 	.word	0x007418af
 8000690:	03c4204c 	.word	0x03c4204c
 8000694:	000df0cd 	.word	0x000df0cd
 8000698:	50000800 	.word	0x50000800
 800069c:	0800489c 	.word	0x0800489c
 80006a0:	2000010c 	.word	0x2000010c

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b09b      	sub	sp, #108	; 0x6c
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	2434      	movs	r4, #52	; 0x34
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	0018      	movs	r0, r3
 80006b0:	2334      	movs	r3, #52	; 0x34
 80006b2:	001a      	movs	r2, r3
 80006b4:	2100      	movs	r1, #0
 80006b6:	f004 f8b8 	bl	800482a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ba:	2320      	movs	r3, #32
 80006bc:	18fb      	adds	r3, r7, r3
 80006be:	0018      	movs	r0, r3
 80006c0:	2314      	movs	r3, #20
 80006c2:	001a      	movs	r2, r3
 80006c4:	2100      	movs	r1, #0
 80006c6:	f004 f8b0 	bl	800482a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	0018      	movs	r0, r3
 80006ce:	231c      	movs	r3, #28
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f004 f8a9 	bl	800482a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	4b2e      	ldr	r3, [pc, #184]	; (8000794 <SystemClock_Config+0xf0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a2e      	ldr	r2, [pc, #184]	; (8000798 <SystemClock_Config+0xf4>)
 80006de:	401a      	ands	r2, r3
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <SystemClock_Config+0xf0>)
 80006e2:	2180      	movs	r1, #128	; 0x80
 80006e4:	0109      	lsls	r1, r1, #4
 80006e6:	430a      	orrs	r2, r1
 80006e8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ea:	0021      	movs	r1, r4
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2201      	movs	r2, #1
 80006f0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	0252      	lsls	r2, r2, #9
 80006f8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2202      	movs	r2, #2
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2280      	movs	r2, #128	; 0x80
 8000704:	0252      	lsls	r2, r2, #9
 8000706:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2200      	movs	r2, #0
 800070c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	0412      	lsls	r2, r2, #16
 8000714:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	187b      	adds	r3, r7, r1
 8000718:	0018      	movs	r0, r3
 800071a:	f001 fba1 	bl	8001e60 <HAL_RCC_OscConfig>
 800071e:	1e03      	subs	r3, r0, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000722:	f000 fabf 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	2120      	movs	r1, #32
 8000728:	187b      	adds	r3, r7, r1
 800072a:	220f      	movs	r2, #15
 800072c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2203      	movs	r2, #3
 8000732:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2100      	movs	r1, #0
 800074a:	0018      	movs	r0, r3
 800074c:	f001 fef2 	bl	8002534 <HAL_RCC_ClockConfig>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000754:	f000 faa6 	bl	8000ca4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2205      	movs	r2, #5
 800075c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	0018      	movs	r0, r3
 800076e:	f002 f9b3 	bl	8002ad8 <HAL_RCCEx_PeriphCLKConfig>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000776:	f000 fa95 	bl	8000ca4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 800077a:	2380      	movs	r3, #128	; 0x80
 800077c:	045b      	lsls	r3, r3, #17
 800077e:	2200      	movs	r2, #0
 8000780:	0019      	movs	r1, r3
 8000782:	2000      	movs	r0, #0
 8000784:	f002 f81e 	bl	80027c4 <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000788:	f002 f8a0 	bl	80028cc <HAL_RCC_EnableCSS>
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	b01b      	add	sp, #108	; 0x6c
 8000792:	bd90      	pop	{r4, r7, pc}
 8000794:	40007000 	.word	0x40007000
 8000798:	ffffe7ff 	.word	0xffffe7ff

0800079c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007a2:	003b      	movs	r3, r7
 80007a4:	0018      	movs	r0, r3
 80007a6:	2308      	movs	r3, #8
 80007a8:	001a      	movs	r2, r3
 80007aa:	2100      	movs	r1, #0
 80007ac:	f004 f83d 	bl	800482a <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80007b0:	4b37      	ldr	r3, [pc, #220]	; (8000890 <MX_ADC_Init+0xf4>)
 80007b2:	4a38      	ldr	r2, [pc, #224]	; (8000894 <MX_ADC_Init+0xf8>)
 80007b4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80007b6:	4b36      	ldr	r3, [pc, #216]	; (8000890 <MX_ADC_Init+0xf4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80007bc:	4b34      	ldr	r3, [pc, #208]	; (8000890 <MX_ADC_Init+0xf4>)
 80007be:	22c0      	movs	r2, #192	; 0xc0
 80007c0:	0612      	lsls	r2, r2, #24
 80007c2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80007c4:	4b32      	ldr	r3, [pc, #200]	; (8000890 <MX_ADC_Init+0xf4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007ca:	4b31      	ldr	r3, [pc, #196]	; (8000890 <MX_ADC_Init+0xf4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80007d0:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <MX_ADC_Init+0xf4>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d6:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <MX_ADC_Init+0xf4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80007dc:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <MX_ADC_Init+0xf4>)
 80007de:	2220      	movs	r2, #32
 80007e0:	2100      	movs	r1, #0
 80007e2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80007e4:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <MX_ADC_Init+0xf4>)
 80007e6:	2221      	movs	r2, #33	; 0x21
 80007e8:	2100      	movs	r1, #0
 80007ea:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ec:	4b28      	ldr	r3, [pc, #160]	; (8000890 <MX_ADC_Init+0xf4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f2:	4b27      	ldr	r3, [pc, #156]	; (8000890 <MX_ADC_Init+0xf4>)
 80007f4:	22c2      	movs	r2, #194	; 0xc2
 80007f6:	32ff      	adds	r2, #255	; 0xff
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80007fa:	4b25      	ldr	r3, [pc, #148]	; (8000890 <MX_ADC_Init+0xf4>)
 80007fc:	222c      	movs	r2, #44	; 0x2c
 80007fe:	2100      	movs	r1, #0
 8000800:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000802:	4b23      	ldr	r3, [pc, #140]	; (8000890 <MX_ADC_Init+0xf4>)
 8000804:	2204      	movs	r2, #4
 8000806:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <MX_ADC_Init+0xf4>)
 800080a:	2200      	movs	r2, #0
 800080c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <MX_ADC_Init+0xf4>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <MX_ADC_Init+0xf4>)
 8000816:	2200      	movs	r2, #0
 8000818:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_ADC_Init+0xf4>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_ADC_Init+0xf4>)
 8000822:	0018      	movs	r0, r3
 8000824:	f000 fcc8 	bl	80011b8 <HAL_ADC_Init>
 8000828:	1e03      	subs	r3, r0, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800082c:	f000 fa3a 	bl	8000ca4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000830:	003b      	movs	r3, r7
 8000832:	4a19      	ldr	r2, [pc, #100]	; (8000898 <MX_ADC_Init+0xfc>)
 8000834:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000836:	003b      	movs	r3, r7
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	0152      	lsls	r2, r2, #5
 800083c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800083e:	003a      	movs	r2, r7
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_ADC_Init+0xf4>)
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f000 fe2b 	bl	80014a0 <HAL_ADC_ConfigChannel>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800084e:	f000 fa29 	bl	8000ca4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000852:	003b      	movs	r3, r7
 8000854:	4a11      	ldr	r2, [pc, #68]	; (800089c <MX_ADC_Init+0x100>)
 8000856:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000858:	003a      	movs	r2, r7
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <MX_ADC_Init+0xf4>)
 800085c:	0011      	movs	r1, r2
 800085e:	0018      	movs	r0, r3
 8000860:	f000 fe1e 	bl	80014a0 <HAL_ADC_ConfigChannel>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d001      	beq.n	800086c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000868:	f000 fa1c 	bl	8000ca4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800086c:	003b      	movs	r3, r7
 800086e:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <MX_ADC_Init+0x104>)
 8000870:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000872:	003a      	movs	r2, r7
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_ADC_Init+0xf4>)
 8000876:	0011      	movs	r1, r2
 8000878:	0018      	movs	r0, r3
 800087a:	f000 fe11 	bl	80014a0 <HAL_ADC_ConfigChannel>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000882:	f000 fa0f 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b002      	add	sp, #8
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	20000028 	.word	0x20000028
 8000894:	40012400 	.word	0x40012400
 8000898:	24000200 	.word	0x24000200
 800089c:	34002000 	.word	0x34002000
 80008a0:	38004000 	.word	0x38004000

080008a4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_LPUART1_UART_Init+0x54>)
 80008aa:	4a14      	ldr	r2, [pc, #80]	; (80008fc <MX_LPUART1_UART_Init+0x58>)
 80008ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 38400;
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_LPUART1_UART_Init+0x54>)
 80008b0:	2296      	movs	r2, #150	; 0x96
 80008b2:	0212      	lsls	r2, r2, #8
 80008b4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_LPUART1_UART_Init+0x54>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_LPUART1_UART_Init+0x54>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <MX_LPUART1_UART_Init+0x54>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_LPUART1_UART_Init+0x54>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_LPUART1_UART_Init+0x54>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_LPUART1_UART_Init+0x54>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_LPUART1_UART_Init+0x54>)
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <MX_LPUART1_UART_Init+0x54>)
 80008e2:	0018      	movs	r0, r3
 80008e4:	f002 fe30 	bl	8003548 <HAL_UART_Init>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80008ec:	f000 f9da 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	20000084 	.word	0x20000084
 80008fc:	40004800 	.word	0x40004800

08000900 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000906:	4a15      	ldr	r2, [pc, #84]	; (800095c <MX_USART1_UART_Init+0x5c>)
 8000908:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800090c:	22e1      	movs	r2, #225	; 0xe1
 800090e:	0252      	lsls	r2, r2, #9
 8000910:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000944:	0018      	movs	r0, r3
 8000946:	f002 fdff 	bl	8003548 <HAL_UART_Init>
 800094a:	1e03      	subs	r3, r0, #0
 800094c:	d001      	beq.n	8000952 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800094e:	f000 f9a9 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	2000010c 	.word	0x2000010c
 800095c:	40013800 	.word	0x40013800

08000960 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000964:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_SPI1_Init+0x68>)
 8000966:	4a19      	ldr	r2, [pc, #100]	; (80009cc <MX_SPI1_Init+0x6c>)
 8000968:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_SPI1_Init+0x68>)
 800096c:	2282      	movs	r2, #130	; 0x82
 800096e:	0052      	lsls	r2, r2, #1
 8000970:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_SPI1_Init+0x68>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_SPI1_Init+0x68>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_SPI1_Init+0x68>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000984:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <MX_SPI1_Init+0x68>)
 8000986:	2200      	movs	r2, #0
 8000988:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_SPI1_Init+0x68>)
 800098c:	2280      	movs	r2, #128	; 0x80
 800098e:	02d2      	lsls	r2, r2, #11
 8000990:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <MX_SPI1_Init+0x68>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_SPI1_Init+0x68>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_SPI1_Init+0x68>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_SPI1_Init+0x68>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009aa:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <MX_SPI1_Init+0x68>)
 80009ac:	2207      	movs	r2, #7
 80009ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <MX_SPI1_Init+0x68>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f002 f9ca 	bl	8002d4c <HAL_SPI_Init>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009bc:	f000 f972 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	200001dc 	.word	0x200001dc
 80009cc:	40013000 	.word	0x40013000

080009d0 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d6:	2308      	movs	r3, #8
 80009d8:	18fb      	adds	r3, r7, r3
 80009da:	0018      	movs	r0, r3
 80009dc:	2310      	movs	r3, #16
 80009de:	001a      	movs	r2, r3
 80009e0:	2100      	movs	r1, #0
 80009e2:	f003 ff22 	bl	800482a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e6:	003b      	movs	r3, r7
 80009e8:	0018      	movs	r0, r3
 80009ea:	2308      	movs	r3, #8
 80009ec:	001a      	movs	r2, r3
 80009ee:	2100      	movs	r1, #0
 80009f0:	f003 ff1b 	bl	800482a <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <MX_TIM21_Init+0xa0>)
 80009f6:	4a1f      	ldr	r2, [pc, #124]	; (8000a74 <MX_TIM21_Init+0xa4>)
 80009f8:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <MX_TIM21_Init+0xa0>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_TIM21_Init+0xa0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_TIM21_Init+0xa0>)
 8000a08:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <MX_TIM21_Init+0xa8>)
 8000a0a:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_TIM21_Init+0xa0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_TIM21_Init+0xa0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_TIM21_Init+0xa0>)
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f002 fa2a 	bl	8002e74 <HAL_TIM_Base_Init>
 8000a20:	1e03      	subs	r3, r0, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000a24:	f000 f93e 	bl	8000ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a28:	2108      	movs	r1, #8
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2280      	movs	r2, #128	; 0x80
 8000a2e:	0152      	lsls	r2, r2, #5
 8000a30:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000a32:	187a      	adds	r2, r7, r1
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_TIM21_Init+0xa0>)
 8000a36:	0011      	movs	r1, r2
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f002 fb43 	bl	80030c4 <HAL_TIM_ConfigClockSource>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 8000a42:	f000 f92f 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a46:	003b      	movs	r3, r7
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4c:	003b      	movs	r3, r7
 8000a4e:	2200      	movs	r2, #0
 8000a50:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000a52:	003a      	movs	r2, r7
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_TIM21_Init+0xa0>)
 8000a56:	0011      	movs	r1, r2
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f002 fd1d 	bl	8003498 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5e:	1e03      	subs	r3, r0, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8000a62:	f000 f91f 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b006      	add	sp, #24
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	20000234 	.word	0x20000234
 8000a74:	40010800 	.word	0x40010800
 8000a78:	0000ffff 	.word	0x0000ffff

08000a7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_DMA_Init+0x38>)
 8000a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_DMA_Init+0x38>)
 8000a88:	2101      	movs	r1, #1
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	631a      	str	r2, [r3, #48]	; 0x30
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_DMA_Init+0x38>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	2201      	movs	r2, #1
 8000a94:	4013      	ands	r3, r2
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	200a      	movs	r0, #10
 8000aa0:	f000 fe50 	bl	8001744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000aa4:	200a      	movs	r0, #10
 8000aa6:	f000 fe62 	bl	800176e <HAL_NVIC_EnableIRQ>

}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b002      	add	sp, #8
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b08b      	sub	sp, #44	; 0x2c
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	2414      	movs	r4, #20
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	2314      	movs	r3, #20
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	2100      	movs	r1, #0
 8000aca:	f003 feae 	bl	800482a <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	4b6e      	ldr	r3, [pc, #440]	; (8000c88 <MX_GPIO_Init+0x1d0>)
 8000ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ad2:	4b6d      	ldr	r3, [pc, #436]	; (8000c88 <MX_GPIO_Init+0x1d0>)
 8000ad4:	2104      	movs	r1, #4
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ada:	4b6b      	ldr	r3, [pc, #428]	; (8000c88 <MX_GPIO_Init+0x1d0>)
 8000adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ade:	2204      	movs	r2, #4
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae6:	4b68      	ldr	r3, [pc, #416]	; (8000c88 <MX_GPIO_Init+0x1d0>)
 8000ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aea:	4b67      	ldr	r3, [pc, #412]	; (8000c88 <MX_GPIO_Init+0x1d0>)
 8000aec:	2180      	movs	r1, #128	; 0x80
 8000aee:	430a      	orrs	r2, r1
 8000af0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000af2:	4b65      	ldr	r3, [pc, #404]	; (8000c88 <MX_GPIO_Init+0x1d0>)
 8000af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	4013      	ands	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b62      	ldr	r3, [pc, #392]	; (8000c88 <MX_GPIO_Init+0x1d0>)
 8000b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b02:	4b61      	ldr	r3, [pc, #388]	; (8000c88 <MX_GPIO_Init+0x1d0>)
 8000b04:	2101      	movs	r1, #1
 8000b06:	430a      	orrs	r2, r1
 8000b08:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b0a:	4b5f      	ldr	r3, [pc, #380]	; (8000c88 <MX_GPIO_Init+0x1d0>)
 8000b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	4b5c      	ldr	r3, [pc, #368]	; (8000c88 <MX_GPIO_Init+0x1d0>)
 8000b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b1a:	4b5b      	ldr	r3, [pc, #364]	; (8000c88 <MX_GPIO_Init+0x1d0>)
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b22:	4b59      	ldr	r3, [pc, #356]	; (8000c88 <MX_GPIO_Init+0x1d0>)
 8000b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b26:	2202      	movs	r2, #2
 8000b28:	4013      	ands	r3, r2
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2e:	4b56      	ldr	r3, [pc, #344]	; (8000c88 <MX_GPIO_Init+0x1d0>)
 8000b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b32:	4b55      	ldr	r3, [pc, #340]	; (8000c88 <MX_GPIO_Init+0x1d0>)
 8000b34:	2108      	movs	r1, #8
 8000b36:	430a      	orrs	r2, r1
 8000b38:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b3a:	4b53      	ldr	r3, [pc, #332]	; (8000c88 <MX_GPIO_Init+0x1d0>)
 8000b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3e:	2208      	movs	r2, #8
 8000b40:	4013      	ands	r3, r2
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|EXPANSION_1_Pin|EXPANSION_2_Pin|Temp_EN_Pin
 8000b46:	4951      	ldr	r1, [pc, #324]	; (8000c8c <MX_GPIO_Init+0x1d4>)
 8000b48:	4b51      	ldr	r3, [pc, #324]	; (8000c90 <MX_GPIO_Init+0x1d8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f001 f94f 	bl	8001df0 <HAL_GPIO_WritePin>
                          |ADF_CLK_Pin|ADF_Data_Pin|ADF_LE_Pin|Heater_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EXPANSION_4_Pin|EXPANSION_PS_Pin|DC_boost_Pin, GPIO_PIN_RESET);
 8000b52:	4950      	ldr	r1, [pc, #320]	; (8000c94 <MX_GPIO_Init+0x1dc>)
 8000b54:	23a0      	movs	r3, #160	; 0xa0
 8000b56:	05db      	lsls	r3, r3, #23
 8000b58:	2200      	movs	r2, #0
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f001 f948 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RF_Boost_Pin|ADF_TX_Data_Pin|GPS_ON_Pin|RADIO_EN_Pin
 8000b60:	494d      	ldr	r1, [pc, #308]	; (8000c98 <MX_GPIO_Init+0x1e0>)
 8000b62:	4b4e      	ldr	r3, [pc, #312]	; (8000c9c <MX_GPIO_Init+0x1e4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	0018      	movs	r0, r3
 8000b68:	f001 f942 	bl	8001df0 <HAL_GPIO_WritePin>
                          |Trmp_R4_Pin|Temp_R2_Pin|Temp_R1_Pin|EXPANSION_3_Pin
                          |Temp_R5_Pin|Temp_R3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Battery_on_GPIO_Port, Battery_on_Pin, GPIO_PIN_RESET);
 8000b6c:	4b4c      	ldr	r3, [pc, #304]	; (8000ca0 <MX_GPIO_Init+0x1e8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2104      	movs	r1, #4
 8000b72:	0018      	movs	r0, r3
 8000b74:	f001 f93c 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_Pin TL555_in_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|TL555_in_Pin;
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	2281      	movs	r2, #129	; 0x81
 8000b7c:	0192      	lsls	r2, r2, #6
 8000b7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	2200      	movs	r2, #0
 8000b84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	4a40      	ldr	r2, [pc, #256]	; (8000c90 <MX_GPIO_Init+0x1d8>)
 8000b90:	0019      	movs	r1, r3
 8000b92:	0010      	movs	r0, r2
 8000b94:	f000 ffb6 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin EXPANSION_1_Pin EXPANSION_2_Pin Temp_EN_Pin
                           ADF_CLK_Pin ADF_Data_Pin ADF_LE_Pin Heater_Pin */
  GPIO_InitStruct.Pin = LED_Pin|EXPANSION_1_Pin|EXPANSION_2_Pin|Temp_EN_Pin
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	4a3c      	ldr	r2, [pc, #240]	; (8000c8c <MX_GPIO_Init+0x1d4>)
 8000b9c:	601a      	str	r2, [r3, #0]
                          |ADF_CLK_Pin|ADF_Data_Pin|ADF_LE_Pin|Heater_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	193b      	adds	r3, r7, r4
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	193b      	adds	r3, r7, r4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	4a37      	ldr	r2, [pc, #220]	; (8000c90 <MX_GPIO_Init+0x1d8>)
 8000bb4:	0019      	movs	r1, r3
 8000bb6:	0010      	movs	r0, r2
 8000bb8:	f000 ffa4 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_RX_Pin */
  GPIO_InitStruct.Pin = IR_RX_Pin;
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IR_RX_GPIO_Port, &GPIO_InitStruct);
 8000bce:	193a      	adds	r2, r7, r4
 8000bd0:	23a0      	movs	r3, #160	; 0xa0
 8000bd2:	05db      	lsls	r3, r3, #23
 8000bd4:	0011      	movs	r1, r2
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 ff94 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXPANSION_4_Pin EXPANSION_PS_Pin DC_boost_Pin */
  GPIO_InitStruct.Pin = EXPANSION_4_Pin|EXPANSION_PS_Pin|DC_boost_Pin;
 8000bdc:	193b      	adds	r3, r7, r4
 8000bde:	4a2d      	ldr	r2, [pc, #180]	; (8000c94 <MX_GPIO_Init+0x1dc>)
 8000be0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	2201      	movs	r2, #1
 8000be6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	193a      	adds	r2, r7, r4
 8000bf6:	23a0      	movs	r3, #160	; 0xa0
 8000bf8:	05db      	lsls	r3, r3, #23
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f000 ff81 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_Boost_Pin ADF_TX_Data_Pin GPS_ON_Pin RADIO_EN_Pin
                           Trmp_R4_Pin Temp_R2_Pin Temp_R1_Pin EXPANSION_3_Pin
                           Temp_R5_Pin Temp_R3_Pin */
  GPIO_InitStruct.Pin = RF_Boost_Pin|ADF_TX_Data_Pin|GPS_ON_Pin|RADIO_EN_Pin
 8000c02:	193b      	adds	r3, r7, r4
 8000c04:	4a24      	ldr	r2, [pc, #144]	; (8000c98 <MX_GPIO_Init+0x1e0>)
 8000c06:	601a      	str	r2, [r3, #0]
                          |Trmp_R4_Pin|Temp_R2_Pin|Temp_R1_Pin|EXPANSION_3_Pin
                          |Temp_R5_Pin|Temp_R3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	193b      	adds	r3, r7, r4
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	193b      	adds	r3, r7, r4
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1a:	193b      	adds	r3, r7, r4
 8000c1c:	4a1f      	ldr	r2, [pc, #124]	; (8000c9c <MX_GPIO_Init+0x1e4>)
 8000c1e:	0019      	movs	r1, r3
 8000c20:	0010      	movs	r0, r2
 8000c22:	f000 ff6f 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c26:	0021      	movs	r1, r4
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	0052      	lsls	r2, r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	000c      	movs	r4, r1
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	2202      	movs	r2, #2
 8000c36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c44:	193b      	adds	r3, r7, r4
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	193a      	adds	r2, r7, r4
 8000c4c:	23a0      	movs	r3, #160	; 0xa0
 8000c4e:	05db      	lsls	r3, r3, #23
 8000c50:	0011      	movs	r1, r2
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 ff56 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : Battery_on_Pin */
  GPIO_InitStruct.Pin = Battery_on_Pin;
 8000c58:	0021      	movs	r1, r4
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2204      	movs	r2, #4
 8000c5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2201      	movs	r2, #1
 8000c64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Battery_on_GPIO_Port, &GPIO_InitStruct);
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <MX_GPIO_Init+0x1e8>)
 8000c76:	0019      	movs	r1, r3
 8000c78:	0010      	movs	r0, r2
 8000c7a:	f000 ff43 	bl	8001b04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b00b      	add	sp, #44	; 0x2c
 8000c84:	bd90      	pop	{r4, r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	000053a3 	.word	0x000053a3
 8000c90:	50000800 	.word	0x50000800
 8000c94:	0000100c 	.word	0x0000100c
 8000c98:	0000f3f0 	.word	0x0000f3f0
 8000c9c:	50000400 	.word	0x50000400
 8000ca0:	50000c00 	.word	0x50000c00

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	e7fe      	b.n	8000cac <Error_Handler+0x8>
	...

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <HAL_MspInit+0x24>)
 8000cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_MspInit+0x24>)
 8000cba:	2101      	movs	r1, #1
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <HAL_MspInit+0x24>)
 8000cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_MspInit+0x24>)
 8000cc6:	2180      	movs	r1, #128	; 0x80
 8000cc8:	0549      	lsls	r1, r1, #21
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b08b      	sub	sp, #44	; 0x2c
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	2414      	movs	r4, #20
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	2314      	movs	r3, #20
 8000ce8:	001a      	movs	r2, r3
 8000cea:	2100      	movs	r1, #0
 8000cec:	f003 fd9d 	bl	800482a <memset>
  if(hadc->Instance==ADC1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a22      	ldr	r2, [pc, #136]	; (8000d80 <HAL_ADC_MspInit+0xa8>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d13d      	bne.n	8000d76 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cfa:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <HAL_ADC_MspInit+0xac>)
 8000cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cfe:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <HAL_ADC_MspInit+0xac>)
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	0089      	lsls	r1, r1, #2
 8000d04:	430a      	orrs	r2, r1
 8000d06:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d08:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <HAL_ADC_MspInit+0xac>)
 8000d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <HAL_ADC_MspInit+0xac>)
 8000d0e:	2104      	movs	r1, #4
 8000d10:	430a      	orrs	r2, r1
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d14:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <HAL_ADC_MspInit+0xac>)
 8000d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d18:	2204      	movs	r2, #4
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d20:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <HAL_ADC_MspInit+0xac>)
 8000d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <HAL_ADC_MspInit+0xac>)
 8000d26:	2102      	movs	r1, #2
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_ADC_MspInit+0xac>)
 8000d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d30:	2202      	movs	r2, #2
 8000d32:	4013      	ands	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC3     ------> ADC_IN13
    PC4     ------> ADC_IN14
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = Heater_ADC_2_Pin|Temp_ADC_Pin;
 8000d38:	193b      	adds	r3, r7, r4
 8000d3a:	2218      	movs	r2, #24
 8000d3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3e:	193b      	adds	r3, r7, r4
 8000d40:	2203      	movs	r2, #3
 8000d42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <HAL_ADC_MspInit+0xb0>)
 8000d4e:	0019      	movs	r1, r3
 8000d50:	0010      	movs	r0, r2
 8000d52:	f000 fed7 	bl	8001b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Heater_ADC_1_Pin;
 8000d56:	0021      	movs	r1, r4
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	2203      	movs	r2, #3
 8000d62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Heater_ADC_1_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <HAL_ADC_MspInit+0xb4>)
 8000d6e:	0019      	movs	r1, r3
 8000d70:	0010      	movs	r0, r2
 8000d72:	f000 fec7 	bl	8001b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b00b      	add	sp, #44	; 0x2c
 8000d7c:	bd90      	pop	{r4, r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	40012400 	.word	0x40012400
 8000d84:	40021000 	.word	0x40021000
 8000d88:	50000800 	.word	0x50000800
 8000d8c:	50000400 	.word	0x50000400

08000d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b08b      	sub	sp, #44	; 0x2c
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	2414      	movs	r4, #20
 8000d9a:	193b      	adds	r3, r7, r4
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	2314      	movs	r3, #20
 8000da0:	001a      	movs	r2, r3
 8000da2:	2100      	movs	r1, #0
 8000da4:	f003 fd41 	bl	800482a <memset>
  if(huart->Instance==LPUART1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a49      	ldr	r2, [pc, #292]	; (8000ed4 <HAL_UART_MspInit+0x144>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d12a      	bne.n	8000e08 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000db2:	4b49      	ldr	r3, [pc, #292]	; (8000ed8 <HAL_UART_MspInit+0x148>)
 8000db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000db6:	4b48      	ldr	r3, [pc, #288]	; (8000ed8 <HAL_UART_MspInit+0x148>)
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	02c9      	lsls	r1, r1, #11
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc0:	4b45      	ldr	r3, [pc, #276]	; (8000ed8 <HAL_UART_MspInit+0x148>)
 8000dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dc4:	4b44      	ldr	r3, [pc, #272]	; (8000ed8 <HAL_UART_MspInit+0x148>)
 8000dc6:	2104      	movs	r1, #4
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dcc:	4b42      	ldr	r3, [pc, #264]	; (8000ed8 <HAL_UART_MspInit+0x148>)
 8000dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PC10     ------> LPUART1_TX
    PC11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dd8:	193b      	adds	r3, r7, r4
 8000dda:	22c0      	movs	r2, #192	; 0xc0
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	0021      	movs	r1, r4
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2202      	movs	r2, #2
 8000de6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2203      	movs	r2, #3
 8000df2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_LPUART1;
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	4a37      	ldr	r2, [pc, #220]	; (8000edc <HAL_UART_MspInit+0x14c>)
 8000dfe:	0019      	movs	r1, r3
 8000e00:	0010      	movs	r0, r2
 8000e02:	f000 fe7f 	bl	8001b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e06:	e060      	b.n	8000eca <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a34      	ldr	r2, [pc, #208]	; (8000ee0 <HAL_UART_MspInit+0x150>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d15b      	bne.n	8000eca <HAL_UART_MspInit+0x13a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e12:	4b31      	ldr	r3, [pc, #196]	; (8000ed8 <HAL_UART_MspInit+0x148>)
 8000e14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e16:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <HAL_UART_MspInit+0x148>)
 8000e18:	2180      	movs	r1, #128	; 0x80
 8000e1a:	01c9      	lsls	r1, r1, #7
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e20:	4b2d      	ldr	r3, [pc, #180]	; (8000ed8 <HAL_UART_MspInit+0x148>)
 8000e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e24:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <HAL_UART_MspInit+0x148>)
 8000e26:	2101      	movs	r1, #1
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e2c:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <HAL_UART_MspInit+0x148>)
 8000e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e30:	2201      	movs	r2, #1
 8000e32:	4013      	ands	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e38:	2114      	movs	r1, #20
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	22c0      	movs	r2, #192	; 0xc0
 8000e3e:	00d2      	lsls	r2, r2, #3
 8000e40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	2202      	movs	r2, #2
 8000e46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2203      	movs	r2, #3
 8000e52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	2204      	movs	r2, #4
 8000e58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	187a      	adds	r2, r7, r1
 8000e5c:	23a0      	movs	r3, #160	; 0xa0
 8000e5e:	05db      	lsls	r3, r3, #23
 8000e60:	0011      	movs	r1, r2
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 fe4e 	bl	8001b04 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000e68:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <HAL_UART_MspInit+0x154>)
 8000e6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ee8 <HAL_UART_MspInit+0x158>)
 8000e6c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <HAL_UART_MspInit+0x154>)
 8000e70:	2203      	movs	r2, #3
 8000e72:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <HAL_UART_MspInit+0x154>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <HAL_UART_MspInit+0x154>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <HAL_UART_MspInit+0x154>)
 8000e82:	2280      	movs	r2, #128	; 0x80
 8000e84:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <HAL_UART_MspInit+0x154>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_UART_MspInit+0x154>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <HAL_UART_MspInit+0x154>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_UART_MspInit+0x154>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <HAL_UART_MspInit+0x154>)
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f000 fc81 	bl	80017a8 <HAL_DMA_Init>
 8000ea6:	1e03      	subs	r3, r0, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_UART_MspInit+0x11e>
      Error_Handler();
 8000eaa:	f7ff fefb 	bl	8000ca4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ee4 <HAL_UART_MspInit+0x154>)
 8000eb2:	675a      	str	r2, [r3, #116]	; 0x74
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_UART_MspInit+0x154>)
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	201b      	movs	r0, #27
 8000ec0:	f000 fc40 	bl	8001744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ec4:	201b      	movs	r0, #27
 8000ec6:	f000 fc52 	bl	800176e <HAL_NVIC_EnableIRQ>
}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b00b      	add	sp, #44	; 0x2c
 8000ed0:	bd90      	pop	{r4, r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	40004800 	.word	0x40004800
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	50000800 	.word	0x50000800
 8000ee0:	40013800 	.word	0x40013800
 8000ee4:	20000194 	.word	0x20000194
 8000ee8:	40020030 	.word	0x40020030

08000eec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	240c      	movs	r4, #12
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	0018      	movs	r0, r3
 8000efa:	2314      	movs	r3, #20
 8000efc:	001a      	movs	r2, r3
 8000efe:	2100      	movs	r1, #0
 8000f00:	f003 fc93 	bl	800482a <memset>
  if(hspi->Instance==SPI1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <HAL_SPI_MspInit+0x80>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d129      	bne.n	8000f62 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <HAL_SPI_MspInit+0x84>)
 8000f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <HAL_SPI_MspInit+0x84>)
 8000f14:	2180      	movs	r1, #128	; 0x80
 8000f16:	0149      	lsls	r1, r1, #5
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <HAL_SPI_MspInit+0x84>)
 8000f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <HAL_SPI_MspInit+0x84>)
 8000f22:	2101      	movs	r1, #1
 8000f24:	430a      	orrs	r2, r1
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <HAL_SPI_MspInit+0x84>)
 8000f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4013      	ands	r3, r2
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f34:	0021      	movs	r1, r4
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	22f0      	movs	r2, #240	; 0xf0
 8000f3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	2202      	movs	r2, #2
 8000f40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	187a      	adds	r2, r7, r1
 8000f56:	23a0      	movs	r3, #160	; 0xa0
 8000f58:	05db      	lsls	r3, r3, #23
 8000f5a:	0011      	movs	r1, r2
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f000 fdd1 	bl	8001b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b009      	add	sp, #36	; 0x24
 8000f68:	bd90      	pop	{r4, r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	40013000 	.word	0x40013000
 8000f70:	40021000 	.word	0x40021000

08000f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <HAL_TIM_Base_MspInit+0x38>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d10d      	bne.n	8000fa2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_TIM_Base_MspInit+0x3c>)
 8000f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_TIM_Base_MspInit+0x3c>)
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	635a      	str	r2, [r3, #52]	; 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	2014      	movs	r0, #20
 8000f98:	f000 fbd4 	bl	8001744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8000f9c:	2014      	movs	r0, #20
 8000f9e:	f000 fbe6 	bl	800176e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b002      	add	sp, #8
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	40010800 	.word	0x40010800
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000fb8:	f001 fd72 	bl	8002aa0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x8>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fdc:	f000 f8ac 	bl	8001138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <DMA1_Channel2_3_IRQHandler+0x14>)
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f000 fcd9 	bl	80019a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	20000194 	.word	0x20000194

08001000 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <TIM21_IRQHandler+0x14>)
 8001006:	0018      	movs	r0, r3
 8001008:	f001 ff74 	bl	8002ef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	20000234 	.word	0x20000234

08001018 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <USART1_IRQHandler+0x14>)
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fb56 	bl	80036d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	2000010c 	.word	0x2000010c

08001030 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800103e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001040:	f7ff fff6 	bl	8001030 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <LoopForever+0x6>)
  ldr r1, =_edata
 8001046:	490d      	ldr	r1, [pc, #52]	; (800107c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <LoopForever+0xe>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <LoopForever+0x12>)
  ldr r4, =_ebss
 800105c:	4c0a      	ldr	r4, [pc, #40]	; (8001088 <LoopForever+0x16>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800106a:	f003 fbe7 	bl	800483c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106e:	f7ff fa85 	bl	800057c <main>

08001072 <LoopForever>:

LoopForever:
    b LoopForever
 8001072:	e7fe      	b.n	8001072 <LoopForever>
   ldr   r0, =_estack
 8001074:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001080:	08004920 	.word	0x08004920
  ldr r2, =_sbss
 8001084:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001088:	20000278 	.word	0x20000278

0800108c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC1_COMP_IRQHandler>
	...

08001090 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_Init+0x3c>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_Init+0x3c>)
 80010a2:	2140      	movs	r1, #64	; 0x40
 80010a4:	430a      	orrs	r2, r1
 80010a6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010a8:	2003      	movs	r0, #3
 80010aa:	f000 f811 	bl	80010d0 <HAL_InitTick>
 80010ae:	1e03      	subs	r3, r0, #0
 80010b0:	d003      	beq.n	80010ba <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80010b2:	1dfb      	adds	r3, r7, #7
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
 80010b8:	e001      	b.n	80010be <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ba:	f7ff fdf9 	bl	8000cb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
}
 80010c2:	0018      	movs	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b002      	add	sp, #8
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	40022000 	.word	0x40022000

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <HAL_InitTick+0x5c>)
 80010da:	681c      	ldr	r4, [r3, #0]
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <HAL_InitTick+0x60>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	0019      	movs	r1, r3
 80010e2:	23fa      	movs	r3, #250	; 0xfa
 80010e4:	0098      	lsls	r0, r3, #2
 80010e6:	f7ff f80f 	bl	8000108 <__udivsi3>
 80010ea:	0003      	movs	r3, r0
 80010ec:	0019      	movs	r1, r3
 80010ee:	0020      	movs	r0, r4
 80010f0:	f7ff f80a 	bl	8000108 <__udivsi3>
 80010f4:	0003      	movs	r3, r0
 80010f6:	0018      	movs	r0, r3
 80010f8:	f000 fb49 	bl	800178e <HAL_SYSTICK_Config>
 80010fc:	1e03      	subs	r3, r0, #0
 80010fe:	d001      	beq.n	8001104 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e00f      	b.n	8001124 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b03      	cmp	r3, #3
 8001108:	d80b      	bhi.n	8001122 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	2301      	movs	r3, #1
 800110e:	425b      	negs	r3, r3
 8001110:	2200      	movs	r2, #0
 8001112:	0018      	movs	r0, r3
 8001114:	f000 fb16 	bl	8001744 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_InitTick+0x64>)
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	e000      	b.n	8001124 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
}
 8001124:	0018      	movs	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	b003      	add	sp, #12
 800112a:	bd90      	pop	{r4, r7, pc}
 800112c:	20000000 	.word	0x20000000
 8001130:	20000008 	.word	0x20000008
 8001134:	20000004 	.word	0x20000004

08001138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_IncTick+0x1c>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	001a      	movs	r2, r3
 8001142:	4b05      	ldr	r3, [pc, #20]	; (8001158 <HAL_IncTick+0x20>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	18d2      	adds	r2, r2, r3
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <HAL_IncTick+0x20>)
 800114a:	601a      	str	r2, [r3, #0]
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	20000008 	.word	0x20000008
 8001158:	20000274 	.word	0x20000274

0800115c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  return uwTick;
 8001160:	4b02      	ldr	r3, [pc, #8]	; (800116c <HAL_GetTick+0x10>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	0018      	movs	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	20000274 	.word	0x20000274

08001170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001178:	f7ff fff0 	bl	800115c <HAL_GetTick>
 800117c:	0003      	movs	r3, r0
 800117e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3301      	adds	r3, #1
 8001188:	d005      	beq.n	8001196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_Delay+0x44>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	001a      	movs	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	189b      	adds	r3, r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	f7ff ffe0 	bl	800115c <HAL_GetTick>
 800119c:	0002      	movs	r2, r0
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d8f7      	bhi.n	8001198 <HAL_Delay+0x28>
  {
  }
}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b004      	add	sp, #16
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	20000008 	.word	0x20000008

080011b8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e159      	b.n	800147e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10a      	bne.n	80011e8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2250      	movs	r2, #80	; 0x50
 80011dc:	2100      	movs	r1, #0
 80011de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	0018      	movs	r0, r3
 80011e4:	f7ff fd78 	bl	8000cd8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ec:	2210      	movs	r2, #16
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b10      	cmp	r3, #16
 80011f2:	d005      	beq.n	8001200 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2204      	movs	r2, #4
 80011fc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80011fe:	d00b      	beq.n	8001218 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001204:	2210      	movs	r2, #16
 8001206:	431a      	orrs	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2250      	movs	r2, #80	; 0x50
 8001210:	2100      	movs	r1, #0
 8001212:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e132      	b.n	800147e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121c:	4a9a      	ldr	r2, [pc, #616]	; (8001488 <HAL_ADC_Init+0x2d0>)
 800121e:	4013      	ands	r3, r2
 8001220:	2202      	movs	r2, #2
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2203      	movs	r2, #3
 8001230:	4013      	ands	r3, r2
 8001232:	2b01      	cmp	r3, #1
 8001234:	d108      	bne.n	8001248 <HAL_ADC_Init+0x90>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2201      	movs	r2, #1
 800123e:	4013      	ands	r3, r2
 8001240:	2b01      	cmp	r3, #1
 8001242:	d101      	bne.n	8001248 <HAL_ADC_Init+0x90>
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <HAL_ADC_Init+0x92>
 8001248:	2300      	movs	r3, #0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d149      	bne.n	80012e2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	23c0      	movs	r3, #192	; 0xc0
 8001254:	061b      	lsls	r3, r3, #24
 8001256:	429a      	cmp	r2, r3
 8001258:	d00b      	beq.n	8001272 <HAL_ADC_Init+0xba>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	05db      	lsls	r3, r3, #23
 8001262:	429a      	cmp	r2, r3
 8001264:	d005      	beq.n	8001272 <HAL_ADC_Init+0xba>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	2380      	movs	r3, #128	; 0x80
 800126c:	061b      	lsls	r3, r3, #24
 800126e:	429a      	cmp	r2, r3
 8001270:	d111      	bne.n	8001296 <HAL_ADC_Init+0xde>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	691a      	ldr	r2, [r3, #16]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	0092      	lsls	r2, r2, #2
 800127e:	0892      	lsrs	r2, r2, #2
 8001280:	611a      	str	r2, [r3, #16]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6919      	ldr	r1, [r3, #16]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	430a      	orrs	r2, r1
 8001292:	611a      	str	r2, [r3, #16]
 8001294:	e014      	b.n	80012c0 <HAL_ADC_Init+0x108>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	691a      	ldr	r2, [r3, #16]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	0092      	lsls	r2, r2, #2
 80012a2:	0892      	lsrs	r2, r2, #2
 80012a4:	611a      	str	r2, [r3, #16]
 80012a6:	4b79      	ldr	r3, [pc, #484]	; (800148c <HAL_ADC_Init+0x2d4>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	4b78      	ldr	r3, [pc, #480]	; (800148c <HAL_ADC_Init+0x2d4>)
 80012ac:	4978      	ldr	r1, [pc, #480]	; (8001490 <HAL_ADC_Init+0x2d8>)
 80012ae:	400a      	ands	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	4b76      	ldr	r3, [pc, #472]	; (800148c <HAL_ADC_Init+0x2d4>)
 80012b4:	6819      	ldr	r1, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	4b74      	ldr	r3, [pc, #464]	; (800148c <HAL_ADC_Init+0x2d4>)
 80012bc:	430a      	orrs	r2, r1
 80012be:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2118      	movs	r1, #24
 80012cc:	438a      	bics	r2, r1
 80012ce:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68d9      	ldr	r1, [r3, #12]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80012e2:	4b6a      	ldr	r3, [pc, #424]	; (800148c <HAL_ADC_Init+0x2d4>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4b69      	ldr	r3, [pc, #420]	; (800148c <HAL_ADC_Init+0x2d4>)
 80012e8:	496a      	ldr	r1, [pc, #424]	; (8001494 <HAL_ADC_Init+0x2dc>)
 80012ea:	400a      	ands	r2, r1
 80012ec:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80012ee:	4b67      	ldr	r3, [pc, #412]	; (800148c <HAL_ADC_Init+0x2d4>)
 80012f0:	6819      	ldr	r1, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f6:	065a      	lsls	r2, r3, #25
 80012f8:	4b64      	ldr	r3, [pc, #400]	; (800148c <HAL_ADC_Init+0x2d4>)
 80012fa:	430a      	orrs	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	055b      	lsls	r3, r3, #21
 8001308:	4013      	ands	r3, r2
 800130a:	d108      	bne.n	800131e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2180      	movs	r1, #128	; 0x80
 8001318:	0549      	lsls	r1, r1, #21
 800131a:	430a      	orrs	r2, r1
 800131c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	495b      	ldr	r1, [pc, #364]	; (8001498 <HAL_ADC_Init+0x2e0>)
 800132a:	400a      	ands	r2, r1
 800132c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68d9      	ldr	r1, [r3, #12]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	2b02      	cmp	r3, #2
 800133e:	d101      	bne.n	8001344 <HAL_ADC_Init+0x18c>
 8001340:	2304      	movs	r3, #4
 8001342:	e000      	b.n	8001346 <HAL_ADC_Init+0x18e>
 8001344:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001346:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2020      	movs	r0, #32
 800134c:	5c1b      	ldrb	r3, [r3, r0]
 800134e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001350:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	202c      	movs	r0, #44	; 0x2c
 8001356:	5c1b      	ldrb	r3, [r3, r0]
 8001358:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800135a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001360:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001368:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001370:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800137e:	23c2      	movs	r3, #194	; 0xc2
 8001380:	33ff      	adds	r3, #255	; 0xff
 8001382:	429a      	cmp	r2, r3
 8001384:	d00b      	beq.n	800139e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68d9      	ldr	r1, [r3, #12]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	430a      	orrs	r2, r1
 800139c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2221      	movs	r2, #33	; 0x21
 80013a2:	5c9b      	ldrb	r3, [r3, r2]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d11a      	bne.n	80013de <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2220      	movs	r2, #32
 80013ac:	5c9b      	ldrb	r3, [r3, r2]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d109      	bne.n	80013c6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2180      	movs	r1, #128	; 0x80
 80013be:	0249      	lsls	r1, r1, #9
 80013c0:	430a      	orrs	r2, r1
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	e00b      	b.n	80013de <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ca:	2220      	movs	r2, #32
 80013cc:	431a      	orrs	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d6:	2201      	movs	r2, #1
 80013d8:	431a      	orrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d11f      	bne.n	8001426 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	691a      	ldr	r2, [r3, #16]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	492a      	ldr	r1, [pc, #168]	; (800149c <HAL_ADC_Init+0x2e4>)
 80013f2:	400a      	ands	r2, r1
 80013f4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6919      	ldr	r1, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001404:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800140a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	691a      	ldr	r2, [r3, #16]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2101      	movs	r1, #1
 8001420:	430a      	orrs	r2, r1
 8001422:	611a      	str	r2, [r3, #16]
 8001424:	e00e      	b.n	8001444 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	2201      	movs	r2, #1
 800142e:	4013      	ands	r3, r2
 8001430:	2b01      	cmp	r3, #1
 8001432:	d107      	bne.n	8001444 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	691a      	ldr	r2, [r3, #16]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2101      	movs	r1, #1
 8001440:	438a      	bics	r2, r1
 8001442:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	695a      	ldr	r2, [r3, #20]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2107      	movs	r1, #7
 8001450:	438a      	bics	r2, r1
 8001452:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6959      	ldr	r1, [r3, #20]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001470:	2203      	movs	r2, #3
 8001472:	4393      	bics	r3, r2
 8001474:	2201      	movs	r2, #1
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	0018      	movs	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	b002      	add	sp, #8
 8001484:	bd80      	pop	{r7, pc}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	fffffefd 	.word	0xfffffefd
 800148c:	40012708 	.word	0x40012708
 8001490:	ffc3ffff 	.word	0xffc3ffff
 8001494:	fdffffff 	.word	0xfdffffff
 8001498:	fffe0219 	.word	0xfffe0219
 800149c:	fffffc03 	.word	0xfffffc03

080014a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2250      	movs	r2, #80	; 0x50
 80014ae:	5c9b      	ldrb	r3, [r3, r2]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d101      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x18>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e06c      	b.n	8001592 <HAL_ADC_ConfigChannel+0xf2>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2250      	movs	r2, #80	; 0x50
 80014bc:	2101      	movs	r1, #1
 80014be:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2204      	movs	r2, #4
 80014c8:	4013      	ands	r3, r2
 80014ca:	d00b      	beq.n	80014e4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d0:	2220      	movs	r2, #32
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2250      	movs	r2, #80	; 0x50
 80014dc:	2100      	movs	r1, #0
 80014de:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e056      	b.n	8001592 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	4a2c      	ldr	r2, [pc, #176]	; (800159c <HAL_ADC_ConfigChannel+0xfc>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d028      	beq.n	8001540 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	035b      	lsls	r3, r3, #13
 80014fa:	0b5a      	lsrs	r2, r3, #13
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	02db      	lsls	r3, r3, #11
 800150c:	4013      	ands	r3, r2
 800150e:	d009      	beq.n	8001524 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001510:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <HAL_ADC_ConfigChannel+0x100>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <HAL_ADC_ConfigChannel+0x100>)
 8001516:	2180      	movs	r1, #128	; 0x80
 8001518:	0409      	lsls	r1, r1, #16
 800151a:	430a      	orrs	r2, r1
 800151c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800151e:	200a      	movs	r0, #10
 8001520:	f000 f844 	bl	80015ac <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	029b      	lsls	r3, r3, #10
 800152c:	4013      	ands	r3, r2
 800152e:	d02b      	beq.n	8001588 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_ADC_ConfigChannel+0x100>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_ADC_ConfigChannel+0x100>)
 8001536:	2180      	movs	r1, #128	; 0x80
 8001538:	03c9      	lsls	r1, r1, #15
 800153a:	430a      	orrs	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	e023      	b.n	8001588 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	035b      	lsls	r3, r3, #13
 800154c:	0b5b      	lsrs	r3, r3, #13
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	400a      	ands	r2, r1
 8001556:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	02db      	lsls	r3, r3, #11
 8001560:	4013      	ands	r3, r2
 8001562:	d005      	beq.n	8001570 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_ADC_ConfigChannel+0x100>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <HAL_ADC_ConfigChannel+0x100>)
 800156a:	490e      	ldr	r1, [pc, #56]	; (80015a4 <HAL_ADC_ConfigChannel+0x104>)
 800156c:	400a      	ands	r2, r1
 800156e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	029b      	lsls	r3, r3, #10
 8001578:	4013      	ands	r3, r2
 800157a:	d005      	beq.n	8001588 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_ADC_ConfigChannel+0x100>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <HAL_ADC_ConfigChannel+0x100>)
 8001582:	4909      	ldr	r1, [pc, #36]	; (80015a8 <HAL_ADC_ConfigChannel+0x108>)
 8001584:	400a      	ands	r2, r1
 8001586:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2250      	movs	r2, #80	; 0x50
 800158c:	2100      	movs	r1, #0
 800158e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	0018      	movs	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	b002      	add	sp, #8
 8001598:	bd80      	pop	{r7, pc}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	00001001 	.word	0x00001001
 80015a0:	40012708 	.word	0x40012708
 80015a4:	ff7fffff 	.word	0xff7fffff
 80015a8:	ffbfffff 	.word	0xffbfffff

080015ac <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <ADC_DelayMicroSecond+0x38>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	490b      	ldr	r1, [pc, #44]	; (80015e8 <ADC_DelayMicroSecond+0x3c>)
 80015ba:	0018      	movs	r0, r3
 80015bc:	f7fe fda4 	bl	8000108 <__udivsi3>
 80015c0:	0003      	movs	r3, r0
 80015c2:	001a      	movs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4353      	muls	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80015ca:	e002      	b.n	80015d2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f9      	bne.n	80015cc <ADC_DelayMicroSecond+0x20>
  }
}
 80015d8:	46c0      	nop			; (mov r8, r8)
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	b004      	add	sp, #16
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	20000000 	.word	0x20000000
 80015e8:	000f4240 	.word	0x000f4240

080015ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	0002      	movs	r2, r0
 80015f4:	1dfb      	adds	r3, r7, #7
 80015f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015f8:	1dfb      	adds	r3, r7, #7
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b7f      	cmp	r3, #127	; 0x7f
 80015fe:	d809      	bhi.n	8001614 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001600:	1dfb      	adds	r3, r7, #7
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	001a      	movs	r2, r3
 8001606:	231f      	movs	r3, #31
 8001608:	401a      	ands	r2, r3
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <__NVIC_EnableIRQ+0x30>)
 800160c:	2101      	movs	r1, #1
 800160e:	4091      	lsls	r1, r2
 8001610:	000a      	movs	r2, r1
 8001612:	601a      	str	r2, [r3, #0]
  }
}
 8001614:	46c0      	nop			; (mov r8, r8)
 8001616:	46bd      	mov	sp, r7
 8001618:	b002      	add	sp, #8
 800161a:	bd80      	pop	{r7, pc}
 800161c:	e000e100 	.word	0xe000e100

08001620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	0002      	movs	r2, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	1dfb      	adds	r3, r7, #7
 800162c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800162e:	1dfb      	adds	r3, r7, #7
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b7f      	cmp	r3, #127	; 0x7f
 8001634:	d828      	bhi.n	8001688 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001636:	4a2f      	ldr	r2, [pc, #188]	; (80016f4 <__NVIC_SetPriority+0xd4>)
 8001638:	1dfb      	adds	r3, r7, #7
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b25b      	sxtb	r3, r3
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	33c0      	adds	r3, #192	; 0xc0
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	589b      	ldr	r3, [r3, r2]
 8001646:	1dfa      	adds	r2, r7, #7
 8001648:	7812      	ldrb	r2, [r2, #0]
 800164a:	0011      	movs	r1, r2
 800164c:	2203      	movs	r2, #3
 800164e:	400a      	ands	r2, r1
 8001650:	00d2      	lsls	r2, r2, #3
 8001652:	21ff      	movs	r1, #255	; 0xff
 8001654:	4091      	lsls	r1, r2
 8001656:	000a      	movs	r2, r1
 8001658:	43d2      	mvns	r2, r2
 800165a:	401a      	ands	r2, r3
 800165c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	019b      	lsls	r3, r3, #6
 8001662:	22ff      	movs	r2, #255	; 0xff
 8001664:	401a      	ands	r2, r3
 8001666:	1dfb      	adds	r3, r7, #7
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	0018      	movs	r0, r3
 800166c:	2303      	movs	r3, #3
 800166e:	4003      	ands	r3, r0
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001674:	481f      	ldr	r0, [pc, #124]	; (80016f4 <__NVIC_SetPriority+0xd4>)
 8001676:	1dfb      	adds	r3, r7, #7
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	b25b      	sxtb	r3, r3
 800167c:	089b      	lsrs	r3, r3, #2
 800167e:	430a      	orrs	r2, r1
 8001680:	33c0      	adds	r3, #192	; 0xc0
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001686:	e031      	b.n	80016ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001688:	4a1b      	ldr	r2, [pc, #108]	; (80016f8 <__NVIC_SetPriority+0xd8>)
 800168a:	1dfb      	adds	r3, r7, #7
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	0019      	movs	r1, r3
 8001690:	230f      	movs	r3, #15
 8001692:	400b      	ands	r3, r1
 8001694:	3b08      	subs	r3, #8
 8001696:	089b      	lsrs	r3, r3, #2
 8001698:	3306      	adds	r3, #6
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	18d3      	adds	r3, r2, r3
 800169e:	3304      	adds	r3, #4
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	1dfa      	adds	r2, r7, #7
 80016a4:	7812      	ldrb	r2, [r2, #0]
 80016a6:	0011      	movs	r1, r2
 80016a8:	2203      	movs	r2, #3
 80016aa:	400a      	ands	r2, r1
 80016ac:	00d2      	lsls	r2, r2, #3
 80016ae:	21ff      	movs	r1, #255	; 0xff
 80016b0:	4091      	lsls	r1, r2
 80016b2:	000a      	movs	r2, r1
 80016b4:	43d2      	mvns	r2, r2
 80016b6:	401a      	ands	r2, r3
 80016b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	019b      	lsls	r3, r3, #6
 80016be:	22ff      	movs	r2, #255	; 0xff
 80016c0:	401a      	ands	r2, r3
 80016c2:	1dfb      	adds	r3, r7, #7
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	0018      	movs	r0, r3
 80016c8:	2303      	movs	r3, #3
 80016ca:	4003      	ands	r3, r0
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016d0:	4809      	ldr	r0, [pc, #36]	; (80016f8 <__NVIC_SetPriority+0xd8>)
 80016d2:	1dfb      	adds	r3, r7, #7
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	001c      	movs	r4, r3
 80016d8:	230f      	movs	r3, #15
 80016da:	4023      	ands	r3, r4
 80016dc:	3b08      	subs	r3, #8
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	430a      	orrs	r2, r1
 80016e2:	3306      	adds	r3, #6
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	18c3      	adds	r3, r0, r3
 80016e8:	3304      	adds	r3, #4
 80016ea:	601a      	str	r2, [r3, #0]
}
 80016ec:	46c0      	nop			; (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b003      	add	sp, #12
 80016f2:	bd90      	pop	{r4, r7, pc}
 80016f4:	e000e100 	.word	0xe000e100
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	1e5a      	subs	r2, r3, #1
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	045b      	lsls	r3, r3, #17
 800170c:	429a      	cmp	r2, r3
 800170e:	d301      	bcc.n	8001714 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001710:	2301      	movs	r3, #1
 8001712:	e010      	b.n	8001736 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001714:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <SysTick_Config+0x44>)
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	3a01      	subs	r2, #1
 800171a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171c:	2301      	movs	r3, #1
 800171e:	425b      	negs	r3, r3
 8001720:	2103      	movs	r1, #3
 8001722:	0018      	movs	r0, r3
 8001724:	f7ff ff7c 	bl	8001620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <SysTick_Config+0x44>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172e:	4b04      	ldr	r3, [pc, #16]	; (8001740 <SysTick_Config+0x44>)
 8001730:	2207      	movs	r2, #7
 8001732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001734:	2300      	movs	r3, #0
}
 8001736:	0018      	movs	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	b002      	add	sp, #8
 800173c:	bd80      	pop	{r7, pc}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	e000e010 	.word	0xe000e010

08001744 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	210f      	movs	r1, #15
 8001750:	187b      	adds	r3, r7, r1
 8001752:	1c02      	adds	r2, r0, #0
 8001754:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	187b      	adds	r3, r7, r1
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	b25b      	sxtb	r3, r3
 800175e:	0011      	movs	r1, r2
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff ff5d 	bl	8001620 <__NVIC_SetPriority>
}
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	46bd      	mov	sp, r7
 800176a:	b004      	add	sp, #16
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	0002      	movs	r2, r0
 8001776:	1dfb      	adds	r3, r7, #7
 8001778:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177a:	1dfb      	adds	r3, r7, #7
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b25b      	sxtb	r3, r3
 8001780:	0018      	movs	r0, r3
 8001782:	f7ff ff33 	bl	80015ec <__NVIC_EnableIRQ>
}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	46bd      	mov	sp, r7
 800178a:	b002      	add	sp, #8
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	0018      	movs	r0, r3
 800179a:	f7ff ffaf 	bl	80016fc <SysTick_Config>
 800179e:	0003      	movs	r3, r0
}
 80017a0:	0018      	movs	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b002      	add	sp, #8
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e061      	b.n	800187e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a32      	ldr	r2, [pc, #200]	; (8001888 <HAL_DMA_Init+0xe0>)
 80017c0:	4694      	mov	ip, r2
 80017c2:	4463      	add	r3, ip
 80017c4:	2114      	movs	r1, #20
 80017c6:	0018      	movs	r0, r3
 80017c8:	f7fe fc9e 	bl	8000108 <__udivsi3>
 80017cc:	0003      	movs	r3, r0
 80017ce:	009a      	lsls	r2, r3, #2
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a2d      	ldr	r2, [pc, #180]	; (800188c <HAL_DMA_Init+0xe4>)
 80017d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2225      	movs	r2, #37	; 0x25
 80017de:	2102      	movs	r1, #2
 80017e0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4a28      	ldr	r2, [pc, #160]	; (8001890 <HAL_DMA_Init+0xe8>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001806:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001812:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	4313      	orrs	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	01db      	lsls	r3, r3, #7
 8001830:	429a      	cmp	r2, r3
 8001832:	d018      	beq.n	8001866 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <HAL_DMA_Init+0xec>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183c:	211c      	movs	r1, #28
 800183e:	400b      	ands	r3, r1
 8001840:	210f      	movs	r1, #15
 8001842:	4099      	lsls	r1, r3
 8001844:	000b      	movs	r3, r1
 8001846:	43d9      	mvns	r1, r3
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_DMA_Init+0xec>)
 800184a:	400a      	ands	r2, r1
 800184c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_DMA_Init+0xec>)
 8001850:	6819      	ldr	r1, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	201c      	movs	r0, #28
 800185c:	4003      	ands	r3, r0
 800185e:	409a      	lsls	r2, r3
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <HAL_DMA_Init+0xec>)
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2225      	movs	r2, #37	; 0x25
 8001870:	2101      	movs	r1, #1
 8001872:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2224      	movs	r2, #36	; 0x24
 8001878:	2100      	movs	r1, #0
 800187a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	0018      	movs	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	b004      	add	sp, #16
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	bffdfff8 	.word	0xbffdfff8
 800188c:	40020000 	.word	0x40020000
 8001890:	ffff800f 	.word	0xffff800f
 8001894:	400200a8 	.word	0x400200a8

08001898 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018a0:	230f      	movs	r3, #15
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2225      	movs	r2, #37	; 0x25
 80018ac:	5c9b      	ldrb	r3, [r3, r2]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d008      	beq.n	80018c6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2204      	movs	r2, #4
 80018b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2224      	movs	r2, #36	; 0x24
 80018be:	2100      	movs	r1, #0
 80018c0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e024      	b.n	8001910 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	210e      	movs	r1, #14
 80018d2:	438a      	bics	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2101      	movs	r1, #1
 80018e2:	438a      	bics	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	221c      	movs	r2, #28
 80018ec:	401a      	ands	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	2101      	movs	r1, #1
 80018f4:	4091      	lsls	r1, r2
 80018f6:	000a      	movs	r2, r1
 80018f8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2225      	movs	r2, #37	; 0x25
 80018fe:	2101      	movs	r1, #1
 8001900:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2224      	movs	r2, #36	; 0x24
 8001906:	2100      	movs	r1, #0
 8001908:	5499      	strb	r1, [r3, r2]

    return status;
 800190a:	230f      	movs	r3, #15
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001910:	0018      	movs	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	b004      	add	sp, #16
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001920:	210f      	movs	r1, #15
 8001922:	187b      	adds	r3, r7, r1
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2225      	movs	r2, #37	; 0x25
 800192c:	5c9b      	ldrb	r3, [r3, r2]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d006      	beq.n	8001942 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2204      	movs	r2, #4
 8001938:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800193a:	187b      	adds	r3, r7, r1
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e02a      	b.n	8001998 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	210e      	movs	r1, #14
 800194e:	438a      	bics	r2, r1
 8001950:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2101      	movs	r1, #1
 800195e:	438a      	bics	r2, r1
 8001960:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	221c      	movs	r2, #28
 8001968:	401a      	ands	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	2101      	movs	r1, #1
 8001970:	4091      	lsls	r1, r2
 8001972:	000a      	movs	r2, r1
 8001974:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2225      	movs	r2, #37	; 0x25
 800197a:	2101      	movs	r1, #1
 800197c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2224      	movs	r2, #36	; 0x24
 8001982:	2100      	movs	r1, #0
 8001984:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198a:	2b00      	cmp	r3, #0
 800198c:	d004      	beq.n	8001998 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	0010      	movs	r0, r2
 8001996:	4798      	blx	r3
    }
  }
  return status;
 8001998:	230f      	movs	r3, #15
 800199a:	18fb      	adds	r3, r7, r3
 800199c:	781b      	ldrb	r3, [r3, #0]
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b004      	add	sp, #16
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	221c      	movs	r2, #28
 80019c4:	4013      	ands	r3, r2
 80019c6:	2204      	movs	r2, #4
 80019c8:	409a      	lsls	r2, r3
 80019ca:	0013      	movs	r3, r2
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4013      	ands	r3, r2
 80019d0:	d026      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x7a>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2204      	movs	r2, #4
 80019d6:	4013      	ands	r3, r2
 80019d8:	d022      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2220      	movs	r2, #32
 80019e2:	4013      	ands	r3, r2
 80019e4:	d107      	bne.n	80019f6 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2104      	movs	r1, #4
 80019f2:	438a      	bics	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	221c      	movs	r2, #28
 80019fc:	401a      	ands	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	2104      	movs	r1, #4
 8001a04:	4091      	lsls	r1, r2
 8001a06:	000a      	movs	r2, r1
 8001a08:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d100      	bne.n	8001a14 <HAL_DMA_IRQHandler+0x6e>
 8001a12:	e071      	b.n	8001af8 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	0010      	movs	r0, r2
 8001a1c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001a1e:	e06b      	b.n	8001af8 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a24:	221c      	movs	r2, #28
 8001a26:	4013      	ands	r3, r2
 8001a28:	2202      	movs	r2, #2
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	0013      	movs	r3, r2
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4013      	ands	r3, r2
 8001a32:	d02d      	beq.n	8001a90 <HAL_DMA_IRQHandler+0xea>
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	2202      	movs	r2, #2
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d029      	beq.n	8001a90 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2220      	movs	r2, #32
 8001a44:	4013      	ands	r3, r2
 8001a46:	d10b      	bne.n	8001a60 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	210a      	movs	r1, #10
 8001a54:	438a      	bics	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2225      	movs	r2, #37	; 0x25
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a64:	221c      	movs	r2, #28
 8001a66:	401a      	ands	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	2102      	movs	r1, #2
 8001a6e:	4091      	lsls	r1, r2
 8001a70:	000a      	movs	r2, r1
 8001a72:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2224      	movs	r2, #36	; 0x24
 8001a78:	2100      	movs	r1, #0
 8001a7a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d039      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	0010      	movs	r0, r2
 8001a8c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a8e:	e033      	b.n	8001af8 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	221c      	movs	r2, #28
 8001a96:	4013      	ands	r3, r2
 8001a98:	2208      	movs	r2, #8
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	0013      	movs	r3, r2
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d02a      	beq.n	8001afa <HAL_DMA_IRQHandler+0x154>
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2208      	movs	r2, #8
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d026      	beq.n	8001afa <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	210e      	movs	r1, #14
 8001ab8:	438a      	bics	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac0:	221c      	movs	r2, #28
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	2101      	movs	r1, #1
 8001aca:	4091      	lsls	r1, r2
 8001acc:	000a      	movs	r2, r1
 8001ace:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2225      	movs	r2, #37	; 0x25
 8001ada:	2101      	movs	r1, #1
 8001adc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2224      	movs	r2, #36	; 0x24
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d005      	beq.n	8001afa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	0010      	movs	r0, r2
 8001af6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001af8:	46c0      	nop			; (mov r8, r8)
 8001afa:	46c0      	nop			; (mov r8, r8)
}
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b004      	add	sp, #16
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b1a:	e14f      	b.n	8001dbc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2101      	movs	r1, #1
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	4091      	lsls	r1, r2
 8001b26:	000a      	movs	r2, r1
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d100      	bne.n	8001b34 <HAL_GPIO_Init+0x30>
 8001b32:	e140      	b.n	8001db6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2203      	movs	r2, #3
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d005      	beq.n	8001b4c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2203      	movs	r2, #3
 8001b46:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d130      	bne.n	8001bae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	0013      	movs	r3, r2
 8001b5c:	43da      	mvns	r2, r3
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	0013      	movs	r3, r2
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b82:	2201      	movs	r2, #1
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	409a      	lsls	r2, r3
 8001b88:	0013      	movs	r3, r2
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	2201      	movs	r2, #1
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	0013      	movs	r3, r2
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d017      	beq.n	8001bea <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	0013      	movs	r3, r2
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	0013      	movs	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2203      	movs	r2, #3
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d123      	bne.n	8001c3e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	08da      	lsrs	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3208      	adds	r2, #8
 8001bfe:	0092      	lsls	r2, r2, #2
 8001c00:	58d3      	ldr	r3, [r2, r3]
 8001c02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	2207      	movs	r2, #7
 8001c08:	4013      	ands	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	220f      	movs	r2, #15
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	0013      	movs	r3, r2
 8001c12:	43da      	mvns	r2, r3
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2107      	movs	r1, #7
 8001c22:	400b      	ands	r3, r1
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	409a      	lsls	r2, r3
 8001c28:	0013      	movs	r3, r2
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	08da      	lsrs	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3208      	adds	r2, #8
 8001c38:	0092      	lsls	r2, r2, #2
 8001c3a:	6939      	ldr	r1, [r7, #16]
 8001c3c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	2203      	movs	r2, #3
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	0013      	movs	r3, r2
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	409a      	lsls	r2, r3
 8001c64:	0013      	movs	r3, r2
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	23c0      	movs	r3, #192	; 0xc0
 8001c78:	029b      	lsls	r3, r3, #10
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d100      	bne.n	8001c80 <HAL_GPIO_Init+0x17c>
 8001c7e:	e09a      	b.n	8001db6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c80:	4b54      	ldr	r3, [pc, #336]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001c82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c84:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001c86:	2101      	movs	r1, #1
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c8c:	4a52      	ldr	r2, [pc, #328]	; (8001dd8 <HAL_GPIO_Init+0x2d4>)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	3302      	adds	r3, #2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	589b      	ldr	r3, [r3, r2]
 8001c98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	220f      	movs	r2, #15
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	0013      	movs	r3, r2
 8001ca8:	43da      	mvns	r2, r3
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	23a0      	movs	r3, #160	; 0xa0
 8001cb4:	05db      	lsls	r3, r3, #23
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d019      	beq.n	8001cee <HAL_GPIO_Init+0x1ea>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a47      	ldr	r2, [pc, #284]	; (8001ddc <HAL_GPIO_Init+0x2d8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d013      	beq.n	8001cea <HAL_GPIO_Init+0x1e6>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a46      	ldr	r2, [pc, #280]	; (8001de0 <HAL_GPIO_Init+0x2dc>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00d      	beq.n	8001ce6 <HAL_GPIO_Init+0x1e2>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a45      	ldr	r2, [pc, #276]	; (8001de4 <HAL_GPIO_Init+0x2e0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d007      	beq.n	8001ce2 <HAL_GPIO_Init+0x1de>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a44      	ldr	r2, [pc, #272]	; (8001de8 <HAL_GPIO_Init+0x2e4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d101      	bne.n	8001cde <HAL_GPIO_Init+0x1da>
 8001cda:	2305      	movs	r3, #5
 8001cdc:	e008      	b.n	8001cf0 <HAL_GPIO_Init+0x1ec>
 8001cde:	2306      	movs	r3, #6
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_Init+0x1ec>
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e004      	b.n	8001cf0 <HAL_GPIO_Init+0x1ec>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e002      	b.n	8001cf0 <HAL_GPIO_Init+0x1ec>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_GPIO_Init+0x1ec>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	2103      	movs	r1, #3
 8001cf4:	400a      	ands	r2, r1
 8001cf6:	0092      	lsls	r2, r2, #2
 8001cf8:	4093      	lsls	r3, r2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d00:	4935      	ldr	r1, [pc, #212]	; (8001dd8 <HAL_GPIO_Init+0x2d4>)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	089b      	lsrs	r3, r3, #2
 8001d06:	3302      	adds	r3, #2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d0e:	4b37      	ldr	r3, [pc, #220]	; (8001dec <HAL_GPIO_Init+0x2e8>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	43da      	mvns	r2, r3
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	035b      	lsls	r3, r3, #13
 8001d26:	4013      	ands	r3, r2
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d32:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <HAL_GPIO_Init+0x2e8>)
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d38:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <HAL_GPIO_Init+0x2e8>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	43da      	mvns	r2, r3
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	039b      	lsls	r3, r3, #14
 8001d50:	4013      	ands	r3, r2
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d5c:	4b23      	ldr	r3, [pc, #140]	; (8001dec <HAL_GPIO_Init+0x2e8>)
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001d62:	4b22      	ldr	r3, [pc, #136]	; (8001dec <HAL_GPIO_Init+0x2e8>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	029b      	lsls	r3, r3, #10
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d86:	4b19      	ldr	r3, [pc, #100]	; (8001dec <HAL_GPIO_Init+0x2e8>)
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d8c:	4b17      	ldr	r3, [pc, #92]	; (8001dec <HAL_GPIO_Init+0x2e8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	43da      	mvns	r2, r3
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	025b      	lsls	r3, r3, #9
 8001da4:	4013      	ands	r3, r2
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_GPIO_Init+0x2e8>)
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3301      	adds	r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	40da      	lsrs	r2, r3
 8001dc4:	1e13      	subs	r3, r2, #0
 8001dc6:	d000      	beq.n	8001dca <HAL_GPIO_Init+0x2c6>
 8001dc8:	e6a8      	b.n	8001b1c <HAL_GPIO_Init+0x18>
  }
}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	46c0      	nop			; (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b006      	add	sp, #24
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40010000 	.word	0x40010000
 8001ddc:	50000400 	.word	0x50000400
 8001de0:	50000800 	.word	0x50000800
 8001de4:	50000c00 	.word	0x50000c00
 8001de8:	50001c00 	.word	0x50001c00
 8001dec:	40010400 	.word	0x40010400

08001df0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	0008      	movs	r0, r1
 8001dfa:	0011      	movs	r1, r2
 8001dfc:	1cbb      	adds	r3, r7, #2
 8001dfe:	1c02      	adds	r2, r0, #0
 8001e00:	801a      	strh	r2, [r3, #0]
 8001e02:	1c7b      	adds	r3, r7, #1
 8001e04:	1c0a      	adds	r2, r1, #0
 8001e06:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e08:	1c7b      	adds	r3, r7, #1
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d004      	beq.n	8001e1a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e10:	1cbb      	adds	r3, r7, #2
 8001e12:	881a      	ldrh	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001e18:	e003      	b.n	8001e22 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001e1a:	1cbb      	adds	r3, r7, #2
 8001e1c:	881a      	ldrh	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b002      	add	sp, #8
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	000a      	movs	r2, r1
 8001e34:	1cbb      	adds	r3, r7, #2
 8001e36:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e3e:	1cbb      	adds	r3, r7, #2
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4013      	ands	r3, r2
 8001e46:	041a      	lsls	r2, r3, #16
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	1cb9      	adds	r1, r7, #2
 8001e4e:	8809      	ldrh	r1, [r1, #0]
 8001e50:	400b      	ands	r3, r1
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	619a      	str	r2, [r3, #24]
}
 8001e58:	46c0      	nop			; (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b004      	add	sp, #16
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e60:	b5b0      	push	{r4, r5, r7, lr}
 8001e62:	b08a      	sub	sp, #40	; 0x28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d102      	bne.n	8001e74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	f000 fb5a 	bl	8002528 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e74:	4bce      	ldr	r3, [pc, #824]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	220c      	movs	r2, #12
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e7e:	4bcc      	ldr	r3, [pc, #816]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	025b      	lsls	r3, r3, #9
 8001e86:	4013      	ands	r3, r2
 8001e88:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4013      	ands	r3, r2
 8001e92:	d100      	bne.n	8001e96 <HAL_RCC_OscConfig+0x36>
 8001e94:	e07c      	b.n	8001f90 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d007      	beq.n	8001eac <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	d111      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x66>
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	025b      	lsls	r3, r3, #9
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d10c      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eac:	4bc0      	ldr	r3, [pc, #768]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	029b      	lsls	r3, r3, #10
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d100      	bne.n	8001eba <HAL_RCC_OscConfig+0x5a>
 8001eb8:	e069      	b.n	8001f8e <HAL_RCC_OscConfig+0x12e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d165      	bne.n	8001f8e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e330      	b.n	8002528 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	025b      	lsls	r3, r3, #9
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d107      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x82>
 8001ed2:	4bb7      	ldr	r3, [pc, #732]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	4bb6      	ldr	r3, [pc, #728]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001ed8:	2180      	movs	r1, #128	; 0x80
 8001eda:	0249      	lsls	r1, r1, #9
 8001edc:	430a      	orrs	r2, r1
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	e027      	b.n	8001f32 <HAL_RCC_OscConfig+0xd2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	23a0      	movs	r3, #160	; 0xa0
 8001ee8:	02db      	lsls	r3, r3, #11
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d10e      	bne.n	8001f0c <HAL_RCC_OscConfig+0xac>
 8001eee:	4bb0      	ldr	r3, [pc, #704]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	4baf      	ldr	r3, [pc, #700]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001ef4:	2180      	movs	r1, #128	; 0x80
 8001ef6:	02c9      	lsls	r1, r1, #11
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	4bac      	ldr	r3, [pc, #688]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4bab      	ldr	r3, [pc, #684]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001f02:	2180      	movs	r1, #128	; 0x80
 8001f04:	0249      	lsls	r1, r1, #9
 8001f06:	430a      	orrs	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	e012      	b.n	8001f32 <HAL_RCC_OscConfig+0xd2>
 8001f0c:	4ba8      	ldr	r3, [pc, #672]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4ba7      	ldr	r3, [pc, #668]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001f12:	49a8      	ldr	r1, [pc, #672]	; (80021b4 <HAL_RCC_OscConfig+0x354>)
 8001f14:	400a      	ands	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	4ba5      	ldr	r3, [pc, #660]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	025b      	lsls	r3, r3, #9
 8001f20:	4013      	ands	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4ba2      	ldr	r3, [pc, #648]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4ba1      	ldr	r3, [pc, #644]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001f2c:	49a2      	ldr	r1, [pc, #648]	; (80021b8 <HAL_RCC_OscConfig+0x358>)
 8001f2e:	400a      	ands	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d014      	beq.n	8001f64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3a:	f7ff f90f 	bl	800115c <HAL_GetTick>
 8001f3e:	0003      	movs	r3, r0
 8001f40:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f44:	f7ff f90a 	bl	800115c <HAL_GetTick>
 8001f48:	0002      	movs	r2, r0
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	; 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e2e8      	b.n	8002528 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f56:	4b96      	ldr	r3, [pc, #600]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	029b      	lsls	r3, r3, #10
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0xe4>
 8001f62:	e015      	b.n	8001f90 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff f8fa 	bl	800115c <HAL_GetTick>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f6e:	f7ff f8f5 	bl	800115c <HAL_GetTick>
 8001f72:	0002      	movs	r2, r0
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b64      	cmp	r3, #100	; 0x64
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e2d3      	b.n	8002528 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f80:	4b8b      	ldr	r3, [pc, #556]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	029b      	lsls	r3, r3, #10
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d1f0      	bne.n	8001f6e <HAL_RCC_OscConfig+0x10e>
 8001f8c:	e000      	b.n	8001f90 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2202      	movs	r2, #2
 8001f96:	4013      	ands	r3, r2
 8001f98:	d100      	bne.n	8001f9c <HAL_RCC_OscConfig+0x13c>
 8001f9a:	e08b      	b.n	80020b4 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
 8001faa:	2b0c      	cmp	r3, #12
 8001fac:	d13e      	bne.n	800202c <HAL_RCC_OscConfig+0x1cc>
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d13b      	bne.n	800202c <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001fb4:	4b7e      	ldr	r3, [pc, #504]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2204      	movs	r2, #4
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d004      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x168>
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e2af      	b.n	8002528 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc8:	4b79      	ldr	r3, [pc, #484]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	4a7b      	ldr	r2, [pc, #492]	; (80021bc <HAL_RCC_OscConfig+0x35c>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	021a      	lsls	r2, r3, #8
 8001fd8:	4b75      	ldr	r3, [pc, #468]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001fde:	4b74      	ldr	r3, [pc, #464]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2209      	movs	r2, #9
 8001fe4:	4393      	bics	r3, r2
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	4b71      	ldr	r3, [pc, #452]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ff0:	f000 fc7a 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 8001ff4:	0001      	movs	r1, r0
 8001ff6:	4b6e      	ldr	r3, [pc, #440]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	4013      	ands	r3, r2
 8002000:	4a6f      	ldr	r2, [pc, #444]	; (80021c0 <HAL_RCC_OscConfig+0x360>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	000a      	movs	r2, r1
 8002006:	40da      	lsrs	r2, r3
 8002008:	4b6e      	ldr	r3, [pc, #440]	; (80021c4 <HAL_RCC_OscConfig+0x364>)
 800200a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800200c:	4b6e      	ldr	r3, [pc, #440]	; (80021c8 <HAL_RCC_OscConfig+0x368>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2513      	movs	r5, #19
 8002012:	197c      	adds	r4, r7, r5
 8002014:	0018      	movs	r0, r3
 8002016:	f7ff f85b 	bl	80010d0 <HAL_InitTick>
 800201a:	0003      	movs	r3, r0
 800201c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800201e:	197b      	adds	r3, r7, r5
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d046      	beq.n	80020b4 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8002026:	197b      	adds	r3, r7, r5
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	e27d      	b.n	8002528 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d027      	beq.n	8002082 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002032:	4b5f      	ldr	r3, [pc, #380]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2209      	movs	r2, #9
 8002038:	4393      	bics	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	4b5c      	ldr	r3, [pc, #368]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff f88a 	bl	800115c <HAL_GetTick>
 8002048:	0003      	movs	r3, r0
 800204a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800204e:	f7ff f885 	bl	800115c <HAL_GetTick>
 8002052:	0002      	movs	r2, r0
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e263      	b.n	8002528 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002060:	4b53      	ldr	r3, [pc, #332]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2204      	movs	r2, #4
 8002066:	4013      	ands	r3, r2
 8002068:	d0f1      	beq.n	800204e <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206a:	4b51      	ldr	r3, [pc, #324]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4a53      	ldr	r2, [pc, #332]	; (80021bc <HAL_RCC_OscConfig+0x35c>)
 8002070:	4013      	ands	r3, r2
 8002072:	0019      	movs	r1, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	021a      	lsls	r2, r3, #8
 800207a:	4b4d      	ldr	r3, [pc, #308]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 800207c:	430a      	orrs	r2, r1
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	e018      	b.n	80020b4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002082:	4b4b      	ldr	r3, [pc, #300]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	4b4a      	ldr	r3, [pc, #296]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8002088:	2101      	movs	r1, #1
 800208a:	438a      	bics	r2, r1
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7ff f865 	bl	800115c <HAL_GetTick>
 8002092:	0003      	movs	r3, r0
 8002094:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002098:	f7ff f860 	bl	800115c <HAL_GetTick>
 800209c:	0002      	movs	r2, r0
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e23e      	b.n	8002528 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020aa:	4b41      	ldr	r3, [pc, #260]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2204      	movs	r2, #4
 80020b0:	4013      	ands	r3, r2
 80020b2:	d1f1      	bne.n	8002098 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2210      	movs	r2, #16
 80020ba:	4013      	ands	r3, r2
 80020bc:	d100      	bne.n	80020c0 <HAL_RCC_OscConfig+0x260>
 80020be:	e0a1      	b.n	8002204 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d140      	bne.n	8002148 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020c6:	4b3a      	ldr	r3, [pc, #232]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4013      	ands	r3, r2
 80020d0:	d005      	beq.n	80020de <HAL_RCC_OscConfig+0x27e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e224      	b.n	8002528 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020de:	4b34      	ldr	r3, [pc, #208]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4a3a      	ldr	r2, [pc, #232]	; (80021cc <HAL_RCC_OscConfig+0x36c>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	0019      	movs	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1a      	ldr	r2, [r3, #32]
 80020ec:	4b30      	ldr	r3, [pc, #192]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 80020ee:	430a      	orrs	r2, r1
 80020f0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020f2:	4b2f      	ldr	r3, [pc, #188]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	0a19      	lsrs	r1, r3, #8
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	061a      	lsls	r2, r3, #24
 8002100:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8002102:	430a      	orrs	r2, r1
 8002104:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	0b5b      	lsrs	r3, r3, #13
 800210c:	3301      	adds	r3, #1
 800210e:	2280      	movs	r2, #128	; 0x80
 8002110:	0212      	lsls	r2, r2, #8
 8002112:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002114:	4b26      	ldr	r3, [pc, #152]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	210f      	movs	r1, #15
 800211c:	400b      	ands	r3, r1
 800211e:	4928      	ldr	r1, [pc, #160]	; (80021c0 <HAL_RCC_OscConfig+0x360>)
 8002120:	5ccb      	ldrb	r3, [r1, r3]
 8002122:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002124:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <HAL_RCC_OscConfig+0x364>)
 8002126:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002128:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <HAL_RCC_OscConfig+0x368>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2513      	movs	r5, #19
 800212e:	197c      	adds	r4, r7, r5
 8002130:	0018      	movs	r0, r3
 8002132:	f7fe ffcd 	bl	80010d0 <HAL_InitTick>
 8002136:	0003      	movs	r3, r0
 8002138:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800213a:	197b      	adds	r3, r7, r5
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d060      	beq.n	8002204 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8002142:	197b      	adds	r3, r7, r5
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	e1ef      	b.n	8002528 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d03f      	beq.n	80021d0 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002150:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8002156:	2180      	movs	r1, #128	; 0x80
 8002158:	0049      	lsls	r1, r1, #1
 800215a:	430a      	orrs	r2, r1
 800215c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215e:	f7fe fffd 	bl	800115c <HAL_GetTick>
 8002162:	0003      	movs	r3, r0
 8002164:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002168:	f7fe fff8 	bl	800115c <HAL_GetTick>
 800216c:	0002      	movs	r2, r0
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e1d6      	b.n	8002528 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4013      	ands	r3, r2
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4a10      	ldr	r2, [pc, #64]	; (80021cc <HAL_RCC_OscConfig+0x36c>)
 800218c:	4013      	ands	r3, r2
 800218e:	0019      	movs	r1, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a1a      	ldr	r2, [r3, #32]
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 8002196:	430a      	orrs	r2, r1
 8002198:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	0a19      	lsrs	r1, r3, #8
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	061a      	lsls	r2, r3, #24
 80021a8:	4b01      	ldr	r3, [pc, #4]	; (80021b0 <HAL_RCC_OscConfig+0x350>)
 80021aa:	430a      	orrs	r2, r1
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	e029      	b.n	8002204 <HAL_RCC_OscConfig+0x3a4>
 80021b0:	40021000 	.word	0x40021000
 80021b4:	fffeffff 	.word	0xfffeffff
 80021b8:	fffbffff 	.word	0xfffbffff
 80021bc:	ffffe0ff 	.word	0xffffe0ff
 80021c0:	080048a4 	.word	0x080048a4
 80021c4:	20000000 	.word	0x20000000
 80021c8:	20000004 	.word	0x20000004
 80021cc:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021d0:	4bbe      	ldr	r3, [pc, #760]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4bbd      	ldr	r3, [pc, #756]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 80021d6:	49be      	ldr	r1, [pc, #760]	; (80024d0 <HAL_RCC_OscConfig+0x670>)
 80021d8:	400a      	ands	r2, r1
 80021da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7fe ffbe 	bl	800115c <HAL_GetTick>
 80021e0:	0003      	movs	r3, r0
 80021e2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021e6:	f7fe ffb9 	bl	800115c <HAL_GetTick>
 80021ea:	0002      	movs	r2, r0
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e197      	b.n	8002528 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80021f8:	4bb4      	ldr	r3, [pc, #720]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	2380      	movs	r3, #128	; 0x80
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4013      	ands	r3, r2
 8002202:	d1f0      	bne.n	80021e6 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2208      	movs	r2, #8
 800220a:	4013      	ands	r3, r2
 800220c:	d036      	beq.n	800227c <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d019      	beq.n	800224a <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002216:	4bad      	ldr	r3, [pc, #692]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 8002218:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800221a:	4bac      	ldr	r3, [pc, #688]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 800221c:	2101      	movs	r1, #1
 800221e:	430a      	orrs	r2, r1
 8002220:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002222:	f7fe ff9b 	bl	800115c <HAL_GetTick>
 8002226:	0003      	movs	r3, r0
 8002228:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800222c:	f7fe ff96 	bl	800115c <HAL_GetTick>
 8002230:	0002      	movs	r2, r0
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e174      	b.n	8002528 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800223e:	4ba3      	ldr	r3, [pc, #652]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 8002240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002242:	2202      	movs	r2, #2
 8002244:	4013      	ands	r3, r2
 8002246:	d0f1      	beq.n	800222c <HAL_RCC_OscConfig+0x3cc>
 8002248:	e018      	b.n	800227c <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800224a:	4ba0      	ldr	r3, [pc, #640]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 800224c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800224e:	4b9f      	ldr	r3, [pc, #636]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 8002250:	2101      	movs	r1, #1
 8002252:	438a      	bics	r2, r1
 8002254:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002256:	f7fe ff81 	bl	800115c <HAL_GetTick>
 800225a:	0003      	movs	r3, r0
 800225c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002260:	f7fe ff7c 	bl	800115c <HAL_GetTick>
 8002264:	0002      	movs	r2, r0
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e15a      	b.n	8002528 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002272:	4b96      	ldr	r3, [pc, #600]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 8002274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002276:	2202      	movs	r2, #2
 8002278:	4013      	ands	r3, r2
 800227a:	d1f1      	bne.n	8002260 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2204      	movs	r2, #4
 8002282:	4013      	ands	r3, r2
 8002284:	d100      	bne.n	8002288 <HAL_RCC_OscConfig+0x428>
 8002286:	e0ae      	b.n	80023e6 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002288:	2027      	movs	r0, #39	; 0x27
 800228a:	183b      	adds	r3, r7, r0
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002290:	4b8e      	ldr	r3, [pc, #568]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 8002292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	055b      	lsls	r3, r3, #21
 8002298:	4013      	ands	r3, r2
 800229a:	d109      	bne.n	80022b0 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229c:	4b8b      	ldr	r3, [pc, #556]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 800229e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022a0:	4b8a      	ldr	r3, [pc, #552]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 80022a2:	2180      	movs	r1, #128	; 0x80
 80022a4:	0549      	lsls	r1, r1, #21
 80022a6:	430a      	orrs	r2, r1
 80022a8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80022aa:	183b      	adds	r3, r7, r0
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b0:	4b88      	ldr	r3, [pc, #544]	; (80024d4 <HAL_RCC_OscConfig+0x674>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4013      	ands	r3, r2
 80022ba:	d11a      	bne.n	80022f2 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022bc:	4b85      	ldr	r3, [pc, #532]	; (80024d4 <HAL_RCC_OscConfig+0x674>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b84      	ldr	r3, [pc, #528]	; (80024d4 <HAL_RCC_OscConfig+0x674>)
 80022c2:	2180      	movs	r1, #128	; 0x80
 80022c4:	0049      	lsls	r1, r1, #1
 80022c6:	430a      	orrs	r2, r1
 80022c8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ca:	f7fe ff47 	bl	800115c <HAL_GetTick>
 80022ce:	0003      	movs	r3, r0
 80022d0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d4:	f7fe ff42 	bl	800115c <HAL_GetTick>
 80022d8:	0002      	movs	r2, r0
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	; 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e120      	b.n	8002528 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e6:	4b7b      	ldr	r3, [pc, #492]	; (80024d4 <HAL_RCC_OscConfig+0x674>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4013      	ands	r3, r2
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	2380      	movs	r3, #128	; 0x80
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d107      	bne.n	800230e <HAL_RCC_OscConfig+0x4ae>
 80022fe:	4b73      	ldr	r3, [pc, #460]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 8002300:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002302:	4b72      	ldr	r3, [pc, #456]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 8002304:	2180      	movs	r1, #128	; 0x80
 8002306:	0049      	lsls	r1, r1, #1
 8002308:	430a      	orrs	r2, r1
 800230a:	651a      	str	r2, [r3, #80]	; 0x50
 800230c:	e031      	b.n	8002372 <HAL_RCC_OscConfig+0x512>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0x4d0>
 8002316:	4b6d      	ldr	r3, [pc, #436]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 8002318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800231a:	4b6c      	ldr	r3, [pc, #432]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 800231c:	496c      	ldr	r1, [pc, #432]	; (80024d0 <HAL_RCC_OscConfig+0x670>)
 800231e:	400a      	ands	r2, r1
 8002320:	651a      	str	r2, [r3, #80]	; 0x50
 8002322:	4b6a      	ldr	r3, [pc, #424]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 8002324:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002326:	4b69      	ldr	r3, [pc, #420]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 8002328:	496b      	ldr	r1, [pc, #428]	; (80024d8 <HAL_RCC_OscConfig+0x678>)
 800232a:	400a      	ands	r2, r1
 800232c:	651a      	str	r2, [r3, #80]	; 0x50
 800232e:	e020      	b.n	8002372 <HAL_RCC_OscConfig+0x512>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	23a0      	movs	r3, #160	; 0xa0
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	429a      	cmp	r2, r3
 800233a:	d10e      	bne.n	800235a <HAL_RCC_OscConfig+0x4fa>
 800233c:	4b63      	ldr	r3, [pc, #396]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 800233e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002340:	4b62      	ldr	r3, [pc, #392]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	00c9      	lsls	r1, r1, #3
 8002346:	430a      	orrs	r2, r1
 8002348:	651a      	str	r2, [r3, #80]	; 0x50
 800234a:	4b60      	ldr	r3, [pc, #384]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 800234c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800234e:	4b5f      	ldr	r3, [pc, #380]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 8002350:	2180      	movs	r1, #128	; 0x80
 8002352:	0049      	lsls	r1, r1, #1
 8002354:	430a      	orrs	r2, r1
 8002356:	651a      	str	r2, [r3, #80]	; 0x50
 8002358:	e00b      	b.n	8002372 <HAL_RCC_OscConfig+0x512>
 800235a:	4b5c      	ldr	r3, [pc, #368]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 800235c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800235e:	4b5b      	ldr	r3, [pc, #364]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 8002360:	495b      	ldr	r1, [pc, #364]	; (80024d0 <HAL_RCC_OscConfig+0x670>)
 8002362:	400a      	ands	r2, r1
 8002364:	651a      	str	r2, [r3, #80]	; 0x50
 8002366:	4b59      	ldr	r3, [pc, #356]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 8002368:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800236a:	4b58      	ldr	r3, [pc, #352]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 800236c:	495a      	ldr	r1, [pc, #360]	; (80024d8 <HAL_RCC_OscConfig+0x678>)
 800236e:	400a      	ands	r2, r1
 8002370:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d015      	beq.n	80023a6 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237a:	f7fe feef 	bl	800115c <HAL_GetTick>
 800237e:	0003      	movs	r3, r0
 8002380:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002382:	e009      	b.n	8002398 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002384:	f7fe feea 	bl	800115c <HAL_GetTick>
 8002388:	0002      	movs	r2, r0
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	4a53      	ldr	r2, [pc, #332]	; (80024dc <HAL_RCC_OscConfig+0x67c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e0c7      	b.n	8002528 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002398:	4b4c      	ldr	r3, [pc, #304]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 800239a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4013      	ands	r3, r2
 80023a2:	d0ef      	beq.n	8002384 <HAL_RCC_OscConfig+0x524>
 80023a4:	e014      	b.n	80023d0 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a6:	f7fe fed9 	bl	800115c <HAL_GetTick>
 80023aa:	0003      	movs	r3, r0
 80023ac:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023ae:	e009      	b.n	80023c4 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b0:	f7fe fed4 	bl	800115c <HAL_GetTick>
 80023b4:	0002      	movs	r2, r0
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	4a48      	ldr	r2, [pc, #288]	; (80024dc <HAL_RCC_OscConfig+0x67c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e0b1      	b.n	8002528 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023c4:	4b41      	ldr	r3, [pc, #260]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 80023c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4013      	ands	r3, r2
 80023ce:	d1ef      	bne.n	80023b0 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023d0:	2327      	movs	r3, #39	; 0x27
 80023d2:	18fb      	adds	r3, r7, r3
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d105      	bne.n	80023e6 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023da:	4b3c      	ldr	r3, [pc, #240]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 80023dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023de:	4b3b      	ldr	r3, [pc, #236]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 80023e0:	493f      	ldr	r1, [pc, #252]	; (80024e0 <HAL_RCC_OscConfig+0x680>)
 80023e2:	400a      	ands	r2, r1
 80023e4:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d100      	bne.n	80023f0 <HAL_RCC_OscConfig+0x590>
 80023ee:	e09a      	b.n	8002526 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	2b0c      	cmp	r3, #12
 80023f4:	d064      	beq.n	80024c0 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d145      	bne.n	800248a <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fe:	4b33      	ldr	r3, [pc, #204]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	4b32      	ldr	r3, [pc, #200]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 8002404:	4937      	ldr	r1, [pc, #220]	; (80024e4 <HAL_RCC_OscConfig+0x684>)
 8002406:	400a      	ands	r2, r1
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7fe fea7 	bl	800115c <HAL_GetTick>
 800240e:	0003      	movs	r3, r0
 8002410:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002414:	f7fe fea2 	bl	800115c <HAL_GetTick>
 8002418:	0002      	movs	r2, r0
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e080      	b.n	8002528 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002426:	4b29      	ldr	r3, [pc, #164]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	049b      	lsls	r3, r3, #18
 800242e:	4013      	ands	r3, r2
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002432:	4b26      	ldr	r3, [pc, #152]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	4a2c      	ldr	r2, [pc, #176]	; (80024e8 <HAL_RCC_OscConfig+0x688>)
 8002438:	4013      	ands	r3, r2
 800243a:	0019      	movs	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	431a      	orrs	r2, r3
 800244c:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 800244e:	430a      	orrs	r2, r1
 8002450:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002452:	4b1e      	ldr	r3, [pc, #120]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4b1d      	ldr	r3, [pc, #116]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 8002458:	2180      	movs	r1, #128	; 0x80
 800245a:	0449      	lsls	r1, r1, #17
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7fe fe7c 	bl	800115c <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246a:	f7fe fe77 	bl	800115c <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e055      	b.n	8002528 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800247c:	4b13      	ldr	r3, [pc, #76]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	049b      	lsls	r3, r3, #18
 8002484:	4013      	ands	r3, r2
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x60a>
 8002488:	e04d      	b.n	8002526 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248a:	4b10      	ldr	r3, [pc, #64]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 8002490:	4914      	ldr	r1, [pc, #80]	; (80024e4 <HAL_RCC_OscConfig+0x684>)
 8002492:	400a      	ands	r2, r1
 8002494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002496:	f7fe fe61 	bl	800115c <HAL_GetTick>
 800249a:	0003      	movs	r3, r0
 800249c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a0:	f7fe fe5c 	bl	800115c <HAL_GetTick>
 80024a4:	0002      	movs	r2, r0
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e03a      	b.n	8002528 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <HAL_RCC_OscConfig+0x66c>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	049b      	lsls	r3, r3, #18
 80024ba:	4013      	ands	r3, r2
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x640>
 80024be:	e032      	b.n	8002526 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d111      	bne.n	80024ec <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e02d      	b.n	8002528 <HAL_RCC_OscConfig+0x6c8>
 80024cc:	40021000 	.word	0x40021000
 80024d0:	fffffeff 	.word	0xfffffeff
 80024d4:	40007000 	.word	0x40007000
 80024d8:	fffffbff 	.word	0xfffffbff
 80024dc:	00001388 	.word	0x00001388
 80024e0:	efffffff 	.word	0xefffffff
 80024e4:	feffffff 	.word	0xfeffffff
 80024e8:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024ec:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_RCC_OscConfig+0x6d0>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	025b      	lsls	r3, r3, #9
 80024f8:	401a      	ands	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	429a      	cmp	r2, r3
 8002500:	d10f      	bne.n	8002522 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002502:	69fa      	ldr	r2, [r7, #28]
 8002504:	23f0      	movs	r3, #240	; 0xf0
 8002506:	039b      	lsls	r3, r3, #14
 8002508:	401a      	ands	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d107      	bne.n	8002522 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	23c0      	movs	r3, #192	; 0xc0
 8002516:	041b      	lsls	r3, r3, #16
 8002518:	401a      	ands	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d001      	beq.n	8002526 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b00a      	add	sp, #40	; 0x28
 800252e:	bdb0      	pop	{r4, r5, r7, pc}
 8002530:	40021000 	.word	0x40021000

08002534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002534:	b5b0      	push	{r4, r5, r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e128      	b.n	800279a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002548:	4b96      	ldr	r3, [pc, #600]	; (80027a4 <HAL_RCC_ClockConfig+0x270>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2201      	movs	r2, #1
 800254e:	4013      	ands	r3, r2
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d91e      	bls.n	8002594 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002556:	4b93      	ldr	r3, [pc, #588]	; (80027a4 <HAL_RCC_ClockConfig+0x270>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2201      	movs	r2, #1
 800255c:	4393      	bics	r3, r2
 800255e:	0019      	movs	r1, r3
 8002560:	4b90      	ldr	r3, [pc, #576]	; (80027a4 <HAL_RCC_ClockConfig+0x270>)
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002568:	f7fe fdf8 	bl	800115c <HAL_GetTick>
 800256c:	0003      	movs	r3, r0
 800256e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002570:	e009      	b.n	8002586 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002572:	f7fe fdf3 	bl	800115c <HAL_GetTick>
 8002576:	0002      	movs	r2, r0
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	4a8a      	ldr	r2, [pc, #552]	; (80027a8 <HAL_RCC_ClockConfig+0x274>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e109      	b.n	800279a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b87      	ldr	r3, [pc, #540]	; (80027a4 <HAL_RCC_ClockConfig+0x270>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2201      	movs	r2, #1
 800258c:	4013      	ands	r3, r2
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d1ee      	bne.n	8002572 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2202      	movs	r2, #2
 800259a:	4013      	ands	r3, r2
 800259c:	d009      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800259e:	4b83      	ldr	r3, [pc, #524]	; (80027ac <HAL_RCC_ClockConfig+0x278>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	22f0      	movs	r2, #240	; 0xf0
 80025a4:	4393      	bics	r3, r2
 80025a6:	0019      	movs	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	4b7f      	ldr	r3, [pc, #508]	; (80027ac <HAL_RCC_ClockConfig+0x278>)
 80025ae:	430a      	orrs	r2, r1
 80025b0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2201      	movs	r2, #1
 80025b8:	4013      	ands	r3, r2
 80025ba:	d100      	bne.n	80025be <HAL_RCC_ClockConfig+0x8a>
 80025bc:	e089      	b.n	80026d2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025c6:	4b79      	ldr	r3, [pc, #484]	; (80027ac <HAL_RCC_ClockConfig+0x278>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	029b      	lsls	r3, r3, #10
 80025ce:	4013      	ands	r3, r2
 80025d0:	d120      	bne.n	8002614 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0e1      	b.n	800279a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d107      	bne.n	80025ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025de:	4b73      	ldr	r3, [pc, #460]	; (80027ac <HAL_RCC_ClockConfig+0x278>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	049b      	lsls	r3, r3, #18
 80025e6:	4013      	ands	r3, r2
 80025e8:	d114      	bne.n	8002614 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e0d5      	b.n	800279a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d106      	bne.n	8002604 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025f6:	4b6d      	ldr	r3, [pc, #436]	; (80027ac <HAL_RCC_ClockConfig+0x278>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2204      	movs	r2, #4
 80025fc:	4013      	ands	r3, r2
 80025fe:	d109      	bne.n	8002614 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0ca      	b.n	800279a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002604:	4b69      	ldr	r3, [pc, #420]	; (80027ac <HAL_RCC_ClockConfig+0x278>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4013      	ands	r3, r2
 800260e:	d101      	bne.n	8002614 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0c2      	b.n	800279a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002614:	4b65      	ldr	r3, [pc, #404]	; (80027ac <HAL_RCC_ClockConfig+0x278>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	2203      	movs	r2, #3
 800261a:	4393      	bics	r3, r2
 800261c:	0019      	movs	r1, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	4b62      	ldr	r3, [pc, #392]	; (80027ac <HAL_RCC_ClockConfig+0x278>)
 8002624:	430a      	orrs	r2, r1
 8002626:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002628:	f7fe fd98 	bl	800115c <HAL_GetTick>
 800262c:	0003      	movs	r3, r0
 800262e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d111      	bne.n	800265c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002638:	e009      	b.n	800264e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263a:	f7fe fd8f 	bl	800115c <HAL_GetTick>
 800263e:	0002      	movs	r2, r0
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	4a58      	ldr	r2, [pc, #352]	; (80027a8 <HAL_RCC_ClockConfig+0x274>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e0a5      	b.n	800279a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800264e:	4b57      	ldr	r3, [pc, #348]	; (80027ac <HAL_RCC_ClockConfig+0x278>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	220c      	movs	r2, #12
 8002654:	4013      	ands	r3, r2
 8002656:	2b08      	cmp	r3, #8
 8002658:	d1ef      	bne.n	800263a <HAL_RCC_ClockConfig+0x106>
 800265a:	e03a      	b.n	80026d2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d111      	bne.n	8002688 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002664:	e009      	b.n	800267a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002666:	f7fe fd79 	bl	800115c <HAL_GetTick>
 800266a:	0002      	movs	r2, r0
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	4a4d      	ldr	r2, [pc, #308]	; (80027a8 <HAL_RCC_ClockConfig+0x274>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e08f      	b.n	800279a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800267a:	4b4c      	ldr	r3, [pc, #304]	; (80027ac <HAL_RCC_ClockConfig+0x278>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	220c      	movs	r2, #12
 8002680:	4013      	ands	r3, r2
 8002682:	2b0c      	cmp	r3, #12
 8002684:	d1ef      	bne.n	8002666 <HAL_RCC_ClockConfig+0x132>
 8002686:	e024      	b.n	80026d2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d11b      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002690:	e009      	b.n	80026a6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002692:	f7fe fd63 	bl	800115c <HAL_GetTick>
 8002696:	0002      	movs	r2, r0
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	4a42      	ldr	r2, [pc, #264]	; (80027a8 <HAL_RCC_ClockConfig+0x274>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e079      	b.n	800279a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026a6:	4b41      	ldr	r3, [pc, #260]	; (80027ac <HAL_RCC_ClockConfig+0x278>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	220c      	movs	r2, #12
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d1ef      	bne.n	8002692 <HAL_RCC_ClockConfig+0x15e>
 80026b2:	e00e      	b.n	80026d2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b4:	f7fe fd52 	bl	800115c <HAL_GetTick>
 80026b8:	0002      	movs	r2, r0
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	4a3a      	ldr	r2, [pc, #232]	; (80027a8 <HAL_RCC_ClockConfig+0x274>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e068      	b.n	800279a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80026c8:	4b38      	ldr	r3, [pc, #224]	; (80027ac <HAL_RCC_ClockConfig+0x278>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	220c      	movs	r2, #12
 80026ce:	4013      	ands	r3, r2
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026d2:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <HAL_RCC_ClockConfig+0x270>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2201      	movs	r2, #1
 80026d8:	4013      	ands	r3, r2
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d21e      	bcs.n	800271e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e0:	4b30      	ldr	r3, [pc, #192]	; (80027a4 <HAL_RCC_ClockConfig+0x270>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2201      	movs	r2, #1
 80026e6:	4393      	bics	r3, r2
 80026e8:	0019      	movs	r1, r3
 80026ea:	4b2e      	ldr	r3, [pc, #184]	; (80027a4 <HAL_RCC_ClockConfig+0x270>)
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026f2:	f7fe fd33 	bl	800115c <HAL_GetTick>
 80026f6:	0003      	movs	r3, r0
 80026f8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	e009      	b.n	8002710 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fc:	f7fe fd2e 	bl	800115c <HAL_GetTick>
 8002700:	0002      	movs	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	4a28      	ldr	r2, [pc, #160]	; (80027a8 <HAL_RCC_ClockConfig+0x274>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e044      	b.n	800279a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002710:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <HAL_RCC_ClockConfig+0x270>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2201      	movs	r2, #1
 8002716:	4013      	ands	r3, r2
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d1ee      	bne.n	80026fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2204      	movs	r2, #4
 8002724:	4013      	ands	r3, r2
 8002726:	d009      	beq.n	800273c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002728:	4b20      	ldr	r3, [pc, #128]	; (80027ac <HAL_RCC_ClockConfig+0x278>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4a20      	ldr	r2, [pc, #128]	; (80027b0 <HAL_RCC_ClockConfig+0x27c>)
 800272e:	4013      	ands	r3, r2
 8002730:	0019      	movs	r1, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <HAL_RCC_ClockConfig+0x278>)
 8002738:	430a      	orrs	r2, r1
 800273a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2208      	movs	r2, #8
 8002742:	4013      	ands	r3, r2
 8002744:	d00a      	beq.n	800275c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002746:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_RCC_ClockConfig+0x278>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	4a1a      	ldr	r2, [pc, #104]	; (80027b4 <HAL_RCC_ClockConfig+0x280>)
 800274c:	4013      	ands	r3, r2
 800274e:	0019      	movs	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	00da      	lsls	r2, r3, #3
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <HAL_RCC_ClockConfig+0x278>)
 8002758:	430a      	orrs	r2, r1
 800275a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800275c:	f000 f8c4 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 8002760:	0001      	movs	r1, r0
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_RCC_ClockConfig+0x278>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	220f      	movs	r2, #15
 800276a:	4013      	ands	r3, r2
 800276c:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <HAL_RCC_ClockConfig+0x284>)
 800276e:	5cd3      	ldrb	r3, [r2, r3]
 8002770:	000a      	movs	r2, r1
 8002772:	40da      	lsrs	r2, r3
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_RCC_ClockConfig+0x288>)
 8002776:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002778:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_RCC_ClockConfig+0x28c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	250b      	movs	r5, #11
 800277e:	197c      	adds	r4, r7, r5
 8002780:	0018      	movs	r0, r3
 8002782:	f7fe fca5 	bl	80010d0 <HAL_InitTick>
 8002786:	0003      	movs	r3, r0
 8002788:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800278a:	197b      	adds	r3, r7, r5
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002792:	197b      	adds	r3, r7, r5
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	e000      	b.n	800279a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	0018      	movs	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	b004      	add	sp, #16
 80027a0:	bdb0      	pop	{r4, r5, r7, pc}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	40022000 	.word	0x40022000
 80027a8:	00001388 	.word	0x00001388
 80027ac:	40021000 	.word	0x40021000
 80027b0:	fffff8ff 	.word	0xfffff8ff
 80027b4:	ffffc7ff 	.word	0xffffc7ff
 80027b8:	080048a4 	.word	0x080048a4
 80027bc:	20000000 	.word	0x20000000
 80027c0:	20000004 	.word	0x20000004

080027c4 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b08d      	sub	sp, #52	; 0x34
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0};
 80027d0:	241c      	movs	r4, #28
 80027d2:	193b      	adds	r3, r7, r4
 80027d4:	0018      	movs	r0, r3
 80027d6:	2314      	movs	r3, #20
 80027d8:	001a      	movs	r2, r3
 80027da:	2100      	movs	r1, #0
 80027dc:	f002 f825 	bl	800482a <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80027e0:	0020      	movs	r0, r4
 80027e2:	183b      	adds	r3, r7, r0
 80027e4:	2202      	movs	r2, #2
 80027e6:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80027e8:	183b      	adds	r3, r7, r0
 80027ea:	2202      	movs	r2, #2
 80027ec:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 80027ee:	183b      	adds	r3, r7, r0
 80027f0:	2200      	movs	r2, #0
 80027f2:	609a      	str	r2, [r3, #8]
  if(RCC_MCOx == RCC_MCO1)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d11a      	bne.n	8002830 <HAL_RCC_MCOConfig+0x6c>
  {
    gpio.Pin       = MCO1_PIN;
 80027fa:	183b      	adds	r3, r7, r0
 80027fc:	2280      	movs	r2, #128	; 0x80
 80027fe:	0052      	lsls	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8002802:	183b      	adds	r3, r7, r0
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8002808:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <HAL_RCC_MCOConfig+0xfc>)
 800280a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280c:	4b2c      	ldr	r3, [pc, #176]	; (80028c0 <HAL_RCC_MCOConfig+0xfc>)
 800280e:	2101      	movs	r1, #1
 8002810:	430a      	orrs	r2, r1
 8002812:	62da      	str	r2, [r3, #44]	; 0x2c
 8002814:	4b2a      	ldr	r3, [pc, #168]	; (80028c0 <HAL_RCC_MCOConfig+0xfc>)
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	2201      	movs	r2, #1
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002820:	183a      	adds	r2, r7, r0
 8002822:	23a0      	movs	r3, #160	; 0xa0
 8002824:	05db      	lsls	r3, r3, #23
 8002826:	0011      	movs	r1, r2
 8002828:	0018      	movs	r0, r3
 800282a:	f7ff f96b 	bl	8001b04 <HAL_GPIO_Init>
 800282e:	e038      	b.n	80028a2 <HAL_RCC_MCOConfig+0xde>
  }
#if defined(RCC_MCO3_SUPPORT)
  else if (RCC_MCOx == RCC_MCO3)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d11a      	bne.n	800286c <HAL_RCC_MCOConfig+0xa8>
  {
    gpio.Pin       = MCO3_PIN;
 8002836:	201c      	movs	r0, #28
 8002838:	183b      	adds	r3, r7, r0
 800283a:	2280      	movs	r2, #128	; 0x80
 800283c:	0192      	lsls	r2, r2, #6
 800283e:	601a      	str	r2, [r3, #0]
    gpio.Alternate = MCO3_GPIO_AF;
 8002840:	183b      	adds	r3, r7, r0
 8002842:	2200      	movs	r2, #0
 8002844:	611a      	str	r2, [r3, #16]

    /* MCO3 Clock Enable */
    MCO3_CLK_ENABLE();
 8002846:	4b1e      	ldr	r3, [pc, #120]	; (80028c0 <HAL_RCC_MCOConfig+0xfc>)
 8002848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284a:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <HAL_RCC_MCOConfig+0xfc>)
 800284c:	2102      	movs	r1, #2
 800284e:	430a      	orrs	r2, r1
 8002850:	62da      	str	r2, [r3, #44]	; 0x2c
 8002852:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_RCC_MCOConfig+0xfc>)
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	2202      	movs	r2, #2
 8002858:	4013      	ands	r3, r2
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	697b      	ldr	r3, [r7, #20]
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 800285e:	183b      	adds	r3, r7, r0
 8002860:	4a18      	ldr	r2, [pc, #96]	; (80028c4 <HAL_RCC_MCOConfig+0x100>)
 8002862:	0019      	movs	r1, r3
 8002864:	0010      	movs	r0, r2
 8002866:	f7ff f94d 	bl	8001b04 <HAL_GPIO_Init>
 800286a:	e01a      	b.n	80028a2 <HAL_RCC_MCOConfig+0xde>
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {
    gpio.Pin       = MCO2_PIN;
 800286c:	201c      	movs	r0, #28
 800286e:	183b      	adds	r3, r7, r0
 8002870:	2280      	movs	r2, #128	; 0x80
 8002872:	0092      	lsls	r2, r2, #2
 8002874:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8002876:	183b      	adds	r3, r7, r0
 8002878:	2200      	movs	r2, #0
 800287a:	611a      	str	r2, [r3, #16]

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 800287c:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <HAL_RCC_MCOConfig+0xfc>)
 800287e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <HAL_RCC_MCOConfig+0xfc>)
 8002882:	2101      	movs	r1, #1
 8002884:	430a      	orrs	r2, r1
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c
 8002888:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <HAL_RCC_MCOConfig+0xfc>)
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	2201      	movs	r2, #1
 800288e:	4013      	ands	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	693b      	ldr	r3, [r7, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 8002894:	183a      	adds	r2, r7, r0
 8002896:	23a0      	movs	r3, #160	; 0xa0
 8002898:	05db      	lsls	r3, r3, #23
 800289a:	0011      	movs	r1, r2
 800289c:	0018      	movs	r0, r3
 800289e:	f7ff f931 	bl	8001b04 <HAL_GPIO_Init>
  }

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80028a2:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <HAL_RCC_MCOConfig+0xfc>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	4a08      	ldr	r2, [pc, #32]	; (80028c8 <HAL_RCC_MCOConfig+0x104>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	0019      	movs	r1, r3
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	431a      	orrs	r2, r3
 80028b2:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <HAL_RCC_MCOConfig+0xfc>)
 80028b4:	430a      	orrs	r2, r1
 80028b6:	60da      	str	r2, [r3, #12]
}
 80028b8:	46c0      	nop			; (mov r8, r8)
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b00d      	add	sp, #52	; 0x34
 80028be:	bd90      	pop	{r4, r7, pc}
 80028c0:	40021000 	.word	0x40021000
 80028c4:	50000400 	.word	0x50000400
 80028c8:	80ffffff 	.word	0x80ffffff

080028cc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80028d0:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <HAL_RCC_EnableCSS+0x18>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b03      	ldr	r3, [pc, #12]	; (80028e4 <HAL_RCC_EnableCSS+0x18>)
 80028d6:	2180      	movs	r1, #128	; 0x80
 80028d8:	0309      	lsls	r1, r1, #12
 80028da:	430a      	orrs	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]
}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000

080028e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b08e      	sub	sp, #56	; 0x38
 80028ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80028ee:	4b4c      	ldr	r3, [pc, #304]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x138>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028f6:	230c      	movs	r3, #12
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b0c      	cmp	r3, #12
 80028fc:	d014      	beq.n	8002928 <HAL_RCC_GetSysClockFreq+0x40>
 80028fe:	d900      	bls.n	8002902 <HAL_RCC_GetSysClockFreq+0x1a>
 8002900:	e07b      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0x112>
 8002902:	2b04      	cmp	r3, #4
 8002904:	d002      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x24>
 8002906:	2b08      	cmp	r3, #8
 8002908:	d00b      	beq.n	8002922 <HAL_RCC_GetSysClockFreq+0x3a>
 800290a:	e076      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800290c:	4b44      	ldr	r3, [pc, #272]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x138>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2210      	movs	r2, #16
 8002912:	4013      	ands	r3, r2
 8002914:	d002      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002916:	4b43      	ldr	r3, [pc, #268]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002918:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800291a:	e07c      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800291c:	4b42      	ldr	r3, [pc, #264]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x140>)
 800291e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002920:	e079      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002922:	4b42      	ldr	r3, [pc, #264]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x144>)
 8002924:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002926:	e076      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292a:	0c9a      	lsrs	r2, r3, #18
 800292c:	230f      	movs	r3, #15
 800292e:	401a      	ands	r2, r3
 8002930:	4b3f      	ldr	r3, [pc, #252]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x148>)
 8002932:	5c9b      	ldrb	r3, [r3, r2]
 8002934:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	0d9a      	lsrs	r2, r3, #22
 800293a:	2303      	movs	r3, #3
 800293c:	4013      	ands	r3, r2
 800293e:	3301      	adds	r3, #1
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002942:	4b37      	ldr	r3, [pc, #220]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x138>)
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	025b      	lsls	r3, r3, #9
 800294a:	4013      	ands	r3, r2
 800294c:	d01a      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
 8002956:	4a35      	ldr	r2, [pc, #212]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x144>)
 8002958:	2300      	movs	r3, #0
 800295a:	69b8      	ldr	r0, [r7, #24]
 800295c:	69f9      	ldr	r1, [r7, #28]
 800295e:	f7fd fc7f 	bl	8000260 <__aeabi_lmul>
 8002962:	0002      	movs	r2, r0
 8002964:	000b      	movs	r3, r1
 8002966:	0010      	movs	r0, r2
 8002968:	0019      	movs	r1, r3
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f7fd fc53 	bl	8000220 <__aeabi_uldivmod>
 800297a:	0002      	movs	r2, r0
 800297c:	000b      	movs	r3, r1
 800297e:	0013      	movs	r3, r2
 8002980:	637b      	str	r3, [r7, #52]	; 0x34
 8002982:	e037      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002984:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x138>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2210      	movs	r2, #16
 800298a:	4013      	ands	r3, r2
 800298c:	d01a      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	4a23      	ldr	r2, [pc, #140]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002998:	2300      	movs	r3, #0
 800299a:	68b8      	ldr	r0, [r7, #8]
 800299c:	68f9      	ldr	r1, [r7, #12]
 800299e:	f7fd fc5f 	bl	8000260 <__aeabi_lmul>
 80029a2:	0002      	movs	r2, r0
 80029a4:	000b      	movs	r3, r1
 80029a6:	0010      	movs	r0, r2
 80029a8:	0019      	movs	r1, r3
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	603b      	str	r3, [r7, #0]
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f7fd fc33 	bl	8000220 <__aeabi_uldivmod>
 80029ba:	0002      	movs	r2, r0
 80029bc:	000b      	movs	r3, r1
 80029be:	0013      	movs	r3, r2
 80029c0:	637b      	str	r3, [r7, #52]	; 0x34
 80029c2:	e017      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80029c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c6:	0018      	movs	r0, r3
 80029c8:	2300      	movs	r3, #0
 80029ca:	0019      	movs	r1, r3
 80029cc:	4a16      	ldr	r2, [pc, #88]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x140>)
 80029ce:	2300      	movs	r3, #0
 80029d0:	f7fd fc46 	bl	8000260 <__aeabi_lmul>
 80029d4:	0002      	movs	r2, r0
 80029d6:	000b      	movs	r3, r1
 80029d8:	0010      	movs	r0, r2
 80029da:	0019      	movs	r1, r3
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	001c      	movs	r4, r3
 80029e0:	2300      	movs	r3, #0
 80029e2:	001d      	movs	r5, r3
 80029e4:	0022      	movs	r2, r4
 80029e6:	002b      	movs	r3, r5
 80029e8:	f7fd fc1a 	bl	8000220 <__aeabi_uldivmod>
 80029ec:	0002      	movs	r2, r0
 80029ee:	000b      	movs	r3, r1
 80029f0:	0013      	movs	r3, r2
 80029f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80029f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029f8:	e00d      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x138>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	0b5b      	lsrs	r3, r3, #13
 8002a00:	2207      	movs	r2, #7
 8002a02:	4013      	ands	r3, r2
 8002a04:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	2280      	movs	r2, #128	; 0x80
 8002a0c:	0212      	lsls	r2, r2, #8
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	0013      	movs	r3, r2
 8002a12:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a14:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002a18:	0018      	movs	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b00e      	add	sp, #56	; 0x38
 8002a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a20:	40021000 	.word	0x40021000
 8002a24:	003d0900 	.word	0x003d0900
 8002a28:	00f42400 	.word	0x00f42400
 8002a2c:	007a1200 	.word	0x007a1200
 8002a30:	080048bc 	.word	0x080048bc

08002a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a38:	4b02      	ldr	r3, [pc, #8]	; (8002a44 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	20000000 	.word	0x20000000

08002a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a4c:	f7ff fff2 	bl	8002a34 <HAL_RCC_GetHCLKFreq>
 8002a50:	0001      	movs	r1, r0
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	0a1b      	lsrs	r3, r3, #8
 8002a58:	2207      	movs	r2, #7
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a5e:	5cd3      	ldrb	r3, [r2, r3]
 8002a60:	40d9      	lsrs	r1, r3
 8002a62:	000b      	movs	r3, r1
}
 8002a64:	0018      	movs	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	080048b4 	.word	0x080048b4

08002a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a78:	f7ff ffdc 	bl	8002a34 <HAL_RCC_GetHCLKFreq>
 8002a7c:	0001      	movs	r1, r0
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	0adb      	lsrs	r3, r3, #11
 8002a84:	2207      	movs	r2, #7
 8002a86:	4013      	ands	r3, r2
 8002a88:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	40d9      	lsrs	r1, r3
 8002a8e:	000b      	movs	r3, r1
}
 8002a90:	0018      	movs	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	080048b4 	.word	0x080048b4

08002aa0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002aa4:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <HAL_RCC_NMI_IRQHandler+0x28>)
 8002aa6:	695a      	ldr	r2, [r3, #20]
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	401a      	ands	r2, r3
 8002aae:	2380      	movs	r3, #128	; 0x80
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d105      	bne.n	8002ac2 <HAL_RCC_NMI_IRQHandler+0x22>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002ab6:	f000 f809 	bl	8002acc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002aba:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <HAL_RCC_NMI_IRQHandler+0x28>)
 8002abc:	2280      	movs	r2, #128	; 0x80
 8002abe:	0052      	lsls	r2, r2, #1
 8002ac0:	619a      	str	r2, [r3, #24]
  }
}
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40021000 	.word	0x40021000

08002acc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002ad0:	46c0      	nop			; (mov r8, r8)
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002ae0:	2017      	movs	r0, #23
 8002ae2:	183b      	adds	r3, r7, r0
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2220      	movs	r2, #32
 8002aee:	4013      	ands	r3, r2
 8002af0:	d100      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002af2:	e0c7      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af4:	4b8b      	ldr	r3, [pc, #556]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	055b      	lsls	r3, r3, #21
 8002afc:	4013      	ands	r3, r2
 8002afe:	d109      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b00:	4b88      	ldr	r3, [pc, #544]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b04:	4b87      	ldr	r3, [pc, #540]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002b06:	2180      	movs	r1, #128	; 0x80
 8002b08:	0549      	lsls	r1, r1, #21
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002b0e:	183b      	adds	r3, r7, r0
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b14:	4b84      	ldr	r3, [pc, #528]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d11a      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b20:	4b81      	ldr	r3, [pc, #516]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4b80      	ldr	r3, [pc, #512]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002b26:	2180      	movs	r1, #128	; 0x80
 8002b28:	0049      	lsls	r1, r1, #1
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fb15 	bl	800115c <HAL_GetTick>
 8002b32:	0003      	movs	r3, r0
 8002b34:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b36:	e008      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b38:	f7fe fb10 	bl	800115c <HAL_GetTick>
 8002b3c:	0002      	movs	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e0e8      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4a:	4b77      	ldr	r3, [pc, #476]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4013      	ands	r3, r2
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002b56:	4b73      	ldr	r3, [pc, #460]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	23c0      	movs	r3, #192	; 0xc0
 8002b5c:	039b      	lsls	r3, r3, #14
 8002b5e:	4013      	ands	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	23c0      	movs	r3, #192	; 0xc0
 8002b68:	039b      	lsls	r3, r3, #14
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d013      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	23c0      	movs	r3, #192	; 0xc0
 8002b78:	029b      	lsls	r3, r3, #10
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	23c0      	movs	r3, #192	; 0xc0
 8002b7e:	029b      	lsls	r3, r3, #10
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d10a      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b84:	4b67      	ldr	r3, [pc, #412]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	029b      	lsls	r3, r3, #10
 8002b8c:	401a      	ands	r2, r3
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	029b      	lsls	r3, r3, #10
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d101      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e0c0      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002b9a:	4b62      	ldr	r3, [pc, #392]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002b9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b9e:	23c0      	movs	r3, #192	; 0xc0
 8002ba0:	029b      	lsls	r3, r3, #10
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d03b      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	23c0      	movs	r3, #192	; 0xc0
 8002bb2:	029b      	lsls	r3, r3, #10
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d033      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d02e      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002bc6:	4b57      	ldr	r3, [pc, #348]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bca:	4a58      	ldr	r2, [pc, #352]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bd0:	4b54      	ldr	r3, [pc, #336]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002bd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bd4:	4b53      	ldr	r3, [pc, #332]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002bd6:	2180      	movs	r1, #128	; 0x80
 8002bd8:	0309      	lsls	r1, r1, #12
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bde:	4b51      	ldr	r3, [pc, #324]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002be0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002be2:	4b50      	ldr	r3, [pc, #320]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002be4:	4952      	ldr	r1, [pc, #328]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002be6:	400a      	ands	r2, r1
 8002be8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002bea:	4b4e      	ldr	r3, [pc, #312]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d014      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fe faaf 	bl	800115c <HAL_GetTick>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c02:	e009      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c04:	f7fe faaa 	bl	800115c <HAL_GetTick>
 8002c08:	0002      	movs	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	4a49      	ldr	r2, [pc, #292]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e081      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c18:	4b42      	ldr	r3, [pc, #264]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4013      	ands	r3, r2
 8002c22:	d0ef      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d01f      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	23c0      	movs	r3, #192	; 0xc0
 8002c34:	029b      	lsls	r3, r3, #10
 8002c36:	401a      	ands	r2, r3
 8002c38:	23c0      	movs	r3, #192	; 0xc0
 8002c3a:	029b      	lsls	r3, r3, #10
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d10c      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002c40:	4b38      	ldr	r3, [pc, #224]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a3c      	ldr	r2, [pc, #240]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	0019      	movs	r1, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	23c0      	movs	r3, #192	; 0xc0
 8002c50:	039b      	lsls	r3, r3, #14
 8002c52:	401a      	ands	r2, r3
 8002c54:	4b33      	ldr	r3, [pc, #204]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c56:	430a      	orrs	r2, r1
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	4b32      	ldr	r3, [pc, #200]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c5c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	23c0      	movs	r3, #192	; 0xc0
 8002c64:	029b      	lsls	r3, r3, #10
 8002c66:	401a      	ands	r2, r3
 8002c68:	4b2e      	ldr	r3, [pc, #184]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c6e:	2317      	movs	r3, #23
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d105      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c78:	4b2a      	ldr	r3, [pc, #168]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c7c:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c7e:	492f      	ldr	r1, [pc, #188]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c80:	400a      	ands	r2, r1
 8002c82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d009      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c8e:	4b25      	ldr	r3, [pc, #148]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c92:	2203      	movs	r2, #3
 8002c94:	4393      	bics	r3, r2
 8002c96:	0019      	movs	r1, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d009      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cac:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb0:	220c      	movs	r2, #12
 8002cb2:	4393      	bics	r3, r2
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	4b1a      	ldr	r3, [pc, #104]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d009      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cca:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cce:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2208      	movs	r2, #8
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d009      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ce8:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cec:	4a15      	ldr	r2, [pc, #84]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2280      	movs	r2, #128	; 0x80
 8002d02:	4013      	ands	r3, r2
 8002d04:	d009      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002d06:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0a:	4a0f      	ldr	r2, [pc, #60]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	0019      	movs	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699a      	ldr	r2, [r3, #24]
 8002d14:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d16:	430a      	orrs	r2, r1
 8002d18:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b006      	add	sp, #24
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40021000 	.word	0x40021000
 8002d28:	40007000 	.word	0x40007000
 8002d2c:	fffcffff 	.word	0xfffcffff
 8002d30:	fff7ffff 	.word	0xfff7ffff
 8002d34:	00001388 	.word	0x00001388
 8002d38:	ffcfffff 	.word	0xffcfffff
 8002d3c:	efffffff 	.word	0xefffffff
 8002d40:	fffff3ff 	.word	0xfffff3ff
 8002d44:	ffffcfff 	.word	0xffffcfff
 8002d48:	fff3ffff 	.word	0xfff3ffff

08002d4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e083      	b.n	8002e66 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	2382      	movs	r3, #130	; 0x82
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d009      	beq.n	8002d86 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	61da      	str	r2, [r3, #28]
 8002d78:	e005      	b.n	8002d86 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2251      	movs	r2, #81	; 0x51
 8002d90:	5c9b      	ldrb	r3, [r3, r2]
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d107      	bne.n	8002da8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2250      	movs	r2, #80	; 0x50
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	0018      	movs	r0, r3
 8002da4:	f7fe f8a2 	bl	8000eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2251      	movs	r2, #81	; 0x51
 8002dac:	2102      	movs	r1, #2
 8002dae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2140      	movs	r1, #64	; 0x40
 8002dbc:	438a      	bics	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	2382      	movs	r3, #130	; 0x82
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	401a      	ands	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6899      	ldr	r1, [r3, #8]
 8002dce:	2384      	movs	r3, #132	; 0x84
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	400b      	ands	r3, r1
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68d9      	ldr	r1, [r3, #12]
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	400b      	ands	r3, r1
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2102      	movs	r1, #2
 8002de8:	400b      	ands	r3, r1
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	2101      	movs	r1, #1
 8002df2:	400b      	ands	r3, r1
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6999      	ldr	r1, [r3, #24]
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	400b      	ands	r3, r1
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	2138      	movs	r1, #56	; 0x38
 8002e08:	400b      	ands	r3, r1
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	2180      	movs	r1, #128	; 0x80
 8002e12:	400b      	ands	r3, r1
 8002e14:	431a      	orrs	r2, r3
 8002e16:	0011      	movs	r1, r2
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	019b      	lsls	r3, r3, #6
 8002e20:	401a      	ands	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	0c1b      	lsrs	r3, r3, #16
 8002e30:	2204      	movs	r2, #4
 8002e32:	4013      	ands	r3, r2
 8002e34:	0019      	movs	r1, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	2210      	movs	r2, #16
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69da      	ldr	r2, [r3, #28]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4907      	ldr	r1, [pc, #28]	; (8002e70 <HAL_SPI_Init+0x124>)
 8002e52:	400a      	ands	r2, r1
 8002e54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2251      	movs	r2, #81	; 0x51
 8002e60:	2101      	movs	r1, #1
 8002e62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b002      	add	sp, #8
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	fffff7ff 	.word	0xfffff7ff

08002e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e032      	b.n	8002eec <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2239      	movs	r2, #57	; 0x39
 8002e8a:	5c9b      	ldrb	r3, [r3, r2]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d107      	bne.n	8002ea2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2238      	movs	r2, #56	; 0x38
 8002e96:	2100      	movs	r1, #0
 8002e98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f7fe f869 	bl	8000f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2239      	movs	r2, #57	; 0x39
 8002ea6:	2102      	movs	r1, #2
 8002ea8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	0010      	movs	r0, r2
 8002eb6:	f000 fa01 	bl	80032bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	223e      	movs	r2, #62	; 0x3e
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	223a      	movs	r2, #58	; 0x3a
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	5499      	strb	r1, [r3, r2]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	223b      	movs	r2, #59	; 0x3b
 8002ece:	2101      	movs	r1, #1
 8002ed0:	5499      	strb	r1, [r3, r2]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	223c      	movs	r2, #60	; 0x3c
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	5499      	strb	r1, [r3, r2]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	223d      	movs	r2, #61	; 0x3d
 8002ede:	2101      	movs	r1, #1
 8002ee0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2239      	movs	r2, #57	; 0x39
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	0018      	movs	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b002      	add	sp, #8
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	2202      	movs	r2, #2
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d124      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2202      	movs	r2, #2
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d11d      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	4252      	negs	r2, r2
 8002f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2203      	movs	r2, #3
 8002f30:	4013      	ands	r3, r2
 8002f32:	d004      	beq.n	8002f3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	0018      	movs	r0, r3
 8002f38:	f000 f9a8 	bl	800328c <HAL_TIM_IC_CaptureCallback>
 8002f3c:	e007      	b.n	8002f4e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	0018      	movs	r0, r3
 8002f42:	f000 f99b 	bl	800327c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f000 f9a7 	bl	800329c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d125      	bne.n	8002fae <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	2204      	movs	r2, #4
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d11e      	bne.n	8002fae <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2205      	movs	r2, #5
 8002f76:	4252      	negs	r2, r2
 8002f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699a      	ldr	r2, [r3, #24]
 8002f86:	23c0      	movs	r3, #192	; 0xc0
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d004      	beq.n	8002f98 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f000 f97b 	bl	800328c <HAL_TIM_IC_CaptureCallback>
 8002f96:	e007      	b.n	8002fa8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f000 f96e 	bl	800327c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f000 f97a 	bl	800329c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d124      	bne.n	8003006 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	2208      	movs	r2, #8
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d11d      	bne.n	8003006 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2209      	movs	r2, #9
 8002fd0:	4252      	negs	r2, r2
 8002fd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d004      	beq.n	8002ff0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f000 f94f 	bl	800328c <HAL_TIM_IC_CaptureCallback>
 8002fee:	e007      	b.n	8003000 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f000 f942 	bl	800327c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 f94e 	bl	800329c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	2210      	movs	r2, #16
 800300e:	4013      	ands	r3, r2
 8003010:	2b10      	cmp	r3, #16
 8003012:	d125      	bne.n	8003060 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2210      	movs	r2, #16
 800301c:	4013      	ands	r3, r2
 800301e:	2b10      	cmp	r3, #16
 8003020:	d11e      	bne.n	8003060 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2211      	movs	r2, #17
 8003028:	4252      	negs	r2, r2
 800302a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2208      	movs	r2, #8
 8003030:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	23c0      	movs	r3, #192	; 0xc0
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4013      	ands	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	0018      	movs	r0, r3
 8003044:	f000 f922 	bl	800328c <HAL_TIM_IC_CaptureCallback>
 8003048:	e007      	b.n	800305a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	0018      	movs	r0, r3
 800304e:	f000 f915 	bl	800327c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	0018      	movs	r0, r3
 8003056:	f000 f921 	bl	800329c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	2201      	movs	r2, #1
 8003068:	4013      	ands	r3, r2
 800306a:	2b01      	cmp	r3, #1
 800306c:	d10f      	bne.n	800308e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	4013      	ands	r3, r2
 8003078:	2b01      	cmp	r3, #1
 800307a:	d108      	bne.n	800308e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2202      	movs	r2, #2
 8003082:	4252      	negs	r2, r2
 8003084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	0018      	movs	r0, r3
 800308a:	f000 f8ef 	bl	800326c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	2240      	movs	r2, #64	; 0x40
 8003096:	4013      	ands	r3, r2
 8003098:	2b40      	cmp	r3, #64	; 0x40
 800309a:	d10f      	bne.n	80030bc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2240      	movs	r2, #64	; 0x40
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b40      	cmp	r3, #64	; 0x40
 80030a8:	d108      	bne.n	80030bc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2241      	movs	r2, #65	; 0x41
 80030b0:	4252      	negs	r2, r2
 80030b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	0018      	movs	r0, r3
 80030b8:	f000 f8f8 	bl	80032ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030bc:	46c0      	nop			; (mov r8, r8)
 80030be:	46bd      	mov	sp, r7
 80030c0:	b002      	add	sp, #8
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ce:	230f      	movs	r3, #15
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	2200      	movs	r2, #0
 80030d4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2238      	movs	r2, #56	; 0x38
 80030da:	5c9b      	ldrb	r3, [r3, r2]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_TIM_ConfigClockSource+0x20>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e0bc      	b.n	800325e <HAL_TIM_ConfigClockSource+0x19a>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2238      	movs	r2, #56	; 0x38
 80030e8:	2101      	movs	r1, #1
 80030ea:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2239      	movs	r2, #57	; 0x39
 80030f0:	2102      	movs	r1, #2
 80030f2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2277      	movs	r2, #119	; 0x77
 8003100:	4393      	bics	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4a58      	ldr	r2, [pc, #352]	; (8003268 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003108:	4013      	ands	r3, r2
 800310a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2280      	movs	r2, #128	; 0x80
 800311a:	0192      	lsls	r2, r2, #6
 800311c:	4293      	cmp	r3, r2
 800311e:	d040      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0xde>
 8003120:	2280      	movs	r2, #128	; 0x80
 8003122:	0192      	lsls	r2, r2, #6
 8003124:	4293      	cmp	r3, r2
 8003126:	d900      	bls.n	800312a <HAL_TIM_ConfigClockSource+0x66>
 8003128:	e088      	b.n	800323c <HAL_TIM_ConfigClockSource+0x178>
 800312a:	2280      	movs	r2, #128	; 0x80
 800312c:	0152      	lsls	r2, r2, #5
 800312e:	4293      	cmp	r3, r2
 8003130:	d100      	bne.n	8003134 <HAL_TIM_ConfigClockSource+0x70>
 8003132:	e088      	b.n	8003246 <HAL_TIM_ConfigClockSource+0x182>
 8003134:	2280      	movs	r2, #128	; 0x80
 8003136:	0152      	lsls	r2, r2, #5
 8003138:	4293      	cmp	r3, r2
 800313a:	d900      	bls.n	800313e <HAL_TIM_ConfigClockSource+0x7a>
 800313c:	e07e      	b.n	800323c <HAL_TIM_ConfigClockSource+0x178>
 800313e:	2b70      	cmp	r3, #112	; 0x70
 8003140:	d018      	beq.n	8003174 <HAL_TIM_ConfigClockSource+0xb0>
 8003142:	d900      	bls.n	8003146 <HAL_TIM_ConfigClockSource+0x82>
 8003144:	e07a      	b.n	800323c <HAL_TIM_ConfigClockSource+0x178>
 8003146:	2b60      	cmp	r3, #96	; 0x60
 8003148:	d04f      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x126>
 800314a:	d900      	bls.n	800314e <HAL_TIM_ConfigClockSource+0x8a>
 800314c:	e076      	b.n	800323c <HAL_TIM_ConfigClockSource+0x178>
 800314e:	2b50      	cmp	r3, #80	; 0x50
 8003150:	d03b      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x106>
 8003152:	d900      	bls.n	8003156 <HAL_TIM_ConfigClockSource+0x92>
 8003154:	e072      	b.n	800323c <HAL_TIM_ConfigClockSource+0x178>
 8003156:	2b40      	cmp	r3, #64	; 0x40
 8003158:	d057      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x146>
 800315a:	d900      	bls.n	800315e <HAL_TIM_ConfigClockSource+0x9a>
 800315c:	e06e      	b.n	800323c <HAL_TIM_ConfigClockSource+0x178>
 800315e:	2b30      	cmp	r3, #48	; 0x30
 8003160:	d063      	beq.n	800322a <HAL_TIM_ConfigClockSource+0x166>
 8003162:	d86b      	bhi.n	800323c <HAL_TIM_ConfigClockSource+0x178>
 8003164:	2b20      	cmp	r3, #32
 8003166:	d060      	beq.n	800322a <HAL_TIM_ConfigClockSource+0x166>
 8003168:	d868      	bhi.n	800323c <HAL_TIM_ConfigClockSource+0x178>
 800316a:	2b00      	cmp	r3, #0
 800316c:	d05d      	beq.n	800322a <HAL_TIM_ConfigClockSource+0x166>
 800316e:	2b10      	cmp	r3, #16
 8003170:	d05b      	beq.n	800322a <HAL_TIM_ConfigClockSource+0x166>
 8003172:	e063      	b.n	800323c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003184:	f000 f968 	bl	8003458 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2277      	movs	r2, #119	; 0x77
 8003194:	4313      	orrs	r3, r2
 8003196:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	609a      	str	r2, [r3, #8]
      break;
 80031a0:	e052      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031b2:	f000 f951 	bl	8003458 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2180      	movs	r1, #128	; 0x80
 80031c2:	01c9      	lsls	r1, r1, #7
 80031c4:	430a      	orrs	r2, r1
 80031c6:	609a      	str	r2, [r3, #8]
      break;
 80031c8:	e03e      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d6:	001a      	movs	r2, r3
 80031d8:	f000 f8c4 	bl	8003364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2150      	movs	r1, #80	; 0x50
 80031e2:	0018      	movs	r0, r3
 80031e4:	f000 f91e 	bl	8003424 <TIM_ITRx_SetConfig>
      break;
 80031e8:	e02e      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031f6:	001a      	movs	r2, r3
 80031f8:	f000 f8e2 	bl	80033c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2160      	movs	r1, #96	; 0x60
 8003202:	0018      	movs	r0, r3
 8003204:	f000 f90e 	bl	8003424 <TIM_ITRx_SetConfig>
      break;
 8003208:	e01e      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003216:	001a      	movs	r2, r3
 8003218:	f000 f8a4 	bl	8003364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2140      	movs	r1, #64	; 0x40
 8003222:	0018      	movs	r0, r3
 8003224:	f000 f8fe 	bl	8003424 <TIM_ITRx_SetConfig>
      break;
 8003228:	e00e      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	0019      	movs	r1, r3
 8003234:	0010      	movs	r0, r2
 8003236:	f000 f8f5 	bl	8003424 <TIM_ITRx_SetConfig>
      break;
 800323a:	e005      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800323c:	230f      	movs	r3, #15
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	2201      	movs	r2, #1
 8003242:	701a      	strb	r2, [r3, #0]
      break;
 8003244:	e000      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003246:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2239      	movs	r2, #57	; 0x39
 800324c:	2101      	movs	r1, #1
 800324e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2238      	movs	r2, #56	; 0x38
 8003254:	2100      	movs	r1, #0
 8003256:	5499      	strb	r1, [r3, r2]

  return status;
 8003258:	230f      	movs	r3, #15
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	781b      	ldrb	r3, [r3, #0]
}
 800325e:	0018      	movs	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	b004      	add	sp, #16
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	ffff00ff 	.word	0xffff00ff

0800326c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003274:	46c0      	nop			; (mov r8, r8)
 8003276:	46bd      	mov	sp, r7
 8003278:	b002      	add	sp, #8
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003284:	46c0      	nop			; (mov r8, r8)
 8003286:	46bd      	mov	sp, r7
 8003288:	b002      	add	sp, #8
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003294:	46c0      	nop			; (mov r8, r8)
 8003296:	46bd      	mov	sp, r7
 8003298:	b002      	add	sp, #8
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032a4:	46c0      	nop			; (mov r8, r8)
 80032a6:	46bd      	mov	sp, r7
 80032a8:	b002      	add	sp, #8
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b002      	add	sp, #8
 80032ba:	bd80      	pop	{r7, pc}

080032bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	2380      	movs	r3, #128	; 0x80
 80032d0:	05db      	lsls	r3, r3, #23
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d007      	beq.n	80032e6 <TIM_Base_SetConfig+0x2a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a1f      	ldr	r2, [pc, #124]	; (8003358 <TIM_Base_SetConfig+0x9c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d003      	beq.n	80032e6 <TIM_Base_SetConfig+0x2a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a1e      	ldr	r2, [pc, #120]	; (800335c <TIM_Base_SetConfig+0xa0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d108      	bne.n	80032f8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2270      	movs	r2, #112	; 0x70
 80032ea:	4393      	bics	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	2380      	movs	r3, #128	; 0x80
 80032fc:	05db      	lsls	r3, r3, #23
 80032fe:	429a      	cmp	r2, r3
 8003300:	d007      	beq.n	8003312 <TIM_Base_SetConfig+0x56>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a14      	ldr	r2, [pc, #80]	; (8003358 <TIM_Base_SetConfig+0x9c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d003      	beq.n	8003312 <TIM_Base_SetConfig+0x56>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a13      	ldr	r2, [pc, #76]	; (800335c <TIM_Base_SetConfig+0xa0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d108      	bne.n	8003324 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4a12      	ldr	r2, [pc, #72]	; (8003360 <TIM_Base_SetConfig+0xa4>)
 8003316:	4013      	ands	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2280      	movs	r2, #128	; 0x80
 8003328:	4393      	bics	r3, r2
 800332a:	001a      	movs	r2, r3
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	615a      	str	r2, [r3, #20]
}
 8003350:	46c0      	nop			; (mov r8, r8)
 8003352:	46bd      	mov	sp, r7
 8003354:	b004      	add	sp, #16
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40010800 	.word	0x40010800
 800335c:	40011400 	.word	0x40011400
 8003360:	fffffcff 	.word	0xfffffcff

08003364 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	2201      	movs	r2, #1
 800337c:	4393      	bics	r3, r2
 800337e:	001a      	movs	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	22f0      	movs	r2, #240	; 0xf0
 800338e:	4393      	bics	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	220a      	movs	r2, #10
 80033a0:	4393      	bics	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	621a      	str	r2, [r3, #32]
}
 80033b8:	46c0      	nop			; (mov r8, r8)
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b006      	add	sp, #24
 80033be:	bd80      	pop	{r7, pc}

080033c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	2210      	movs	r2, #16
 80033d2:	4393      	bics	r3, r2
 80033d4:	001a      	movs	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	4a0d      	ldr	r2, [pc, #52]	; (8003420 <TIM_TI2_ConfigInputStage+0x60>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	031b      	lsls	r3, r3, #12
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	22a0      	movs	r2, #160	; 0xa0
 80033fc:	4393      	bics	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	621a      	str	r2, [r3, #32]
}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	46bd      	mov	sp, r7
 800341a:	b006      	add	sp, #24
 800341c:	bd80      	pop	{r7, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	ffff0fff 	.word	0xffff0fff

08003424 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2270      	movs	r2, #112	; 0x70
 8003438:	4393      	bics	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	2207      	movs	r2, #7
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	609a      	str	r2, [r3, #8]
}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	46bd      	mov	sp, r7
 8003452:	b004      	add	sp, #16
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	4a09      	ldr	r2, [pc, #36]	; (8003494 <TIM_ETR_SetConfig+0x3c>)
 8003470:	4013      	ands	r3, r2
 8003472:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	021a      	lsls	r2, r3, #8
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	431a      	orrs	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4313      	orrs	r3, r2
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	609a      	str	r2, [r3, #8]
}
 800348c:	46c0      	nop			; (mov r8, r8)
 800348e:	46bd      	mov	sp, r7
 8003490:	b006      	add	sp, #24
 8003492:	bd80      	pop	{r7, pc}
 8003494:	ffff00ff 	.word	0xffff00ff

08003498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2238      	movs	r2, #56	; 0x38
 80034a6:	5c9b      	ldrb	r3, [r3, r2]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e042      	b.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2238      	movs	r2, #56	; 0x38
 80034b4:	2101      	movs	r1, #1
 80034b6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2239      	movs	r2, #57	; 0x39
 80034bc:	2102      	movs	r1, #2
 80034be:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2270      	movs	r2, #112	; 0x70
 80034d4:	4393      	bics	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	05db      	lsls	r3, r3, #23
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d009      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a11      	ldr	r2, [pc, #68]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a0f      	ldr	r2, [pc, #60]	; (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d10c      	bne.n	8003524 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2280      	movs	r2, #128	; 0x80
 800350e:	4393      	bics	r3, r2
 8003510:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	4313      	orrs	r3, r2
 800351a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2239      	movs	r2, #57	; 0x39
 8003528:	2101      	movs	r1, #1
 800352a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2238      	movs	r2, #56	; 0x38
 8003530:	2100      	movs	r1, #0
 8003532:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	0018      	movs	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	b004      	add	sp, #16
 800353c:	bd80      	pop	{r7, pc}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	40010800 	.word	0x40010800
 8003544:	40011400 	.word	0x40011400

08003548 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e044      	b.n	80035e4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d107      	bne.n	8003572 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2278      	movs	r2, #120	; 0x78
 8003566:	2100      	movs	r1, #0
 8003568:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	0018      	movs	r0, r3
 800356e:	f7fd fc0f 	bl	8000d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2224      	movs	r2, #36	; 0x24
 8003576:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2101      	movs	r1, #1
 8003584:	438a      	bics	r2, r1
 8003586:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	0018      	movs	r0, r3
 800358c:	f000 fb9e 	bl	8003ccc <UART_SetConfig>
 8003590:	0003      	movs	r3, r0
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e024      	b.n	80035e4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f000 fe15 	bl	80041d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	490d      	ldr	r1, [pc, #52]	; (80035ec <HAL_UART_Init+0xa4>)
 80035b6:	400a      	ands	r2, r1
 80035b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	212a      	movs	r1, #42	; 0x2a
 80035c6:	438a      	bics	r2, r1
 80035c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2101      	movs	r1, #1
 80035d6:	430a      	orrs	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	0018      	movs	r0, r3
 80035de:	f000 fead 	bl	800433c <UART_CheckIdleState>
 80035e2:	0003      	movs	r3, r0
}
 80035e4:	0018      	movs	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b002      	add	sp, #8
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	ffffb7ff 	.word	0xffffb7ff

080035f0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	1dbb      	adds	r3, r7, #6
 80035fc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003602:	2b20      	cmp	r3, #32
 8003604:	d15b      	bne.n	80036be <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_UART_Transmit_IT+0x24>
 800360c:	1dbb      	adds	r3, r7, #6
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e053      	b.n	80036c0 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	2380      	movs	r3, #128	; 0x80
 800361e:	015b      	lsls	r3, r3, #5
 8003620:	429a      	cmp	r2, r3
 8003622:	d109      	bne.n	8003638 <HAL_UART_Transmit_IT+0x48>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d105      	bne.n	8003638 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2201      	movs	r2, #1
 8003630:	4013      	ands	r3, r2
 8003632:	d001      	beq.n	8003638 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e043      	b.n	80036c0 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1dba      	adds	r2, r7, #6
 8003642:	2150      	movs	r1, #80	; 0x50
 8003644:	8812      	ldrh	r2, [r2, #0]
 8003646:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1dba      	adds	r2, r7, #6
 800364c:	2152      	movs	r1, #82	; 0x52
 800364e:	8812      	ldrh	r2, [r2, #0]
 8003650:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2284      	movs	r2, #132	; 0x84
 800365c:	2100      	movs	r1, #0
 800365e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2221      	movs	r2, #33	; 0x21
 8003664:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	2380      	movs	r3, #128	; 0x80
 800366c:	015b      	lsls	r3, r3, #5
 800366e:	429a      	cmp	r2, r3
 8003670:	d107      	bne.n	8003682 <HAL_UART_Transmit_IT+0x92>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <HAL_UART_Transmit_IT+0xd8>)
 800367e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003680:	e002      	b.n	8003688 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4a11      	ldr	r2, [pc, #68]	; (80036cc <HAL_UART_Transmit_IT+0xdc>)
 8003686:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003688:	f3ef 8310 	mrs	r3, PRIMASK
 800368c:	613b      	str	r3, [r7, #16]
  return(result);
 800368e:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003690:	61fb      	str	r3, [r7, #28]
 8003692:	2301      	movs	r3, #1
 8003694:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f383 8810 	msr	PRIMASK, r3
}
 800369c:	46c0      	nop			; (mov r8, r8)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2180      	movs	r1, #128	; 0x80
 80036aa:	430a      	orrs	r2, r1
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	f383 8810 	msr	PRIMASK, r3
}
 80036b8:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	e000      	b.n	80036c0 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80036be:	2302      	movs	r3, #2
  }
}
 80036c0:	0018      	movs	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b008      	add	sp, #32
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	08004709 	.word	0x08004709
 80036cc:	08004657 	.word	0x08004657

080036d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036d0:	b590      	push	{r4, r7, lr}
 80036d2:	b0ab      	sub	sp, #172	; 0xac
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	22a4      	movs	r2, #164	; 0xa4
 80036e0:	18b9      	adds	r1, r7, r2
 80036e2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	20a0      	movs	r0, #160	; 0xa0
 80036ec:	1839      	adds	r1, r7, r0
 80036ee:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	219c      	movs	r1, #156	; 0x9c
 80036f8:	1879      	adds	r1, r7, r1
 80036fa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80036fc:	0011      	movs	r1, r2
 80036fe:	18bb      	adds	r3, r7, r2
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a99      	ldr	r2, [pc, #612]	; (8003968 <HAL_UART_IRQHandler+0x298>)
 8003704:	4013      	ands	r3, r2
 8003706:	2298      	movs	r2, #152	; 0x98
 8003708:	18bc      	adds	r4, r7, r2
 800370a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800370c:	18bb      	adds	r3, r7, r2
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d114      	bne.n	800373e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003714:	187b      	adds	r3, r7, r1
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2220      	movs	r2, #32
 800371a:	4013      	ands	r3, r2
 800371c:	d00f      	beq.n	800373e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800371e:	183b      	adds	r3, r7, r0
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2220      	movs	r2, #32
 8003724:	4013      	ands	r3, r2
 8003726:	d00a      	beq.n	800373e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800372c:	2b00      	cmp	r3, #0
 800372e:	d100      	bne.n	8003732 <HAL_UART_IRQHandler+0x62>
 8003730:	e2a0      	b.n	8003c74 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	0010      	movs	r0, r2
 800373a:	4798      	blx	r3
      }
      return;
 800373c:	e29a      	b.n	8003c74 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800373e:	2398      	movs	r3, #152	; 0x98
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d100      	bne.n	800374a <HAL_UART_IRQHandler+0x7a>
 8003748:	e114      	b.n	8003974 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800374a:	239c      	movs	r3, #156	; 0x9c
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2201      	movs	r2, #1
 8003752:	4013      	ands	r3, r2
 8003754:	d106      	bne.n	8003764 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003756:	23a0      	movs	r3, #160	; 0xa0
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a83      	ldr	r2, [pc, #524]	; (800396c <HAL_UART_IRQHandler+0x29c>)
 800375e:	4013      	ands	r3, r2
 8003760:	d100      	bne.n	8003764 <HAL_UART_IRQHandler+0x94>
 8003762:	e107      	b.n	8003974 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003764:	23a4      	movs	r3, #164	; 0xa4
 8003766:	18fb      	adds	r3, r7, r3
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2201      	movs	r2, #1
 800376c:	4013      	ands	r3, r2
 800376e:	d012      	beq.n	8003796 <HAL_UART_IRQHandler+0xc6>
 8003770:	23a0      	movs	r3, #160	; 0xa0
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	2380      	movs	r3, #128	; 0x80
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	4013      	ands	r3, r2
 800377c:	d00b      	beq.n	8003796 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2201      	movs	r2, #1
 8003784:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2284      	movs	r2, #132	; 0x84
 800378a:	589b      	ldr	r3, [r3, r2]
 800378c:	2201      	movs	r2, #1
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2184      	movs	r1, #132	; 0x84
 8003794:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003796:	23a4      	movs	r3, #164	; 0xa4
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2202      	movs	r2, #2
 800379e:	4013      	ands	r3, r2
 80037a0:	d011      	beq.n	80037c6 <HAL_UART_IRQHandler+0xf6>
 80037a2:	239c      	movs	r3, #156	; 0x9c
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2201      	movs	r2, #1
 80037aa:	4013      	ands	r3, r2
 80037ac:	d00b      	beq.n	80037c6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2202      	movs	r2, #2
 80037b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2284      	movs	r2, #132	; 0x84
 80037ba:	589b      	ldr	r3, [r3, r2]
 80037bc:	2204      	movs	r2, #4
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2184      	movs	r1, #132	; 0x84
 80037c4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037c6:	23a4      	movs	r3, #164	; 0xa4
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2204      	movs	r2, #4
 80037ce:	4013      	ands	r3, r2
 80037d0:	d011      	beq.n	80037f6 <HAL_UART_IRQHandler+0x126>
 80037d2:	239c      	movs	r3, #156	; 0x9c
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2201      	movs	r2, #1
 80037da:	4013      	ands	r3, r2
 80037dc:	d00b      	beq.n	80037f6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2204      	movs	r2, #4
 80037e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2284      	movs	r2, #132	; 0x84
 80037ea:	589b      	ldr	r3, [r3, r2]
 80037ec:	2202      	movs	r2, #2
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2184      	movs	r1, #132	; 0x84
 80037f4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037f6:	23a4      	movs	r3, #164	; 0xa4
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2208      	movs	r2, #8
 80037fe:	4013      	ands	r3, r2
 8003800:	d017      	beq.n	8003832 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003802:	23a0      	movs	r3, #160	; 0xa0
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2220      	movs	r2, #32
 800380a:	4013      	ands	r3, r2
 800380c:	d105      	bne.n	800381a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800380e:	239c      	movs	r3, #156	; 0x9c
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2201      	movs	r2, #1
 8003816:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003818:	d00b      	beq.n	8003832 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2208      	movs	r2, #8
 8003820:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2284      	movs	r2, #132	; 0x84
 8003826:	589b      	ldr	r3, [r3, r2]
 8003828:	2208      	movs	r2, #8
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2184      	movs	r1, #132	; 0x84
 8003830:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003832:	23a4      	movs	r3, #164	; 0xa4
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	2380      	movs	r3, #128	; 0x80
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	4013      	ands	r3, r2
 800383e:	d013      	beq.n	8003868 <HAL_UART_IRQHandler+0x198>
 8003840:	23a0      	movs	r3, #160	; 0xa0
 8003842:	18fb      	adds	r3, r7, r3
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	2380      	movs	r3, #128	; 0x80
 8003848:	04db      	lsls	r3, r3, #19
 800384a:	4013      	ands	r3, r2
 800384c:	d00c      	beq.n	8003868 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2280      	movs	r2, #128	; 0x80
 8003854:	0112      	lsls	r2, r2, #4
 8003856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2284      	movs	r2, #132	; 0x84
 800385c:	589b      	ldr	r3, [r3, r2]
 800385e:	2220      	movs	r2, #32
 8003860:	431a      	orrs	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2184      	movs	r1, #132	; 0x84
 8003866:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2284      	movs	r2, #132	; 0x84
 800386c:	589b      	ldr	r3, [r3, r2]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d100      	bne.n	8003874 <HAL_UART_IRQHandler+0x1a4>
 8003872:	e201      	b.n	8003c78 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003874:	23a4      	movs	r3, #164	; 0xa4
 8003876:	18fb      	adds	r3, r7, r3
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2220      	movs	r2, #32
 800387c:	4013      	ands	r3, r2
 800387e:	d00e      	beq.n	800389e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003880:	23a0      	movs	r3, #160	; 0xa0
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2220      	movs	r2, #32
 8003888:	4013      	ands	r3, r2
 800388a:	d008      	beq.n	800389e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003890:	2b00      	cmp	r3, #0
 8003892:	d004      	beq.n	800389e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	0010      	movs	r0, r2
 800389c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2284      	movs	r2, #132	; 0x84
 80038a2:	589b      	ldr	r3, [r3, r2]
 80038a4:	2194      	movs	r1, #148	; 0x94
 80038a6:	187a      	adds	r2, r7, r1
 80038a8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2240      	movs	r2, #64	; 0x40
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b40      	cmp	r3, #64	; 0x40
 80038b6:	d004      	beq.n	80038c2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038b8:	187b      	adds	r3, r7, r1
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2228      	movs	r2, #40	; 0x28
 80038be:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038c0:	d047      	beq.n	8003952 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	0018      	movs	r0, r3
 80038c6:	f000 fe4b 	bl	8004560 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2240      	movs	r2, #64	; 0x40
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b40      	cmp	r3, #64	; 0x40
 80038d6:	d137      	bne.n	8003948 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d8:	f3ef 8310 	mrs	r3, PRIMASK
 80038dc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80038de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038e0:	2090      	movs	r0, #144	; 0x90
 80038e2:	183a      	adds	r2, r7, r0
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	2301      	movs	r3, #1
 80038e8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038ec:	f383 8810 	msr	PRIMASK, r3
}
 80038f0:	46c0      	nop			; (mov r8, r8)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2140      	movs	r1, #64	; 0x40
 80038fe:	438a      	bics	r2, r1
 8003900:	609a      	str	r2, [r3, #8]
 8003902:	183b      	adds	r3, r7, r0
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003908:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800390a:	f383 8810 	msr	PRIMASK, r3
}
 800390e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003914:	2b00      	cmp	r3, #0
 8003916:	d012      	beq.n	800393e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800391c:	4a14      	ldr	r2, [pc, #80]	; (8003970 <HAL_UART_IRQHandler+0x2a0>)
 800391e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003924:	0018      	movs	r0, r3
 8003926:	f7fd fff7 	bl	8001918 <HAL_DMA_Abort_IT>
 800392a:	1e03      	subs	r3, r0, #0
 800392c:	d01a      	beq.n	8003964 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003938:	0018      	movs	r0, r3
 800393a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800393c:	e012      	b.n	8003964 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	0018      	movs	r0, r3
 8003942:	f000 f9af 	bl	8003ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003946:	e00d      	b.n	8003964 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	0018      	movs	r0, r3
 800394c:	f000 f9aa 	bl	8003ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003950:	e008      	b.n	8003964 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	0018      	movs	r0, r3
 8003956:	f000 f9a5 	bl	8003ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2284      	movs	r2, #132	; 0x84
 800395e:	2100      	movs	r1, #0
 8003960:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003962:	e189      	b.n	8003c78 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003964:	46c0      	nop			; (mov r8, r8)
    return;
 8003966:	e187      	b.n	8003c78 <HAL_UART_IRQHandler+0x5a8>
 8003968:	0000080f 	.word	0x0000080f
 800396c:	04000120 	.word	0x04000120
 8003970:	08004629 	.word	0x08004629

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003978:	2b01      	cmp	r3, #1
 800397a:	d000      	beq.n	800397e <HAL_UART_IRQHandler+0x2ae>
 800397c:	e13b      	b.n	8003bf6 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800397e:	23a4      	movs	r3, #164	; 0xa4
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2210      	movs	r2, #16
 8003986:	4013      	ands	r3, r2
 8003988:	d100      	bne.n	800398c <HAL_UART_IRQHandler+0x2bc>
 800398a:	e134      	b.n	8003bf6 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800398c:	23a0      	movs	r3, #160	; 0xa0
 800398e:	18fb      	adds	r3, r7, r3
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2210      	movs	r2, #16
 8003994:	4013      	ands	r3, r2
 8003996:	d100      	bne.n	800399a <HAL_UART_IRQHandler+0x2ca>
 8003998:	e12d      	b.n	8003bf6 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2210      	movs	r2, #16
 80039a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2240      	movs	r2, #64	; 0x40
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b40      	cmp	r3, #64	; 0x40
 80039ae:	d000      	beq.n	80039b2 <HAL_UART_IRQHandler+0x2e2>
 80039b0:	e0a1      	b.n	8003af6 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	217e      	movs	r1, #126	; 0x7e
 80039bc:	187b      	adds	r3, r7, r1
 80039be:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80039c0:	187b      	adds	r3, r7, r1
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d100      	bne.n	80039ca <HAL_UART_IRQHandler+0x2fa>
 80039c8:	e158      	b.n	8003c7c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2258      	movs	r2, #88	; 0x58
 80039ce:	5a9b      	ldrh	r3, [r3, r2]
 80039d0:	187a      	adds	r2, r7, r1
 80039d2:	8812      	ldrh	r2, [r2, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d300      	bcc.n	80039da <HAL_UART_IRQHandler+0x30a>
 80039d8:	e150      	b.n	8003c7c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	187a      	adds	r2, r7, r1
 80039de:	215a      	movs	r1, #90	; 0x5a
 80039e0:	8812      	ldrh	r2, [r2, #0]
 80039e2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2220      	movs	r2, #32
 80039ee:	4013      	ands	r3, r2
 80039f0:	d16f      	bne.n	8003ad2 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f2:	f3ef 8310 	mrs	r3, PRIMASK
 80039f6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80039f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80039fc:	2301      	movs	r3, #1
 80039fe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a02:	f383 8810 	msr	PRIMASK, r3
}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	499e      	ldr	r1, [pc, #632]	; (8003c8c <HAL_UART_IRQHandler+0x5bc>)
 8003a14:	400a      	ands	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1e:	f383 8810 	msr	PRIMASK, r3
}
 8003a22:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a24:	f3ef 8310 	mrs	r3, PRIMASK
 8003a28:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2c:	677b      	str	r3, [r7, #116]	; 0x74
 8003a2e:	2301      	movs	r3, #1
 8003a30:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a34:	f383 8810 	msr	PRIMASK, r3
}
 8003a38:	46c0      	nop			; (mov r8, r8)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2101      	movs	r1, #1
 8003a46:	438a      	bics	r2, r1
 8003a48:	609a      	str	r2, [r3, #8]
 8003a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a4c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a50:	f383 8810 	msr	PRIMASK, r3
}
 8003a54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a56:	f3ef 8310 	mrs	r3, PRIMASK
 8003a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a5e:	673b      	str	r3, [r7, #112]	; 0x70
 8003a60:	2301      	movs	r3, #1
 8003a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a66:	f383 8810 	msr	PRIMASK, r3
}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2140      	movs	r1, #64	; 0x40
 8003a78:	438a      	bics	r2, r1
 8003a7a:	609a      	str	r2, [r3, #8]
 8003a7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a7e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a82:	f383 8810 	msr	PRIMASK, r3
}
 8003a86:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2280      	movs	r2, #128	; 0x80
 8003a8c:	2120      	movs	r1, #32
 8003a8e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a96:	f3ef 8310 	mrs	r3, PRIMASK
 8003a9a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aa6:	f383 8810 	msr	PRIMASK, r3
}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2110      	movs	r1, #16
 8003ab8:	438a      	bics	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003abe:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ac2:	f383 8810 	msr	PRIMASK, r3
}
 8003ac6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003acc:	0018      	movs	r0, r3
 8003ace:	f7fd fee3 	bl	8001898 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2258      	movs	r2, #88	; 0x58
 8003adc:	5a9a      	ldrh	r2, [r3, r2]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	215a      	movs	r1, #90	; 0x5a
 8003ae2:	5a5b      	ldrh	r3, [r3, r1]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	0011      	movs	r1, r2
 8003aee:	0018      	movs	r0, r3
 8003af0:	f000 f8e0 	bl	8003cb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003af4:	e0c2      	b.n	8003c7c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2258      	movs	r2, #88	; 0x58
 8003afa:	5a99      	ldrh	r1, [r3, r2]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	225a      	movs	r2, #90	; 0x5a
 8003b00:	5a9b      	ldrh	r3, [r3, r2]
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	208e      	movs	r0, #142	; 0x8e
 8003b06:	183b      	adds	r3, r7, r0
 8003b08:	1a8a      	subs	r2, r1, r2
 8003b0a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	225a      	movs	r2, #90	; 0x5a
 8003b10:	5a9b      	ldrh	r3, [r3, r2]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d100      	bne.n	8003b1a <HAL_UART_IRQHandler+0x44a>
 8003b18:	e0b2      	b.n	8003c80 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003b1a:	183b      	adds	r3, r7, r0
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d100      	bne.n	8003b24 <HAL_UART_IRQHandler+0x454>
 8003b22:	e0ad      	b.n	8003c80 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b24:	f3ef 8310 	mrs	r3, PRIMASK
 8003b28:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b2c:	2488      	movs	r4, #136	; 0x88
 8003b2e:	193a      	adds	r2, r7, r4
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	2301      	movs	r3, #1
 8003b34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f383 8810 	msr	PRIMASK, r3
}
 8003b3c:	46c0      	nop			; (mov r8, r8)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4951      	ldr	r1, [pc, #324]	; (8003c90 <HAL_UART_IRQHandler+0x5c0>)
 8003b4a:	400a      	ands	r2, r1
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	193b      	adds	r3, r7, r4
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f383 8810 	msr	PRIMASK, r3
}
 8003b5a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b60:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b62:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b64:	2484      	movs	r4, #132	; 0x84
 8003b66:	193a      	adds	r2, r7, r4
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	f383 8810 	msr	PRIMASK, r3
}
 8003b74:	46c0      	nop			; (mov r8, r8)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2101      	movs	r1, #1
 8003b82:	438a      	bics	r2, r1
 8003b84:	609a      	str	r2, [r3, #8]
 8003b86:	193b      	adds	r3, r7, r4
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	f383 8810 	msr	PRIMASK, r3
}
 8003b92:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2280      	movs	r2, #128	; 0x80
 8003b98:	2120      	movs	r1, #32
 8003b9a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb0:	2480      	movs	r4, #128	; 0x80
 8003bb2:	193a      	adds	r2, r7, r4
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbc:	f383 8810 	msr	PRIMASK, r3
}
 8003bc0:	46c0      	nop			; (mov r8, r8)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2110      	movs	r1, #16
 8003bce:	438a      	bics	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	193b      	adds	r3, r7, r4
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bda:	f383 8810 	msr	PRIMASK, r3
}
 8003bde:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003be6:	183b      	adds	r3, r7, r0
 8003be8:	881a      	ldrh	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	0011      	movs	r1, r2
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f000 f860 	bl	8003cb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bf4:	e044      	b.n	8003c80 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003bf6:	23a4      	movs	r3, #164	; 0xa4
 8003bf8:	18fb      	adds	r3, r7, r3
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	035b      	lsls	r3, r3, #13
 8003c00:	4013      	ands	r3, r2
 8003c02:	d010      	beq.n	8003c26 <HAL_UART_IRQHandler+0x556>
 8003c04:	239c      	movs	r3, #156	; 0x9c
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	03db      	lsls	r3, r3, #15
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d009      	beq.n	8003c26 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2280      	movs	r2, #128	; 0x80
 8003c18:	0352      	lsls	r2, r2, #13
 8003c1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f000 fdfb 	bl	800481a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c24:	e02f      	b.n	8003c86 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c26:	23a4      	movs	r3, #164	; 0xa4
 8003c28:	18fb      	adds	r3, r7, r3
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2280      	movs	r2, #128	; 0x80
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d00f      	beq.n	8003c52 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c32:	23a0      	movs	r3, #160	; 0xa0
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2280      	movs	r2, #128	; 0x80
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d009      	beq.n	8003c52 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d01e      	beq.n	8003c84 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	0010      	movs	r0, r2
 8003c4e:	4798      	blx	r3
    }
    return;
 8003c50:	e018      	b.n	8003c84 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c52:	23a4      	movs	r3, #164	; 0xa4
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2240      	movs	r2, #64	; 0x40
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d013      	beq.n	8003c86 <HAL_UART_IRQHandler+0x5b6>
 8003c5e:	23a0      	movs	r3, #160	; 0xa0
 8003c60:	18fb      	adds	r3, r7, r3
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2240      	movs	r2, #64	; 0x40
 8003c66:	4013      	ands	r3, r2
 8003c68:	d00d      	beq.n	8003c86 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f000 fda9 	bl	80047c4 <UART_EndTransmit_IT>
    return;
 8003c72:	e008      	b.n	8003c86 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	e006      	b.n	8003c86 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003c78:	46c0      	nop			; (mov r8, r8)
 8003c7a:	e004      	b.n	8003c86 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003c7c:	46c0      	nop			; (mov r8, r8)
 8003c7e:	e002      	b.n	8003c86 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	e000      	b.n	8003c86 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003c84:	46c0      	nop			; (mov r8, r8)
  }

}
 8003c86:	46bd      	mov	sp, r7
 8003c88:	b02b      	add	sp, #172	; 0xac
 8003c8a:	bd90      	pop	{r4, r7, pc}
 8003c8c:	fffffeff 	.word	0xfffffeff
 8003c90:	fffffedf 	.word	0xfffffedf

08003c94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c9c:	46c0      	nop			; (mov r8, r8)
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b002      	add	sp, #8
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003cac:	46c0      	nop			; (mov r8, r8)
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b002      	add	sp, #8
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	000a      	movs	r2, r1
 8003cbe:	1cbb      	adds	r3, r7, #2
 8003cc0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b002      	add	sp, #8
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ccc:	b5b0      	push	{r4, r5, r7, lr}
 8003cce:	b08e      	sub	sp, #56	; 0x38
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cd4:	231a      	movs	r3, #26
 8003cd6:	2218      	movs	r2, #24
 8003cd8:	189b      	adds	r3, r3, r2
 8003cda:	19db      	adds	r3, r3, r7
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4ac6      	ldr	r2, [pc, #792]	; (8004018 <UART_SetConfig+0x34c>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	0019      	movs	r1, r3
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	4ac1      	ldr	r2, [pc, #772]	; (800401c <UART_SetConfig+0x350>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	0019      	movs	r1, r3
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4abb      	ldr	r2, [pc, #748]	; (8004020 <UART_SetConfig+0x354>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d004      	beq.n	8003d40 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	4ab7      	ldr	r2, [pc, #732]	; (8004024 <UART_SetConfig+0x358>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	0019      	movs	r1, r3
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d52:	430a      	orrs	r2, r1
 8003d54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4ab3      	ldr	r2, [pc, #716]	; (8004028 <UART_SetConfig+0x35c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d131      	bne.n	8003dc4 <UART_SetConfig+0xf8>
 8003d60:	4bb2      	ldr	r3, [pc, #712]	; (800402c <UART_SetConfig+0x360>)
 8003d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d64:	2203      	movs	r2, #3
 8003d66:	4013      	ands	r3, r2
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d01d      	beq.n	8003da8 <UART_SetConfig+0xdc>
 8003d6c:	d823      	bhi.n	8003db6 <UART_SetConfig+0xea>
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d00c      	beq.n	8003d8c <UART_SetConfig+0xc0>
 8003d72:	d820      	bhi.n	8003db6 <UART_SetConfig+0xea>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <UART_SetConfig+0xb2>
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d00e      	beq.n	8003d9a <UART_SetConfig+0xce>
 8003d7c:	e01b      	b.n	8003db6 <UART_SetConfig+0xea>
 8003d7e:	231b      	movs	r3, #27
 8003d80:	2218      	movs	r2, #24
 8003d82:	189b      	adds	r3, r3, r2
 8003d84:	19db      	adds	r3, r3, r7
 8003d86:	2201      	movs	r2, #1
 8003d88:	701a      	strb	r2, [r3, #0]
 8003d8a:	e09c      	b.n	8003ec6 <UART_SetConfig+0x1fa>
 8003d8c:	231b      	movs	r3, #27
 8003d8e:	2218      	movs	r2, #24
 8003d90:	189b      	adds	r3, r3, r2
 8003d92:	19db      	adds	r3, r3, r7
 8003d94:	2202      	movs	r2, #2
 8003d96:	701a      	strb	r2, [r3, #0]
 8003d98:	e095      	b.n	8003ec6 <UART_SetConfig+0x1fa>
 8003d9a:	231b      	movs	r3, #27
 8003d9c:	2218      	movs	r2, #24
 8003d9e:	189b      	adds	r3, r3, r2
 8003da0:	19db      	adds	r3, r3, r7
 8003da2:	2204      	movs	r2, #4
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	e08e      	b.n	8003ec6 <UART_SetConfig+0x1fa>
 8003da8:	231b      	movs	r3, #27
 8003daa:	2218      	movs	r2, #24
 8003dac:	189b      	adds	r3, r3, r2
 8003dae:	19db      	adds	r3, r3, r7
 8003db0:	2208      	movs	r2, #8
 8003db2:	701a      	strb	r2, [r3, #0]
 8003db4:	e087      	b.n	8003ec6 <UART_SetConfig+0x1fa>
 8003db6:	231b      	movs	r3, #27
 8003db8:	2218      	movs	r2, #24
 8003dba:	189b      	adds	r3, r3, r2
 8003dbc:	19db      	adds	r3, r3, r7
 8003dbe:	2210      	movs	r2, #16
 8003dc0:	701a      	strb	r2, [r3, #0]
 8003dc2:	e080      	b.n	8003ec6 <UART_SetConfig+0x1fa>
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a99      	ldr	r2, [pc, #612]	; (8004030 <UART_SetConfig+0x364>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d131      	bne.n	8003e32 <UART_SetConfig+0x166>
 8003dce:	4b97      	ldr	r3, [pc, #604]	; (800402c <UART_SetConfig+0x360>)
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd2:	220c      	movs	r2, #12
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b0c      	cmp	r3, #12
 8003dd8:	d01d      	beq.n	8003e16 <UART_SetConfig+0x14a>
 8003dda:	d823      	bhi.n	8003e24 <UART_SetConfig+0x158>
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d00c      	beq.n	8003dfa <UART_SetConfig+0x12e>
 8003de0:	d820      	bhi.n	8003e24 <UART_SetConfig+0x158>
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <UART_SetConfig+0x120>
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d00e      	beq.n	8003e08 <UART_SetConfig+0x13c>
 8003dea:	e01b      	b.n	8003e24 <UART_SetConfig+0x158>
 8003dec:	231b      	movs	r3, #27
 8003dee:	2218      	movs	r2, #24
 8003df0:	189b      	adds	r3, r3, r2
 8003df2:	19db      	adds	r3, r3, r7
 8003df4:	2200      	movs	r2, #0
 8003df6:	701a      	strb	r2, [r3, #0]
 8003df8:	e065      	b.n	8003ec6 <UART_SetConfig+0x1fa>
 8003dfa:	231b      	movs	r3, #27
 8003dfc:	2218      	movs	r2, #24
 8003dfe:	189b      	adds	r3, r3, r2
 8003e00:	19db      	adds	r3, r3, r7
 8003e02:	2202      	movs	r2, #2
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	e05e      	b.n	8003ec6 <UART_SetConfig+0x1fa>
 8003e08:	231b      	movs	r3, #27
 8003e0a:	2218      	movs	r2, #24
 8003e0c:	189b      	adds	r3, r3, r2
 8003e0e:	19db      	adds	r3, r3, r7
 8003e10:	2204      	movs	r2, #4
 8003e12:	701a      	strb	r2, [r3, #0]
 8003e14:	e057      	b.n	8003ec6 <UART_SetConfig+0x1fa>
 8003e16:	231b      	movs	r3, #27
 8003e18:	2218      	movs	r2, #24
 8003e1a:	189b      	adds	r3, r3, r2
 8003e1c:	19db      	adds	r3, r3, r7
 8003e1e:	2208      	movs	r2, #8
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	e050      	b.n	8003ec6 <UART_SetConfig+0x1fa>
 8003e24:	231b      	movs	r3, #27
 8003e26:	2218      	movs	r2, #24
 8003e28:	189b      	adds	r3, r3, r2
 8003e2a:	19db      	adds	r3, r3, r7
 8003e2c:	2210      	movs	r2, #16
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e049      	b.n	8003ec6 <UART_SetConfig+0x1fa>
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a7a      	ldr	r2, [pc, #488]	; (8004020 <UART_SetConfig+0x354>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d13e      	bne.n	8003eba <UART_SetConfig+0x1ee>
 8003e3c:	4b7b      	ldr	r3, [pc, #492]	; (800402c <UART_SetConfig+0x360>)
 8003e3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e40:	23c0      	movs	r3, #192	; 0xc0
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	4013      	ands	r3, r2
 8003e46:	22c0      	movs	r2, #192	; 0xc0
 8003e48:	0112      	lsls	r2, r2, #4
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d027      	beq.n	8003e9e <UART_SetConfig+0x1d2>
 8003e4e:	22c0      	movs	r2, #192	; 0xc0
 8003e50:	0112      	lsls	r2, r2, #4
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d82a      	bhi.n	8003eac <UART_SetConfig+0x1e0>
 8003e56:	2280      	movs	r2, #128	; 0x80
 8003e58:	0112      	lsls	r2, r2, #4
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d011      	beq.n	8003e82 <UART_SetConfig+0x1b6>
 8003e5e:	2280      	movs	r2, #128	; 0x80
 8003e60:	0112      	lsls	r2, r2, #4
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d822      	bhi.n	8003eac <UART_SetConfig+0x1e0>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d004      	beq.n	8003e74 <UART_SetConfig+0x1a8>
 8003e6a:	2280      	movs	r2, #128	; 0x80
 8003e6c:	00d2      	lsls	r2, r2, #3
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00e      	beq.n	8003e90 <UART_SetConfig+0x1c4>
 8003e72:	e01b      	b.n	8003eac <UART_SetConfig+0x1e0>
 8003e74:	231b      	movs	r3, #27
 8003e76:	2218      	movs	r2, #24
 8003e78:	189b      	adds	r3, r3, r2
 8003e7a:	19db      	adds	r3, r3, r7
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e021      	b.n	8003ec6 <UART_SetConfig+0x1fa>
 8003e82:	231b      	movs	r3, #27
 8003e84:	2218      	movs	r2, #24
 8003e86:	189b      	adds	r3, r3, r2
 8003e88:	19db      	adds	r3, r3, r7
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	e01a      	b.n	8003ec6 <UART_SetConfig+0x1fa>
 8003e90:	231b      	movs	r3, #27
 8003e92:	2218      	movs	r2, #24
 8003e94:	189b      	adds	r3, r3, r2
 8003e96:	19db      	adds	r3, r3, r7
 8003e98:	2204      	movs	r2, #4
 8003e9a:	701a      	strb	r2, [r3, #0]
 8003e9c:	e013      	b.n	8003ec6 <UART_SetConfig+0x1fa>
 8003e9e:	231b      	movs	r3, #27
 8003ea0:	2218      	movs	r2, #24
 8003ea2:	189b      	adds	r3, r3, r2
 8003ea4:	19db      	adds	r3, r3, r7
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	701a      	strb	r2, [r3, #0]
 8003eaa:	e00c      	b.n	8003ec6 <UART_SetConfig+0x1fa>
 8003eac:	231b      	movs	r3, #27
 8003eae:	2218      	movs	r2, #24
 8003eb0:	189b      	adds	r3, r3, r2
 8003eb2:	19db      	adds	r3, r3, r7
 8003eb4:	2210      	movs	r2, #16
 8003eb6:	701a      	strb	r2, [r3, #0]
 8003eb8:	e005      	b.n	8003ec6 <UART_SetConfig+0x1fa>
 8003eba:	231b      	movs	r3, #27
 8003ebc:	2218      	movs	r2, #24
 8003ebe:	189b      	adds	r3, r3, r2
 8003ec0:	19db      	adds	r3, r3, r7
 8003ec2:	2210      	movs	r2, #16
 8003ec4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a55      	ldr	r2, [pc, #340]	; (8004020 <UART_SetConfig+0x354>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d000      	beq.n	8003ed2 <UART_SetConfig+0x206>
 8003ed0:	e084      	b.n	8003fdc <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ed2:	231b      	movs	r3, #27
 8003ed4:	2218      	movs	r2, #24
 8003ed6:	189b      	adds	r3, r3, r2
 8003ed8:	19db      	adds	r3, r3, r7
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d01d      	beq.n	8003f1c <UART_SetConfig+0x250>
 8003ee0:	dc20      	bgt.n	8003f24 <UART_SetConfig+0x258>
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d015      	beq.n	8003f12 <UART_SetConfig+0x246>
 8003ee6:	dc1d      	bgt.n	8003f24 <UART_SetConfig+0x258>
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <UART_SetConfig+0x226>
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d005      	beq.n	8003efc <UART_SetConfig+0x230>
 8003ef0:	e018      	b.n	8003f24 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef2:	f7fe fda9 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8003ef6:	0003      	movs	r3, r0
 8003ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003efa:	e01c      	b.n	8003f36 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003efc:	4b4b      	ldr	r3, [pc, #300]	; (800402c <UART_SetConfig+0x360>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2210      	movs	r2, #16
 8003f02:	4013      	ands	r3, r2
 8003f04:	d002      	beq.n	8003f0c <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003f06:	4b4b      	ldr	r3, [pc, #300]	; (8004034 <UART_SetConfig+0x368>)
 8003f08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003f0a:	e014      	b.n	8003f36 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8003f0c:	4b4a      	ldr	r3, [pc, #296]	; (8004038 <UART_SetConfig+0x36c>)
 8003f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f10:	e011      	b.n	8003f36 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f12:	f7fe fce9 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 8003f16:	0003      	movs	r3, r0
 8003f18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f1a:	e00c      	b.n	8003f36 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	021b      	lsls	r3, r3, #8
 8003f20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f22:	e008      	b.n	8003f36 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003f28:	231a      	movs	r3, #26
 8003f2a:	2218      	movs	r2, #24
 8003f2c:	189b      	adds	r3, r3, r2
 8003f2e:	19db      	adds	r3, r3, r7
 8003f30:	2201      	movs	r2, #1
 8003f32:	701a      	strb	r2, [r3, #0]
        break;
 8003f34:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d100      	bne.n	8003f3e <UART_SetConfig+0x272>
 8003f3c:	e132      	b.n	80041a4 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	0013      	movs	r3, r2
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	189b      	adds	r3, r3, r2
 8003f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d305      	bcc.n	8003f5a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d906      	bls.n	8003f68 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8003f5a:	231a      	movs	r3, #26
 8003f5c:	2218      	movs	r2, #24
 8003f5e:	189b      	adds	r3, r3, r2
 8003f60:	19db      	adds	r3, r3, r7
 8003f62:	2201      	movs	r2, #1
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	e11d      	b.n	80041a4 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	6939      	ldr	r1, [r7, #16]
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	000b      	movs	r3, r1
 8003f76:	0e1b      	lsrs	r3, r3, #24
 8003f78:	0010      	movs	r0, r2
 8003f7a:	0205      	lsls	r5, r0, #8
 8003f7c:	431d      	orrs	r5, r3
 8003f7e:	000b      	movs	r3, r1
 8003f80:	021c      	lsls	r4, r3, #8
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	085b      	lsrs	r3, r3, #1
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	68b8      	ldr	r0, [r7, #8]
 8003f90:	68f9      	ldr	r1, [r7, #12]
 8003f92:	1900      	adds	r0, r0, r4
 8003f94:	4169      	adcs	r1, r5
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	603b      	str	r3, [r7, #0]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	607b      	str	r3, [r7, #4]
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f7fc f93c 	bl	8000220 <__aeabi_uldivmod>
 8003fa8:	0002      	movs	r2, r0
 8003faa:	000b      	movs	r3, r1
 8003fac:	0013      	movs	r3, r2
 8003fae:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fb2:	23c0      	movs	r3, #192	; 0xc0
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d309      	bcc.n	8003fce <UART_SetConfig+0x302>
 8003fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fbc:	2380      	movs	r3, #128	; 0x80
 8003fbe:	035b      	lsls	r3, r3, #13
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d204      	bcs.n	8003fce <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fca:	60da      	str	r2, [r3, #12]
 8003fcc:	e0ea      	b.n	80041a4 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8003fce:	231a      	movs	r3, #26
 8003fd0:	2218      	movs	r2, #24
 8003fd2:	189b      	adds	r3, r3, r2
 8003fd4:	19db      	adds	r3, r3, r7
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	e0e3      	b.n	80041a4 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	69da      	ldr	r2, [r3, #28]
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d000      	beq.n	8003fea <UART_SetConfig+0x31e>
 8003fe8:	e085      	b.n	80040f6 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8003fea:	231b      	movs	r3, #27
 8003fec:	2218      	movs	r2, #24
 8003fee:	189b      	adds	r3, r3, r2
 8003ff0:	19db      	adds	r3, r3, r7
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d837      	bhi.n	8004068 <UART_SetConfig+0x39c>
 8003ff8:	009a      	lsls	r2, r3, #2
 8003ffa:	4b10      	ldr	r3, [pc, #64]	; (800403c <UART_SetConfig+0x370>)
 8003ffc:	18d3      	adds	r3, r2, r3
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004002:	f7fe fd21 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8004006:	0003      	movs	r3, r0
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800400a:	e036      	b.n	800407a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800400c:	f7fe fd32 	bl	8002a74 <HAL_RCC_GetPCLK2Freq>
 8004010:	0003      	movs	r3, r0
 8004012:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004014:	e031      	b.n	800407a <UART_SetConfig+0x3ae>
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	efff69f3 	.word	0xefff69f3
 800401c:	ffffcfff 	.word	0xffffcfff
 8004020:	40004800 	.word	0x40004800
 8004024:	fffff4ff 	.word	0xfffff4ff
 8004028:	40013800 	.word	0x40013800
 800402c:	40021000 	.word	0x40021000
 8004030:	40004400 	.word	0x40004400
 8004034:	003d0900 	.word	0x003d0900
 8004038:	00f42400 	.word	0x00f42400
 800403c:	080048c8 	.word	0x080048c8
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004040:	4b60      	ldr	r3, [pc, #384]	; (80041c4 <UART_SetConfig+0x4f8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2210      	movs	r2, #16
 8004046:	4013      	ands	r3, r2
 8004048:	d002      	beq.n	8004050 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800404a:	4b5f      	ldr	r3, [pc, #380]	; (80041c8 <UART_SetConfig+0x4fc>)
 800404c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800404e:	e014      	b.n	800407a <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8004050:	4b5e      	ldr	r3, [pc, #376]	; (80041cc <UART_SetConfig+0x500>)
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004054:	e011      	b.n	800407a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004056:	f7fe fc47 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 800405a:	0003      	movs	r3, r0
 800405c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800405e:	e00c      	b.n	800407a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004060:	2380      	movs	r3, #128	; 0x80
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004066:	e008      	b.n	800407a <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800406c:	231a      	movs	r3, #26
 800406e:	2218      	movs	r2, #24
 8004070:	189b      	adds	r3, r3, r2
 8004072:	19db      	adds	r3, r3, r7
 8004074:	2201      	movs	r2, #1
 8004076:	701a      	strb	r2, [r3, #0]
        break;
 8004078:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800407a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d100      	bne.n	8004082 <UART_SetConfig+0x3b6>
 8004080:	e090      	b.n	80041a4 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004084:	005a      	lsls	r2, r3, #1
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	085b      	lsrs	r3, r3, #1
 800408c:	18d2      	adds	r2, r2, r3
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	0019      	movs	r1, r3
 8004094:	0010      	movs	r0, r2
 8004096:	f7fc f837 	bl	8000108 <__udivsi3>
 800409a:	0003      	movs	r3, r0
 800409c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	2b0f      	cmp	r3, #15
 80040a2:	d921      	bls.n	80040e8 <UART_SetConfig+0x41c>
 80040a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040a6:	2380      	movs	r3, #128	; 0x80
 80040a8:	025b      	lsls	r3, r3, #9
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d21c      	bcs.n	80040e8 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	200e      	movs	r0, #14
 80040b4:	2418      	movs	r4, #24
 80040b6:	1903      	adds	r3, r0, r4
 80040b8:	19db      	adds	r3, r3, r7
 80040ba:	210f      	movs	r1, #15
 80040bc:	438a      	bics	r2, r1
 80040be:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c2:	085b      	lsrs	r3, r3, #1
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2207      	movs	r2, #7
 80040c8:	4013      	ands	r3, r2
 80040ca:	b299      	uxth	r1, r3
 80040cc:	1903      	adds	r3, r0, r4
 80040ce:	19db      	adds	r3, r3, r7
 80040d0:	1902      	adds	r2, r0, r4
 80040d2:	19d2      	adds	r2, r2, r7
 80040d4:	8812      	ldrh	r2, [r2, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	1902      	adds	r2, r0, r4
 80040e0:	19d2      	adds	r2, r2, r7
 80040e2:	8812      	ldrh	r2, [r2, #0]
 80040e4:	60da      	str	r2, [r3, #12]
 80040e6:	e05d      	b.n	80041a4 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80040e8:	231a      	movs	r3, #26
 80040ea:	2218      	movs	r2, #24
 80040ec:	189b      	adds	r3, r3, r2
 80040ee:	19db      	adds	r3, r3, r7
 80040f0:	2201      	movs	r2, #1
 80040f2:	701a      	strb	r2, [r3, #0]
 80040f4:	e056      	b.n	80041a4 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040f6:	231b      	movs	r3, #27
 80040f8:	2218      	movs	r2, #24
 80040fa:	189b      	adds	r3, r3, r2
 80040fc:	19db      	adds	r3, r3, r7
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d822      	bhi.n	800414a <UART_SetConfig+0x47e>
 8004104:	009a      	lsls	r2, r3, #2
 8004106:	4b32      	ldr	r3, [pc, #200]	; (80041d0 <UART_SetConfig+0x504>)
 8004108:	18d3      	adds	r3, r2, r3
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800410e:	f7fe fc9b 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8004112:	0003      	movs	r3, r0
 8004114:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004116:	e021      	b.n	800415c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004118:	f7fe fcac 	bl	8002a74 <HAL_RCC_GetPCLK2Freq>
 800411c:	0003      	movs	r3, r0
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004120:	e01c      	b.n	800415c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004122:	4b28      	ldr	r3, [pc, #160]	; (80041c4 <UART_SetConfig+0x4f8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2210      	movs	r2, #16
 8004128:	4013      	ands	r3, r2
 800412a:	d002      	beq.n	8004132 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800412c:	4b26      	ldr	r3, [pc, #152]	; (80041c8 <UART_SetConfig+0x4fc>)
 800412e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004130:	e014      	b.n	800415c <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8004132:	4b26      	ldr	r3, [pc, #152]	; (80041cc <UART_SetConfig+0x500>)
 8004134:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004136:	e011      	b.n	800415c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004138:	f7fe fbd6 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 800413c:	0003      	movs	r3, r0
 800413e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004140:	e00c      	b.n	800415c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004142:	2380      	movs	r3, #128	; 0x80
 8004144:	021b      	lsls	r3, r3, #8
 8004146:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004148:	e008      	b.n	800415c <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800414e:	231a      	movs	r3, #26
 8004150:	2218      	movs	r2, #24
 8004152:	189b      	adds	r3, r3, r2
 8004154:	19db      	adds	r3, r3, r7
 8004156:	2201      	movs	r2, #1
 8004158:	701a      	strb	r2, [r3, #0]
        break;
 800415a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800415c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415e:	2b00      	cmp	r3, #0
 8004160:	d020      	beq.n	80041a4 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	085a      	lsrs	r2, r3, #1
 8004168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416a:	18d2      	adds	r2, r2, r3
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	0019      	movs	r1, r3
 8004172:	0010      	movs	r0, r2
 8004174:	f7fb ffc8 	bl	8000108 <__udivsi3>
 8004178:	0003      	movs	r3, r0
 800417a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	2b0f      	cmp	r3, #15
 8004180:	d90a      	bls.n	8004198 <UART_SetConfig+0x4cc>
 8004182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	025b      	lsls	r3, r3, #9
 8004188:	429a      	cmp	r2, r3
 800418a:	d205      	bcs.n	8004198 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800418c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418e:	b29a      	uxth	r2, r3
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	60da      	str	r2, [r3, #12]
 8004196:	e005      	b.n	80041a4 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004198:	231a      	movs	r3, #26
 800419a:	2218      	movs	r2, #24
 800419c:	189b      	adds	r3, r3, r2
 800419e:	19db      	adds	r3, r3, r7
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	2200      	movs	r2, #0
 80041a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	2200      	movs	r2, #0
 80041ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80041b0:	231a      	movs	r3, #26
 80041b2:	2218      	movs	r2, #24
 80041b4:	189b      	adds	r3, r3, r2
 80041b6:	19db      	adds	r3, r3, r7
 80041b8:	781b      	ldrb	r3, [r3, #0]
}
 80041ba:	0018      	movs	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	b00e      	add	sp, #56	; 0x38
 80041c0:	bdb0      	pop	{r4, r5, r7, pc}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	40021000 	.word	0x40021000
 80041c8:	003d0900 	.word	0x003d0900
 80041cc:	00f42400 	.word	0x00f42400
 80041d0:	080048ec 	.word	0x080048ec

080041d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	2201      	movs	r2, #1
 80041e2:	4013      	ands	r3, r2
 80041e4:	d00b      	beq.n	80041fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	4a4a      	ldr	r2, [pc, #296]	; (8004318 <UART_AdvFeatureConfig+0x144>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	0019      	movs	r1, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	2202      	movs	r2, #2
 8004204:	4013      	ands	r3, r2
 8004206:	d00b      	beq.n	8004220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	4a43      	ldr	r2, [pc, #268]	; (800431c <UART_AdvFeatureConfig+0x148>)
 8004210:	4013      	ands	r3, r2
 8004212:	0019      	movs	r1, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	2204      	movs	r2, #4
 8004226:	4013      	ands	r3, r2
 8004228:	d00b      	beq.n	8004242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4a3b      	ldr	r2, [pc, #236]	; (8004320 <UART_AdvFeatureConfig+0x14c>)
 8004232:	4013      	ands	r3, r2
 8004234:	0019      	movs	r1, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	2208      	movs	r2, #8
 8004248:	4013      	ands	r3, r2
 800424a:	d00b      	beq.n	8004264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	4a34      	ldr	r2, [pc, #208]	; (8004324 <UART_AdvFeatureConfig+0x150>)
 8004254:	4013      	ands	r3, r2
 8004256:	0019      	movs	r1, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	2210      	movs	r2, #16
 800426a:	4013      	ands	r3, r2
 800426c:	d00b      	beq.n	8004286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	4a2c      	ldr	r2, [pc, #176]	; (8004328 <UART_AdvFeatureConfig+0x154>)
 8004276:	4013      	ands	r3, r2
 8004278:	0019      	movs	r1, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	2220      	movs	r2, #32
 800428c:	4013      	ands	r3, r2
 800428e:	d00b      	beq.n	80042a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	4a25      	ldr	r2, [pc, #148]	; (800432c <UART_AdvFeatureConfig+0x158>)
 8004298:	4013      	ands	r3, r2
 800429a:	0019      	movs	r1, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	2240      	movs	r2, #64	; 0x40
 80042ae:	4013      	ands	r3, r2
 80042b0:	d01d      	beq.n	80042ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	4a1d      	ldr	r2, [pc, #116]	; (8004330 <UART_AdvFeatureConfig+0x15c>)
 80042ba:	4013      	ands	r3, r2
 80042bc:	0019      	movs	r1, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ce:	2380      	movs	r3, #128	; 0x80
 80042d0:	035b      	lsls	r3, r3, #13
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d10b      	bne.n	80042ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4a15      	ldr	r2, [pc, #84]	; (8004334 <UART_AdvFeatureConfig+0x160>)
 80042de:	4013      	ands	r3, r2
 80042e0:	0019      	movs	r1, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	2280      	movs	r2, #128	; 0x80
 80042f4:	4013      	ands	r3, r2
 80042f6:	d00b      	beq.n	8004310 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	4a0e      	ldr	r2, [pc, #56]	; (8004338 <UART_AdvFeatureConfig+0x164>)
 8004300:	4013      	ands	r3, r2
 8004302:	0019      	movs	r1, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	605a      	str	r2, [r3, #4]
  }
}
 8004310:	46c0      	nop			; (mov r8, r8)
 8004312:	46bd      	mov	sp, r7
 8004314:	b002      	add	sp, #8
 8004316:	bd80      	pop	{r7, pc}
 8004318:	fffdffff 	.word	0xfffdffff
 800431c:	fffeffff 	.word	0xfffeffff
 8004320:	fffbffff 	.word	0xfffbffff
 8004324:	ffff7fff 	.word	0xffff7fff
 8004328:	ffffefff 	.word	0xffffefff
 800432c:	ffffdfff 	.word	0xffffdfff
 8004330:	ffefffff 	.word	0xffefffff
 8004334:	ff9fffff 	.word	0xff9fffff
 8004338:	fff7ffff 	.word	0xfff7ffff

0800433c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b092      	sub	sp, #72	; 0x48
 8004340:	af02      	add	r7, sp, #8
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2284      	movs	r2, #132	; 0x84
 8004348:	2100      	movs	r1, #0
 800434a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800434c:	f7fc ff06 	bl	800115c <HAL_GetTick>
 8004350:	0003      	movs	r3, r0
 8004352:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2208      	movs	r2, #8
 800435c:	4013      	ands	r3, r2
 800435e:	2b08      	cmp	r3, #8
 8004360:	d12c      	bne.n	80043bc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004364:	2280      	movs	r2, #128	; 0x80
 8004366:	0391      	lsls	r1, r2, #14
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	4a46      	ldr	r2, [pc, #280]	; (8004484 <UART_CheckIdleState+0x148>)
 800436c:	9200      	str	r2, [sp, #0]
 800436e:	2200      	movs	r2, #0
 8004370:	f000 f88c 	bl	800448c <UART_WaitOnFlagUntilTimeout>
 8004374:	1e03      	subs	r3, r0, #0
 8004376:	d021      	beq.n	80043bc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004378:	f3ef 8310 	mrs	r3, PRIMASK
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004380:	63bb      	str	r3, [r7, #56]	; 0x38
 8004382:	2301      	movs	r3, #1
 8004384:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004388:	f383 8810 	msr	PRIMASK, r3
}
 800438c:	46c0      	nop			; (mov r8, r8)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2180      	movs	r1, #128	; 0x80
 800439a:	438a      	bics	r2, r1
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a4:	f383 8810 	msr	PRIMASK, r3
}
 80043a8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2220      	movs	r2, #32
 80043ae:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2278      	movs	r2, #120	; 0x78
 80043b4:	2100      	movs	r1, #0
 80043b6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e05f      	b.n	800447c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2204      	movs	r2, #4
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d146      	bne.n	8004458 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043cc:	2280      	movs	r2, #128	; 0x80
 80043ce:	03d1      	lsls	r1, r2, #15
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	4a2c      	ldr	r2, [pc, #176]	; (8004484 <UART_CheckIdleState+0x148>)
 80043d4:	9200      	str	r2, [sp, #0]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f000 f858 	bl	800448c <UART_WaitOnFlagUntilTimeout>
 80043dc:	1e03      	subs	r3, r0, #0
 80043de:	d03b      	beq.n	8004458 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043e0:	f3ef 8310 	mrs	r3, PRIMASK
 80043e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80043e6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043e8:	637b      	str	r3, [r7, #52]	; 0x34
 80043ea:	2301      	movs	r3, #1
 80043ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f383 8810 	msr	PRIMASK, r3
}
 80043f4:	46c0      	nop			; (mov r8, r8)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4921      	ldr	r1, [pc, #132]	; (8004488 <UART_CheckIdleState+0x14c>)
 8004402:	400a      	ands	r2, r1
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004408:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f383 8810 	msr	PRIMASK, r3
}
 8004410:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004412:	f3ef 8310 	mrs	r3, PRIMASK
 8004416:	61bb      	str	r3, [r7, #24]
  return(result);
 8004418:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441a:	633b      	str	r3, [r7, #48]	; 0x30
 800441c:	2301      	movs	r3, #1
 800441e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f383 8810 	msr	PRIMASK, r3
}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2101      	movs	r1, #1
 8004434:	438a      	bics	r2, r1
 8004436:	609a      	str	r2, [r3, #8]
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	f383 8810 	msr	PRIMASK, r3
}
 8004442:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2280      	movs	r2, #128	; 0x80
 8004448:	2120      	movs	r1, #32
 800444a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2278      	movs	r2, #120	; 0x78
 8004450:	2100      	movs	r1, #0
 8004452:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e011      	b.n	800447c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2280      	movs	r2, #128	; 0x80
 8004462:	2120      	movs	r1, #32
 8004464:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2278      	movs	r2, #120	; 0x78
 8004476:	2100      	movs	r1, #0
 8004478:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	0018      	movs	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	b010      	add	sp, #64	; 0x40
 8004482:	bd80      	pop	{r7, pc}
 8004484:	01ffffff 	.word	0x01ffffff
 8004488:	fffffedf 	.word	0xfffffedf

0800448c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	1dfb      	adds	r3, r7, #7
 800449a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800449c:	e04b      	b.n	8004536 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	3301      	adds	r3, #1
 80044a2:	d048      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a4:	f7fc fe5a 	bl	800115c <HAL_GetTick>
 80044a8:	0002      	movs	r2, r0
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d302      	bcc.n	80044ba <UART_WaitOnFlagUntilTimeout+0x2e>
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e04b      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2204      	movs	r2, #4
 80044c6:	4013      	ands	r3, r2
 80044c8:	d035      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	2208      	movs	r2, #8
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d111      	bne.n	80044fc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2208      	movs	r2, #8
 80044de:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	0018      	movs	r0, r3
 80044e4:	f000 f83c 	bl	8004560 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2284      	movs	r2, #132	; 0x84
 80044ec:	2108      	movs	r1, #8
 80044ee:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2278      	movs	r2, #120	; 0x78
 80044f4:	2100      	movs	r1, #0
 80044f6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e02c      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69da      	ldr	r2, [r3, #28]
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	401a      	ands	r2, r3
 8004508:	2380      	movs	r3, #128	; 0x80
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	429a      	cmp	r2, r3
 800450e:	d112      	bne.n	8004536 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2280      	movs	r2, #128	; 0x80
 8004516:	0112      	lsls	r2, r2, #4
 8004518:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	0018      	movs	r0, r3
 800451e:	f000 f81f 	bl	8004560 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2284      	movs	r2, #132	; 0x84
 8004526:	2120      	movs	r1, #32
 8004528:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2278      	movs	r2, #120	; 0x78
 800452e:	2100      	movs	r1, #0
 8004530:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e00f      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	4013      	ands	r3, r2
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	425a      	negs	r2, r3
 8004546:	4153      	adcs	r3, r2
 8004548:	b2db      	uxtb	r3, r3
 800454a:	001a      	movs	r2, r3
 800454c:	1dfb      	adds	r3, r7, #7
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d0a4      	beq.n	800449e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	0018      	movs	r0, r3
 8004558:	46bd      	mov	sp, r7
 800455a:	b004      	add	sp, #16
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08e      	sub	sp, #56	; 0x38
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004568:	f3ef 8310 	mrs	r3, PRIMASK
 800456c:	617b      	str	r3, [r7, #20]
  return(result);
 800456e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004570:	637b      	str	r3, [r7, #52]	; 0x34
 8004572:	2301      	movs	r3, #1
 8004574:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	f383 8810 	msr	PRIMASK, r3
}
 800457c:	46c0      	nop			; (mov r8, r8)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4926      	ldr	r1, [pc, #152]	; (8004624 <UART_EndRxTransfer+0xc4>)
 800458a:	400a      	ands	r2, r1
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004590:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	f383 8810 	msr	PRIMASK, r3
}
 8004598:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800459a:	f3ef 8310 	mrs	r3, PRIMASK
 800459e:	623b      	str	r3, [r7, #32]
  return(result);
 80045a0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a2:	633b      	str	r3, [r7, #48]	; 0x30
 80045a4:	2301      	movs	r3, #1
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	f383 8810 	msr	PRIMASK, r3
}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2101      	movs	r1, #1
 80045bc:	438a      	bics	r2, r1
 80045be:	609a      	str	r2, [r3, #8]
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	f383 8810 	msr	PRIMASK, r3
}
 80045ca:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d118      	bne.n	8004606 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045d4:	f3ef 8310 	mrs	r3, PRIMASK
 80045d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80045da:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045de:	2301      	movs	r3, #1
 80045e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f383 8810 	msr	PRIMASK, r3
}
 80045e8:	46c0      	nop			; (mov r8, r8)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2110      	movs	r1, #16
 80045f6:	438a      	bics	r2, r1
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f383 8810 	msr	PRIMASK, r3
}
 8004604:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2280      	movs	r2, #128	; 0x80
 800460a:	2120      	movs	r1, #32
 800460c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	669a      	str	r2, [r3, #104]	; 0x68
}
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	46bd      	mov	sp, r7
 800461e:	b00e      	add	sp, #56	; 0x38
 8004620:	bd80      	pop	{r7, pc}
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	fffffedf 	.word	0xfffffedf

08004628 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	225a      	movs	r2, #90	; 0x5a
 800463a:	2100      	movs	r1, #0
 800463c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2252      	movs	r2, #82	; 0x52
 8004642:	2100      	movs	r1, #0
 8004644:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	0018      	movs	r0, r3
 800464a:	f7ff fb2b 	bl	8003ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	46bd      	mov	sp, r7
 8004652:	b004      	add	sp, #16
 8004654:	bd80      	pop	{r7, pc}

08004656 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b08a      	sub	sp, #40	; 0x28
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004662:	2b21      	cmp	r3, #33	; 0x21
 8004664:	d14c      	bne.n	8004700 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2252      	movs	r2, #82	; 0x52
 800466a:	5a9b      	ldrh	r3, [r3, r2]
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d132      	bne.n	80046d8 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004672:	f3ef 8310 	mrs	r3, PRIMASK
 8004676:	60bb      	str	r3, [r7, #8]
  return(result);
 8004678:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
 800467c:	2301      	movs	r3, #1
 800467e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f383 8810 	msr	PRIMASK, r3
}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2180      	movs	r1, #128	; 0x80
 8004694:	438a      	bics	r2, r1
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f383 8810 	msr	PRIMASK, r3
}
 80046a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046a4:	f3ef 8310 	mrs	r3, PRIMASK
 80046a8:	617b      	str	r3, [r7, #20]
  return(result);
 80046aa:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046ac:	623b      	str	r3, [r7, #32]
 80046ae:	2301      	movs	r3, #1
 80046b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	f383 8810 	msr	PRIMASK, r3
}
 80046b8:	46c0      	nop			; (mov r8, r8)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2140      	movs	r1, #64	; 0x40
 80046c6:	430a      	orrs	r2, r1
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	f383 8810 	msr	PRIMASK, r3
}
 80046d4:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80046d6:	e013      	b.n	8004700 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046dc:	781a      	ldrb	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2252      	movs	r2, #82	; 0x52
 80046f2:	5a9b      	ldrh	r3, [r3, r2]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b299      	uxth	r1, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2252      	movs	r2, #82	; 0x52
 80046fe:	5299      	strh	r1, [r3, r2]
}
 8004700:	46c0      	nop			; (mov r8, r8)
 8004702:	46bd      	mov	sp, r7
 8004704:	b00a      	add	sp, #40	; 0x28
 8004706:	bd80      	pop	{r7, pc}

08004708 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08c      	sub	sp, #48	; 0x30
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004714:	2b21      	cmp	r3, #33	; 0x21
 8004716:	d151      	bne.n	80047bc <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2252      	movs	r2, #82	; 0x52
 800471c:	5a9b      	ldrh	r3, [r3, r2]
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d132      	bne.n	800478a <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004724:	f3ef 8310 	mrs	r3, PRIMASK
 8004728:	60fb      	str	r3, [r7, #12]
  return(result);
 800472a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800472c:	62bb      	str	r3, [r7, #40]	; 0x28
 800472e:	2301      	movs	r3, #1
 8004730:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f383 8810 	msr	PRIMASK, r3
}
 8004738:	46c0      	nop			; (mov r8, r8)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2180      	movs	r1, #128	; 0x80
 8004746:	438a      	bics	r2, r1
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f383 8810 	msr	PRIMASK, r3
}
 8004754:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004756:	f3ef 8310 	mrs	r3, PRIMASK
 800475a:	61bb      	str	r3, [r7, #24]
  return(result);
 800475c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
 8004760:	2301      	movs	r3, #1
 8004762:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f383 8810 	msr	PRIMASK, r3
}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2140      	movs	r1, #64	; 0x40
 8004778:	430a      	orrs	r2, r1
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	f383 8810 	msr	PRIMASK, r3
}
 8004786:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004788:	e018      	b.n	80047bc <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478e:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	001a      	movs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	05d2      	lsls	r2, r2, #23
 800479c:	0dd2      	lsrs	r2, r2, #23
 800479e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a4:	1c9a      	adds	r2, r3, #2
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2252      	movs	r2, #82	; 0x52
 80047ae:	5a9b      	ldrh	r3, [r3, r2]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b299      	uxth	r1, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2252      	movs	r2, #82	; 0x52
 80047ba:	5299      	strh	r1, [r3, r2]
}
 80047bc:	46c0      	nop			; (mov r8, r8)
 80047be:	46bd      	mov	sp, r7
 80047c0:	b00c      	add	sp, #48	; 0x30
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047cc:	f3ef 8310 	mrs	r3, PRIMASK
 80047d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80047d2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	2301      	movs	r3, #1
 80047d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f383 8810 	msr	PRIMASK, r3
}
 80047e0:	46c0      	nop			; (mov r8, r8)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2140      	movs	r1, #64	; 0x40
 80047ee:	438a      	bics	r2, r1
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f383 8810 	msr	PRIMASK, r3
}
 80047fc:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	0018      	movs	r0, r3
 800480e:	f7ff fa41 	bl	8003c94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	46bd      	mov	sp, r7
 8004816:	b006      	add	sp, #24
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	46bd      	mov	sp, r7
 8004826:	b002      	add	sp, #8
 8004828:	bd80      	pop	{r7, pc}

0800482a <memset>:
 800482a:	0003      	movs	r3, r0
 800482c:	1882      	adds	r2, r0, r2
 800482e:	4293      	cmp	r3, r2
 8004830:	d100      	bne.n	8004834 <memset+0xa>
 8004832:	4770      	bx	lr
 8004834:	7019      	strb	r1, [r3, #0]
 8004836:	3301      	adds	r3, #1
 8004838:	e7f9      	b.n	800482e <memset+0x4>
	...

0800483c <__libc_init_array>:
 800483c:	b570      	push	{r4, r5, r6, lr}
 800483e:	2600      	movs	r6, #0
 8004840:	4c0c      	ldr	r4, [pc, #48]	; (8004874 <__libc_init_array+0x38>)
 8004842:	4d0d      	ldr	r5, [pc, #52]	; (8004878 <__libc_init_array+0x3c>)
 8004844:	1b64      	subs	r4, r4, r5
 8004846:	10a4      	asrs	r4, r4, #2
 8004848:	42a6      	cmp	r6, r4
 800484a:	d109      	bne.n	8004860 <__libc_init_array+0x24>
 800484c:	2600      	movs	r6, #0
 800484e:	f000 f819 	bl	8004884 <_init>
 8004852:	4c0a      	ldr	r4, [pc, #40]	; (800487c <__libc_init_array+0x40>)
 8004854:	4d0a      	ldr	r5, [pc, #40]	; (8004880 <__libc_init_array+0x44>)
 8004856:	1b64      	subs	r4, r4, r5
 8004858:	10a4      	asrs	r4, r4, #2
 800485a:	42a6      	cmp	r6, r4
 800485c:	d105      	bne.n	800486a <__libc_init_array+0x2e>
 800485e:	bd70      	pop	{r4, r5, r6, pc}
 8004860:	00b3      	lsls	r3, r6, #2
 8004862:	58eb      	ldr	r3, [r5, r3]
 8004864:	4798      	blx	r3
 8004866:	3601      	adds	r6, #1
 8004868:	e7ee      	b.n	8004848 <__libc_init_array+0xc>
 800486a:	00b3      	lsls	r3, r6, #2
 800486c:	58eb      	ldr	r3, [r5, r3]
 800486e:	4798      	blx	r3
 8004870:	3601      	adds	r6, #1
 8004872:	e7f2      	b.n	800485a <__libc_init_array+0x1e>
 8004874:	08004918 	.word	0x08004918
 8004878:	08004918 	.word	0x08004918
 800487c:	0800491c 	.word	0x0800491c
 8004880:	08004918 	.word	0x08004918

08004884 <_init>:
 8004884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800488a:	bc08      	pop	{r3}
 800488c:	469e      	mov	lr, r3
 800488e:	4770      	bx	lr

08004890 <_fini>:
 8004890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004896:	bc08      	pop	{r3}
 8004898:	469e      	mov	lr, r3
 800489a:	4770      	bx	lr
