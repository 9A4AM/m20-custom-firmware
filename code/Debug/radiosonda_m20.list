
radiosonda_m20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004c6c  08004c6c  00014c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d50  08004d50  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d58  08004d58  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d58  08004d58  00014d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d5c  08004d5c  00014d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  2000005c  08004dbc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  08004dbc  00020414  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f14c  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021e2  00000000  00000000  0002f213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  000313f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aff  00000000  00000000  00032208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020f9  00000000  00000000  00032d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fe83  00000000  00000000  00034e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000773ef  00000000  00000000  00044c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000037c8  00000000  00000000  000bc074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000bf83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c54 	.word	0x08004c54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08004c54 	.word	0x08004c54

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8d8 	bl	80004b4 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8d3 	bl	80004b4 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	d434      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000316:	469b      	mov	fp, r3
 8000318:	4653      	mov	r3, sl
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83b      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e079      	b.n	8000426 <__udivmoddi4+0x146>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e076      	b.n	800042c <__udivmoddi4+0x14c>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e029      	b.n	80003ac <__udivmoddi4+0xcc>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	469b      	mov	fp, r3
 8000384:	2320      	movs	r3, #32
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	40da      	lsrs	r2, r3
 800038c:	4641      	mov	r1, r8
 800038e:	0013      	movs	r3, r2
 8000390:	464a      	mov	r2, r9
 8000392:	408a      	lsls	r2, r1
 8000394:	0017      	movs	r7, r2
 8000396:	4642      	mov	r2, r8
 8000398:	431f      	orrs	r7, r3
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d9c3      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	4643      	mov	r3, r8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0d8      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b2:	07fb      	lsls	r3, r7, #31
 80003b4:	0872      	lsrs	r2, r6, #1
 80003b6:	431a      	orrs	r2, r3
 80003b8:	4646      	mov	r6, r8
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	e00e      	b.n	80003dc <__udivmoddi4+0xfc>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d101      	bne.n	80003c6 <__udivmoddi4+0xe6>
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	d80c      	bhi.n	80003e0 <__udivmoddi4+0x100>
 80003c6:	1aa4      	subs	r4, r4, r2
 80003c8:	419d      	sbcs	r5, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2100      	movs	r1, #0
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1824      	adds	r4, r4, r0
 80003d6:	414d      	adcs	r5, r1
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d006      	beq.n	80003ea <__udivmoddi4+0x10a>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d9ee      	bls.n	80003be <__udivmoddi4+0xde>
 80003e0:	3e01      	subs	r6, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1f8      	bne.n	80003dc <__udivmoddi4+0xfc>
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	465b      	mov	r3, fp
 80003f0:	1900      	adds	r0, r0, r4
 80003f2:	4169      	adcs	r1, r5
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db24      	blt.n	8000442 <__udivmoddi4+0x162>
 80003f8:	002b      	movs	r3, r5
 80003fa:	465a      	mov	r2, fp
 80003fc:	4644      	mov	r4, r8
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	40e2      	lsrs	r2, r4
 8000404:	001c      	movs	r4, r3
 8000406:	465b      	mov	r3, fp
 8000408:	0015      	movs	r5, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	db2a      	blt.n	8000464 <__udivmoddi4+0x184>
 800040e:	0026      	movs	r6, r4
 8000410:	409e      	lsls	r6, r3
 8000412:	0033      	movs	r3, r6
 8000414:	0026      	movs	r6, r4
 8000416:	4647      	mov	r7, r8
 8000418:	40be      	lsls	r6, r7
 800041a:	0032      	movs	r2, r6
 800041c:	1a80      	subs	r0, r0, r2
 800041e:	4199      	sbcs	r1, r3
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	9101      	str	r1, [sp, #4]
 8000424:	e79e      	b.n	8000364 <__udivmoddi4+0x84>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d8bc      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800042a:	e782      	b.n	8000332 <__udivmoddi4+0x52>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	2100      	movs	r1, #0
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	9100      	str	r1, [sp, #0]
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	40da      	lsrs	r2, r3
 800043e:	9201      	str	r2, [sp, #4]
 8000440:	e785      	b.n	800034e <__udivmoddi4+0x6e>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4646      	mov	r6, r8
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4644      	mov	r4, r8
 8000454:	4313      	orrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	dad4      	bge.n	800040e <__udivmoddi4+0x12e>
 8000464:	4642      	mov	r2, r8
 8000466:	002f      	movs	r7, r5
 8000468:	2320      	movs	r3, #32
 800046a:	0026      	movs	r6, r4
 800046c:	4097      	lsls	r7, r2
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	40de      	lsrs	r6, r3
 8000472:	003b      	movs	r3, r7
 8000474:	4333      	orrs	r3, r6
 8000476:	e7cd      	b.n	8000414 <__udivmoddi4+0x134>

08000478 <__clzsi2>:
 8000478:	211c      	movs	r1, #28
 800047a:	2301      	movs	r3, #1
 800047c:	041b      	lsls	r3, r3, #16
 800047e:	4298      	cmp	r0, r3
 8000480:	d301      	bcc.n	8000486 <__clzsi2+0xe>
 8000482:	0c00      	lsrs	r0, r0, #16
 8000484:	3910      	subs	r1, #16
 8000486:	0a1b      	lsrs	r3, r3, #8
 8000488:	4298      	cmp	r0, r3
 800048a:	d301      	bcc.n	8000490 <__clzsi2+0x18>
 800048c:	0a00      	lsrs	r0, r0, #8
 800048e:	3908      	subs	r1, #8
 8000490:	091b      	lsrs	r3, r3, #4
 8000492:	4298      	cmp	r0, r3
 8000494:	d301      	bcc.n	800049a <__clzsi2+0x22>
 8000496:	0900      	lsrs	r0, r0, #4
 8000498:	3904      	subs	r1, #4
 800049a:	a202      	add	r2, pc, #8	; (adr r2, 80004a4 <__clzsi2+0x2c>)
 800049c:	5c10      	ldrb	r0, [r2, r0]
 800049e:	1840      	adds	r0, r0, r1
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	02020304 	.word	0x02020304
 80004a8:	01010101 	.word	0x01010101
	...

080004b4 <__clzdi2>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	2900      	cmp	r1, #0
 80004b8:	d103      	bne.n	80004c2 <__clzdi2+0xe>
 80004ba:	f7ff ffdd 	bl	8000478 <__clzsi2>
 80004be:	3020      	adds	r0, #32
 80004c0:	e002      	b.n	80004c8 <__clzdi2+0x14>
 80004c2:	0008      	movs	r0, r1
 80004c4:	f7ff ffd8 	bl	8000478 <__clzsi2>
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b09d      	sub	sp, #116	; 0x74
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t onebyte[1];
	int32_t preambule;
	uint8_t data[58];
	uint8_t buffer[20];
	uint8_t dt = 0;
 80004d2:	236b      	movs	r3, #107	; 0x6b
 80004d4:	18fb      	adds	r3, r7, r3
 80004d6:	2200      	movs	r2, #0
 80004d8:	701a      	strb	r2, [r3, #0]
	uint8_t count = 0;
 80004da:	236a      	movs	r3, #106	; 0x6a
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	2200      	movs	r2, #0
 80004e0:	701a      	strb	r2, [r3, #0]
	uint8_t satcount = 0;
 80004e2:	2369      	movs	r3, #105	; 0x69
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	2200      	movs	r2, #0
 80004e8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ea:	f000 feb1 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ee:	f000 f997 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f2:	f000 fb9f 	bl	8000c34 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f6:	f000 fb7f 	bl	8000bf8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80004fa:	f000 fa91 	bl	8000a20 <MX_LPUART1_UART_Init>
  MX_ADC_Init();
 80004fe:	f000 fa0b 	bl	8000918 <MX_ADC_Init>
  MX_USART1_UART_Init();
 8000502:	f000 fabb 	bl	8000a7c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000506:	f000 fae9 	bl	8000adc <MX_SPI1_Init>
  MX_TIM21_Init();
 800050a:	f000 fb1f 	bl	8000b4c <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(DC_boost_GPIO_Port, DC_boost_Pin, GPIO_PIN_SET);
 800050e:	2380      	movs	r3, #128	; 0x80
 8000510:	0159      	lsls	r1, r3, #5
 8000512:	23a0      	movs	r3, #160	; 0xa0
 8000514:	05db      	lsls	r3, r3, #23
 8000516:	2201      	movs	r2, #1
 8000518:	0018      	movs	r0, r3
 800051a:	f001 fcc1 	bl	8001ea0 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 800051e:	20c8      	movs	r0, #200	; 0xc8
 8000520:	f000 ff06 	bl	8001330 <HAL_Delay>
 //HAL_GPIO_WritePin(Battery_on_GPIO_Port, Battery_on_Pin, GPIO_PIN_SET);
 // HAL_GPIO_WritePin(RADIO_EN_GPIO_Port, RADIO_EN_Pin, GPIO_PIN_RESET)


    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	01db      	lsls	r3, r3, #7
 8000528:	4ab0      	ldr	r2, [pc, #704]	; (80007ec <main+0x320>)
 800052a:	0019      	movs	r1, r3
 800052c:	0010      	movs	r0, r2
 800052e:	f001 fcd4 	bl	8001eda <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000532:	20c8      	movs	r0, #200	; 0xc8
 8000534:	f000 fefc 	bl	8001330 <HAL_Delay>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	01db      	lsls	r3, r3, #7
 800053c:	4aab      	ldr	r2, [pc, #684]	; (80007ec <main+0x320>)
 800053e:	0019      	movs	r1, r3
 8000540:	0010      	movs	r0, r2
 8000542:	f001 fcca 	bl	8001eda <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000546:	20c8      	movs	r0, #200	; 0xc8
 8000548:	f000 fef2 	bl	8001330 <HAL_Delay>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	01db      	lsls	r3, r3, #7
 8000550:	4aa6      	ldr	r2, [pc, #664]	; (80007ec <main+0x320>)
 8000552:	0019      	movs	r1, r3
 8000554:	0010      	movs	r0, r2
 8000556:	f001 fcc0 	bl	8001eda <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 800055a:	20c8      	movs	r0, #200	; 0xc8
 800055c:	f000 fee8 	bl	8001330 <HAL_Delay>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000560:	2380      	movs	r3, #128	; 0x80
 8000562:	01db      	lsls	r3, r3, #7
 8000564:	4aa1      	ldr	r2, [pc, #644]	; (80007ec <main+0x320>)
 8000566:	0019      	movs	r1, r3
 8000568:	0010      	movs	r0, r2
 800056a:	f001 fcb6 	bl	8001eda <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 800056e:	20c8      	movs	r0, #200	; 0xc8
 8000570:	f000 fede 	bl	8001330 <HAL_Delay>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	01db      	lsls	r3, r3, #7
 8000578:	4a9c      	ldr	r2, [pc, #624]	; (80007ec <main+0x320>)
 800057a:	0019      	movs	r1, r3
 800057c:	0010      	movs	r0, r2
 800057e:	f001 fcac 	bl	8001eda <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000582:	20c8      	movs	r0, #200	; 0xc8
 8000584:	f000 fed4 	bl	8001330 <HAL_Delay>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	01db      	lsls	r3, r3, #7
 800058c:	4a97      	ldr	r2, [pc, #604]	; (80007ec <main+0x320>)
 800058e:	0019      	movs	r1, r3
 8000590:	0010      	movs	r0, r2
 8000592:	f001 fca2 	bl	8001eda <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000596:	20c8      	movs	r0, #200	; 0xc8
 8000598:	f000 feca 	bl	8001330 <HAL_Delay>

    HAL_GPIO_WritePin(GPS_ON_GPIO_Port, GPS_ON_Pin, GPIO_PIN_SET);
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	01db      	lsls	r3, r3, #7
 80005a0:	4893      	ldr	r0, [pc, #588]	; (80007f0 <main+0x324>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	0019      	movs	r1, r3
 80005a6:	f001 fc7b 	bl	8001ea0 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart1, (uint8_t*)&"START\r\n", 7, 10);
 80005aa:	4992      	ldr	r1, [pc, #584]	; (80007f4 <main+0x328>)
 80005ac:	4892      	ldr	r0, [pc, #584]	; (80007f8 <main+0x32c>)
 80005ae:	230a      	movs	r3, #10
 80005b0:	2207      	movs	r2, #7
 80005b2:	f003 f875 	bl	80036a0 <HAL_UART_Transmit>
    HAL_Delay(500);
 80005b6:	23fa      	movs	r3, #250	; 0xfa
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 feb8 	bl	8001330 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	        if(HAL_OK == HAL_UART_Receive(&hlpuart1, onebyte, 1, 100))
 80005c0:	2454      	movs	r4, #84	; 0x54
 80005c2:	1939      	adds	r1, r7, r4
 80005c4:	488d      	ldr	r0, [pc, #564]	; (80007fc <main+0x330>)
 80005c6:	2364      	movs	r3, #100	; 0x64
 80005c8:	2201      	movs	r2, #1
 80005ca:	f003 f909 	bl	80037e0 <HAL_UART_Receive>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d1f6      	bne.n	80005c0 <main+0xf4>
	        {
	        	if (dt==1) {
 80005d2:	236b      	movs	r3, #107	; 0x6b
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d000      	beq.n	80005de <main+0x112>
 80005dc:	e0f0      	b.n	80007c0 <main+0x2f4>
	            	if (count < 58){
 80005de:	206a      	movs	r0, #106	; 0x6a
 80005e0:	183b      	adds	r3, r7, r0
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b39      	cmp	r3, #57	; 0x39
 80005e6:	d80b      	bhi.n	8000600 <main+0x134>
	            	  data[count] = onebyte[0];
 80005e8:	183b      	adds	r3, r7, r0
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	193a      	adds	r2, r7, r4
 80005ee:	7811      	ldrb	r1, [r2, #0]
 80005f0:	2218      	movs	r2, #24
 80005f2:	18ba      	adds	r2, r7, r2
 80005f4:	54d1      	strb	r1, [r2, r3]
	            	  count++;
 80005f6:	183b      	adds	r3, r7, r0
 80005f8:	781a      	ldrb	r2, [r3, #0]
 80005fa:	183b      	adds	r3, r7, r0
 80005fc:	3201      	adds	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
	            	}
	            	if (count > 57) {
 8000600:	236a      	movs	r3, #106	; 0x6a
 8000602:	18fb      	adds	r3, r7, r3
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b39      	cmp	r3, #57	; 0x39
 8000608:	d800      	bhi.n	800060c <main+0x140>
 800060a:	e0d9      	b.n	80007c0 <main+0x2f4>
	            	  dt = 0;
 800060c:	236b      	movs	r3, #107	; 0x6b
 800060e:	18fb      	adds	r3, r7, r3
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
	            	  int32_t lat = data[1] << 24  |  data[2] << 16  |  data[3] << 8 | data[4];
 8000614:	2418      	movs	r4, #24
 8000616:	193b      	adds	r3, r7, r4
 8000618:	785b      	ldrb	r3, [r3, #1]
 800061a:	061a      	lsls	r2, r3, #24
 800061c:	193b      	adds	r3, r7, r4
 800061e:	789b      	ldrb	r3, [r3, #2]
 8000620:	041b      	lsls	r3, r3, #16
 8000622:	431a      	orrs	r2, r3
 8000624:	193b      	adds	r3, r7, r4
 8000626:	78db      	ldrb	r3, [r3, #3]
 8000628:	021b      	lsls	r3, r3, #8
 800062a:	4313      	orrs	r3, r2
 800062c:	193a      	adds	r2, r7, r4
 800062e:	7912      	ldrb	r2, [r2, #4]
 8000630:	4313      	orrs	r3, r2
 8000632:	667b      	str	r3, [r7, #100]	; 0x64
	            	  int32_t lon = data[5] << 24  |  data[6] << 16  |  data[7] << 8 | data[8];
 8000634:	193b      	adds	r3, r7, r4
 8000636:	795b      	ldrb	r3, [r3, #5]
 8000638:	061a      	lsls	r2, r3, #24
 800063a:	193b      	adds	r3, r7, r4
 800063c:	799b      	ldrb	r3, [r3, #6]
 800063e:	041b      	lsls	r3, r3, #16
 8000640:	431a      	orrs	r2, r3
 8000642:	193b      	adds	r3, r7, r4
 8000644:	79db      	ldrb	r3, [r3, #7]
 8000646:	021b      	lsls	r3, r3, #8
 8000648:	4313      	orrs	r3, r2
 800064a:	193a      	adds	r2, r7, r4
 800064c:	7a12      	ldrb	r2, [r2, #8]
 800064e:	4313      	orrs	r3, r2
 8000650:	663b      	str	r3, [r7, #96]	; 0x60
	            	  int32_t alt =  data[9] << 16  |  data[10] << 8 | data[11];
 8000652:	193b      	adds	r3, r7, r4
 8000654:	7a5b      	ldrb	r3, [r3, #9]
 8000656:	041a      	lsls	r2, r3, #16
 8000658:	193b      	adds	r3, r7, r4
 800065a:	7a9b      	ldrb	r3, [r3, #10]
 800065c:	021b      	lsls	r3, r3, #8
 800065e:	4313      	orrs	r3, r2
 8000660:	193a      	adds	r2, r7, r4
 8000662:	7ad2      	ldrb	r2, [r2, #11]
 8000664:	4313      	orrs	r3, r2
 8000666:	65fb      	str	r3, [r7, #92]	; 0x5c
	            	  int32_t gps_time =  data[18] << 16  |  data[19] << 8 | data[20];
 8000668:	193b      	adds	r3, r7, r4
 800066a:	7c9b      	ldrb	r3, [r3, #18]
 800066c:	041a      	lsls	r2, r3, #16
 800066e:	193b      	adds	r3, r7, r4
 8000670:	7cdb      	ldrb	r3, [r3, #19]
 8000672:	021b      	lsls	r3, r3, #8
 8000674:	4313      	orrs	r3, r2
 8000676:	193a      	adds	r2, r7, r4
 8000678:	7d12      	ldrb	r2, [r2, #20]
 800067a:	4313      	orrs	r3, r2
 800067c:	65bb      	str	r3, [r7, #88]	; 0x58
	     	          HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin);
 800067e:	2380      	movs	r3, #128	; 0x80
 8000680:	01db      	lsls	r3, r3, #7
 8000682:	4a5a      	ldr	r2, [pc, #360]	; (80007ec <main+0x320>)
 8000684:	0019      	movs	r1, r3
 8000686:	0010      	movs	r0, r2
 8000688:	f001 fc27 	bl	8001eda <HAL_GPIO_TogglePin>

	            	  sprintf(buffer, "Lat %d ", lat);
 800068c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800068e:	495c      	ldr	r1, [pc, #368]	; (8000800 <main+0x334>)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	0018      	movs	r0, r3
 8000694:	f003 fe38 	bl	8004308 <siprintf>
	            	  HAL_UART_Transmit(&huart1, (uint8_t*)&buffer, strlen(buffer),10);
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	0018      	movs	r0, r3
 800069c:	f7ff fd34 	bl	8000108 <strlen>
 80006a0:	0003      	movs	r3, r0
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	1d39      	adds	r1, r7, #4
 80006a6:	4854      	ldr	r0, [pc, #336]	; (80007f8 <main+0x32c>)
 80006a8:	230a      	movs	r3, #10
 80006aa:	f002 fff9 	bl	80036a0 <HAL_UART_Transmit>
	            	  sprintf(buffer, "Long %d ", lon);
 80006ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80006b0:	4954      	ldr	r1, [pc, #336]	; (8000804 <main+0x338>)
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	0018      	movs	r0, r3
 80006b6:	f003 fe27 	bl	8004308 <siprintf>
	            	  HAL_UART_Transmit(&huart1, (uint8_t*)&buffer, strlen(buffer),10);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	0018      	movs	r0, r3
 80006be:	f7ff fd23 	bl	8000108 <strlen>
 80006c2:	0003      	movs	r3, r0
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	1d39      	adds	r1, r7, #4
 80006c8:	484b      	ldr	r0, [pc, #300]	; (80007f8 <main+0x32c>)
 80006ca:	230a      	movs	r3, #10
 80006cc:	f002 ffe8 	bl	80036a0 <HAL_UART_Transmit>
	            	  sprintf(buffer, "Alt %d ", alt);
 80006d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80006d2:	494d      	ldr	r1, [pc, #308]	; (8000808 <main+0x33c>)
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	0018      	movs	r0, r3
 80006d8:	f003 fe16 	bl	8004308 <siprintf>
	            	  HAL_UART_Transmit(&huart1, (uint8_t*)&buffer, strlen(buffer),10);
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	0018      	movs	r0, r3
 80006e0:	f7ff fd12 	bl	8000108 <strlen>
 80006e4:	0003      	movs	r3, r0
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	1d39      	adds	r1, r7, #4
 80006ea:	4843      	ldr	r0, [pc, #268]	; (80007f8 <main+0x32c>)
 80006ec:	230a      	movs	r3, #10
 80006ee:	f002 ffd7 	bl	80036a0 <HAL_UART_Transmit>
	            	  sprintf(buffer, "Time %d ", gps_time);
 80006f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80006f4:	4945      	ldr	r1, [pc, #276]	; (800080c <main+0x340>)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	0018      	movs	r0, r3
 80006fa:	f003 fe05 	bl	8004308 <siprintf>
	            	  HAL_UART_Transmit(&huart1, (uint8_t*)&buffer, strlen(buffer),10);
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	0018      	movs	r0, r3
 8000702:	f7ff fd01 	bl	8000108 <strlen>
 8000706:	0003      	movs	r3, r0
 8000708:	b29a      	uxth	r2, r3
 800070a:	1d39      	adds	r1, r7, #4
 800070c:	483a      	ldr	r0, [pc, #232]	; (80007f8 <main+0x32c>)
 800070e:	230a      	movs	r3, #10
 8000710:	f002 ffc6 	bl	80036a0 <HAL_UART_Transmit>
	            	  sprintf(buffer, "Fix %d ", data[0]);
 8000714:	193b      	adds	r3, r7, r4
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	001a      	movs	r2, r3
 800071a:	493d      	ldr	r1, [pc, #244]	; (8000810 <main+0x344>)
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	0018      	movs	r0, r3
 8000720:	f003 fdf2 	bl	8004308 <siprintf>
	            	  HAL_UART_Transmit(&huart1, (uint8_t*)&buffer, strlen(buffer),10);
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	0018      	movs	r0, r3
 8000728:	f7ff fcee 	bl	8000108 <strlen>
 800072c:	0003      	movs	r3, r0
 800072e:	b29a      	uxth	r2, r3
 8000730:	1d39      	adds	r1, r7, #4
 8000732:	4831      	ldr	r0, [pc, #196]	; (80007f8 <main+0x32c>)
 8000734:	230a      	movs	r3, #10
 8000736:	f002 ffb3 	bl	80036a0 <HAL_UART_Transmit>
	            	  	 satcount=0;
 800073a:	2369      	movs	r3, #105	; 0x69
 800073c:	18fb      	adds	r3, r7, r3
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
	            	  for(uint8_t i = 0; i<12; i++){
 8000742:	2368      	movs	r3, #104	; 0x68
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
 800074a:	e014      	b.n	8000776 <main+0x2aa>
	            		  if(data[24+i]>0){
 800074c:	2368      	movs	r3, #104	; 0x68
 800074e:	18fb      	adds	r3, r7, r3
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	3318      	adds	r3, #24
 8000754:	2218      	movs	r2, #24
 8000756:	18ba      	adds	r2, r7, r2
 8000758:	5cd3      	ldrb	r3, [r2, r3]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d005      	beq.n	800076a <main+0x29e>
	            			  satcount++;
 800075e:	2169      	movs	r1, #105	; 0x69
 8000760:	187b      	adds	r3, r7, r1
 8000762:	781a      	ldrb	r2, [r3, #0]
 8000764:	187b      	adds	r3, r7, r1
 8000766:	3201      	adds	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]
	            	  for(uint8_t i = 0; i<12; i++){
 800076a:	2168      	movs	r1, #104	; 0x68
 800076c:	187b      	adds	r3, r7, r1
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	187b      	adds	r3, r7, r1
 8000772:	3201      	adds	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	2368      	movs	r3, #104	; 0x68
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b0b      	cmp	r3, #11
 800077e:	d9e5      	bls.n	800074c <main+0x280>
	            		  }
	            	  }
	            	  sprintf(buffer, "Sat %d ", satcount);
 8000780:	2369      	movs	r3, #105	; 0x69
 8000782:	18fb      	adds	r3, r7, r3
 8000784:	781a      	ldrb	r2, [r3, #0]
 8000786:	4923      	ldr	r1, [pc, #140]	; (8000814 <main+0x348>)
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	0018      	movs	r0, r3
 800078c:	f003 fdbc 	bl	8004308 <siprintf>
	            	  HAL_UART_Transmit(&huart1, (uint8_t*)&buffer, strlen(buffer),10);
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	0018      	movs	r0, r3
 8000794:	f7ff fcb8 	bl	8000108 <strlen>
 8000798:	0003      	movs	r3, r0
 800079a:	b29a      	uxth	r2, r3
 800079c:	1d39      	adds	r1, r7, #4
 800079e:	4816      	ldr	r0, [pc, #88]	; (80007f8 <main+0x32c>)
 80007a0:	230a      	movs	r3, #10
 80007a2:	f002 ff7d 	bl	80036a0 <HAL_UART_Transmit>

	            	  HAL_UART_Transmit(&huart1, (uint8_t*)&"\r\n", 2,10);
 80007a6:	491c      	ldr	r1, [pc, #112]	; (8000818 <main+0x34c>)
 80007a8:	4813      	ldr	r0, [pc, #76]	; (80007f8 <main+0x32c>)
 80007aa:	230a      	movs	r3, #10
 80007ac:	2202      	movs	r2, #2
 80007ae:	f002 ff77 	bl	80036a0 <HAL_UART_Transmit>

	     	          HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin);
 80007b2:	2380      	movs	r3, #128	; 0x80
 80007b4:	01db      	lsls	r3, r3, #7
 80007b6:	4a0d      	ldr	r2, [pc, #52]	; (80007ec <main+0x320>)
 80007b8:	0019      	movs	r1, r3
 80007ba:	0010      	movs	r0, r2
 80007bc:	f001 fb8d 	bl	8001eda <HAL_GPIO_TogglePin>
	                }
	           }

	        	preambule = (preambule << 8) | onebyte[0];
 80007c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007c2:	021b      	lsls	r3, r3, #8
 80007c4:	2254      	movs	r2, #84	; 0x54
 80007c6:	18ba      	adds	r2, r7, r2
 80007c8:	7812      	ldrb	r2, [r2, #0]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	66fb      	str	r3, [r7, #108]	; 0x6c

	            if (preambule == 0xAAAAAA03){
 80007ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007d0:	4a12      	ldr	r2, [pc, #72]	; (800081c <main+0x350>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d000      	beq.n	80007d8 <main+0x30c>
 80007d6:	e6f3      	b.n	80005c0 <main+0xf4>
	              //  HAL_UART_Transmit(&huart1, "!!!", 3,10);
	                dt = 1;
 80007d8:	236b      	movs	r3, #107	; 0x6b
 80007da:	18fb      	adds	r3, r7, r3
 80007dc:	2201      	movs	r2, #1
 80007de:	701a      	strb	r2, [r3, #0]
	                count = 0;
 80007e0:	236a      	movs	r3, #106	; 0x6a
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
	        if(HAL_OK == HAL_UART_Receive(&hlpuart1, onebyte, 1, 100))
 80007e8:	e6ea      	b.n	80005c0 <main+0xf4>
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	50000800 	.word	0x50000800
 80007f0:	50000400 	.word	0x50000400
 80007f4:	08004c6c 	.word	0x08004c6c
 80007f8:	2000015c 	.word	0x2000015c
 80007fc:	200000d4 	.word	0x200000d4
 8000800:	08004c74 	.word	0x08004c74
 8000804:	08004c7c 	.word	0x08004c7c
 8000808:	08004c88 	.word	0x08004c88
 800080c:	08004c90 	.word	0x08004c90
 8000810:	08004c9c 	.word	0x08004c9c
 8000814:	08004ca4 	.word	0x08004ca4
 8000818:	08004cac 	.word	0x08004cac
 800081c:	aaaaaa03 	.word	0xaaaaaa03

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b09b      	sub	sp, #108	; 0x6c
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	2434      	movs	r4, #52	; 0x34
 8000828:	193b      	adds	r3, r7, r4
 800082a:	0018      	movs	r0, r3
 800082c:	2334      	movs	r3, #52	; 0x34
 800082e:	001a      	movs	r2, r3
 8000830:	2100      	movs	r1, #0
 8000832:	f003 fd89 	bl	8004348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000836:	2320      	movs	r3, #32
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	0018      	movs	r0, r3
 800083c:	2314      	movs	r3, #20
 800083e:	001a      	movs	r2, r3
 8000840:	2100      	movs	r1, #0
 8000842:	f003 fd81 	bl	8004348 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	0018      	movs	r0, r3
 800084a:	231c      	movs	r3, #28
 800084c:	001a      	movs	r2, r3
 800084e:	2100      	movs	r1, #0
 8000850:	f003 fd7a 	bl	8004348 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000854:	4b2e      	ldr	r3, [pc, #184]	; (8000910 <SystemClock_Config+0xf0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a2e      	ldr	r2, [pc, #184]	; (8000914 <SystemClock_Config+0xf4>)
 800085a:	401a      	ands	r2, r3
 800085c:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <SystemClock_Config+0xf0>)
 800085e:	2180      	movs	r1, #128	; 0x80
 8000860:	0109      	lsls	r1, r1, #4
 8000862:	430a      	orrs	r2, r1
 8000864:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000866:	0021      	movs	r1, r4
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2201      	movs	r2, #1
 800086c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2280      	movs	r2, #128	; 0x80
 8000872:	0252      	lsls	r2, r2, #9
 8000874:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2202      	movs	r2, #2
 800087a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	0252      	lsls	r2, r2, #9
 8000882:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2200      	movs	r2, #0
 8000888:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	0412      	lsls	r2, r2, #16
 8000890:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000892:	187b      	adds	r3, r7, r1
 8000894:	0018      	movs	r0, r3
 8000896:	f001 fb3b 	bl	8001f10 <HAL_RCC_OscConfig>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800089e:	f000 fabf 	bl	8000e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	2120      	movs	r1, #32
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	220f      	movs	r2, #15
 80008a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2203      	movs	r2, #3
 80008ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2100      	movs	r1, #0
 80008c6:	0018      	movs	r0, r3
 80008c8:	f001 fe8c 	bl	80025e4 <HAL_RCC_ClockConfig>
 80008cc:	1e03      	subs	r3, r0, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008d0:	f000 faa6 	bl	8000e20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2205      	movs	r2, #5
 80008d8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	0018      	movs	r0, r3
 80008ea:	f002 f94d 	bl	8002b88 <HAL_RCCEx_PeriphCLKConfig>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80008f2:	f000 fa95 	bl	8000e20 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80008f6:	2380      	movs	r3, #128	; 0x80
 80008f8:	045b      	lsls	r3, r3, #17
 80008fa:	2200      	movs	r2, #0
 80008fc:	0019      	movs	r1, r3
 80008fe:	2000      	movs	r0, #0
 8000900:	f001 ffb8 	bl	8002874 <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000904:	f002 f83a 	bl	800297c <HAL_RCC_EnableCSS>
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	b01b      	add	sp, #108	; 0x6c
 800090e:	bd90      	pop	{r4, r7, pc}
 8000910:	40007000 	.word	0x40007000
 8000914:	ffffe7ff 	.word	0xffffe7ff

08000918 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800091e:	003b      	movs	r3, r7
 8000920:	0018      	movs	r0, r3
 8000922:	2308      	movs	r3, #8
 8000924:	001a      	movs	r2, r3
 8000926:	2100      	movs	r1, #0
 8000928:	f003 fd0e 	bl	8004348 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800092c:	4b37      	ldr	r3, [pc, #220]	; (8000a0c <MX_ADC_Init+0xf4>)
 800092e:	4a38      	ldr	r2, [pc, #224]	; (8000a10 <MX_ADC_Init+0xf8>)
 8000930:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000932:	4b36      	ldr	r3, [pc, #216]	; (8000a0c <MX_ADC_Init+0xf4>)
 8000934:	2200      	movs	r2, #0
 8000936:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000938:	4b34      	ldr	r3, [pc, #208]	; (8000a0c <MX_ADC_Init+0xf4>)
 800093a:	22c0      	movs	r2, #192	; 0xc0
 800093c:	0612      	lsls	r2, r2, #24
 800093e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000940:	4b32      	ldr	r3, [pc, #200]	; (8000a0c <MX_ADC_Init+0xf4>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000946:	4b31      	ldr	r3, [pc, #196]	; (8000a0c <MX_ADC_Init+0xf4>)
 8000948:	2200      	movs	r2, #0
 800094a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800094c:	4b2f      	ldr	r3, [pc, #188]	; (8000a0c <MX_ADC_Init+0xf4>)
 800094e:	2201      	movs	r2, #1
 8000950:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000952:	4b2e      	ldr	r3, [pc, #184]	; (8000a0c <MX_ADC_Init+0xf4>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000958:	4b2c      	ldr	r3, [pc, #176]	; (8000a0c <MX_ADC_Init+0xf4>)
 800095a:	2220      	movs	r2, #32
 800095c:	2100      	movs	r1, #0
 800095e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000960:	4b2a      	ldr	r3, [pc, #168]	; (8000a0c <MX_ADC_Init+0xf4>)
 8000962:	2221      	movs	r2, #33	; 0x21
 8000964:	2100      	movs	r1, #0
 8000966:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000968:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <MX_ADC_Init+0xf4>)
 800096a:	2200      	movs	r2, #0
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800096e:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <MX_ADC_Init+0xf4>)
 8000970:	22c2      	movs	r2, #194	; 0xc2
 8000972:	32ff      	adds	r2, #255	; 0xff
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000976:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <MX_ADC_Init+0xf4>)
 8000978:	222c      	movs	r2, #44	; 0x2c
 800097a:	2100      	movs	r1, #0
 800097c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800097e:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <MX_ADC_Init+0xf4>)
 8000980:	2204      	movs	r2, #4
 8000982:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000984:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <MX_ADC_Init+0xf4>)
 8000986:	2200      	movs	r2, #0
 8000988:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800098a:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <MX_ADC_Init+0xf4>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <MX_ADC_Init+0xf4>)
 8000992:	2200      	movs	r2, #0
 8000994:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000996:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <MX_ADC_Init+0xf4>)
 8000998:	2200      	movs	r2, #0
 800099a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <MX_ADC_Init+0xf4>)
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 fcea 	bl	8001378 <HAL_ADC_Init>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80009a8:	f000 fa3a 	bl	8000e20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009ac:	003b      	movs	r3, r7
 80009ae:	4a19      	ldr	r2, [pc, #100]	; (8000a14 <MX_ADC_Init+0xfc>)
 80009b0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80009b2:	003b      	movs	r3, r7
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	0152      	lsls	r2, r2, #5
 80009b8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009ba:	003a      	movs	r2, r7
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_ADC_Init+0xf4>)
 80009be:	0011      	movs	r1, r2
 80009c0:	0018      	movs	r0, r3
 80009c2:	f000 fe4d 	bl	8001660 <HAL_ADC_ConfigChannel>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d001      	beq.n	80009ce <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80009ca:	f000 fa29 	bl	8000e20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80009ce:	003b      	movs	r3, r7
 80009d0:	4a11      	ldr	r2, [pc, #68]	; (8000a18 <MX_ADC_Init+0x100>)
 80009d2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009d4:	003a      	movs	r2, r7
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <MX_ADC_Init+0xf4>)
 80009d8:	0011      	movs	r1, r2
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 fe40 	bl	8001660 <HAL_ADC_ConfigChannel>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d001      	beq.n	80009e8 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80009e4:	f000 fa1c 	bl	8000e20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80009e8:	003b      	movs	r3, r7
 80009ea:	4a0c      	ldr	r2, [pc, #48]	; (8000a1c <MX_ADC_Init+0x104>)
 80009ec:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009ee:	003a      	movs	r2, r7
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_ADC_Init+0xf4>)
 80009f2:	0011      	movs	r1, r2
 80009f4:	0018      	movs	r0, r3
 80009f6:	f000 fe33 	bl	8001660 <HAL_ADC_ConfigChannel>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 80009fe:	f000 fa0f 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b002      	add	sp, #8
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	20000078 	.word	0x20000078
 8000a10:	40012400 	.word	0x40012400
 8000a14:	24000200 	.word	0x24000200
 8000a18:	34002000 	.word	0x34002000
 8000a1c:	38004000 	.word	0x38004000

08000a20 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_LPUART1_UART_Init+0x54>)
 8000a26:	4a14      	ldr	r2, [pc, #80]	; (8000a78 <MX_LPUART1_UART_Init+0x58>)
 8000a28:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 38400;
 8000a2a:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_LPUART1_UART_Init+0x54>)
 8000a2c:	2296      	movs	r2, #150	; 0x96
 8000a2e:	0212      	lsls	r2, r2, #8
 8000a30:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <MX_LPUART1_UART_Init+0x54>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_LPUART1_UART_Init+0x54>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <MX_LPUART1_UART_Init+0x54>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_LPUART1_UART_Init+0x54>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <MX_LPUART1_UART_Init+0x54>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <MX_LPUART1_UART_Init+0x54>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <MX_LPUART1_UART_Init+0x54>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <MX_LPUART1_UART_Init+0x54>)
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f002 fdca 	bl	80035f8 <HAL_UART_Init>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d001      	beq.n	8000a6c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000a68:	f000 f9da 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	200000d4 	.word	0x200000d4
 8000a78:	40004800 	.word	0x40004800

08000a7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000a82:	4a15      	ldr	r2, [pc, #84]	; (8000ad8 <MX_USART1_UART_Init+0x5c>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000a88:	22e1      	movs	r2, #225	; 0xe1
 8000a8a:	0252      	lsls	r2, r2, #9
 8000a8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f002 fd99 	bl	80035f8 <HAL_UART_Init>
 8000ac6:	1e03      	subs	r3, r0, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000aca:	f000 f9a9 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000015c 	.word	0x2000015c
 8000ad8:	40013800 	.word	0x40013800

08000adc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000ae2:	4a19      	ldr	r2, [pc, #100]	; (8000b48 <MX_SPI1_Init+0x6c>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000ae8:	2282      	movs	r2, #130	; 0x82
 8000aea:	0052      	lsls	r2, r2, #1
 8000aec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b00:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000b08:	2280      	movs	r2, #128	; 0x80
 8000b0a:	02d2      	lsls	r2, r2, #11
 8000b0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000b28:	2207      	movs	r2, #7
 8000b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f002 f964 	bl	8002dfc <HAL_SPI_Init>
 8000b34:	1e03      	subs	r3, r0, #0
 8000b36:	d001      	beq.n	8000b3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b38:	f000 f972 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	2000022c 	.word	0x2000022c
 8000b48:	40013000 	.word	0x40013000

08000b4c <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b52:	2308      	movs	r3, #8
 8000b54:	18fb      	adds	r3, r7, r3
 8000b56:	0018      	movs	r0, r3
 8000b58:	2310      	movs	r3, #16
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	f003 fbf3 	bl	8004348 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b62:	003b      	movs	r3, r7
 8000b64:	0018      	movs	r0, r3
 8000b66:	2308      	movs	r3, #8
 8000b68:	001a      	movs	r2, r3
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	f003 fbec 	bl	8004348 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000b70:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <MX_TIM21_Init+0xa0>)
 8000b72:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <MX_TIM21_Init+0xa4>)
 8000b74:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <MX_TIM21_Init+0xa0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <MX_TIM21_Init+0xa0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_TIM21_Init+0xa0>)
 8000b84:	4a1b      	ldr	r2, [pc, #108]	; (8000bf4 <MX_TIM21_Init+0xa8>)
 8000b86:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_TIM21_Init+0xa0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_TIM21_Init+0xa0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <MX_TIM21_Init+0xa0>)
 8000b96:	0018      	movs	r0, r3
 8000b98:	f002 f9c4 	bl	8002f24 <HAL_TIM_Base_Init>
 8000b9c:	1e03      	subs	r3, r0, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000ba0:	f000 f93e 	bl	8000e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2280      	movs	r2, #128	; 0x80
 8000baa:	0152      	lsls	r2, r2, #5
 8000bac:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000bae:	187a      	adds	r2, r7, r1
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_TIM21_Init+0xa0>)
 8000bb2:	0011      	movs	r1, r2
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f002 fadd 	bl	8003174 <HAL_TIM_ConfigClockSource>
 8000bba:	1e03      	subs	r3, r0, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 8000bbe:	f000 f92f 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc2:	003b      	movs	r3, r7
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc8:	003b      	movs	r3, r7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000bce:	003a      	movs	r2, r7
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_TIM21_Init+0xa0>)
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f002 fcb7 	bl	8003548 <HAL_TIMEx_MasterConfigSynchronization>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8000bde:	f000 f91f 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b006      	add	sp, #24
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	20000284 	.word	0x20000284
 8000bf0:	40010800 	.word	0x40010800
 8000bf4:	0000ffff 	.word	0x0000ffff

08000bf8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <MX_DMA_Init+0x38>)
 8000c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <MX_DMA_Init+0x38>)
 8000c04:	2101      	movs	r1, #1
 8000c06:	430a      	orrs	r2, r1
 8000c08:	631a      	str	r2, [r3, #48]	; 0x30
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MX_DMA_Init+0x38>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4013      	ands	r3, r2
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	200a      	movs	r0, #10
 8000c1c:	f000 fe72 	bl	8001904 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000c20:	200a      	movs	r0, #10
 8000c22:	f000 fe84 	bl	800192e <HAL_NVIC_EnableIRQ>

}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b002      	add	sp, #8
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	40021000 	.word	0x40021000

08000c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b08b      	sub	sp, #44	; 0x2c
 8000c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	2414      	movs	r4, #20
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	0018      	movs	r0, r3
 8000c40:	2314      	movs	r3, #20
 8000c42:	001a      	movs	r2, r3
 8000c44:	2100      	movs	r1, #0
 8000c46:	f003 fb7f 	bl	8004348 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	4b6e      	ldr	r3, [pc, #440]	; (8000e04 <MX_GPIO_Init+0x1d0>)
 8000c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c4e:	4b6d      	ldr	r3, [pc, #436]	; (8000e04 <MX_GPIO_Init+0x1d0>)
 8000c50:	2104      	movs	r1, #4
 8000c52:	430a      	orrs	r2, r1
 8000c54:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c56:	4b6b      	ldr	r3, [pc, #428]	; (8000e04 <MX_GPIO_Init+0x1d0>)
 8000c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5a:	2204      	movs	r2, #4
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c62:	4b68      	ldr	r3, [pc, #416]	; (8000e04 <MX_GPIO_Init+0x1d0>)
 8000c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c66:	4b67      	ldr	r3, [pc, #412]	; (8000e04 <MX_GPIO_Init+0x1d0>)
 8000c68:	2180      	movs	r1, #128	; 0x80
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c6e:	4b65      	ldr	r3, [pc, #404]	; (8000e04 <MX_GPIO_Init+0x1d0>)
 8000c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c72:	2280      	movs	r2, #128	; 0x80
 8000c74:	4013      	ands	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	4b62      	ldr	r3, [pc, #392]	; (8000e04 <MX_GPIO_Init+0x1d0>)
 8000c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c7e:	4b61      	ldr	r3, [pc, #388]	; (8000e04 <MX_GPIO_Init+0x1d0>)
 8000c80:	2101      	movs	r1, #1
 8000c82:	430a      	orrs	r2, r1
 8000c84:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c86:	4b5f      	ldr	r3, [pc, #380]	; (8000e04 <MX_GPIO_Init+0x1d0>)
 8000c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	4b5c      	ldr	r3, [pc, #368]	; (8000e04 <MX_GPIO_Init+0x1d0>)
 8000c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c96:	4b5b      	ldr	r3, [pc, #364]	; (8000e04 <MX_GPIO_Init+0x1d0>)
 8000c98:	2102      	movs	r1, #2
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c9e:	4b59      	ldr	r3, [pc, #356]	; (8000e04 <MX_GPIO_Init+0x1d0>)
 8000ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000caa:	4b56      	ldr	r3, [pc, #344]	; (8000e04 <MX_GPIO_Init+0x1d0>)
 8000cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cae:	4b55      	ldr	r3, [pc, #340]	; (8000e04 <MX_GPIO_Init+0x1d0>)
 8000cb0:	2108      	movs	r1, #8
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cb6:	4b53      	ldr	r3, [pc, #332]	; (8000e04 <MX_GPIO_Init+0x1d0>)
 8000cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cba:	2208      	movs	r2, #8
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|EXPANSION_1_Pin|EXPANSION_2_Pin|Temp_EN_Pin
 8000cc2:	4951      	ldr	r1, [pc, #324]	; (8000e08 <MX_GPIO_Init+0x1d4>)
 8000cc4:	4b51      	ldr	r3, [pc, #324]	; (8000e0c <MX_GPIO_Init+0x1d8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f001 f8e9 	bl	8001ea0 <HAL_GPIO_WritePin>
                          |ADF_CLK_Pin|ADF_Data_Pin|ADF_LE_Pin|Heater_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EXPANSION_4_Pin|EXPANSION_PS_Pin|DC_boost_Pin, GPIO_PIN_RESET);
 8000cce:	4950      	ldr	r1, [pc, #320]	; (8000e10 <MX_GPIO_Init+0x1dc>)
 8000cd0:	23a0      	movs	r3, #160	; 0xa0
 8000cd2:	05db      	lsls	r3, r3, #23
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f001 f8e2 	bl	8001ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RF_Boost_Pin|ADF_TX_Data_Pin|GPS_ON_Pin|RADIO_EN_Pin
 8000cdc:	494d      	ldr	r1, [pc, #308]	; (8000e14 <MX_GPIO_Init+0x1e0>)
 8000cde:	4b4e      	ldr	r3, [pc, #312]	; (8000e18 <MX_GPIO_Init+0x1e4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f001 f8dc 	bl	8001ea0 <HAL_GPIO_WritePin>
                          |Trmp_R4_Pin|Temp_R2_Pin|Temp_R1_Pin|EXPANSION_3_Pin
                          |Temp_R5_Pin|Temp_R3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Battery_on_GPIO_Port, Battery_on_Pin, GPIO_PIN_RESET);
 8000ce8:	4b4c      	ldr	r3, [pc, #304]	; (8000e1c <MX_GPIO_Init+0x1e8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	2104      	movs	r1, #4
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f001 f8d6 	bl	8001ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_Pin TL555_in_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|TL555_in_Pin;
 8000cf4:	193b      	adds	r3, r7, r4
 8000cf6:	2281      	movs	r2, #129	; 0x81
 8000cf8:	0192      	lsls	r2, r2, #6
 8000cfa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfc:	193b      	adds	r3, r7, r4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	193b      	adds	r3, r7, r4
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d08:	193b      	adds	r3, r7, r4
 8000d0a:	4a40      	ldr	r2, [pc, #256]	; (8000e0c <MX_GPIO_Init+0x1d8>)
 8000d0c:	0019      	movs	r1, r3
 8000d0e:	0010      	movs	r0, r2
 8000d10:	f000 ff50 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin EXPANSION_1_Pin EXPANSION_2_Pin Temp_EN_Pin
                           ADF_CLK_Pin ADF_Data_Pin ADF_LE_Pin Heater_Pin */
  GPIO_InitStruct.Pin = LED_Pin|EXPANSION_1_Pin|EXPANSION_2_Pin|Temp_EN_Pin
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	4a3c      	ldr	r2, [pc, #240]	; (8000e08 <MX_GPIO_Init+0x1d4>)
 8000d18:	601a      	str	r2, [r3, #0]
                          |ADF_CLK_Pin|ADF_Data_Pin|ADF_LE_Pin|Heater_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	193b      	adds	r3, r7, r4
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	193b      	adds	r3, r7, r4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2c:	193b      	adds	r3, r7, r4
 8000d2e:	4a37      	ldr	r2, [pc, #220]	; (8000e0c <MX_GPIO_Init+0x1d8>)
 8000d30:	0019      	movs	r1, r3
 8000d32:	0010      	movs	r0, r2
 8000d34:	f000 ff3e 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_RX_Pin */
  GPIO_InitStruct.Pin = IR_RX_Pin;
 8000d38:	193b      	adds	r3, r7, r4
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3e:	193b      	adds	r3, r7, r4
 8000d40:	2200      	movs	r2, #0
 8000d42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IR_RX_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	193a      	adds	r2, r7, r4
 8000d4c:	23a0      	movs	r3, #160	; 0xa0
 8000d4e:	05db      	lsls	r3, r3, #23
 8000d50:	0011      	movs	r1, r2
 8000d52:	0018      	movs	r0, r3
 8000d54:	f000 ff2e 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXPANSION_4_Pin EXPANSION_PS_Pin DC_boost_Pin */
  GPIO_InitStruct.Pin = EXPANSION_4_Pin|EXPANSION_PS_Pin|DC_boost_Pin;
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	4a2d      	ldr	r2, [pc, #180]	; (8000e10 <MX_GPIO_Init+0x1dc>)
 8000d5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	2201      	movs	r2, #1
 8000d62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	193b      	adds	r3, r7, r4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	193a      	adds	r2, r7, r4
 8000d72:	23a0      	movs	r3, #160	; 0xa0
 8000d74:	05db      	lsls	r3, r3, #23
 8000d76:	0011      	movs	r1, r2
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f000 ff1b 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_Boost_Pin ADF_TX_Data_Pin GPS_ON_Pin RADIO_EN_Pin
                           Trmp_R4_Pin Temp_R2_Pin Temp_R1_Pin EXPANSION_3_Pin
                           Temp_R5_Pin Temp_R3_Pin */
  GPIO_InitStruct.Pin = RF_Boost_Pin|ADF_TX_Data_Pin|GPS_ON_Pin|RADIO_EN_Pin
 8000d7e:	193b      	adds	r3, r7, r4
 8000d80:	4a24      	ldr	r2, [pc, #144]	; (8000e14 <MX_GPIO_Init+0x1e0>)
 8000d82:	601a      	str	r2, [r3, #0]
                          |Trmp_R4_Pin|Temp_R2_Pin|Temp_R1_Pin|EXPANSION_3_Pin
                          |Temp_R5_Pin|Temp_R3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	193b      	adds	r3, r7, r4
 8000d86:	2201      	movs	r2, #1
 8000d88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	193b      	adds	r3, r7, r4
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	4a1f      	ldr	r2, [pc, #124]	; (8000e18 <MX_GPIO_Init+0x1e4>)
 8000d9a:	0019      	movs	r1, r3
 8000d9c:	0010      	movs	r0, r2
 8000d9e:	f000 ff09 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000da2:	0021      	movs	r1, r4
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2280      	movs	r2, #128	; 0x80
 8000da8:	0052      	lsls	r2, r2, #1
 8000daa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	000c      	movs	r4, r1
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	2202      	movs	r2, #2
 8000db2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	193b      	adds	r3, r7, r4
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	193b      	adds	r3, r7, r4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000dc0:	193b      	adds	r3, r7, r4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	193a      	adds	r2, r7, r4
 8000dc8:	23a0      	movs	r3, #160	; 0xa0
 8000dca:	05db      	lsls	r3, r3, #23
 8000dcc:	0011      	movs	r1, r2
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f000 fef0 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Battery_on_Pin */
  GPIO_InitStruct.Pin = Battery_on_Pin;
 8000dd4:	0021      	movs	r1, r4
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	2204      	movs	r2, #4
 8000dda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2201      	movs	r2, #1
 8000de0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Battery_on_GPIO_Port, &GPIO_InitStruct);
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <MX_GPIO_Init+0x1e8>)
 8000df2:	0019      	movs	r1, r3
 8000df4:	0010      	movs	r0, r2
 8000df6:	f000 fedd 	bl	8001bb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b00b      	add	sp, #44	; 0x2c
 8000e00:	bd90      	pop	{r4, r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	40021000 	.word	0x40021000
 8000e08:	000053a3 	.word	0x000053a3
 8000e0c:	50000800 	.word	0x50000800
 8000e10:	0000100c 	.word	0x0000100c
 8000e14:	0000f3f0 	.word	0x0000f3f0
 8000e18:	50000400 	.word	0x50000400
 8000e1c:	50000c00 	.word	0x50000c00

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <Error_Handler+0x8>
	...

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <HAL_MspInit+0x24>)
 8000e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_MspInit+0x24>)
 8000e36:	2101      	movs	r1, #1
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <HAL_MspInit+0x24>)
 8000e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <HAL_MspInit+0x24>)
 8000e42:	2180      	movs	r1, #128	; 0x80
 8000e44:	0549      	lsls	r1, r1, #21
 8000e46:	430a      	orrs	r2, r1
 8000e48:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40021000 	.word	0x40021000

08000e54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b08b      	sub	sp, #44	; 0x2c
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	2414      	movs	r4, #20
 8000e5e:	193b      	adds	r3, r7, r4
 8000e60:	0018      	movs	r0, r3
 8000e62:	2314      	movs	r3, #20
 8000e64:	001a      	movs	r2, r3
 8000e66:	2100      	movs	r1, #0
 8000e68:	f003 fa6e 	bl	8004348 <memset>
  if(hadc->Instance==ADC1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a22      	ldr	r2, [pc, #136]	; (8000efc <HAL_ADC_MspInit+0xa8>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d13d      	bne.n	8000ef2 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e76:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <HAL_ADC_MspInit+0xac>)
 8000e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <HAL_ADC_MspInit+0xac>)
 8000e7c:	2180      	movs	r1, #128	; 0x80
 8000e7e:	0089      	lsls	r1, r1, #2
 8000e80:	430a      	orrs	r2, r1
 8000e82:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e84:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <HAL_ADC_MspInit+0xac>)
 8000e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e88:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <HAL_ADC_MspInit+0xac>)
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e90:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <HAL_ADC_MspInit+0xac>)
 8000e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e94:	2204      	movs	r2, #4
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <HAL_ADC_MspInit+0xac>)
 8000e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ea0:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <HAL_ADC_MspInit+0xac>)
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_ADC_MspInit+0xac>)
 8000eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eac:	2202      	movs	r2, #2
 8000eae:	4013      	ands	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC3     ------> ADC_IN13
    PC4     ------> ADC_IN14
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = Heater_ADC_2_Pin|Temp_ADC_Pin;
 8000eb4:	193b      	adds	r3, r7, r4
 8000eb6:	2218      	movs	r2, #24
 8000eb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eba:	193b      	adds	r3, r7, r4
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	193b      	adds	r3, r7, r4
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec6:	193b      	adds	r3, r7, r4
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <HAL_ADC_MspInit+0xb0>)
 8000eca:	0019      	movs	r1, r3
 8000ecc:	0010      	movs	r0, r2
 8000ece:	f000 fe71 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Heater_ADC_1_Pin;
 8000ed2:	0021      	movs	r1, r4
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	2203      	movs	r2, #3
 8000ede:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Heater_ADC_1_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_ADC_MspInit+0xb4>)
 8000eea:	0019      	movs	r1, r3
 8000eec:	0010      	movs	r0, r2
 8000eee:	f000 fe61 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b00b      	add	sp, #44	; 0x2c
 8000ef8:	bd90      	pop	{r4, r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	40012400 	.word	0x40012400
 8000f00:	40021000 	.word	0x40021000
 8000f04:	50000800 	.word	0x50000800
 8000f08:	50000400 	.word	0x50000400

08000f0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b08b      	sub	sp, #44	; 0x2c
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	2414      	movs	r4, #20
 8000f16:	193b      	adds	r3, r7, r4
 8000f18:	0018      	movs	r0, r3
 8000f1a:	2314      	movs	r3, #20
 8000f1c:	001a      	movs	r2, r3
 8000f1e:	2100      	movs	r1, #0
 8000f20:	f003 fa12 	bl	8004348 <memset>
  if(huart->Instance==LPUART1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a45      	ldr	r2, [pc, #276]	; (8001040 <HAL_UART_MspInit+0x134>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d12a      	bne.n	8000f84 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f2e:	4b45      	ldr	r3, [pc, #276]	; (8001044 <HAL_UART_MspInit+0x138>)
 8000f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f32:	4b44      	ldr	r3, [pc, #272]	; (8001044 <HAL_UART_MspInit+0x138>)
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	02c9      	lsls	r1, r1, #11
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3c:	4b41      	ldr	r3, [pc, #260]	; (8001044 <HAL_UART_MspInit+0x138>)
 8000f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f40:	4b40      	ldr	r3, [pc, #256]	; (8001044 <HAL_UART_MspInit+0x138>)
 8000f42:	2104      	movs	r1, #4
 8000f44:	430a      	orrs	r2, r1
 8000f46:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f48:	4b3e      	ldr	r3, [pc, #248]	; (8001044 <HAL_UART_MspInit+0x138>)
 8000f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PC10     ------> LPUART1_TX
    PC11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f54:	193b      	adds	r3, r7, r4
 8000f56:	22c0      	movs	r2, #192	; 0xc0
 8000f58:	0112      	lsls	r2, r2, #4
 8000f5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	0021      	movs	r1, r4
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	2202      	movs	r2, #2
 8000f62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_LPUART1;
 8000f70:	187b      	adds	r3, r7, r1
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	4a33      	ldr	r2, [pc, #204]	; (8001048 <HAL_UART_MspInit+0x13c>)
 8000f7a:	0019      	movs	r1, r3
 8000f7c:	0010      	movs	r0, r2
 8000f7e:	f000 fe19 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f82:	e058      	b.n	8001036 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a30      	ldr	r2, [pc, #192]	; (800104c <HAL_UART_MspInit+0x140>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d153      	bne.n	8001036 <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f8e:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <HAL_UART_MspInit+0x138>)
 8000f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f92:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <HAL_UART_MspInit+0x138>)
 8000f94:	2180      	movs	r1, #128	; 0x80
 8000f96:	01c9      	lsls	r1, r1, #7
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9c:	4b29      	ldr	r3, [pc, #164]	; (8001044 <HAL_UART_MspInit+0x138>)
 8000f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fa0:	4b28      	ldr	r3, [pc, #160]	; (8001044 <HAL_UART_MspInit+0x138>)
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fa8:	4b26      	ldr	r3, [pc, #152]	; (8001044 <HAL_UART_MspInit+0x138>)
 8000faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fac:	2201      	movs	r2, #1
 8000fae:	4013      	ands	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fb4:	2114      	movs	r1, #20
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	22c0      	movs	r2, #192	; 0xc0
 8000fba:	00d2      	lsls	r2, r2, #3
 8000fbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	187a      	adds	r2, r7, r1
 8000fd8:	23a0      	movs	r3, #160	; 0xa0
 8000fda:	05db      	lsls	r3, r3, #23
 8000fdc:	0011      	movs	r1, r2
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f000 fde8 	bl	8001bb4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <HAL_UART_MspInit+0x144>)
 8000fe6:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <HAL_UART_MspInit+0x148>)
 8000fe8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <HAL_UART_MspInit+0x144>)
 8000fec:	2203      	movs	r2, #3
 8000fee:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_UART_MspInit+0x144>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_UART_MspInit+0x144>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_UART_MspInit+0x144>)
 8000ffe:	2280      	movs	r2, #128	; 0x80
 8001000:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <HAL_UART_MspInit+0x144>)
 8001004:	2200      	movs	r2, #0
 8001006:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_UART_MspInit+0x144>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <HAL_UART_MspInit+0x144>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_UART_MspInit+0x144>)
 8001016:	2200      	movs	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <HAL_UART_MspInit+0x144>)
 800101c:	0018      	movs	r0, r3
 800101e:	f000 fca3 	bl	8001968 <HAL_DMA_Init>
 8001022:	1e03      	subs	r3, r0, #0
 8001024:	d001      	beq.n	800102a <HAL_UART_MspInit+0x11e>
      Error_Handler();
 8001026:	f7ff fefb 	bl	8000e20 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a08      	ldr	r2, [pc, #32]	; (8001050 <HAL_UART_MspInit+0x144>)
 800102e:	675a      	str	r2, [r3, #116]	; 0x74
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <HAL_UART_MspInit+0x144>)
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b00b      	add	sp, #44	; 0x2c
 800103c:	bd90      	pop	{r4, r7, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	40004800 	.word	0x40004800
 8001044:	40021000 	.word	0x40021000
 8001048:	50000800 	.word	0x50000800
 800104c:	40013800 	.word	0x40013800
 8001050:	200001e4 	.word	0x200001e4
 8001054:	40020030 	.word	0x40020030

08001058 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	240c      	movs	r4, #12
 8001062:	193b      	adds	r3, r7, r4
 8001064:	0018      	movs	r0, r3
 8001066:	2314      	movs	r3, #20
 8001068:	001a      	movs	r2, r3
 800106a:	2100      	movs	r1, #0
 800106c:	f003 f96c 	bl	8004348 <memset>
  if(hspi->Instance==SPI1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a18      	ldr	r2, [pc, #96]	; (80010d8 <HAL_SPI_MspInit+0x80>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d129      	bne.n	80010ce <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <HAL_SPI_MspInit+0x84>)
 800107c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_SPI_MspInit+0x84>)
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	0149      	lsls	r1, r1, #5
 8001084:	430a      	orrs	r2, r1
 8001086:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <HAL_SPI_MspInit+0x84>)
 800108a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <HAL_SPI_MspInit+0x84>)
 800108e:	2101      	movs	r1, #1
 8001090:	430a      	orrs	r2, r1
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_SPI_MspInit+0x84>)
 8001096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001098:	2201      	movs	r2, #1
 800109a:	4013      	ands	r3, r2
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010a0:	0021      	movs	r1, r4
 80010a2:	187b      	adds	r3, r7, r1
 80010a4:	22f0      	movs	r2, #240	; 0xf0
 80010a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	2202      	movs	r2, #2
 80010ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	187b      	adds	r3, r7, r1
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	2203      	movs	r2, #3
 80010b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	187a      	adds	r2, r7, r1
 80010c2:	23a0      	movs	r3, #160	; 0xa0
 80010c4:	05db      	lsls	r3, r3, #23
 80010c6:	0011      	movs	r1, r2
 80010c8:	0018      	movs	r0, r3
 80010ca:	f000 fd73 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b009      	add	sp, #36	; 0x24
 80010d4:	bd90      	pop	{r4, r7, pc}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	40013000 	.word	0x40013000
 80010dc:	40021000 	.word	0x40021000

080010e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <HAL_TIM_Base_MspInit+0x38>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d10d      	bne.n	800110e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_TIM_Base_MspInit+0x3c>)
 80010f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_TIM_Base_MspInit+0x3c>)
 80010f8:	2104      	movs	r1, #4
 80010fa:	430a      	orrs	r2, r1
 80010fc:	635a      	str	r2, [r3, #52]	; 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2014      	movs	r0, #20
 8001104:	f000 fbfe 	bl	8001904 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8001108:	2014      	movs	r0, #20
 800110a:	f000 fc10 	bl	800192e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	b002      	add	sp, #8
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	40010800 	.word	0x40010800
 800111c:	40021000 	.word	0x40021000

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001124:	f001 fd14 	bl	8002b50 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <NMI_Handler+0x8>

0800112a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <HardFault_Handler+0x4>

08001130 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001148:	f000 f8d6 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <DMA1_Channel2_3_IRQHandler+0x14>)
 800115a:	0018      	movs	r0, r3
 800115c:	f000 fc7c 	bl	8001a58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	200001e4 	.word	0x200001e4

0800116c <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <TIM21_IRQHandler+0x14>)
 8001172:	0018      	movs	r0, r3
 8001174:	f001 ff16 	bl	8002fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	20000284 	.word	0x20000284

08001184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800118c:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <_sbrk+0x5c>)
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <_sbrk+0x60>)
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <_sbrk+0x64>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <_sbrk+0x64>)
 80011a2:	4a12      	ldr	r2, [pc, #72]	; (80011ec <_sbrk+0x68>)
 80011a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	18d3      	adds	r3, r2, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d207      	bcs.n	80011c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b4:	f003 f8d0 	bl	8004358 <__errno>
 80011b8:	0003      	movs	r3, r0
 80011ba:	220c      	movs	r2, #12
 80011bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011be:	2301      	movs	r3, #1
 80011c0:	425b      	negs	r3, r3
 80011c2:	e009      	b.n	80011d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	18d2      	adds	r2, r2, r3
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <_sbrk+0x64>)
 80011d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80011d6:	68fb      	ldr	r3, [r7, #12]
}
 80011d8:	0018      	movs	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	b006      	add	sp, #24
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20002000 	.word	0x20002000
 80011e4:	00000400 	.word	0x00000400
 80011e8:	200002c4 	.word	0x200002c4
 80011ec:	20000418 	.word	0x20000418

080011f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f4:	46c0      	nop			; (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80011fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001200:	f7ff fff6 	bl	80011f0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <LoopForever+0x6>)
  ldr r1, =_edata
 8001206:	490d      	ldr	r1, [pc, #52]	; (800123c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <LoopForever+0xe>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <LoopForever+0x12>)
  ldr r4, =_ebss
 800121c:	4c0a      	ldr	r4, [pc, #40]	; (8001248 <LoopForever+0x16>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800122a:	f003 f89b 	bl	8004364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122e:	f7ff f94d 	bl	80004cc <main>

08001232 <LoopForever>:

LoopForever:
    b LoopForever
 8001232:	e7fe      	b.n	8001232 <LoopForever>
   ldr   r0, =_estack
 8001234:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001240:	08004d60 	.word	0x08004d60
  ldr r2, =_sbss
 8001244:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001248:	20000414 	.word	0x20000414

0800124c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC1_COMP_IRQHandler>
	...

08001250 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_Init+0x3c>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_Init+0x3c>)
 8001262:	2140      	movs	r1, #64	; 0x40
 8001264:	430a      	orrs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001268:	2003      	movs	r0, #3
 800126a:	f000 f811 	bl	8001290 <HAL_InitTick>
 800126e:	1e03      	subs	r3, r0, #0
 8001270:	d003      	beq.n	800127a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]
 8001278:	e001      	b.n	800127e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800127a:	f7ff fdd7 	bl	8000e2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	781b      	ldrb	r3, [r3, #0]
}
 8001282:	0018      	movs	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	b002      	add	sp, #8
 8001288:	bd80      	pop	{r7, pc}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	40022000 	.word	0x40022000

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_InitTick+0x5c>)
 800129a:	681c      	ldr	r4, [r3, #0]
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <HAL_InitTick+0x60>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	0019      	movs	r1, r3
 80012a2:	23fa      	movs	r3, #250	; 0xfa
 80012a4:	0098      	lsls	r0, r3, #2
 80012a6:	f7fe ff41 	bl	800012c <__udivsi3>
 80012aa:	0003      	movs	r3, r0
 80012ac:	0019      	movs	r1, r3
 80012ae:	0020      	movs	r0, r4
 80012b0:	f7fe ff3c 	bl	800012c <__udivsi3>
 80012b4:	0003      	movs	r3, r0
 80012b6:	0018      	movs	r0, r3
 80012b8:	f000 fb49 	bl	800194e <HAL_SYSTICK_Config>
 80012bc:	1e03      	subs	r3, r0, #0
 80012be:	d001      	beq.n	80012c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e00f      	b.n	80012e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d80b      	bhi.n	80012e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	2301      	movs	r3, #1
 80012ce:	425b      	negs	r3, r3
 80012d0:	2200      	movs	r2, #0
 80012d2:	0018      	movs	r0, r3
 80012d4:	f000 fb16 	bl	8001904 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_InitTick+0x64>)
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e000      	b.n	80012e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	0018      	movs	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b003      	add	sp, #12
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	20000000 	.word	0x20000000
 80012f0:	20000008 	.word	0x20000008
 80012f4:	20000004 	.word	0x20000004

080012f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_IncTick+0x1c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	001a      	movs	r2, r3
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_IncTick+0x20>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	18d2      	adds	r2, r2, r3
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_IncTick+0x20>)
 800130a:	601a      	str	r2, [r3, #0]
}
 800130c:	46c0      	nop			; (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	20000008 	.word	0x20000008
 8001318:	200002c8 	.word	0x200002c8

0800131c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b02      	ldr	r3, [pc, #8]	; (800132c <HAL_GetTick+0x10>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	0018      	movs	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	200002c8 	.word	0x200002c8

08001330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001338:	f7ff fff0 	bl	800131c <HAL_GetTick>
 800133c:	0003      	movs	r3, r0
 800133e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3301      	adds	r3, #1
 8001348:	d005      	beq.n	8001356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_Delay+0x44>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	001a      	movs	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	189b      	adds	r3, r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	f7ff ffe0 	bl	800131c <HAL_GetTick>
 800135c:	0002      	movs	r2, r0
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d8f7      	bhi.n	8001358 <HAL_Delay+0x28>
  {
  }
}
 8001368:	46c0      	nop			; (mov r8, r8)
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	46bd      	mov	sp, r7
 800136e:	b004      	add	sp, #16
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	20000008 	.word	0x20000008

08001378 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e159      	b.n	800163e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138e:	2b00      	cmp	r3, #0
 8001390:	d10a      	bne.n	80013a8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2250      	movs	r2, #80	; 0x50
 800139c:	2100      	movs	r1, #0
 800139e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	0018      	movs	r0, r3
 80013a4:	f7ff fd56 	bl	8000e54 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ac:	2210      	movs	r2, #16
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b10      	cmp	r3, #16
 80013b2:	d005      	beq.n	80013c0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2204      	movs	r2, #4
 80013bc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80013be:	d00b      	beq.n	80013d8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c4:	2210      	movs	r2, #16
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2250      	movs	r2, #80	; 0x50
 80013d0:	2100      	movs	r1, #0
 80013d2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e132      	b.n	800163e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013dc:	4a9a      	ldr	r2, [pc, #616]	; (8001648 <HAL_ADC_Init+0x2d0>)
 80013de:	4013      	ands	r3, r2
 80013e0:	2202      	movs	r2, #2
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2203      	movs	r2, #3
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d108      	bne.n	8001408 <HAL_ADC_Init+0x90>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2201      	movs	r2, #1
 80013fe:	4013      	ands	r3, r2
 8001400:	2b01      	cmp	r3, #1
 8001402:	d101      	bne.n	8001408 <HAL_ADC_Init+0x90>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <HAL_ADC_Init+0x92>
 8001408:	2300      	movs	r3, #0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d149      	bne.n	80014a2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	23c0      	movs	r3, #192	; 0xc0
 8001414:	061b      	lsls	r3, r3, #24
 8001416:	429a      	cmp	r2, r3
 8001418:	d00b      	beq.n	8001432 <HAL_ADC_Init+0xba>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	05db      	lsls	r3, r3, #23
 8001422:	429a      	cmp	r2, r3
 8001424:	d005      	beq.n	8001432 <HAL_ADC_Init+0xba>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	061b      	lsls	r3, r3, #24
 800142e:	429a      	cmp	r2, r3
 8001430:	d111      	bne.n	8001456 <HAL_ADC_Init+0xde>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	691a      	ldr	r2, [r3, #16]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	0092      	lsls	r2, r2, #2
 800143e:	0892      	lsrs	r2, r2, #2
 8001440:	611a      	str	r2, [r3, #16]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6919      	ldr	r1, [r3, #16]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	e014      	b.n	8001480 <HAL_ADC_Init+0x108>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	0092      	lsls	r2, r2, #2
 8001462:	0892      	lsrs	r2, r2, #2
 8001464:	611a      	str	r2, [r3, #16]
 8001466:	4b79      	ldr	r3, [pc, #484]	; (800164c <HAL_ADC_Init+0x2d4>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4b78      	ldr	r3, [pc, #480]	; (800164c <HAL_ADC_Init+0x2d4>)
 800146c:	4978      	ldr	r1, [pc, #480]	; (8001650 <HAL_ADC_Init+0x2d8>)
 800146e:	400a      	ands	r2, r1
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	4b76      	ldr	r3, [pc, #472]	; (800164c <HAL_ADC_Init+0x2d4>)
 8001474:	6819      	ldr	r1, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	4b74      	ldr	r3, [pc, #464]	; (800164c <HAL_ADC_Init+0x2d4>)
 800147c:	430a      	orrs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2118      	movs	r1, #24
 800148c:	438a      	bics	r2, r1
 800148e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68d9      	ldr	r1, [r3, #12]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80014a2:	4b6a      	ldr	r3, [pc, #424]	; (800164c <HAL_ADC_Init+0x2d4>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4b69      	ldr	r3, [pc, #420]	; (800164c <HAL_ADC_Init+0x2d4>)
 80014a8:	496a      	ldr	r1, [pc, #424]	; (8001654 <HAL_ADC_Init+0x2dc>)
 80014aa:	400a      	ands	r2, r1
 80014ac:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80014ae:	4b67      	ldr	r3, [pc, #412]	; (800164c <HAL_ADC_Init+0x2d4>)
 80014b0:	6819      	ldr	r1, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b6:	065a      	lsls	r2, r3, #25
 80014b8:	4b64      	ldr	r3, [pc, #400]	; (800164c <HAL_ADC_Init+0x2d4>)
 80014ba:	430a      	orrs	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	055b      	lsls	r3, r3, #21
 80014c8:	4013      	ands	r3, r2
 80014ca:	d108      	bne.n	80014de <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2180      	movs	r1, #128	; 0x80
 80014d8:	0549      	lsls	r1, r1, #21
 80014da:	430a      	orrs	r2, r1
 80014dc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	495b      	ldr	r1, [pc, #364]	; (8001658 <HAL_ADC_Init+0x2e0>)
 80014ea:	400a      	ands	r2, r1
 80014ec:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68d9      	ldr	r1, [r3, #12]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d101      	bne.n	8001504 <HAL_ADC_Init+0x18c>
 8001500:	2304      	movs	r3, #4
 8001502:	e000      	b.n	8001506 <HAL_ADC_Init+0x18e>
 8001504:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001506:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2020      	movs	r0, #32
 800150c:	5c1b      	ldrb	r3, [r3, r0]
 800150e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001510:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	202c      	movs	r0, #44	; 0x2c
 8001516:	5c1b      	ldrb	r3, [r3, r0]
 8001518:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800151a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001520:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001528:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001530:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800153e:	23c2      	movs	r3, #194	; 0xc2
 8001540:	33ff      	adds	r3, #255	; 0xff
 8001542:	429a      	cmp	r2, r3
 8001544:	d00b      	beq.n	800155e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68d9      	ldr	r1, [r3, #12]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2221      	movs	r2, #33	; 0x21
 8001562:	5c9b      	ldrb	r3, [r3, r2]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d11a      	bne.n	800159e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2220      	movs	r2, #32
 800156c:	5c9b      	ldrb	r3, [r3, r2]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d109      	bne.n	8001586 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	0249      	lsls	r1, r1, #9
 8001580:	430a      	orrs	r2, r1
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	e00b      	b.n	800159e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158a:	2220      	movs	r2, #32
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001596:	2201      	movs	r2, #1
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d11f      	bne.n	80015e6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	492a      	ldr	r1, [pc, #168]	; (800165c <HAL_ADC_Init+0x2e4>)
 80015b2:	400a      	ands	r2, r1
 80015b4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6919      	ldr	r1, [r3, #16]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80015c4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80015ca:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	691a      	ldr	r2, [r3, #16]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2101      	movs	r1, #1
 80015e0:	430a      	orrs	r2, r1
 80015e2:	611a      	str	r2, [r3, #16]
 80015e4:	e00e      	b.n	8001604 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	2201      	movs	r2, #1
 80015ee:	4013      	ands	r3, r2
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d107      	bne.n	8001604 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	691a      	ldr	r2, [r3, #16]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2101      	movs	r1, #1
 8001600:	438a      	bics	r2, r1
 8001602:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	695a      	ldr	r2, [r3, #20]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2107      	movs	r1, #7
 8001610:	438a      	bics	r2, r1
 8001612:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6959      	ldr	r1, [r3, #20]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001630:	2203      	movs	r2, #3
 8001632:	4393      	bics	r3, r2
 8001634:	2201      	movs	r2, #1
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	0018      	movs	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	b002      	add	sp, #8
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	fffffefd 	.word	0xfffffefd
 800164c:	40012708 	.word	0x40012708
 8001650:	ffc3ffff 	.word	0xffc3ffff
 8001654:	fdffffff 	.word	0xfdffffff
 8001658:	fffe0219 	.word	0xfffe0219
 800165c:	fffffc03 	.word	0xfffffc03

08001660 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2250      	movs	r2, #80	; 0x50
 800166e:	5c9b      	ldrb	r3, [r3, r2]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x18>
 8001674:	2302      	movs	r3, #2
 8001676:	e06c      	b.n	8001752 <HAL_ADC_ConfigChannel+0xf2>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2250      	movs	r2, #80	; 0x50
 800167c:	2101      	movs	r1, #1
 800167e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2204      	movs	r2, #4
 8001688:	4013      	ands	r3, r2
 800168a:	d00b      	beq.n	80016a4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001690:	2220      	movs	r2, #32
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2250      	movs	r2, #80	; 0x50
 800169c:	2100      	movs	r1, #0
 800169e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e056      	b.n	8001752 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4a2c      	ldr	r2, [pc, #176]	; (800175c <HAL_ADC_ConfigChannel+0xfc>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d028      	beq.n	8001700 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	035b      	lsls	r3, r3, #13
 80016ba:	0b5a      	lsrs	r2, r3, #13
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	02db      	lsls	r3, r3, #11
 80016cc:	4013      	ands	r3, r2
 80016ce:	d009      	beq.n	80016e4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80016d0:	4b23      	ldr	r3, [pc, #140]	; (8001760 <HAL_ADC_ConfigChannel+0x100>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b22      	ldr	r3, [pc, #136]	; (8001760 <HAL_ADC_ConfigChannel+0x100>)
 80016d6:	2180      	movs	r1, #128	; 0x80
 80016d8:	0409      	lsls	r1, r1, #16
 80016da:	430a      	orrs	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80016de:	200a      	movs	r0, #10
 80016e0:	f000 f844 	bl	800176c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	029b      	lsls	r3, r3, #10
 80016ec:	4013      	ands	r3, r2
 80016ee:	d02b      	beq.n	8001748 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_ADC_ConfigChannel+0x100>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <HAL_ADC_ConfigChannel+0x100>)
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	03c9      	lsls	r1, r1, #15
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	e023      	b.n	8001748 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	035b      	lsls	r3, r3, #13
 800170c:	0b5b      	lsrs	r3, r3, #13
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	400a      	ands	r2, r1
 8001716:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	02db      	lsls	r3, r3, #11
 8001720:	4013      	ands	r3, r2
 8001722:	d005      	beq.n	8001730 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_ADC_ConfigChannel+0x100>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <HAL_ADC_ConfigChannel+0x100>)
 800172a:	490e      	ldr	r1, [pc, #56]	; (8001764 <HAL_ADC_ConfigChannel+0x104>)
 800172c:	400a      	ands	r2, r1
 800172e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	029b      	lsls	r3, r3, #10
 8001738:	4013      	ands	r3, r2
 800173a:	d005      	beq.n	8001748 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <HAL_ADC_ConfigChannel+0x100>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b07      	ldr	r3, [pc, #28]	; (8001760 <HAL_ADC_ConfigChannel+0x100>)
 8001742:	4909      	ldr	r1, [pc, #36]	; (8001768 <HAL_ADC_ConfigChannel+0x108>)
 8001744:	400a      	ands	r2, r1
 8001746:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2250      	movs	r2, #80	; 0x50
 800174c:	2100      	movs	r1, #0
 800174e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	0018      	movs	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	00001001 	.word	0x00001001
 8001760:	40012708 	.word	0x40012708
 8001764:	ff7fffff 	.word	0xff7fffff
 8001768:	ffbfffff 	.word	0xffbfffff

0800176c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <ADC_DelayMicroSecond+0x38>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	490b      	ldr	r1, [pc, #44]	; (80017a8 <ADC_DelayMicroSecond+0x3c>)
 800177a:	0018      	movs	r0, r3
 800177c:	f7fe fcd6 	bl	800012c <__udivsi3>
 8001780:	0003      	movs	r3, r0
 8001782:	001a      	movs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4353      	muls	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800178a:	e002      	b.n	8001792 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	3b01      	subs	r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f9      	bne.n	800178c <ADC_DelayMicroSecond+0x20>
  }
}
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	46bd      	mov	sp, r7
 800179e:	b004      	add	sp, #16
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	20000000 	.word	0x20000000
 80017a8:	000f4240 	.word	0x000f4240

080017ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	0002      	movs	r2, r0
 80017b4:	1dfb      	adds	r3, r7, #7
 80017b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017b8:	1dfb      	adds	r3, r7, #7
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b7f      	cmp	r3, #127	; 0x7f
 80017be:	d809      	bhi.n	80017d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c0:	1dfb      	adds	r3, r7, #7
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	001a      	movs	r2, r3
 80017c6:	231f      	movs	r3, #31
 80017c8:	401a      	ands	r2, r3
 80017ca:	4b04      	ldr	r3, [pc, #16]	; (80017dc <__NVIC_EnableIRQ+0x30>)
 80017cc:	2101      	movs	r1, #1
 80017ce:	4091      	lsls	r1, r2
 80017d0:	000a      	movs	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]
  }
}
 80017d4:	46c0      	nop			; (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b002      	add	sp, #8
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	e000e100 	.word	0xe000e100

080017e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	0002      	movs	r2, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	1dfb      	adds	r3, r7, #7
 80017ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017ee:	1dfb      	adds	r3, r7, #7
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b7f      	cmp	r3, #127	; 0x7f
 80017f4:	d828      	bhi.n	8001848 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017f6:	4a2f      	ldr	r2, [pc, #188]	; (80018b4 <__NVIC_SetPriority+0xd4>)
 80017f8:	1dfb      	adds	r3, r7, #7
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b25b      	sxtb	r3, r3
 80017fe:	089b      	lsrs	r3, r3, #2
 8001800:	33c0      	adds	r3, #192	; 0xc0
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	589b      	ldr	r3, [r3, r2]
 8001806:	1dfa      	adds	r2, r7, #7
 8001808:	7812      	ldrb	r2, [r2, #0]
 800180a:	0011      	movs	r1, r2
 800180c:	2203      	movs	r2, #3
 800180e:	400a      	ands	r2, r1
 8001810:	00d2      	lsls	r2, r2, #3
 8001812:	21ff      	movs	r1, #255	; 0xff
 8001814:	4091      	lsls	r1, r2
 8001816:	000a      	movs	r2, r1
 8001818:	43d2      	mvns	r2, r2
 800181a:	401a      	ands	r2, r3
 800181c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	019b      	lsls	r3, r3, #6
 8001822:	22ff      	movs	r2, #255	; 0xff
 8001824:	401a      	ands	r2, r3
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	0018      	movs	r0, r3
 800182c:	2303      	movs	r3, #3
 800182e:	4003      	ands	r3, r0
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001834:	481f      	ldr	r0, [pc, #124]	; (80018b4 <__NVIC_SetPriority+0xd4>)
 8001836:	1dfb      	adds	r3, r7, #7
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b25b      	sxtb	r3, r3
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	430a      	orrs	r2, r1
 8001840:	33c0      	adds	r3, #192	; 0xc0
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001846:	e031      	b.n	80018ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001848:	4a1b      	ldr	r2, [pc, #108]	; (80018b8 <__NVIC_SetPriority+0xd8>)
 800184a:	1dfb      	adds	r3, r7, #7
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	0019      	movs	r1, r3
 8001850:	230f      	movs	r3, #15
 8001852:	400b      	ands	r3, r1
 8001854:	3b08      	subs	r3, #8
 8001856:	089b      	lsrs	r3, r3, #2
 8001858:	3306      	adds	r3, #6
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	18d3      	adds	r3, r2, r3
 800185e:	3304      	adds	r3, #4
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	1dfa      	adds	r2, r7, #7
 8001864:	7812      	ldrb	r2, [r2, #0]
 8001866:	0011      	movs	r1, r2
 8001868:	2203      	movs	r2, #3
 800186a:	400a      	ands	r2, r1
 800186c:	00d2      	lsls	r2, r2, #3
 800186e:	21ff      	movs	r1, #255	; 0xff
 8001870:	4091      	lsls	r1, r2
 8001872:	000a      	movs	r2, r1
 8001874:	43d2      	mvns	r2, r2
 8001876:	401a      	ands	r2, r3
 8001878:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	019b      	lsls	r3, r3, #6
 800187e:	22ff      	movs	r2, #255	; 0xff
 8001880:	401a      	ands	r2, r3
 8001882:	1dfb      	adds	r3, r7, #7
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	0018      	movs	r0, r3
 8001888:	2303      	movs	r3, #3
 800188a:	4003      	ands	r3, r0
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001890:	4809      	ldr	r0, [pc, #36]	; (80018b8 <__NVIC_SetPriority+0xd8>)
 8001892:	1dfb      	adds	r3, r7, #7
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	001c      	movs	r4, r3
 8001898:	230f      	movs	r3, #15
 800189a:	4023      	ands	r3, r4
 800189c:	3b08      	subs	r3, #8
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	430a      	orrs	r2, r1
 80018a2:	3306      	adds	r3, #6
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	18c3      	adds	r3, r0, r3
 80018a8:	3304      	adds	r3, #4
 80018aa:	601a      	str	r2, [r3, #0]
}
 80018ac:	46c0      	nop			; (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b003      	add	sp, #12
 80018b2:	bd90      	pop	{r4, r7, pc}
 80018b4:	e000e100 	.word	0xe000e100
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	1e5a      	subs	r2, r3, #1
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	045b      	lsls	r3, r3, #17
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d301      	bcc.n	80018d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d0:	2301      	movs	r3, #1
 80018d2:	e010      	b.n	80018f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <SysTick_Config+0x44>)
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	3a01      	subs	r2, #1
 80018da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018dc:	2301      	movs	r3, #1
 80018de:	425b      	negs	r3, r3
 80018e0:	2103      	movs	r1, #3
 80018e2:	0018      	movs	r0, r3
 80018e4:	f7ff ff7c 	bl	80017e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <SysTick_Config+0x44>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <SysTick_Config+0x44>)
 80018f0:	2207      	movs	r2, #7
 80018f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	0018      	movs	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b002      	add	sp, #8
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	e000e010 	.word	0xe000e010

08001904 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	210f      	movs	r1, #15
 8001910:	187b      	adds	r3, r7, r1
 8001912:	1c02      	adds	r2, r0, #0
 8001914:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	187b      	adds	r3, r7, r1
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b25b      	sxtb	r3, r3
 800191e:	0011      	movs	r1, r2
 8001920:	0018      	movs	r0, r3
 8001922:	f7ff ff5d 	bl	80017e0 <__NVIC_SetPriority>
}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	46bd      	mov	sp, r7
 800192a:	b004      	add	sp, #16
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	0002      	movs	r2, r0
 8001936:	1dfb      	adds	r3, r7, #7
 8001938:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800193a:	1dfb      	adds	r3, r7, #7
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b25b      	sxtb	r3, r3
 8001940:	0018      	movs	r0, r3
 8001942:	f7ff ff33 	bl	80017ac <__NVIC_EnableIRQ>
}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	46bd      	mov	sp, r7
 800194a:	b002      	add	sp, #8
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	0018      	movs	r0, r3
 800195a:	f7ff ffaf 	bl	80018bc <SysTick_Config>
 800195e:	0003      	movs	r3, r0
}
 8001960:	0018      	movs	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	b002      	add	sp, #8
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e061      	b.n	8001a3e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a32      	ldr	r2, [pc, #200]	; (8001a48 <HAL_DMA_Init+0xe0>)
 8001980:	4694      	mov	ip, r2
 8001982:	4463      	add	r3, ip
 8001984:	2114      	movs	r1, #20
 8001986:	0018      	movs	r0, r3
 8001988:	f7fe fbd0 	bl	800012c <__udivsi3>
 800198c:	0003      	movs	r3, r0
 800198e:	009a      	lsls	r2, r3, #2
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a2d      	ldr	r2, [pc, #180]	; (8001a4c <HAL_DMA_Init+0xe4>)
 8001998:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2225      	movs	r2, #37	; 0x25
 800199e:	2102      	movs	r1, #2
 80019a0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4a28      	ldr	r2, [pc, #160]	; (8001a50 <HAL_DMA_Init+0xe8>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80019ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	4313      	orrs	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	01db      	lsls	r3, r3, #7
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d018      	beq.n	8001a26 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019f4:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <HAL_DMA_Init+0xec>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fc:	211c      	movs	r1, #28
 80019fe:	400b      	ands	r3, r1
 8001a00:	210f      	movs	r1, #15
 8001a02:	4099      	lsls	r1, r3
 8001a04:	000b      	movs	r3, r1
 8001a06:	43d9      	mvns	r1, r3
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_DMA_Init+0xec>)
 8001a0a:	400a      	ands	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_DMA_Init+0xec>)
 8001a10:	6819      	ldr	r1, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	201c      	movs	r0, #28
 8001a1c:	4003      	ands	r3, r0
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <HAL_DMA_Init+0xec>)
 8001a22:	430a      	orrs	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2225      	movs	r2, #37	; 0x25
 8001a30:	2101      	movs	r1, #1
 8001a32:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2224      	movs	r2, #36	; 0x24
 8001a38:	2100      	movs	r1, #0
 8001a3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	0018      	movs	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b004      	add	sp, #16
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	bffdfff8 	.word	0xbffdfff8
 8001a4c:	40020000 	.word	0x40020000
 8001a50:	ffff800f 	.word	0xffff800f
 8001a54:	400200a8 	.word	0x400200a8

08001a58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a74:	221c      	movs	r2, #28
 8001a76:	4013      	ands	r3, r2
 8001a78:	2204      	movs	r2, #4
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	0013      	movs	r3, r2
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4013      	ands	r3, r2
 8001a82:	d026      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x7a>
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2204      	movs	r2, #4
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d022      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2220      	movs	r2, #32
 8001a94:	4013      	ands	r3, r2
 8001a96:	d107      	bne.n	8001aa8 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2104      	movs	r1, #4
 8001aa4:	438a      	bics	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aac:	221c      	movs	r2, #28
 8001aae:	401a      	ands	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	2104      	movs	r1, #4
 8001ab6:	4091      	lsls	r1, r2
 8001ab8:	000a      	movs	r2, r1
 8001aba:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d100      	bne.n	8001ac6 <HAL_DMA_IRQHandler+0x6e>
 8001ac4:	e071      	b.n	8001baa <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	0010      	movs	r0, r2
 8001ace:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001ad0:	e06b      	b.n	8001baa <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	221c      	movs	r2, #28
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2202      	movs	r2, #2
 8001adc:	409a      	lsls	r2, r3
 8001ade:	0013      	movs	r3, r2
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d02d      	beq.n	8001b42 <HAL_DMA_IRQHandler+0xea>
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2202      	movs	r2, #2
 8001aea:	4013      	ands	r3, r2
 8001aec:	d029      	beq.n	8001b42 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2220      	movs	r2, #32
 8001af6:	4013      	ands	r3, r2
 8001af8:	d10b      	bne.n	8001b12 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	210a      	movs	r1, #10
 8001b06:	438a      	bics	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2225      	movs	r2, #37	; 0x25
 8001b0e:	2101      	movs	r1, #1
 8001b10:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	221c      	movs	r2, #28
 8001b18:	401a      	ands	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	2102      	movs	r1, #2
 8001b20:	4091      	lsls	r1, r2
 8001b22:	000a      	movs	r2, r1
 8001b24:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2224      	movs	r2, #36	; 0x24
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d039      	beq.n	8001baa <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	0010      	movs	r0, r2
 8001b3e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b40:	e033      	b.n	8001baa <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	221c      	movs	r2, #28
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	0013      	movs	r3, r2
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	4013      	ands	r3, r2
 8001b54:	d02a      	beq.n	8001bac <HAL_DMA_IRQHandler+0x154>
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2208      	movs	r2, #8
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d026      	beq.n	8001bac <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	210e      	movs	r1, #14
 8001b6a:	438a      	bics	r2, r1
 8001b6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	221c      	movs	r2, #28
 8001b74:	401a      	ands	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	4091      	lsls	r1, r2
 8001b7e:	000a      	movs	r2, r1
 8001b80:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2225      	movs	r2, #37	; 0x25
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2224      	movs	r2, #36	; 0x24
 8001b94:	2100      	movs	r1, #0
 8001b96:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	0010      	movs	r0, r2
 8001ba8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	46c0      	nop			; (mov r8, r8)
}
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b004      	add	sp, #16
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bca:	e14f      	b.n	8001e6c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4091      	lsls	r1, r2
 8001bd6:	000a      	movs	r2, r1
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d100      	bne.n	8001be4 <HAL_GPIO_Init+0x30>
 8001be2:	e140      	b.n	8001e66 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2203      	movs	r2, #3
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d005      	beq.n	8001bfc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d130      	bne.n	8001c5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2203      	movs	r2, #3
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	0013      	movs	r3, r2
 8001c0c:	43da      	mvns	r2, r3
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	0013      	movs	r3, r2
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c32:	2201      	movs	r2, #1
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
 8001c38:	0013      	movs	r3, r2
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	2201      	movs	r2, #1
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	0013      	movs	r3, r2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2203      	movs	r2, #3
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d017      	beq.n	8001c9a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	2203      	movs	r2, #3
 8001c76:	409a      	lsls	r2, r3
 8001c78:	0013      	movs	r3, r2
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	0013      	movs	r3, r2
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d123      	bne.n	8001cee <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	08da      	lsrs	r2, r3, #3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3208      	adds	r2, #8
 8001cae:	0092      	lsls	r2, r2, #2
 8001cb0:	58d3      	ldr	r3, [r2, r3]
 8001cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2207      	movs	r2, #7
 8001cb8:	4013      	ands	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	0013      	movs	r3, r2
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2107      	movs	r1, #7
 8001cd2:	400b      	ands	r3, r1
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	0013      	movs	r3, r2
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	08da      	lsrs	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3208      	adds	r2, #8
 8001ce8:	0092      	lsls	r2, r2, #2
 8001cea:	6939      	ldr	r1, [r7, #16]
 8001cec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	0013      	movs	r3, r2
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	401a      	ands	r2, r3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	409a      	lsls	r2, r3
 8001d14:	0013      	movs	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	23c0      	movs	r3, #192	; 0xc0
 8001d28:	029b      	lsls	r3, r3, #10
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d100      	bne.n	8001d30 <HAL_GPIO_Init+0x17c>
 8001d2e:	e09a      	b.n	8001e66 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d30:	4b54      	ldr	r3, [pc, #336]	; (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d34:	4b53      	ldr	r3, [pc, #332]	; (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001d36:	2101      	movs	r1, #1
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d3c:	4a52      	ldr	r2, [pc, #328]	; (8001e88 <HAL_GPIO_Init+0x2d4>)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	3302      	adds	r3, #2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	589b      	ldr	r3, [r3, r2]
 8001d48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	4013      	ands	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	220f      	movs	r2, #15
 8001d54:	409a      	lsls	r2, r3
 8001d56:	0013      	movs	r3, r2
 8001d58:	43da      	mvns	r2, r3
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	23a0      	movs	r3, #160	; 0xa0
 8001d64:	05db      	lsls	r3, r3, #23
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d019      	beq.n	8001d9e <HAL_GPIO_Init+0x1ea>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a47      	ldr	r2, [pc, #284]	; (8001e8c <HAL_GPIO_Init+0x2d8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d013      	beq.n	8001d9a <HAL_GPIO_Init+0x1e6>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a46      	ldr	r2, [pc, #280]	; (8001e90 <HAL_GPIO_Init+0x2dc>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00d      	beq.n	8001d96 <HAL_GPIO_Init+0x1e2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a45      	ldr	r2, [pc, #276]	; (8001e94 <HAL_GPIO_Init+0x2e0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d007      	beq.n	8001d92 <HAL_GPIO_Init+0x1de>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a44      	ldr	r2, [pc, #272]	; (8001e98 <HAL_GPIO_Init+0x2e4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d101      	bne.n	8001d8e <HAL_GPIO_Init+0x1da>
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	e008      	b.n	8001da0 <HAL_GPIO_Init+0x1ec>
 8001d8e:	2306      	movs	r3, #6
 8001d90:	e006      	b.n	8001da0 <HAL_GPIO_Init+0x1ec>
 8001d92:	2303      	movs	r3, #3
 8001d94:	e004      	b.n	8001da0 <HAL_GPIO_Init+0x1ec>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e002      	b.n	8001da0 <HAL_GPIO_Init+0x1ec>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_GPIO_Init+0x1ec>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	2103      	movs	r1, #3
 8001da4:	400a      	ands	r2, r1
 8001da6:	0092      	lsls	r2, r2, #2
 8001da8:	4093      	lsls	r3, r2
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db0:	4935      	ldr	r1, [pc, #212]	; (8001e88 <HAL_GPIO_Init+0x2d4>)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	3302      	adds	r3, #2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dbe:	4b37      	ldr	r3, [pc, #220]	; (8001e9c <HAL_GPIO_Init+0x2e8>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	2380      	movs	r3, #128	; 0x80
 8001dd4:	035b      	lsls	r3, r3, #13
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001de2:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <HAL_GPIO_Init+0x2e8>)
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001de8:	4b2c      	ldr	r3, [pc, #176]	; (8001e9c <HAL_GPIO_Init+0x2e8>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	43da      	mvns	r2, r3
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	039b      	lsls	r3, r3, #14
 8001e00:	4013      	ands	r3, r2
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e0c:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <HAL_GPIO_Init+0x2e8>)
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001e12:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <HAL_GPIO_Init+0x2e8>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	029b      	lsls	r3, r3, #10
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e36:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_GPIO_Init+0x2e8>)
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e3c:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <HAL_GPIO_Init+0x2e8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	43da      	mvns	r2, r3
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	025b      	lsls	r3, r3, #9
 8001e54:	4013      	ands	r3, r2
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e60:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <HAL_GPIO_Init+0x2e8>)
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	40da      	lsrs	r2, r3
 8001e74:	1e13      	subs	r3, r2, #0
 8001e76:	d000      	beq.n	8001e7a <HAL_GPIO_Init+0x2c6>
 8001e78:	e6a8      	b.n	8001bcc <HAL_GPIO_Init+0x18>
  }
}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	46c0      	nop			; (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b006      	add	sp, #24
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	50000400 	.word	0x50000400
 8001e90:	50000800 	.word	0x50000800
 8001e94:	50000c00 	.word	0x50000c00
 8001e98:	50001c00 	.word	0x50001c00
 8001e9c:	40010400 	.word	0x40010400

08001ea0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	0008      	movs	r0, r1
 8001eaa:	0011      	movs	r1, r2
 8001eac:	1cbb      	adds	r3, r7, #2
 8001eae:	1c02      	adds	r2, r0, #0
 8001eb0:	801a      	strh	r2, [r3, #0]
 8001eb2:	1c7b      	adds	r3, r7, #1
 8001eb4:	1c0a      	adds	r2, r1, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eb8:	1c7b      	adds	r3, r7, #1
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d004      	beq.n	8001eca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec0:	1cbb      	adds	r3, r7, #2
 8001ec2:	881a      	ldrh	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001ec8:	e003      	b.n	8001ed2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001eca:	1cbb      	adds	r3, r7, #2
 8001ecc:	881a      	ldrh	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b002      	add	sp, #8
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	000a      	movs	r2, r1
 8001ee4:	1cbb      	adds	r3, r7, #2
 8001ee6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eee:	1cbb      	adds	r3, r7, #2
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	041a      	lsls	r2, r3, #16
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	1cb9      	adds	r1, r7, #2
 8001efe:	8809      	ldrh	r1, [r1, #0]
 8001f00:	400b      	ands	r3, r1
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	619a      	str	r2, [r3, #24]
}
 8001f08:	46c0      	nop			; (mov r8, r8)
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b004      	add	sp, #16
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f10:	b5b0      	push	{r4, r5, r7, lr}
 8001f12:	b08a      	sub	sp, #40	; 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d102      	bne.n	8001f24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f000 fb5a 	bl	80025d8 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f24:	4bce      	ldr	r3, [pc, #824]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	220c      	movs	r2, #12
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f2e:	4bcc      	ldr	r3, [pc, #816]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	025b      	lsls	r3, r3, #9
 8001f36:	4013      	ands	r3, r2
 8001f38:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	4013      	ands	r3, r2
 8001f42:	d100      	bne.n	8001f46 <HAL_RCC_OscConfig+0x36>
 8001f44:	e07c      	b.n	8002040 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f46:	6a3b      	ldr	r3, [r7, #32]
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d007      	beq.n	8001f5c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	2b0c      	cmp	r3, #12
 8001f50:	d111      	bne.n	8001f76 <HAL_RCC_OscConfig+0x66>
 8001f52:	69fa      	ldr	r2, [r7, #28]
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	025b      	lsls	r3, r3, #9
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d10c      	bne.n	8001f76 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5c:	4bc0      	ldr	r3, [pc, #768]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	029b      	lsls	r3, r3, #10
 8001f64:	4013      	ands	r3, r2
 8001f66:	d100      	bne.n	8001f6a <HAL_RCC_OscConfig+0x5a>
 8001f68:	e069      	b.n	800203e <HAL_RCC_OscConfig+0x12e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d165      	bne.n	800203e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e330      	b.n	80025d8 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	025b      	lsls	r3, r3, #9
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_OscConfig+0x82>
 8001f82:	4bb7      	ldr	r3, [pc, #732]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4bb6      	ldr	r3, [pc, #728]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8001f88:	2180      	movs	r1, #128	; 0x80
 8001f8a:	0249      	lsls	r1, r1, #9
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	e027      	b.n	8001fe2 <HAL_RCC_OscConfig+0xd2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	23a0      	movs	r3, #160	; 0xa0
 8001f98:	02db      	lsls	r3, r3, #11
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d10e      	bne.n	8001fbc <HAL_RCC_OscConfig+0xac>
 8001f9e:	4bb0      	ldr	r3, [pc, #704]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4baf      	ldr	r3, [pc, #700]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8001fa4:	2180      	movs	r1, #128	; 0x80
 8001fa6:	02c9      	lsls	r1, r1, #11
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	4bac      	ldr	r3, [pc, #688]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4bab      	ldr	r3, [pc, #684]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8001fb2:	2180      	movs	r1, #128	; 0x80
 8001fb4:	0249      	lsls	r1, r1, #9
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	e012      	b.n	8001fe2 <HAL_RCC_OscConfig+0xd2>
 8001fbc:	4ba8      	ldr	r3, [pc, #672]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4ba7      	ldr	r3, [pc, #668]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8001fc2:	49a8      	ldr	r1, [pc, #672]	; (8002264 <HAL_RCC_OscConfig+0x354>)
 8001fc4:	400a      	ands	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	4ba5      	ldr	r3, [pc, #660]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	025b      	lsls	r3, r3, #9
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4ba2      	ldr	r3, [pc, #648]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4ba1      	ldr	r3, [pc, #644]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8001fdc:	49a2      	ldr	r1, [pc, #648]	; (8002268 <HAL_RCC_OscConfig+0x358>)
 8001fde:	400a      	ands	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d014      	beq.n	8002014 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7ff f997 	bl	800131c <HAL_GetTick>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff4:	f7ff f992 	bl	800131c <HAL_GetTick>
 8001ff8:	0002      	movs	r2, r0
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b64      	cmp	r3, #100	; 0x64
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e2e8      	b.n	80025d8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002006:	4b96      	ldr	r3, [pc, #600]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	029b      	lsls	r3, r3, #10
 800200e:	4013      	ands	r3, r2
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0xe4>
 8002012:	e015      	b.n	8002040 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7ff f982 	bl	800131c <HAL_GetTick>
 8002018:	0003      	movs	r3, r0
 800201a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800201e:	f7ff f97d 	bl	800131c <HAL_GetTick>
 8002022:	0002      	movs	r2, r0
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b64      	cmp	r3, #100	; 0x64
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e2d3      	b.n	80025d8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002030:	4b8b      	ldr	r3, [pc, #556]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	029b      	lsls	r3, r3, #10
 8002038:	4013      	ands	r3, r2
 800203a:	d1f0      	bne.n	800201e <HAL_RCC_OscConfig+0x10e>
 800203c:	e000      	b.n	8002040 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2202      	movs	r2, #2
 8002046:	4013      	ands	r3, r2
 8002048:	d100      	bne.n	800204c <HAL_RCC_OscConfig+0x13c>
 800204a:	e08b      	b.n	8002164 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	2b04      	cmp	r3, #4
 8002056:	d005      	beq.n	8002064 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	2b0c      	cmp	r3, #12
 800205c:	d13e      	bne.n	80020dc <HAL_RCC_OscConfig+0x1cc>
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d13b      	bne.n	80020dc <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002064:	4b7e      	ldr	r3, [pc, #504]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2204      	movs	r2, #4
 800206a:	4013      	ands	r3, r2
 800206c:	d004      	beq.n	8002078 <HAL_RCC_OscConfig+0x168>
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e2af      	b.n	80025d8 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002078:	4b79      	ldr	r3, [pc, #484]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a7b      	ldr	r2, [pc, #492]	; (800226c <HAL_RCC_OscConfig+0x35c>)
 800207e:	4013      	ands	r3, r2
 8002080:	0019      	movs	r1, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	021a      	lsls	r2, r3, #8
 8002088:	4b75      	ldr	r3, [pc, #468]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 800208a:	430a      	orrs	r2, r1
 800208c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800208e:	4b74      	ldr	r3, [pc, #464]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2209      	movs	r2, #9
 8002094:	4393      	bics	r3, r2
 8002096:	0019      	movs	r1, r3
 8002098:	4b71      	ldr	r3, [pc, #452]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	430a      	orrs	r2, r1
 800209e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020a0:	f000 fc7a 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 80020a4:	0001      	movs	r1, r0
 80020a6:	4b6e      	ldr	r3, [pc, #440]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	091b      	lsrs	r3, r3, #4
 80020ac:	220f      	movs	r2, #15
 80020ae:	4013      	ands	r3, r2
 80020b0:	4a6f      	ldr	r2, [pc, #444]	; (8002270 <HAL_RCC_OscConfig+0x360>)
 80020b2:	5cd3      	ldrb	r3, [r2, r3]
 80020b4:	000a      	movs	r2, r1
 80020b6:	40da      	lsrs	r2, r3
 80020b8:	4b6e      	ldr	r3, [pc, #440]	; (8002274 <HAL_RCC_OscConfig+0x364>)
 80020ba:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80020bc:	4b6e      	ldr	r3, [pc, #440]	; (8002278 <HAL_RCC_OscConfig+0x368>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2513      	movs	r5, #19
 80020c2:	197c      	adds	r4, r7, r5
 80020c4:	0018      	movs	r0, r3
 80020c6:	f7ff f8e3 	bl	8001290 <HAL_InitTick>
 80020ca:	0003      	movs	r3, r0
 80020cc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80020ce:	197b      	adds	r3, r7, r5
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d046      	beq.n	8002164 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 80020d6:	197b      	adds	r3, r7, r5
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	e27d      	b.n	80025d8 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d027      	beq.n	8002132 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80020e2:	4b5f      	ldr	r3, [pc, #380]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2209      	movs	r2, #9
 80020e8:	4393      	bics	r3, r2
 80020ea:	0019      	movs	r1, r3
 80020ec:	4b5c      	ldr	r3, [pc, #368]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7ff f912 	bl	800131c <HAL_GetTick>
 80020f8:	0003      	movs	r3, r0
 80020fa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020fe:	f7ff f90d 	bl	800131c <HAL_GetTick>
 8002102:	0002      	movs	r2, r0
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e263      	b.n	80025d8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002110:	4b53      	ldr	r3, [pc, #332]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2204      	movs	r2, #4
 8002116:	4013      	ands	r3, r2
 8002118:	d0f1      	beq.n	80020fe <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211a:	4b51      	ldr	r3, [pc, #324]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	4a53      	ldr	r2, [pc, #332]	; (800226c <HAL_RCC_OscConfig+0x35c>)
 8002120:	4013      	ands	r3, r2
 8002122:	0019      	movs	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	021a      	lsls	r2, r3, #8
 800212a:	4b4d      	ldr	r3, [pc, #308]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 800212c:	430a      	orrs	r2, r1
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	e018      	b.n	8002164 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002132:	4b4b      	ldr	r3, [pc, #300]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b4a      	ldr	r3, [pc, #296]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8002138:	2101      	movs	r1, #1
 800213a:	438a      	bics	r2, r1
 800213c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213e:	f7ff f8ed 	bl	800131c <HAL_GetTick>
 8002142:	0003      	movs	r3, r0
 8002144:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002148:	f7ff f8e8 	bl	800131c <HAL_GetTick>
 800214c:	0002      	movs	r2, r0
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e23e      	b.n	80025d8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800215a:	4b41      	ldr	r3, [pc, #260]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2204      	movs	r2, #4
 8002160:	4013      	ands	r3, r2
 8002162:	d1f1      	bne.n	8002148 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2210      	movs	r2, #16
 800216a:	4013      	ands	r3, r2
 800216c:	d100      	bne.n	8002170 <HAL_RCC_OscConfig+0x260>
 800216e:	e0a1      	b.n	80022b4 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d140      	bne.n	80021f8 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002176:	4b3a      	ldr	r3, [pc, #232]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4013      	ands	r3, r2
 8002180:	d005      	beq.n	800218e <HAL_RCC_OscConfig+0x27e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e224      	b.n	80025d8 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800218e:	4b34      	ldr	r3, [pc, #208]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4a3a      	ldr	r2, [pc, #232]	; (800227c <HAL_RCC_OscConfig+0x36c>)
 8002194:	4013      	ands	r3, r2
 8002196:	0019      	movs	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1a      	ldr	r2, [r3, #32]
 800219c:	4b30      	ldr	r3, [pc, #192]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 800219e:	430a      	orrs	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021a2:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	0a19      	lsrs	r1, r3, #8
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	061a      	lsls	r2, r3, #24
 80021b0:	4b2b      	ldr	r3, [pc, #172]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 80021b2:	430a      	orrs	r2, r1
 80021b4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	0b5b      	lsrs	r3, r3, #13
 80021bc:	3301      	adds	r3, #1
 80021be:	2280      	movs	r2, #128	; 0x80
 80021c0:	0212      	lsls	r2, r2, #8
 80021c2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80021c4:	4b26      	ldr	r3, [pc, #152]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	210f      	movs	r1, #15
 80021cc:	400b      	ands	r3, r1
 80021ce:	4928      	ldr	r1, [pc, #160]	; (8002270 <HAL_RCC_OscConfig+0x360>)
 80021d0:	5ccb      	ldrb	r3, [r1, r3]
 80021d2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021d4:	4b27      	ldr	r3, [pc, #156]	; (8002274 <HAL_RCC_OscConfig+0x364>)
 80021d6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80021d8:	4b27      	ldr	r3, [pc, #156]	; (8002278 <HAL_RCC_OscConfig+0x368>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2513      	movs	r5, #19
 80021de:	197c      	adds	r4, r7, r5
 80021e0:	0018      	movs	r0, r3
 80021e2:	f7ff f855 	bl	8001290 <HAL_InitTick>
 80021e6:	0003      	movs	r3, r0
 80021e8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80021ea:	197b      	adds	r3, r7, r5
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d060      	beq.n	80022b4 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 80021f2:	197b      	adds	r3, r7, r5
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	e1ef      	b.n	80025d8 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d03f      	beq.n	8002280 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002200:	4b17      	ldr	r3, [pc, #92]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b16      	ldr	r3, [pc, #88]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	0049      	lsls	r1, r1, #1
 800220a:	430a      	orrs	r2, r1
 800220c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220e:	f7ff f885 	bl	800131c <HAL_GetTick>
 8002212:	0003      	movs	r3, r0
 8002214:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002218:	f7ff f880 	bl	800131c <HAL_GetTick>
 800221c:	0002      	movs	r2, r0
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e1d6      	b.n	80025d8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800222a:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4013      	ands	r3, r2
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002236:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4a10      	ldr	r2, [pc, #64]	; (800227c <HAL_RCC_OscConfig+0x36c>)
 800223c:	4013      	ands	r3, r2
 800223e:	0019      	movs	r1, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1a      	ldr	r2, [r3, #32]
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 8002246:	430a      	orrs	r2, r1
 8002248:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800224a:	4b05      	ldr	r3, [pc, #20]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	0a19      	lsrs	r1, r3, #8
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	061a      	lsls	r2, r3, #24
 8002258:	4b01      	ldr	r3, [pc, #4]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 800225a:	430a      	orrs	r2, r1
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	e029      	b.n	80022b4 <HAL_RCC_OscConfig+0x3a4>
 8002260:	40021000 	.word	0x40021000
 8002264:	fffeffff 	.word	0xfffeffff
 8002268:	fffbffff 	.word	0xfffbffff
 800226c:	ffffe0ff 	.word	0xffffe0ff
 8002270:	08004cb0 	.word	0x08004cb0
 8002274:	20000000 	.word	0x20000000
 8002278:	20000004 	.word	0x20000004
 800227c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002280:	4bbe      	ldr	r3, [pc, #760]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4bbd      	ldr	r3, [pc, #756]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 8002286:	49be      	ldr	r1, [pc, #760]	; (8002580 <HAL_RCC_OscConfig+0x670>)
 8002288:	400a      	ands	r2, r1
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7ff f846 	bl	800131c <HAL_GetTick>
 8002290:	0003      	movs	r3, r0
 8002292:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002296:	f7ff f841 	bl	800131c <HAL_GetTick>
 800229a:	0002      	movs	r2, r0
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e197      	b.n	80025d8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022a8:	4bb4      	ldr	r3, [pc, #720]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4013      	ands	r3, r2
 80022b2:	d1f0      	bne.n	8002296 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2208      	movs	r2, #8
 80022ba:	4013      	ands	r3, r2
 80022bc:	d036      	beq.n	800232c <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d019      	beq.n	80022fa <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c6:	4bad      	ldr	r3, [pc, #692]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 80022c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022ca:	4bac      	ldr	r3, [pc, #688]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 80022cc:	2101      	movs	r1, #1
 80022ce:	430a      	orrs	r2, r1
 80022d0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d2:	f7ff f823 	bl	800131c <HAL_GetTick>
 80022d6:	0003      	movs	r3, r0
 80022d8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022dc:	f7ff f81e 	bl	800131c <HAL_GetTick>
 80022e0:	0002      	movs	r2, r0
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e174      	b.n	80025d8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022ee:	4ba3      	ldr	r3, [pc, #652]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 80022f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f2:	2202      	movs	r2, #2
 80022f4:	4013      	ands	r3, r2
 80022f6:	d0f1      	beq.n	80022dc <HAL_RCC_OscConfig+0x3cc>
 80022f8:	e018      	b.n	800232c <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fa:	4ba0      	ldr	r3, [pc, #640]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 80022fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022fe:	4b9f      	ldr	r3, [pc, #636]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 8002300:	2101      	movs	r1, #1
 8002302:	438a      	bics	r2, r1
 8002304:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002306:	f7ff f809 	bl	800131c <HAL_GetTick>
 800230a:	0003      	movs	r3, r0
 800230c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002310:	f7ff f804 	bl	800131c <HAL_GetTick>
 8002314:	0002      	movs	r2, r0
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e15a      	b.n	80025d8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002322:	4b96      	ldr	r3, [pc, #600]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 8002324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002326:	2202      	movs	r2, #2
 8002328:	4013      	ands	r3, r2
 800232a:	d1f1      	bne.n	8002310 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2204      	movs	r2, #4
 8002332:	4013      	ands	r3, r2
 8002334:	d100      	bne.n	8002338 <HAL_RCC_OscConfig+0x428>
 8002336:	e0ae      	b.n	8002496 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002338:	2027      	movs	r0, #39	; 0x27
 800233a:	183b      	adds	r3, r7, r0
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002340:	4b8e      	ldr	r3, [pc, #568]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 8002342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	055b      	lsls	r3, r3, #21
 8002348:	4013      	ands	r3, r2
 800234a:	d109      	bne.n	8002360 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234c:	4b8b      	ldr	r3, [pc, #556]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 800234e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002350:	4b8a      	ldr	r3, [pc, #552]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 8002352:	2180      	movs	r1, #128	; 0x80
 8002354:	0549      	lsls	r1, r1, #21
 8002356:	430a      	orrs	r2, r1
 8002358:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800235a:	183b      	adds	r3, r7, r0
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	4b88      	ldr	r3, [pc, #544]	; (8002584 <HAL_RCC_OscConfig+0x674>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4013      	ands	r3, r2
 800236a:	d11a      	bne.n	80023a2 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236c:	4b85      	ldr	r3, [pc, #532]	; (8002584 <HAL_RCC_OscConfig+0x674>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b84      	ldr	r3, [pc, #528]	; (8002584 <HAL_RCC_OscConfig+0x674>)
 8002372:	2180      	movs	r1, #128	; 0x80
 8002374:	0049      	lsls	r1, r1, #1
 8002376:	430a      	orrs	r2, r1
 8002378:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237a:	f7fe ffcf 	bl	800131c <HAL_GetTick>
 800237e:	0003      	movs	r3, r0
 8002380:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002384:	f7fe ffca 	bl	800131c <HAL_GetTick>
 8002388:	0002      	movs	r2, r0
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e120      	b.n	80025d8 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002396:	4b7b      	ldr	r3, [pc, #492]	; (8002584 <HAL_RCC_OscConfig+0x674>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4013      	ands	r3, r2
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d107      	bne.n	80023be <HAL_RCC_OscConfig+0x4ae>
 80023ae:	4b73      	ldr	r3, [pc, #460]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 80023b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023b2:	4b72      	ldr	r3, [pc, #456]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 80023b4:	2180      	movs	r1, #128	; 0x80
 80023b6:	0049      	lsls	r1, r1, #1
 80023b8:	430a      	orrs	r2, r1
 80023ba:	651a      	str	r2, [r3, #80]	; 0x50
 80023bc:	e031      	b.n	8002422 <HAL_RCC_OscConfig+0x512>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x4d0>
 80023c6:	4b6d      	ldr	r3, [pc, #436]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 80023c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023ca:	4b6c      	ldr	r3, [pc, #432]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 80023cc:	496c      	ldr	r1, [pc, #432]	; (8002580 <HAL_RCC_OscConfig+0x670>)
 80023ce:	400a      	ands	r2, r1
 80023d0:	651a      	str	r2, [r3, #80]	; 0x50
 80023d2:	4b6a      	ldr	r3, [pc, #424]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 80023d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023d6:	4b69      	ldr	r3, [pc, #420]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 80023d8:	496b      	ldr	r1, [pc, #428]	; (8002588 <HAL_RCC_OscConfig+0x678>)
 80023da:	400a      	ands	r2, r1
 80023dc:	651a      	str	r2, [r3, #80]	; 0x50
 80023de:	e020      	b.n	8002422 <HAL_RCC_OscConfig+0x512>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	23a0      	movs	r3, #160	; 0xa0
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d10e      	bne.n	800240a <HAL_RCC_OscConfig+0x4fa>
 80023ec:	4b63      	ldr	r3, [pc, #396]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 80023ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023f0:	4b62      	ldr	r3, [pc, #392]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 80023f2:	2180      	movs	r1, #128	; 0x80
 80023f4:	00c9      	lsls	r1, r1, #3
 80023f6:	430a      	orrs	r2, r1
 80023f8:	651a      	str	r2, [r3, #80]	; 0x50
 80023fa:	4b60      	ldr	r3, [pc, #384]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 80023fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023fe:	4b5f      	ldr	r3, [pc, #380]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 8002400:	2180      	movs	r1, #128	; 0x80
 8002402:	0049      	lsls	r1, r1, #1
 8002404:	430a      	orrs	r2, r1
 8002406:	651a      	str	r2, [r3, #80]	; 0x50
 8002408:	e00b      	b.n	8002422 <HAL_RCC_OscConfig+0x512>
 800240a:	4b5c      	ldr	r3, [pc, #368]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 800240c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800240e:	4b5b      	ldr	r3, [pc, #364]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 8002410:	495b      	ldr	r1, [pc, #364]	; (8002580 <HAL_RCC_OscConfig+0x670>)
 8002412:	400a      	ands	r2, r1
 8002414:	651a      	str	r2, [r3, #80]	; 0x50
 8002416:	4b59      	ldr	r3, [pc, #356]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 8002418:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800241a:	4b58      	ldr	r3, [pc, #352]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 800241c:	495a      	ldr	r1, [pc, #360]	; (8002588 <HAL_RCC_OscConfig+0x678>)
 800241e:	400a      	ands	r2, r1
 8002420:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d015      	beq.n	8002456 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242a:	f7fe ff77 	bl	800131c <HAL_GetTick>
 800242e:	0003      	movs	r3, r0
 8002430:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002432:	e009      	b.n	8002448 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7fe ff72 	bl	800131c <HAL_GetTick>
 8002438:	0002      	movs	r2, r0
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	4a53      	ldr	r2, [pc, #332]	; (800258c <HAL_RCC_OscConfig+0x67c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e0c7      	b.n	80025d8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002448:	4b4c      	ldr	r3, [pc, #304]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 800244a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4013      	ands	r3, r2
 8002452:	d0ef      	beq.n	8002434 <HAL_RCC_OscConfig+0x524>
 8002454:	e014      	b.n	8002480 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002456:	f7fe ff61 	bl	800131c <HAL_GetTick>
 800245a:	0003      	movs	r3, r0
 800245c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800245e:	e009      	b.n	8002474 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002460:	f7fe ff5c 	bl	800131c <HAL_GetTick>
 8002464:	0002      	movs	r2, r0
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	4a48      	ldr	r2, [pc, #288]	; (800258c <HAL_RCC_OscConfig+0x67c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0b1      	b.n	80025d8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002474:	4b41      	ldr	r3, [pc, #260]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 8002476:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4013      	ands	r3, r2
 800247e:	d1ef      	bne.n	8002460 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002480:	2327      	movs	r3, #39	; 0x27
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d105      	bne.n	8002496 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248a:	4b3c      	ldr	r3, [pc, #240]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 800248c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800248e:	4b3b      	ldr	r3, [pc, #236]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 8002490:	493f      	ldr	r1, [pc, #252]	; (8002590 <HAL_RCC_OscConfig+0x680>)
 8002492:	400a      	ands	r2, r1
 8002494:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	2b00      	cmp	r3, #0
 800249c:	d100      	bne.n	80024a0 <HAL_RCC_OscConfig+0x590>
 800249e:	e09a      	b.n	80025d6 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	d064      	beq.n	8002570 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d145      	bne.n	800253a <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ae:	4b33      	ldr	r3, [pc, #204]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	4b32      	ldr	r3, [pc, #200]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 80024b4:	4937      	ldr	r1, [pc, #220]	; (8002594 <HAL_RCC_OscConfig+0x684>)
 80024b6:	400a      	ands	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7fe ff2f 	bl	800131c <HAL_GetTick>
 80024be:	0003      	movs	r3, r0
 80024c0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c4:	f7fe ff2a 	bl	800131c <HAL_GetTick>
 80024c8:	0002      	movs	r2, r0
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e080      	b.n	80025d8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024d6:	4b29      	ldr	r3, [pc, #164]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	049b      	lsls	r3, r3, #18
 80024de:	4013      	ands	r3, r2
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e2:	4b26      	ldr	r3, [pc, #152]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	4a2c      	ldr	r2, [pc, #176]	; (8002598 <HAL_RCC_OscConfig+0x688>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	0019      	movs	r1, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	431a      	orrs	r2, r3
 80024fc:	4b1f      	ldr	r3, [pc, #124]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 80024fe:	430a      	orrs	r2, r1
 8002500:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002502:	4b1e      	ldr	r3, [pc, #120]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 8002508:	2180      	movs	r1, #128	; 0x80
 800250a:	0449      	lsls	r1, r1, #17
 800250c:	430a      	orrs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe ff04 	bl	800131c <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251a:	f7fe feff 	bl	800131c <HAL_GetTick>
 800251e:	0002      	movs	r2, r0
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e055      	b.n	80025d8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	049b      	lsls	r3, r3, #18
 8002534:	4013      	ands	r3, r2
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x60a>
 8002538:	e04d      	b.n	80025d6 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	4b0f      	ldr	r3, [pc, #60]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 8002540:	4914      	ldr	r1, [pc, #80]	; (8002594 <HAL_RCC_OscConfig+0x684>)
 8002542:	400a      	ands	r2, r1
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002546:	f7fe fee9 	bl	800131c <HAL_GetTick>
 800254a:	0003      	movs	r3, r0
 800254c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002550:	f7fe fee4 	bl	800131c <HAL_GetTick>
 8002554:	0002      	movs	r2, r0
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e03a      	b.n	80025d8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_RCC_OscConfig+0x66c>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	049b      	lsls	r3, r3, #18
 800256a:	4013      	ands	r3, r2
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x640>
 800256e:	e032      	b.n	80025d6 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	2b01      	cmp	r3, #1
 8002576:	d111      	bne.n	800259c <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e02d      	b.n	80025d8 <HAL_RCC_OscConfig+0x6c8>
 800257c:	40021000 	.word	0x40021000
 8002580:	fffffeff 	.word	0xfffffeff
 8002584:	40007000 	.word	0x40007000
 8002588:	fffffbff 	.word	0xfffffbff
 800258c:	00001388 	.word	0x00001388
 8002590:	efffffff 	.word	0xefffffff
 8002594:	feffffff 	.word	0xfeffffff
 8002598:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800259c:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_RCC_OscConfig+0x6d0>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	025b      	lsls	r3, r3, #9
 80025a8:	401a      	ands	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d10f      	bne.n	80025d2 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025b2:	69fa      	ldr	r2, [r7, #28]
 80025b4:	23f0      	movs	r3, #240	; 0xf0
 80025b6:	039b      	lsls	r3, r3, #14
 80025b8:	401a      	ands	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025be:	429a      	cmp	r2, r3
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	23c0      	movs	r3, #192	; 0xc0
 80025c6:	041b      	lsls	r3, r3, #16
 80025c8:	401a      	ands	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	b00a      	add	sp, #40	; 0x28
 80025de:	bdb0      	pop	{r4, r5, r7, pc}
 80025e0:	40021000 	.word	0x40021000

080025e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e4:	b5b0      	push	{r4, r5, r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e128      	b.n	800284a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025f8:	4b96      	ldr	r3, [pc, #600]	; (8002854 <HAL_RCC_ClockConfig+0x270>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2201      	movs	r2, #1
 80025fe:	4013      	ands	r3, r2
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d91e      	bls.n	8002644 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b93      	ldr	r3, [pc, #588]	; (8002854 <HAL_RCC_ClockConfig+0x270>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2201      	movs	r2, #1
 800260c:	4393      	bics	r3, r2
 800260e:	0019      	movs	r1, r3
 8002610:	4b90      	ldr	r3, [pc, #576]	; (8002854 <HAL_RCC_ClockConfig+0x270>)
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002618:	f7fe fe80 	bl	800131c <HAL_GetTick>
 800261c:	0003      	movs	r3, r0
 800261e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002620:	e009      	b.n	8002636 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002622:	f7fe fe7b 	bl	800131c <HAL_GetTick>
 8002626:	0002      	movs	r2, r0
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	4a8a      	ldr	r2, [pc, #552]	; (8002858 <HAL_RCC_ClockConfig+0x274>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e109      	b.n	800284a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002636:	4b87      	ldr	r3, [pc, #540]	; (8002854 <HAL_RCC_ClockConfig+0x270>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2201      	movs	r2, #1
 800263c:	4013      	ands	r3, r2
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d1ee      	bne.n	8002622 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2202      	movs	r2, #2
 800264a:	4013      	ands	r3, r2
 800264c:	d009      	beq.n	8002662 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800264e:	4b83      	ldr	r3, [pc, #524]	; (800285c <HAL_RCC_ClockConfig+0x278>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	22f0      	movs	r2, #240	; 0xf0
 8002654:	4393      	bics	r3, r2
 8002656:	0019      	movs	r1, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	4b7f      	ldr	r3, [pc, #508]	; (800285c <HAL_RCC_ClockConfig+0x278>)
 800265e:	430a      	orrs	r2, r1
 8002660:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2201      	movs	r2, #1
 8002668:	4013      	ands	r3, r2
 800266a:	d100      	bne.n	800266e <HAL_RCC_ClockConfig+0x8a>
 800266c:	e089      	b.n	8002782 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002676:	4b79      	ldr	r3, [pc, #484]	; (800285c <HAL_RCC_ClockConfig+0x278>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	029b      	lsls	r3, r3, #10
 800267e:	4013      	ands	r3, r2
 8002680:	d120      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e0e1      	b.n	800284a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b03      	cmp	r3, #3
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800268e:	4b73      	ldr	r3, [pc, #460]	; (800285c <HAL_RCC_ClockConfig+0x278>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	049b      	lsls	r3, r3, #18
 8002696:	4013      	ands	r3, r2
 8002698:	d114      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e0d5      	b.n	800284a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d106      	bne.n	80026b4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026a6:	4b6d      	ldr	r3, [pc, #436]	; (800285c <HAL_RCC_ClockConfig+0x278>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2204      	movs	r2, #4
 80026ac:	4013      	ands	r3, r2
 80026ae:	d109      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0ca      	b.n	800284a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026b4:	4b69      	ldr	r3, [pc, #420]	; (800285c <HAL_RCC_ClockConfig+0x278>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4013      	ands	r3, r2
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0c2      	b.n	800284a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c4:	4b65      	ldr	r3, [pc, #404]	; (800285c <HAL_RCC_ClockConfig+0x278>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	2203      	movs	r2, #3
 80026ca:	4393      	bics	r3, r2
 80026cc:	0019      	movs	r1, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	4b62      	ldr	r3, [pc, #392]	; (800285c <HAL_RCC_ClockConfig+0x278>)
 80026d4:	430a      	orrs	r2, r1
 80026d6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d8:	f7fe fe20 	bl	800131c <HAL_GetTick>
 80026dc:	0003      	movs	r3, r0
 80026de:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d111      	bne.n	800270c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026e8:	e009      	b.n	80026fe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ea:	f7fe fe17 	bl	800131c <HAL_GetTick>
 80026ee:	0002      	movs	r2, r0
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	4a58      	ldr	r2, [pc, #352]	; (8002858 <HAL_RCC_ClockConfig+0x274>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e0a5      	b.n	800284a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026fe:	4b57      	ldr	r3, [pc, #348]	; (800285c <HAL_RCC_ClockConfig+0x278>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	220c      	movs	r2, #12
 8002704:	4013      	ands	r3, r2
 8002706:	2b08      	cmp	r3, #8
 8002708:	d1ef      	bne.n	80026ea <HAL_RCC_ClockConfig+0x106>
 800270a:	e03a      	b.n	8002782 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b03      	cmp	r3, #3
 8002712:	d111      	bne.n	8002738 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002714:	e009      	b.n	800272a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002716:	f7fe fe01 	bl	800131c <HAL_GetTick>
 800271a:	0002      	movs	r2, r0
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	4a4d      	ldr	r2, [pc, #308]	; (8002858 <HAL_RCC_ClockConfig+0x274>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e08f      	b.n	800284a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800272a:	4b4c      	ldr	r3, [pc, #304]	; (800285c <HAL_RCC_ClockConfig+0x278>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	220c      	movs	r2, #12
 8002730:	4013      	ands	r3, r2
 8002732:	2b0c      	cmp	r3, #12
 8002734:	d1ef      	bne.n	8002716 <HAL_RCC_ClockConfig+0x132>
 8002736:	e024      	b.n	8002782 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d11b      	bne.n	8002778 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002740:	e009      	b.n	8002756 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002742:	f7fe fdeb 	bl	800131c <HAL_GetTick>
 8002746:	0002      	movs	r2, r0
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	4a42      	ldr	r2, [pc, #264]	; (8002858 <HAL_RCC_ClockConfig+0x274>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e079      	b.n	800284a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002756:	4b41      	ldr	r3, [pc, #260]	; (800285c <HAL_RCC_ClockConfig+0x278>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	220c      	movs	r2, #12
 800275c:	4013      	ands	r3, r2
 800275e:	2b04      	cmp	r3, #4
 8002760:	d1ef      	bne.n	8002742 <HAL_RCC_ClockConfig+0x15e>
 8002762:	e00e      	b.n	8002782 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002764:	f7fe fdda 	bl	800131c <HAL_GetTick>
 8002768:	0002      	movs	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	4a3a      	ldr	r2, [pc, #232]	; (8002858 <HAL_RCC_ClockConfig+0x274>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e068      	b.n	800284a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002778:	4b38      	ldr	r3, [pc, #224]	; (800285c <HAL_RCC_ClockConfig+0x278>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	220c      	movs	r2, #12
 800277e:	4013      	ands	r3, r2
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002782:	4b34      	ldr	r3, [pc, #208]	; (8002854 <HAL_RCC_ClockConfig+0x270>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2201      	movs	r2, #1
 8002788:	4013      	ands	r3, r2
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d21e      	bcs.n	80027ce <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002790:	4b30      	ldr	r3, [pc, #192]	; (8002854 <HAL_RCC_ClockConfig+0x270>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2201      	movs	r2, #1
 8002796:	4393      	bics	r3, r2
 8002798:	0019      	movs	r1, r3
 800279a:	4b2e      	ldr	r3, [pc, #184]	; (8002854 <HAL_RCC_ClockConfig+0x270>)
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027a2:	f7fe fdbb 	bl	800131c <HAL_GetTick>
 80027a6:	0003      	movs	r3, r0
 80027a8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	e009      	b.n	80027c0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ac:	f7fe fdb6 	bl	800131c <HAL_GetTick>
 80027b0:	0002      	movs	r2, r0
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	4a28      	ldr	r2, [pc, #160]	; (8002858 <HAL_RCC_ClockConfig+0x274>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e044      	b.n	800284a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c0:	4b24      	ldr	r3, [pc, #144]	; (8002854 <HAL_RCC_ClockConfig+0x270>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2201      	movs	r2, #1
 80027c6:	4013      	ands	r3, r2
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d1ee      	bne.n	80027ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2204      	movs	r2, #4
 80027d4:	4013      	ands	r3, r2
 80027d6:	d009      	beq.n	80027ec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d8:	4b20      	ldr	r3, [pc, #128]	; (800285c <HAL_RCC_ClockConfig+0x278>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4a20      	ldr	r2, [pc, #128]	; (8002860 <HAL_RCC_ClockConfig+0x27c>)
 80027de:	4013      	ands	r3, r2
 80027e0:	0019      	movs	r1, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	4b1d      	ldr	r3, [pc, #116]	; (800285c <HAL_RCC_ClockConfig+0x278>)
 80027e8:	430a      	orrs	r2, r1
 80027ea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2208      	movs	r2, #8
 80027f2:	4013      	ands	r3, r2
 80027f4:	d00a      	beq.n	800280c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027f6:	4b19      	ldr	r3, [pc, #100]	; (800285c <HAL_RCC_ClockConfig+0x278>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	4a1a      	ldr	r2, [pc, #104]	; (8002864 <HAL_RCC_ClockConfig+0x280>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	0019      	movs	r1, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	00da      	lsls	r2, r3, #3
 8002806:	4b15      	ldr	r3, [pc, #84]	; (800285c <HAL_RCC_ClockConfig+0x278>)
 8002808:	430a      	orrs	r2, r1
 800280a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800280c:	f000 f8c4 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 8002810:	0001      	movs	r1, r0
 8002812:	4b12      	ldr	r3, [pc, #72]	; (800285c <HAL_RCC_ClockConfig+0x278>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	091b      	lsrs	r3, r3, #4
 8002818:	220f      	movs	r2, #15
 800281a:	4013      	ands	r3, r2
 800281c:	4a12      	ldr	r2, [pc, #72]	; (8002868 <HAL_RCC_ClockConfig+0x284>)
 800281e:	5cd3      	ldrb	r3, [r2, r3]
 8002820:	000a      	movs	r2, r1
 8002822:	40da      	lsrs	r2, r3
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_RCC_ClockConfig+0x288>)
 8002826:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002828:	4b11      	ldr	r3, [pc, #68]	; (8002870 <HAL_RCC_ClockConfig+0x28c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	250b      	movs	r5, #11
 800282e:	197c      	adds	r4, r7, r5
 8002830:	0018      	movs	r0, r3
 8002832:	f7fe fd2d 	bl	8001290 <HAL_InitTick>
 8002836:	0003      	movs	r3, r0
 8002838:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800283a:	197b      	adds	r3, r7, r5
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002842:	197b      	adds	r3, r7, r5
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	e000      	b.n	800284a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	0018      	movs	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	b004      	add	sp, #16
 8002850:	bdb0      	pop	{r4, r5, r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	40022000 	.word	0x40022000
 8002858:	00001388 	.word	0x00001388
 800285c:	40021000 	.word	0x40021000
 8002860:	fffff8ff 	.word	0xfffff8ff
 8002864:	ffffc7ff 	.word	0xffffc7ff
 8002868:	08004cb0 	.word	0x08004cb0
 800286c:	20000000 	.word	0x20000000
 8002870:	20000004 	.word	0x20000004

08002874 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b08d      	sub	sp, #52	; 0x34
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0};
 8002880:	241c      	movs	r4, #28
 8002882:	193b      	adds	r3, r7, r4
 8002884:	0018      	movs	r0, r3
 8002886:	2314      	movs	r3, #20
 8002888:	001a      	movs	r2, r3
 800288a:	2100      	movs	r1, #0
 800288c:	f001 fd5c 	bl	8004348 <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002890:	0020      	movs	r0, r4
 8002892:	183b      	adds	r3, r7, r0
 8002894:	2202      	movs	r2, #2
 8002896:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002898:	183b      	adds	r3, r7, r0
 800289a:	2202      	movs	r2, #2
 800289c:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 800289e:	183b      	adds	r3, r7, r0
 80028a0:	2200      	movs	r2, #0
 80028a2:	609a      	str	r2, [r3, #8]
  if(RCC_MCOx == RCC_MCO1)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d11a      	bne.n	80028e0 <HAL_RCC_MCOConfig+0x6c>
  {
    gpio.Pin       = MCO1_PIN;
 80028aa:	183b      	adds	r3, r7, r0
 80028ac:	2280      	movs	r2, #128	; 0x80
 80028ae:	0052      	lsls	r2, r2, #1
 80028b0:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 80028b2:	183b      	adds	r3, r7, r0
 80028b4:	2200      	movs	r2, #0
 80028b6:	611a      	str	r2, [r3, #16]

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80028b8:	4b2d      	ldr	r3, [pc, #180]	; (8002970 <HAL_RCC_MCOConfig+0xfc>)
 80028ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028bc:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <HAL_RCC_MCOConfig+0xfc>)
 80028be:	2101      	movs	r1, #1
 80028c0:	430a      	orrs	r2, r1
 80028c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80028c4:	4b2a      	ldr	r3, [pc, #168]	; (8002970 <HAL_RCC_MCOConfig+0xfc>)
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	2201      	movs	r2, #1
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80028d0:	183a      	adds	r2, r7, r0
 80028d2:	23a0      	movs	r3, #160	; 0xa0
 80028d4:	05db      	lsls	r3, r3, #23
 80028d6:	0011      	movs	r1, r2
 80028d8:	0018      	movs	r0, r3
 80028da:	f7ff f96b 	bl	8001bb4 <HAL_GPIO_Init>
 80028de:	e038      	b.n	8002952 <HAL_RCC_MCOConfig+0xde>
  }
#if defined(RCC_MCO3_SUPPORT)
  else if (RCC_MCOx == RCC_MCO3)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d11a      	bne.n	800291c <HAL_RCC_MCOConfig+0xa8>
  {
    gpio.Pin       = MCO3_PIN;
 80028e6:	201c      	movs	r0, #28
 80028e8:	183b      	adds	r3, r7, r0
 80028ea:	2280      	movs	r2, #128	; 0x80
 80028ec:	0192      	lsls	r2, r2, #6
 80028ee:	601a      	str	r2, [r3, #0]
    gpio.Alternate = MCO3_GPIO_AF;
 80028f0:	183b      	adds	r3, r7, r0
 80028f2:	2200      	movs	r2, #0
 80028f4:	611a      	str	r2, [r3, #16]

    /* MCO3 Clock Enable */
    MCO3_CLK_ENABLE();
 80028f6:	4b1e      	ldr	r3, [pc, #120]	; (8002970 <HAL_RCC_MCOConfig+0xfc>)
 80028f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028fa:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <HAL_RCC_MCOConfig+0xfc>)
 80028fc:	2102      	movs	r1, #2
 80028fe:	430a      	orrs	r2, r1
 8002900:	62da      	str	r2, [r3, #44]	; 0x2c
 8002902:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <HAL_RCC_MCOConfig+0xfc>)
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	2202      	movs	r2, #2
 8002908:	4013      	ands	r3, r2
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	697b      	ldr	r3, [r7, #20]
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 800290e:	183b      	adds	r3, r7, r0
 8002910:	4a18      	ldr	r2, [pc, #96]	; (8002974 <HAL_RCC_MCOConfig+0x100>)
 8002912:	0019      	movs	r1, r3
 8002914:	0010      	movs	r0, r2
 8002916:	f7ff f94d 	bl	8001bb4 <HAL_GPIO_Init>
 800291a:	e01a      	b.n	8002952 <HAL_RCC_MCOConfig+0xde>
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {
    gpio.Pin       = MCO2_PIN;
 800291c:	201c      	movs	r0, #28
 800291e:	183b      	adds	r3, r7, r0
 8002920:	2280      	movs	r2, #128	; 0x80
 8002922:	0092      	lsls	r2, r2, #2
 8002924:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8002926:	183b      	adds	r3, r7, r0
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 800292c:	4b10      	ldr	r3, [pc, #64]	; (8002970 <HAL_RCC_MCOConfig+0xfc>)
 800292e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <HAL_RCC_MCOConfig+0xfc>)
 8002932:	2101      	movs	r1, #1
 8002934:	430a      	orrs	r2, r1
 8002936:	62da      	str	r2, [r3, #44]	; 0x2c
 8002938:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <HAL_RCC_MCOConfig+0xfc>)
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	2201      	movs	r2, #1
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	693b      	ldr	r3, [r7, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 8002944:	183a      	adds	r2, r7, r0
 8002946:	23a0      	movs	r3, #160	; 0xa0
 8002948:	05db      	lsls	r3, r3, #23
 800294a:	0011      	movs	r1, r2
 800294c:	0018      	movs	r0, r3
 800294e:	f7ff f931 	bl	8001bb4 <HAL_GPIO_Init>
  }

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002952:	4b07      	ldr	r3, [pc, #28]	; (8002970 <HAL_RCC_MCOConfig+0xfc>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	4a08      	ldr	r2, [pc, #32]	; (8002978 <HAL_RCC_MCOConfig+0x104>)
 8002958:	4013      	ands	r3, r2
 800295a:	0019      	movs	r1, r3
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	431a      	orrs	r2, r3
 8002962:	4b03      	ldr	r3, [pc, #12]	; (8002970 <HAL_RCC_MCOConfig+0xfc>)
 8002964:	430a      	orrs	r2, r1
 8002966:	60da      	str	r2, [r3, #12]
}
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	b00d      	add	sp, #52	; 0x34
 800296e:	bd90      	pop	{r4, r7, pc}
 8002970:	40021000 	.word	0x40021000
 8002974:	50000400 	.word	0x50000400
 8002978:	80ffffff 	.word	0x80ffffff

0800297c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <HAL_RCC_EnableCSS+0x18>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b03      	ldr	r3, [pc, #12]	; (8002994 <HAL_RCC_EnableCSS+0x18>)
 8002986:	2180      	movs	r1, #128	; 0x80
 8002988:	0309      	lsls	r1, r1, #12
 800298a:	430a      	orrs	r2, r1
 800298c:	601a      	str	r2, [r3, #0]
}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000

08002998 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002998:	b5b0      	push	{r4, r5, r7, lr}
 800299a:	b08e      	sub	sp, #56	; 0x38
 800299c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800299e:	4b4c      	ldr	r3, [pc, #304]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x138>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029a6:	230c      	movs	r3, #12
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b0c      	cmp	r3, #12
 80029ac:	d014      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x40>
 80029ae:	d900      	bls.n	80029b2 <HAL_RCC_GetSysClockFreq+0x1a>
 80029b0:	e07b      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x112>
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d002      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0x24>
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d00b      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ba:	e076      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80029bc:	4b44      	ldr	r3, [pc, #272]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x138>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2210      	movs	r2, #16
 80029c2:	4013      	ands	r3, r2
 80029c4:	d002      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80029c6:	4b43      	ldr	r3, [pc, #268]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80029c8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80029ca:	e07c      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80029cc:	4b42      	ldr	r3, [pc, #264]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x140>)
 80029ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029d0:	e079      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029d2:	4b42      	ldr	r3, [pc, #264]	; (8002adc <HAL_RCC_GetSysClockFreq+0x144>)
 80029d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029d6:	e076      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029da:	0c9a      	lsrs	r2, r3, #18
 80029dc:	230f      	movs	r3, #15
 80029de:	401a      	ands	r2, r3
 80029e0:	4b3f      	ldr	r3, [pc, #252]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x148>)
 80029e2:	5c9b      	ldrb	r3, [r3, r2]
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	0d9a      	lsrs	r2, r3, #22
 80029ea:	2303      	movs	r3, #3
 80029ec:	4013      	ands	r3, r2
 80029ee:	3301      	adds	r3, #1
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029f2:	4b37      	ldr	r3, [pc, #220]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x138>)
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	025b      	lsls	r3, r3, #9
 80029fa:	4013      	ands	r3, r2
 80029fc:	d01a      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80029fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
 8002a06:	4a35      	ldr	r2, [pc, #212]	; (8002adc <HAL_RCC_GetSysClockFreq+0x144>)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	69b8      	ldr	r0, [r7, #24]
 8002a0c:	69f9      	ldr	r1, [r7, #28]
 8002a0e:	f7fd fc39 	bl	8000284 <__aeabi_lmul>
 8002a12:	0002      	movs	r2, r0
 8002a14:	000b      	movs	r3, r1
 8002a16:	0010      	movs	r0, r2
 8002a18:	0019      	movs	r1, r3
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f7fd fc0d 	bl	8000244 <__aeabi_uldivmod>
 8002a2a:	0002      	movs	r2, r0
 8002a2c:	000b      	movs	r3, r1
 8002a2e:	0013      	movs	r3, r2
 8002a30:	637b      	str	r3, [r7, #52]	; 0x34
 8002a32:	e037      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002a34:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2210      	movs	r2, #16
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d01a      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	4a23      	ldr	r2, [pc, #140]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002a48:	2300      	movs	r3, #0
 8002a4a:	68b8      	ldr	r0, [r7, #8]
 8002a4c:	68f9      	ldr	r1, [r7, #12]
 8002a4e:	f7fd fc19 	bl	8000284 <__aeabi_lmul>
 8002a52:	0002      	movs	r2, r0
 8002a54:	000b      	movs	r3, r1
 8002a56:	0010      	movs	r0, r2
 8002a58:	0019      	movs	r1, r3
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	603b      	str	r3, [r7, #0]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	607b      	str	r3, [r7, #4]
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f7fd fbed 	bl	8000244 <__aeabi_uldivmod>
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	000b      	movs	r3, r1
 8002a6e:	0013      	movs	r3, r2
 8002a70:	637b      	str	r3, [r7, #52]	; 0x34
 8002a72:	e017      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a76:	0018      	movs	r0, r3
 8002a78:	2300      	movs	r3, #0
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	4a16      	ldr	r2, [pc, #88]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x140>)
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f7fd fc00 	bl	8000284 <__aeabi_lmul>
 8002a84:	0002      	movs	r2, r0
 8002a86:	000b      	movs	r3, r1
 8002a88:	0010      	movs	r0, r2
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	001c      	movs	r4, r3
 8002a90:	2300      	movs	r3, #0
 8002a92:	001d      	movs	r5, r3
 8002a94:	0022      	movs	r2, r4
 8002a96:	002b      	movs	r3, r5
 8002a98:	f7fd fbd4 	bl	8000244 <__aeabi_uldivmod>
 8002a9c:	0002      	movs	r2, r0
 8002a9e:	000b      	movs	r3, r1
 8002aa0:	0013      	movs	r3, r2
 8002aa2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002aa8:	e00d      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	0b5b      	lsrs	r3, r3, #13
 8002ab0:	2207      	movs	r2, #7
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	2280      	movs	r2, #128	; 0x80
 8002abc:	0212      	lsls	r2, r2, #8
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	0013      	movs	r3, r2
 8002ac2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ac4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002ac8:	0018      	movs	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b00e      	add	sp, #56	; 0x38
 8002ace:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	003d0900 	.word	0x003d0900
 8002ad8:	00f42400 	.word	0x00f42400
 8002adc:	007a1200 	.word	0x007a1200
 8002ae0:	08004cc8 	.word	0x08004cc8

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b02      	ldr	r3, [pc, #8]	; (8002af4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	0018      	movs	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	20000000 	.word	0x20000000

08002af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002afc:	f7ff fff2 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b00:	0001      	movs	r1, r0
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	0a1b      	lsrs	r3, r3, #8
 8002b08:	2207      	movs	r2, #7
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b0e:	5cd3      	ldrb	r3, [r2, r3]
 8002b10:	40d9      	lsrs	r1, r3
 8002b12:	000b      	movs	r3, r1
}
 8002b14:	0018      	movs	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	08004cc0 	.word	0x08004cc0

08002b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b28:	f7ff ffdc 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b2c:	0001      	movs	r1, r0
 8002b2e:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	0adb      	lsrs	r3, r3, #11
 8002b34:	2207      	movs	r2, #7
 8002b36:	4013      	ands	r3, r2
 8002b38:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	40d9      	lsrs	r1, r3
 8002b3e:	000b      	movs	r3, r1
}
 8002b40:	0018      	movs	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	08004cc0 	.word	0x08004cc0

08002b50 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002b54:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <HAL_RCC_NMI_IRQHandler+0x28>)
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	401a      	ands	r2, r3
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d105      	bne.n	8002b72 <HAL_RCC_NMI_IRQHandler+0x22>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002b66:	f000 f809 	bl	8002b7c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002b6a:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <HAL_RCC_NMI_IRQHandler+0x28>)
 8002b6c:	2280      	movs	r2, #128	; 0x80
 8002b6e:	0052      	lsls	r2, r2, #1
 8002b70:	619a      	str	r2, [r3, #24]
  }
}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40021000 	.word	0x40021000

08002b7c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002b80:	46c0      	nop			; (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002b90:	2017      	movs	r0, #23
 8002b92:	183b      	adds	r3, r7, r0
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d100      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002ba2:	e0c7      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba4:	4b8b      	ldr	r3, [pc, #556]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	055b      	lsls	r3, r3, #21
 8002bac:	4013      	ands	r3, r2
 8002bae:	d109      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb0:	4b88      	ldr	r3, [pc, #544]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bb4:	4b87      	ldr	r3, [pc, #540]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002bb6:	2180      	movs	r1, #128	; 0x80
 8002bb8:	0549      	lsls	r1, r1, #21
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002bbe:	183b      	adds	r3, r7, r0
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc4:	4b84      	ldr	r3, [pc, #528]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d11a      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bd0:	4b81      	ldr	r3, [pc, #516]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b80      	ldr	r3, [pc, #512]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002bd6:	2180      	movs	r1, #128	; 0x80
 8002bd8:	0049      	lsls	r1, r1, #1
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bde:	f7fe fb9d 	bl	800131c <HAL_GetTick>
 8002be2:	0003      	movs	r3, r0
 8002be4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be6:	e008      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be8:	f7fe fb98 	bl	800131c <HAL_GetTick>
 8002bec:	0002      	movs	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	; 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e0e8      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfa:	4b77      	ldr	r3, [pc, #476]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4013      	ands	r3, r2
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002c06:	4b73      	ldr	r3, [pc, #460]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	23c0      	movs	r3, #192	; 0xc0
 8002c0c:	039b      	lsls	r3, r3, #14
 8002c0e:	4013      	ands	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	23c0      	movs	r3, #192	; 0xc0
 8002c18:	039b      	lsls	r3, r3, #14
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d013      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	23c0      	movs	r3, #192	; 0xc0
 8002c28:	029b      	lsls	r3, r3, #10
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	23c0      	movs	r3, #192	; 0xc0
 8002c2e:	029b      	lsls	r3, r3, #10
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d10a      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002c34:	4b67      	ldr	r3, [pc, #412]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	029b      	lsls	r3, r3, #10
 8002c3c:	401a      	ands	r2, r3
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	029b      	lsls	r3, r3, #10
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d101      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e0c0      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002c4a:	4b62      	ldr	r3, [pc, #392]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c4e:	23c0      	movs	r3, #192	; 0xc0
 8002c50:	029b      	lsls	r3, r3, #10
 8002c52:	4013      	ands	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d03b      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	23c0      	movs	r3, #192	; 0xc0
 8002c62:	029b      	lsls	r3, r3, #10
 8002c64:	4013      	ands	r3, r2
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d033      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2220      	movs	r2, #32
 8002c72:	4013      	ands	r3, r2
 8002c74:	d02e      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002c76:	4b57      	ldr	r3, [pc, #348]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c7a:	4a58      	ldr	r2, [pc, #352]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c80:	4b54      	ldr	r3, [pc, #336]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c84:	4b53      	ldr	r3, [pc, #332]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c86:	2180      	movs	r1, #128	; 0x80
 8002c88:	0309      	lsls	r1, r1, #12
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c8e:	4b51      	ldr	r3, [pc, #324]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c92:	4b50      	ldr	r3, [pc, #320]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c94:	4952      	ldr	r1, [pc, #328]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c96:	400a      	ands	r2, r1
 8002c98:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002c9a:	4b4e      	ldr	r3, [pc, #312]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d014      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002caa:	f7fe fb37 	bl	800131c <HAL_GetTick>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cb2:	e009      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb4:	f7fe fb32 	bl	800131c <HAL_GetTick>
 8002cb8:	0002      	movs	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	4a49      	ldr	r2, [pc, #292]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e081      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cc8:	4b42      	ldr	r3, [pc, #264]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d0ef      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d01f      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	23c0      	movs	r3, #192	; 0xc0
 8002ce4:	029b      	lsls	r3, r3, #10
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	23c0      	movs	r3, #192	; 0xc0
 8002cea:	029b      	lsls	r3, r3, #10
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d10c      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002cf0:	4b38      	ldr	r3, [pc, #224]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a3c      	ldr	r2, [pc, #240]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	0019      	movs	r1, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	23c0      	movs	r3, #192	; 0xc0
 8002d00:	039b      	lsls	r3, r3, #14
 8002d02:	401a      	ands	r2, r3
 8002d04:	4b33      	ldr	r3, [pc, #204]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d06:	430a      	orrs	r2, r1
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	4b32      	ldr	r3, [pc, #200]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d0c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	23c0      	movs	r3, #192	; 0xc0
 8002d14:	029b      	lsls	r3, r3, #10
 8002d16:	401a      	ands	r2, r3
 8002d18:	4b2e      	ldr	r3, [pc, #184]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d1e:	2317      	movs	r3, #23
 8002d20:	18fb      	adds	r3, r7, r3
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d105      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d28:	4b2a      	ldr	r3, [pc, #168]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d2c:	4b29      	ldr	r3, [pc, #164]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d2e:	492f      	ldr	r1, [pc, #188]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d30:	400a      	ands	r2, r1
 8002d32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d3e:	4b25      	ldr	r3, [pc, #148]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d42:	2203      	movs	r2, #3
 8002d44:	4393      	bics	r3, r2
 8002d46:	0019      	movs	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2202      	movs	r2, #2
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d009      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d60:	220c      	movs	r2, #12
 8002d62:	4393      	bics	r3, r2
 8002d64:	0019      	movs	r1, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	4b1a      	ldr	r3, [pc, #104]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2204      	movs	r2, #4
 8002d76:	4013      	ands	r3, r2
 8002d78:	d009      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d7a:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7e:	4a1c      	ldr	r2, [pc, #112]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	0019      	movs	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2208      	movs	r2, #8
 8002d94:	4013      	ands	r3, r2
 8002d96:	d009      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d98:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9c:	4a15      	ldr	r2, [pc, #84]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	0019      	movs	r1, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002da8:	430a      	orrs	r2, r1
 8002daa:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2280      	movs	r2, #128	; 0x80
 8002db2:	4013      	ands	r3, r2
 8002db4:	d009      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002db6:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dba:	4a0f      	ldr	r2, [pc, #60]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699a      	ldr	r2, [r3, #24]
 8002dc4:	4b03      	ldr	r3, [pc, #12]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b006      	add	sp, #24
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40007000 	.word	0x40007000
 8002ddc:	fffcffff 	.word	0xfffcffff
 8002de0:	fff7ffff 	.word	0xfff7ffff
 8002de4:	00001388 	.word	0x00001388
 8002de8:	ffcfffff 	.word	0xffcfffff
 8002dec:	efffffff 	.word	0xefffffff
 8002df0:	fffff3ff 	.word	0xfffff3ff
 8002df4:	ffffcfff 	.word	0xffffcfff
 8002df8:	fff3ffff 	.word	0xfff3ffff

08002dfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e083      	b.n	8002f16 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	2382      	movs	r3, #130	; 0x82
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d009      	beq.n	8002e36 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	61da      	str	r2, [r3, #28]
 8002e28:	e005      	b.n	8002e36 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2251      	movs	r2, #81	; 0x51
 8002e40:	5c9b      	ldrb	r3, [r3, r2]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d107      	bne.n	8002e58 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2250      	movs	r2, #80	; 0x50
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	0018      	movs	r0, r3
 8002e54:	f7fe f900 	bl	8001058 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2251      	movs	r2, #81	; 0x51
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2140      	movs	r1, #64	; 0x40
 8002e6c:	438a      	bics	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	2382      	movs	r3, #130	; 0x82
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	401a      	ands	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6899      	ldr	r1, [r3, #8]
 8002e7e:	2384      	movs	r3, #132	; 0x84
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	400b      	ands	r3, r1
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68d9      	ldr	r1, [r3, #12]
 8002e8a:	2380      	movs	r3, #128	; 0x80
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	400b      	ands	r3, r1
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2102      	movs	r1, #2
 8002e98:	400b      	ands	r3, r1
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	400b      	ands	r3, r1
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6999      	ldr	r1, [r3, #24]
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	400b      	ands	r3, r1
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	2138      	movs	r1, #56	; 0x38
 8002eb8:	400b      	ands	r3, r1
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	2180      	movs	r1, #128	; 0x80
 8002ec2:	400b      	ands	r3, r1
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	0011      	movs	r1, r2
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	019b      	lsls	r3, r3, #6
 8002ed0:	401a      	ands	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	0c1b      	lsrs	r3, r3, #16
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	2210      	movs	r2, #16
 8002eec:	401a      	ands	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69da      	ldr	r2, [r3, #28]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4907      	ldr	r1, [pc, #28]	; (8002f20 <HAL_SPI_Init+0x124>)
 8002f02:	400a      	ands	r2, r1
 8002f04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2251      	movs	r2, #81	; 0x51
 8002f10:	2101      	movs	r1, #1
 8002f12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b002      	add	sp, #8
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	fffff7ff 	.word	0xfffff7ff

08002f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e032      	b.n	8002f9c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2239      	movs	r2, #57	; 0x39
 8002f3a:	5c9b      	ldrb	r3, [r3, r2]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d107      	bne.n	8002f52 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2238      	movs	r2, #56	; 0x38
 8002f46:	2100      	movs	r1, #0
 8002f48:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f7fe f8c7 	bl	80010e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2239      	movs	r2, #57	; 0x39
 8002f56:	2102      	movs	r1, #2
 8002f58:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3304      	adds	r3, #4
 8002f62:	0019      	movs	r1, r3
 8002f64:	0010      	movs	r0, r2
 8002f66:	f000 fa01 	bl	800336c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	223e      	movs	r2, #62	; 0x3e
 8002f6e:	2101      	movs	r1, #1
 8002f70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	223a      	movs	r2, #58	; 0x3a
 8002f76:	2101      	movs	r1, #1
 8002f78:	5499      	strb	r1, [r3, r2]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	223b      	movs	r2, #59	; 0x3b
 8002f7e:	2101      	movs	r1, #1
 8002f80:	5499      	strb	r1, [r3, r2]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	223c      	movs	r2, #60	; 0x3c
 8002f86:	2101      	movs	r1, #1
 8002f88:	5499      	strb	r1, [r3, r2]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	223d      	movs	r2, #61	; 0x3d
 8002f8e:	2101      	movs	r1, #1
 8002f90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2239      	movs	r2, #57	; 0x39
 8002f96:	2101      	movs	r1, #1
 8002f98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b002      	add	sp, #8
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d124      	bne.n	8003004 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d11d      	bne.n	8003004 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2203      	movs	r2, #3
 8002fce:	4252      	negs	r2, r2
 8002fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	2203      	movs	r2, #3
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d004      	beq.n	8002fee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f000 f9a8 	bl	800333c <HAL_TIM_IC_CaptureCallback>
 8002fec:	e007      	b.n	8002ffe <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f000 f99b 	bl	800332c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f000 f9a7 	bl	800334c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2204      	movs	r2, #4
 800300c:	4013      	ands	r3, r2
 800300e:	2b04      	cmp	r3, #4
 8003010:	d125      	bne.n	800305e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2204      	movs	r2, #4
 800301a:	4013      	ands	r3, r2
 800301c:	2b04      	cmp	r3, #4
 800301e:	d11e      	bne.n	800305e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2205      	movs	r2, #5
 8003026:	4252      	negs	r2, r2
 8003028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2202      	movs	r2, #2
 800302e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	23c0      	movs	r3, #192	; 0xc0
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4013      	ands	r3, r2
 800303c:	d004      	beq.n	8003048 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	0018      	movs	r0, r3
 8003042:	f000 f97b 	bl	800333c <HAL_TIM_IC_CaptureCallback>
 8003046:	e007      	b.n	8003058 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	0018      	movs	r0, r3
 800304c:	f000 f96e 	bl	800332c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	0018      	movs	r0, r3
 8003054:	f000 f97a 	bl	800334c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2208      	movs	r2, #8
 8003066:	4013      	ands	r3, r2
 8003068:	2b08      	cmp	r3, #8
 800306a:	d124      	bne.n	80030b6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	2208      	movs	r2, #8
 8003074:	4013      	ands	r3, r2
 8003076:	2b08      	cmp	r3, #8
 8003078:	d11d      	bne.n	80030b6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2209      	movs	r2, #9
 8003080:	4252      	negs	r2, r2
 8003082:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2204      	movs	r2, #4
 8003088:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	2203      	movs	r2, #3
 8003092:	4013      	ands	r3, r2
 8003094:	d004      	beq.n	80030a0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	0018      	movs	r0, r3
 800309a:	f000 f94f 	bl	800333c <HAL_TIM_IC_CaptureCallback>
 800309e:	e007      	b.n	80030b0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	0018      	movs	r0, r3
 80030a4:	f000 f942 	bl	800332c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	0018      	movs	r0, r3
 80030ac:	f000 f94e 	bl	800334c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	2210      	movs	r2, #16
 80030be:	4013      	ands	r3, r2
 80030c0:	2b10      	cmp	r3, #16
 80030c2:	d125      	bne.n	8003110 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2210      	movs	r2, #16
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b10      	cmp	r3, #16
 80030d0:	d11e      	bne.n	8003110 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2211      	movs	r2, #17
 80030d8:	4252      	negs	r2, r2
 80030da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2208      	movs	r2, #8
 80030e0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69da      	ldr	r2, [r3, #28]
 80030e8:	23c0      	movs	r3, #192	; 0xc0
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4013      	ands	r3, r2
 80030ee:	d004      	beq.n	80030fa <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	0018      	movs	r0, r3
 80030f4:	f000 f922 	bl	800333c <HAL_TIM_IC_CaptureCallback>
 80030f8:	e007      	b.n	800310a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	0018      	movs	r0, r3
 80030fe:	f000 f915 	bl	800332c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	0018      	movs	r0, r3
 8003106:	f000 f921 	bl	800334c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	2201      	movs	r2, #1
 8003118:	4013      	ands	r3, r2
 800311a:	2b01      	cmp	r3, #1
 800311c:	d10f      	bne.n	800313e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	4013      	ands	r3, r2
 8003128:	2b01      	cmp	r3, #1
 800312a:	d108      	bne.n	800313e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2202      	movs	r2, #2
 8003132:	4252      	negs	r2, r2
 8003134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	0018      	movs	r0, r3
 800313a:	f000 f8ef 	bl	800331c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2240      	movs	r2, #64	; 0x40
 8003146:	4013      	ands	r3, r2
 8003148:	2b40      	cmp	r3, #64	; 0x40
 800314a:	d10f      	bne.n	800316c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	2240      	movs	r2, #64	; 0x40
 8003154:	4013      	ands	r3, r2
 8003156:	2b40      	cmp	r3, #64	; 0x40
 8003158:	d108      	bne.n	800316c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2241      	movs	r2, #65	; 0x41
 8003160:	4252      	negs	r2, r2
 8003162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	0018      	movs	r0, r3
 8003168:	f000 f8f8 	bl	800335c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800316c:	46c0      	nop			; (mov r8, r8)
 800316e:	46bd      	mov	sp, r7
 8003170:	b002      	add	sp, #8
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800317e:	230f      	movs	r3, #15
 8003180:	18fb      	adds	r3, r7, r3
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2238      	movs	r2, #56	; 0x38
 800318a:	5c9b      	ldrb	r3, [r3, r2]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_TIM_ConfigClockSource+0x20>
 8003190:	2302      	movs	r3, #2
 8003192:	e0bc      	b.n	800330e <HAL_TIM_ConfigClockSource+0x19a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2238      	movs	r2, #56	; 0x38
 8003198:	2101      	movs	r1, #1
 800319a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2239      	movs	r2, #57	; 0x39
 80031a0:	2102      	movs	r1, #2
 80031a2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2277      	movs	r2, #119	; 0x77
 80031b0:	4393      	bics	r3, r2
 80031b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4a58      	ldr	r2, [pc, #352]	; (8003318 <HAL_TIM_ConfigClockSource+0x1a4>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2280      	movs	r2, #128	; 0x80
 80031ca:	0192      	lsls	r2, r2, #6
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d040      	beq.n	8003252 <HAL_TIM_ConfigClockSource+0xde>
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	0192      	lsls	r2, r2, #6
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d900      	bls.n	80031da <HAL_TIM_ConfigClockSource+0x66>
 80031d8:	e088      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	0152      	lsls	r2, r2, #5
 80031de:	4293      	cmp	r3, r2
 80031e0:	d100      	bne.n	80031e4 <HAL_TIM_ConfigClockSource+0x70>
 80031e2:	e088      	b.n	80032f6 <HAL_TIM_ConfigClockSource+0x182>
 80031e4:	2280      	movs	r2, #128	; 0x80
 80031e6:	0152      	lsls	r2, r2, #5
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d900      	bls.n	80031ee <HAL_TIM_ConfigClockSource+0x7a>
 80031ec:	e07e      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
 80031ee:	2b70      	cmp	r3, #112	; 0x70
 80031f0:	d018      	beq.n	8003224 <HAL_TIM_ConfigClockSource+0xb0>
 80031f2:	d900      	bls.n	80031f6 <HAL_TIM_ConfigClockSource+0x82>
 80031f4:	e07a      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
 80031f6:	2b60      	cmp	r3, #96	; 0x60
 80031f8:	d04f      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x126>
 80031fa:	d900      	bls.n	80031fe <HAL_TIM_ConfigClockSource+0x8a>
 80031fc:	e076      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
 80031fe:	2b50      	cmp	r3, #80	; 0x50
 8003200:	d03b      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x106>
 8003202:	d900      	bls.n	8003206 <HAL_TIM_ConfigClockSource+0x92>
 8003204:	e072      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	d057      	beq.n	80032ba <HAL_TIM_ConfigClockSource+0x146>
 800320a:	d900      	bls.n	800320e <HAL_TIM_ConfigClockSource+0x9a>
 800320c:	e06e      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
 800320e:	2b30      	cmp	r3, #48	; 0x30
 8003210:	d063      	beq.n	80032da <HAL_TIM_ConfigClockSource+0x166>
 8003212:	d86b      	bhi.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
 8003214:	2b20      	cmp	r3, #32
 8003216:	d060      	beq.n	80032da <HAL_TIM_ConfigClockSource+0x166>
 8003218:	d868      	bhi.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d05d      	beq.n	80032da <HAL_TIM_ConfigClockSource+0x166>
 800321e:	2b10      	cmp	r3, #16
 8003220:	d05b      	beq.n	80032da <HAL_TIM_ConfigClockSource+0x166>
 8003222:	e063      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003234:	f000 f968 	bl	8003508 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2277      	movs	r2, #119	; 0x77
 8003244:	4313      	orrs	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	609a      	str	r2, [r3, #8]
      break;
 8003250:	e052      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003262:	f000 f951 	bl	8003508 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2180      	movs	r1, #128	; 0x80
 8003272:	01c9      	lsls	r1, r1, #7
 8003274:	430a      	orrs	r2, r1
 8003276:	609a      	str	r2, [r3, #8]
      break;
 8003278:	e03e      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003286:	001a      	movs	r2, r3
 8003288:	f000 f8c4 	bl	8003414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2150      	movs	r1, #80	; 0x50
 8003292:	0018      	movs	r0, r3
 8003294:	f000 f91e 	bl	80034d4 <TIM_ITRx_SetConfig>
      break;
 8003298:	e02e      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032a6:	001a      	movs	r2, r3
 80032a8:	f000 f8e2 	bl	8003470 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2160      	movs	r1, #96	; 0x60
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 f90e 	bl	80034d4 <TIM_ITRx_SetConfig>
      break;
 80032b8:	e01e      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032c6:	001a      	movs	r2, r3
 80032c8:	f000 f8a4 	bl	8003414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2140      	movs	r1, #64	; 0x40
 80032d2:	0018      	movs	r0, r3
 80032d4:	f000 f8fe 	bl	80034d4 <TIM_ITRx_SetConfig>
      break;
 80032d8:	e00e      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	0019      	movs	r1, r3
 80032e4:	0010      	movs	r0, r2
 80032e6:	f000 f8f5 	bl	80034d4 <TIM_ITRx_SetConfig>
      break;
 80032ea:	e005      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80032ec:	230f      	movs	r3, #15
 80032ee:	18fb      	adds	r3, r7, r3
 80032f0:	2201      	movs	r2, #1
 80032f2:	701a      	strb	r2, [r3, #0]
      break;
 80032f4:	e000      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80032f6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2239      	movs	r2, #57	; 0x39
 80032fc:	2101      	movs	r1, #1
 80032fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2238      	movs	r2, #56	; 0x38
 8003304:	2100      	movs	r1, #0
 8003306:	5499      	strb	r1, [r3, r2]

  return status;
 8003308:	230f      	movs	r3, #15
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	781b      	ldrb	r3, [r3, #0]
}
 800330e:	0018      	movs	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	b004      	add	sp, #16
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	ffff00ff 	.word	0xffff00ff

0800331c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003324:	46c0      	nop			; (mov r8, r8)
 8003326:	46bd      	mov	sp, r7
 8003328:	b002      	add	sp, #8
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003334:	46c0      	nop			; (mov r8, r8)
 8003336:	46bd      	mov	sp, r7
 8003338:	b002      	add	sp, #8
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003344:	46c0      	nop			; (mov r8, r8)
 8003346:	46bd      	mov	sp, r7
 8003348:	b002      	add	sp, #8
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003354:	46c0      	nop			; (mov r8, r8)
 8003356:	46bd      	mov	sp, r7
 8003358:	b002      	add	sp, #8
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	b002      	add	sp, #8
 800336a:	bd80      	pop	{r7, pc}

0800336c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	2380      	movs	r3, #128	; 0x80
 8003380:	05db      	lsls	r3, r3, #23
 8003382:	429a      	cmp	r2, r3
 8003384:	d007      	beq.n	8003396 <TIM_Base_SetConfig+0x2a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a1f      	ldr	r2, [pc, #124]	; (8003408 <TIM_Base_SetConfig+0x9c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d003      	beq.n	8003396 <TIM_Base_SetConfig+0x2a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a1e      	ldr	r2, [pc, #120]	; (800340c <TIM_Base_SetConfig+0xa0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d108      	bne.n	80033a8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2270      	movs	r2, #112	; 0x70
 800339a:	4393      	bics	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	05db      	lsls	r3, r3, #23
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d007      	beq.n	80033c2 <TIM_Base_SetConfig+0x56>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a14      	ldr	r2, [pc, #80]	; (8003408 <TIM_Base_SetConfig+0x9c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d003      	beq.n	80033c2 <TIM_Base_SetConfig+0x56>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a13      	ldr	r2, [pc, #76]	; (800340c <TIM_Base_SetConfig+0xa0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d108      	bne.n	80033d4 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4a12      	ldr	r2, [pc, #72]	; (8003410 <TIM_Base_SetConfig+0xa4>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2280      	movs	r2, #128	; 0x80
 80033d8:	4393      	bics	r3, r2
 80033da:	001a      	movs	r2, r3
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	615a      	str	r2, [r3, #20]
}
 8003400:	46c0      	nop			; (mov r8, r8)
 8003402:	46bd      	mov	sp, r7
 8003404:	b004      	add	sp, #16
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40010800 	.word	0x40010800
 800340c:	40011400 	.word	0x40011400
 8003410:	fffffcff 	.word	0xfffffcff

08003414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	2201      	movs	r2, #1
 800342c:	4393      	bics	r3, r2
 800342e:	001a      	movs	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	22f0      	movs	r2, #240	; 0xf0
 800343e:	4393      	bics	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	220a      	movs	r2, #10
 8003450:	4393      	bics	r3, r2
 8003452:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	621a      	str	r2, [r3, #32]
}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	b006      	add	sp, #24
 800346e:	bd80      	pop	{r7, pc}

08003470 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	2210      	movs	r2, #16
 8003482:	4393      	bics	r3, r2
 8003484:	001a      	movs	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	4a0d      	ldr	r2, [pc, #52]	; (80034d0 <TIM_TI2_ConfigInputStage+0x60>)
 800349a:	4013      	ands	r3, r2
 800349c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	031b      	lsls	r3, r3, #12
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	22a0      	movs	r2, #160	; 0xa0
 80034ac:	4393      	bics	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	621a      	str	r2, [r3, #32]
}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b006      	add	sp, #24
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	ffff0fff 	.word	0xffff0fff

080034d4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2270      	movs	r2, #112	; 0x70
 80034e8:	4393      	bics	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	2207      	movs	r2, #7
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	609a      	str	r2, [r3, #8]
}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	46bd      	mov	sp, r7
 8003502:	b004      	add	sp, #16
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	4a09      	ldr	r2, [pc, #36]	; (8003544 <TIM_ETR_SetConfig+0x3c>)
 8003520:	4013      	ands	r3, r2
 8003522:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	021a      	lsls	r2, r3, #8
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	431a      	orrs	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4313      	orrs	r3, r2
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	609a      	str	r2, [r3, #8]
}
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	46bd      	mov	sp, r7
 8003540:	b006      	add	sp, #24
 8003542:	bd80      	pop	{r7, pc}
 8003544:	ffff00ff 	.word	0xffff00ff

08003548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2238      	movs	r2, #56	; 0x38
 8003556:	5c9b      	ldrb	r3, [r3, r2]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800355c:	2302      	movs	r3, #2
 800355e:	e042      	b.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2238      	movs	r2, #56	; 0x38
 8003564:	2101      	movs	r1, #1
 8003566:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2239      	movs	r2, #57	; 0x39
 800356c:	2102      	movs	r1, #2
 800356e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2270      	movs	r2, #112	; 0x70
 8003584:	4393      	bics	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	2380      	movs	r3, #128	; 0x80
 80035a0:	05db      	lsls	r3, r3, #23
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d009      	beq.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a11      	ldr	r2, [pc, #68]	; (80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d004      	beq.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a0f      	ldr	r2, [pc, #60]	; (80035f4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d10c      	bne.n	80035d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2280      	movs	r2, #128	; 0x80
 80035be:	4393      	bics	r3, r2
 80035c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2239      	movs	r2, #57	; 0x39
 80035d8:	2101      	movs	r1, #1
 80035da:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2238      	movs	r2, #56	; 0x38
 80035e0:	2100      	movs	r1, #0
 80035e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	0018      	movs	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b004      	add	sp, #16
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	40010800 	.word	0x40010800
 80035f4:	40011400 	.word	0x40011400

080035f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e044      	b.n	8003694 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800360e:	2b00      	cmp	r3, #0
 8003610:	d107      	bne.n	8003622 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2278      	movs	r2, #120	; 0x78
 8003616:	2100      	movs	r1, #0
 8003618:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	0018      	movs	r0, r3
 800361e:	f7fd fc75 	bl	8000f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2224      	movs	r2, #36	; 0x24
 8003626:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2101      	movs	r1, #1
 8003634:	438a      	bics	r2, r1
 8003636:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	0018      	movs	r0, r3
 800363c:	f000 f9b6 	bl	80039ac <UART_SetConfig>
 8003640:	0003      	movs	r3, r0
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e024      	b.n	8003694 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	0018      	movs	r0, r3
 8003656:	f000 fc2d 	bl	8003eb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	490d      	ldr	r1, [pc, #52]	; (800369c <HAL_UART_Init+0xa4>)
 8003666:	400a      	ands	r2, r1
 8003668:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	212a      	movs	r1, #42	; 0x2a
 8003676:	438a      	bics	r2, r1
 8003678:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2101      	movs	r1, #1
 8003686:	430a      	orrs	r2, r1
 8003688:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	0018      	movs	r0, r3
 800368e:	f000 fcc5 	bl	800401c <UART_CheckIdleState>
 8003692:	0003      	movs	r3, r0
}
 8003694:	0018      	movs	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	b002      	add	sp, #8
 800369a:	bd80      	pop	{r7, pc}
 800369c:	ffffb7ff 	.word	0xffffb7ff

080036a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08a      	sub	sp, #40	; 0x28
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	1dbb      	adds	r3, r7, #6
 80036ae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d000      	beq.n	80036ba <HAL_UART_Transmit+0x1a>
 80036b8:	e08c      	b.n	80037d4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_UART_Transmit+0x28>
 80036c0:	1dbb      	adds	r3, r7, #6
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e084      	b.n	80037d6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	015b      	lsls	r3, r3, #5
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d109      	bne.n	80036ec <HAL_UART_Transmit+0x4c>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d105      	bne.n	80036ec <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2201      	movs	r2, #1
 80036e4:	4013      	ands	r3, r2
 80036e6:	d001      	beq.n	80036ec <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e074      	b.n	80037d6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2284      	movs	r2, #132	; 0x84
 80036f0:	2100      	movs	r1, #0
 80036f2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2221      	movs	r2, #33	; 0x21
 80036f8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036fa:	f7fd fe0f 	bl	800131c <HAL_GetTick>
 80036fe:	0003      	movs	r3, r0
 8003700:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1dba      	adds	r2, r7, #6
 8003706:	2150      	movs	r1, #80	; 0x50
 8003708:	8812      	ldrh	r2, [r2, #0]
 800370a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	1dba      	adds	r2, r7, #6
 8003710:	2152      	movs	r1, #82	; 0x52
 8003712:	8812      	ldrh	r2, [r2, #0]
 8003714:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	2380      	movs	r3, #128	; 0x80
 800371c:	015b      	lsls	r3, r3, #5
 800371e:	429a      	cmp	r2, r3
 8003720:	d108      	bne.n	8003734 <HAL_UART_Transmit+0x94>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d104      	bne.n	8003734 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	61bb      	str	r3, [r7, #24]
 8003732:	e003      	b.n	800373c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003738:	2300      	movs	r3, #0
 800373a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800373c:	e02f      	b.n	800379e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	0013      	movs	r3, r2
 8003748:	2200      	movs	r2, #0
 800374a:	2180      	movs	r1, #128	; 0x80
 800374c:	f000 fd0e 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 8003750:	1e03      	subs	r3, r0, #0
 8003752:	d004      	beq.n	800375e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e03b      	b.n	80037d6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10b      	bne.n	800377c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	001a      	movs	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	05d2      	lsls	r2, r2, #23
 8003770:	0dd2      	lsrs	r2, r2, #23
 8003772:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	3302      	adds	r3, #2
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	e007      	b.n	800378c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	781a      	ldrb	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3301      	adds	r3, #1
 800378a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2252      	movs	r2, #82	; 0x52
 8003790:	5a9b      	ldrh	r3, [r3, r2]
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b299      	uxth	r1, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2252      	movs	r2, #82	; 0x52
 800379c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2252      	movs	r2, #82	; 0x52
 80037a2:	5a9b      	ldrh	r3, [r3, r2]
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1c9      	bne.n	800373e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	0013      	movs	r3, r2
 80037b4:	2200      	movs	r2, #0
 80037b6:	2140      	movs	r1, #64	; 0x40
 80037b8:	f000 fcd8 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 80037bc:	1e03      	subs	r3, r0, #0
 80037be:	d004      	beq.n	80037ca <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e005      	b.n	80037d6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2220      	movs	r2, #32
 80037ce:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	e000      	b.n	80037d6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80037d4:	2302      	movs	r3, #2
  }
}
 80037d6:	0018      	movs	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	b008      	add	sp, #32
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08a      	sub	sp, #40	; 0x28
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	1dbb      	adds	r3, r7, #6
 80037ee:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2280      	movs	r2, #128	; 0x80
 80037f4:	589b      	ldr	r3, [r3, r2]
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d000      	beq.n	80037fc <HAL_UART_Receive+0x1c>
 80037fa:	e0d0      	b.n	800399e <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_UART_Receive+0x2a>
 8003802:	1dbb      	adds	r3, r7, #6
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e0c8      	b.n	80039a0 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	2380      	movs	r3, #128	; 0x80
 8003814:	015b      	lsls	r3, r3, #5
 8003816:	429a      	cmp	r2, r3
 8003818:	d109      	bne.n	800382e <HAL_UART_Receive+0x4e>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d105      	bne.n	800382e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2201      	movs	r2, #1
 8003826:	4013      	ands	r3, r2
 8003828:	d001      	beq.n	800382e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e0b8      	b.n	80039a0 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2284      	movs	r2, #132	; 0x84
 8003832:	2100      	movs	r1, #0
 8003834:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2280      	movs	r2, #128	; 0x80
 800383a:	2122      	movs	r1, #34	; 0x22
 800383c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003844:	f7fd fd6a 	bl	800131c <HAL_GetTick>
 8003848:	0003      	movs	r3, r0
 800384a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1dba      	adds	r2, r7, #6
 8003850:	2158      	movs	r1, #88	; 0x58
 8003852:	8812      	ldrh	r2, [r2, #0]
 8003854:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1dba      	adds	r2, r7, #6
 800385a:	215a      	movs	r1, #90	; 0x5a
 800385c:	8812      	ldrh	r2, [r2, #0]
 800385e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	2380      	movs	r3, #128	; 0x80
 8003866:	015b      	lsls	r3, r3, #5
 8003868:	429a      	cmp	r2, r3
 800386a:	d10d      	bne.n	8003888 <HAL_UART_Receive+0xa8>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d104      	bne.n	800387e <HAL_UART_Receive+0x9e>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	225c      	movs	r2, #92	; 0x5c
 8003878:	494b      	ldr	r1, [pc, #300]	; (80039a8 <HAL_UART_Receive+0x1c8>)
 800387a:	5299      	strh	r1, [r3, r2]
 800387c:	e02e      	b.n	80038dc <HAL_UART_Receive+0xfc>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	225c      	movs	r2, #92	; 0x5c
 8003882:	21ff      	movs	r1, #255	; 0xff
 8003884:	5299      	strh	r1, [r3, r2]
 8003886:	e029      	b.n	80038dc <HAL_UART_Receive+0xfc>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10d      	bne.n	80038ac <HAL_UART_Receive+0xcc>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d104      	bne.n	80038a2 <HAL_UART_Receive+0xc2>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	225c      	movs	r2, #92	; 0x5c
 800389c:	21ff      	movs	r1, #255	; 0xff
 800389e:	5299      	strh	r1, [r3, r2]
 80038a0:	e01c      	b.n	80038dc <HAL_UART_Receive+0xfc>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	225c      	movs	r2, #92	; 0x5c
 80038a6:	217f      	movs	r1, #127	; 0x7f
 80038a8:	5299      	strh	r1, [r3, r2]
 80038aa:	e017      	b.n	80038dc <HAL_UART_Receive+0xfc>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	2380      	movs	r3, #128	; 0x80
 80038b2:	055b      	lsls	r3, r3, #21
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d10d      	bne.n	80038d4 <HAL_UART_Receive+0xf4>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d104      	bne.n	80038ca <HAL_UART_Receive+0xea>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	225c      	movs	r2, #92	; 0x5c
 80038c4:	217f      	movs	r1, #127	; 0x7f
 80038c6:	5299      	strh	r1, [r3, r2]
 80038c8:	e008      	b.n	80038dc <HAL_UART_Receive+0xfc>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	225c      	movs	r2, #92	; 0x5c
 80038ce:	213f      	movs	r1, #63	; 0x3f
 80038d0:	5299      	strh	r1, [r3, r2]
 80038d2:	e003      	b.n	80038dc <HAL_UART_Receive+0xfc>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	225c      	movs	r2, #92	; 0x5c
 80038d8:	2100      	movs	r1, #0
 80038da:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80038dc:	2312      	movs	r3, #18
 80038de:	18fb      	adds	r3, r7, r3
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	215c      	movs	r1, #92	; 0x5c
 80038e4:	5a52      	ldrh	r2, [r2, r1]
 80038e6:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	015b      	lsls	r3, r3, #5
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d108      	bne.n	8003906 <HAL_UART_Receive+0x126>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d104      	bne.n	8003906 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80038fc:	2300      	movs	r3, #0
 80038fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	61bb      	str	r3, [r7, #24]
 8003904:	e003      	b.n	800390e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800390a:	2300      	movs	r3, #0
 800390c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800390e:	e03a      	b.n	8003986 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	0013      	movs	r3, r2
 800391a:	2200      	movs	r2, #0
 800391c:	2120      	movs	r1, #32
 800391e:	f000 fc25 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 8003922:	1e03      	subs	r3, r0, #0
 8003924:	d005      	beq.n	8003932 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2280      	movs	r2, #128	; 0x80
 800392a:	2120      	movs	r1, #32
 800392c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e036      	b.n	80039a0 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10e      	bne.n	8003956 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	b29b      	uxth	r3, r3
 8003940:	2212      	movs	r2, #18
 8003942:	18ba      	adds	r2, r7, r2
 8003944:	8812      	ldrh	r2, [r2, #0]
 8003946:	4013      	ands	r3, r2
 8003948:	b29a      	uxth	r2, r3
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	3302      	adds	r3, #2
 8003952:	61bb      	str	r3, [r7, #24]
 8003954:	e00e      	b.n	8003974 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2212      	movs	r2, #18
 8003960:	18ba      	adds	r2, r7, r2
 8003962:	8812      	ldrh	r2, [r2, #0]
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	4013      	ands	r3, r2
 8003968:	b2da      	uxtb	r2, r3
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	3301      	adds	r3, #1
 8003972:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	225a      	movs	r2, #90	; 0x5a
 8003978:	5a9b      	ldrh	r3, [r3, r2]
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b299      	uxth	r1, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	225a      	movs	r2, #90	; 0x5a
 8003984:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	225a      	movs	r2, #90	; 0x5a
 800398a:	5a9b      	ldrh	r3, [r3, r2]
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1be      	bne.n	8003910 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2280      	movs	r2, #128	; 0x80
 8003996:	2120      	movs	r1, #32
 8003998:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	e000      	b.n	80039a0 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800399e:	2302      	movs	r3, #2
  }
}
 80039a0:	0018      	movs	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b008      	add	sp, #32
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	000001ff 	.word	0x000001ff

080039ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039ac:	b5b0      	push	{r4, r5, r7, lr}
 80039ae:	b08e      	sub	sp, #56	; 0x38
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039b4:	231a      	movs	r3, #26
 80039b6:	2218      	movs	r2, #24
 80039b8:	189b      	adds	r3, r3, r2
 80039ba:	19db      	adds	r3, r3, r7
 80039bc:	2200      	movs	r2, #0
 80039be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	431a      	orrs	r2, r3
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	431a      	orrs	r2, r3
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4ac6      	ldr	r2, [pc, #792]	; (8003cf8 <UART_SetConfig+0x34c>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	0019      	movs	r1, r3
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039ea:	430a      	orrs	r2, r1
 80039ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	4ac1      	ldr	r2, [pc, #772]	; (8003cfc <UART_SetConfig+0x350>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	0019      	movs	r1, r3
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4abb      	ldr	r2, [pc, #748]	; (8003d00 <UART_SetConfig+0x354>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d004      	beq.n	8003a20 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	4ab7      	ldr	r2, [pc, #732]	; (8003d04 <UART_SetConfig+0x358>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	0019      	movs	r1, r3
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a32:	430a      	orrs	r2, r1
 8003a34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4ab3      	ldr	r2, [pc, #716]	; (8003d08 <UART_SetConfig+0x35c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d131      	bne.n	8003aa4 <UART_SetConfig+0xf8>
 8003a40:	4bb2      	ldr	r3, [pc, #712]	; (8003d0c <UART_SetConfig+0x360>)
 8003a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a44:	2203      	movs	r2, #3
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d01d      	beq.n	8003a88 <UART_SetConfig+0xdc>
 8003a4c:	d823      	bhi.n	8003a96 <UART_SetConfig+0xea>
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d00c      	beq.n	8003a6c <UART_SetConfig+0xc0>
 8003a52:	d820      	bhi.n	8003a96 <UART_SetConfig+0xea>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <UART_SetConfig+0xb2>
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d00e      	beq.n	8003a7a <UART_SetConfig+0xce>
 8003a5c:	e01b      	b.n	8003a96 <UART_SetConfig+0xea>
 8003a5e:	231b      	movs	r3, #27
 8003a60:	2218      	movs	r2, #24
 8003a62:	189b      	adds	r3, r3, r2
 8003a64:	19db      	adds	r3, r3, r7
 8003a66:	2201      	movs	r2, #1
 8003a68:	701a      	strb	r2, [r3, #0]
 8003a6a:	e09c      	b.n	8003ba6 <UART_SetConfig+0x1fa>
 8003a6c:	231b      	movs	r3, #27
 8003a6e:	2218      	movs	r2, #24
 8003a70:	189b      	adds	r3, r3, r2
 8003a72:	19db      	adds	r3, r3, r7
 8003a74:	2202      	movs	r2, #2
 8003a76:	701a      	strb	r2, [r3, #0]
 8003a78:	e095      	b.n	8003ba6 <UART_SetConfig+0x1fa>
 8003a7a:	231b      	movs	r3, #27
 8003a7c:	2218      	movs	r2, #24
 8003a7e:	189b      	adds	r3, r3, r2
 8003a80:	19db      	adds	r3, r3, r7
 8003a82:	2204      	movs	r2, #4
 8003a84:	701a      	strb	r2, [r3, #0]
 8003a86:	e08e      	b.n	8003ba6 <UART_SetConfig+0x1fa>
 8003a88:	231b      	movs	r3, #27
 8003a8a:	2218      	movs	r2, #24
 8003a8c:	189b      	adds	r3, r3, r2
 8003a8e:	19db      	adds	r3, r3, r7
 8003a90:	2208      	movs	r2, #8
 8003a92:	701a      	strb	r2, [r3, #0]
 8003a94:	e087      	b.n	8003ba6 <UART_SetConfig+0x1fa>
 8003a96:	231b      	movs	r3, #27
 8003a98:	2218      	movs	r2, #24
 8003a9a:	189b      	adds	r3, r3, r2
 8003a9c:	19db      	adds	r3, r3, r7
 8003a9e:	2210      	movs	r2, #16
 8003aa0:	701a      	strb	r2, [r3, #0]
 8003aa2:	e080      	b.n	8003ba6 <UART_SetConfig+0x1fa>
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a99      	ldr	r2, [pc, #612]	; (8003d10 <UART_SetConfig+0x364>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d131      	bne.n	8003b12 <UART_SetConfig+0x166>
 8003aae:	4b97      	ldr	r3, [pc, #604]	; (8003d0c <UART_SetConfig+0x360>)
 8003ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab2:	220c      	movs	r2, #12
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b0c      	cmp	r3, #12
 8003ab8:	d01d      	beq.n	8003af6 <UART_SetConfig+0x14a>
 8003aba:	d823      	bhi.n	8003b04 <UART_SetConfig+0x158>
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d00c      	beq.n	8003ada <UART_SetConfig+0x12e>
 8003ac0:	d820      	bhi.n	8003b04 <UART_SetConfig+0x158>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <UART_SetConfig+0x120>
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d00e      	beq.n	8003ae8 <UART_SetConfig+0x13c>
 8003aca:	e01b      	b.n	8003b04 <UART_SetConfig+0x158>
 8003acc:	231b      	movs	r3, #27
 8003ace:	2218      	movs	r2, #24
 8003ad0:	189b      	adds	r3, r3, r2
 8003ad2:	19db      	adds	r3, r3, r7
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	701a      	strb	r2, [r3, #0]
 8003ad8:	e065      	b.n	8003ba6 <UART_SetConfig+0x1fa>
 8003ada:	231b      	movs	r3, #27
 8003adc:	2218      	movs	r2, #24
 8003ade:	189b      	adds	r3, r3, r2
 8003ae0:	19db      	adds	r3, r3, r7
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	701a      	strb	r2, [r3, #0]
 8003ae6:	e05e      	b.n	8003ba6 <UART_SetConfig+0x1fa>
 8003ae8:	231b      	movs	r3, #27
 8003aea:	2218      	movs	r2, #24
 8003aec:	189b      	adds	r3, r3, r2
 8003aee:	19db      	adds	r3, r3, r7
 8003af0:	2204      	movs	r2, #4
 8003af2:	701a      	strb	r2, [r3, #0]
 8003af4:	e057      	b.n	8003ba6 <UART_SetConfig+0x1fa>
 8003af6:	231b      	movs	r3, #27
 8003af8:	2218      	movs	r2, #24
 8003afa:	189b      	adds	r3, r3, r2
 8003afc:	19db      	adds	r3, r3, r7
 8003afe:	2208      	movs	r2, #8
 8003b00:	701a      	strb	r2, [r3, #0]
 8003b02:	e050      	b.n	8003ba6 <UART_SetConfig+0x1fa>
 8003b04:	231b      	movs	r3, #27
 8003b06:	2218      	movs	r2, #24
 8003b08:	189b      	adds	r3, r3, r2
 8003b0a:	19db      	adds	r3, r3, r7
 8003b0c:	2210      	movs	r2, #16
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	e049      	b.n	8003ba6 <UART_SetConfig+0x1fa>
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a7a      	ldr	r2, [pc, #488]	; (8003d00 <UART_SetConfig+0x354>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d13e      	bne.n	8003b9a <UART_SetConfig+0x1ee>
 8003b1c:	4b7b      	ldr	r3, [pc, #492]	; (8003d0c <UART_SetConfig+0x360>)
 8003b1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b20:	23c0      	movs	r3, #192	; 0xc0
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	4013      	ands	r3, r2
 8003b26:	22c0      	movs	r2, #192	; 0xc0
 8003b28:	0112      	lsls	r2, r2, #4
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d027      	beq.n	8003b7e <UART_SetConfig+0x1d2>
 8003b2e:	22c0      	movs	r2, #192	; 0xc0
 8003b30:	0112      	lsls	r2, r2, #4
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d82a      	bhi.n	8003b8c <UART_SetConfig+0x1e0>
 8003b36:	2280      	movs	r2, #128	; 0x80
 8003b38:	0112      	lsls	r2, r2, #4
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d011      	beq.n	8003b62 <UART_SetConfig+0x1b6>
 8003b3e:	2280      	movs	r2, #128	; 0x80
 8003b40:	0112      	lsls	r2, r2, #4
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d822      	bhi.n	8003b8c <UART_SetConfig+0x1e0>
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d004      	beq.n	8003b54 <UART_SetConfig+0x1a8>
 8003b4a:	2280      	movs	r2, #128	; 0x80
 8003b4c:	00d2      	lsls	r2, r2, #3
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00e      	beq.n	8003b70 <UART_SetConfig+0x1c4>
 8003b52:	e01b      	b.n	8003b8c <UART_SetConfig+0x1e0>
 8003b54:	231b      	movs	r3, #27
 8003b56:	2218      	movs	r2, #24
 8003b58:	189b      	adds	r3, r3, r2
 8003b5a:	19db      	adds	r3, r3, r7
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	701a      	strb	r2, [r3, #0]
 8003b60:	e021      	b.n	8003ba6 <UART_SetConfig+0x1fa>
 8003b62:	231b      	movs	r3, #27
 8003b64:	2218      	movs	r2, #24
 8003b66:	189b      	adds	r3, r3, r2
 8003b68:	19db      	adds	r3, r3, r7
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	701a      	strb	r2, [r3, #0]
 8003b6e:	e01a      	b.n	8003ba6 <UART_SetConfig+0x1fa>
 8003b70:	231b      	movs	r3, #27
 8003b72:	2218      	movs	r2, #24
 8003b74:	189b      	adds	r3, r3, r2
 8003b76:	19db      	adds	r3, r3, r7
 8003b78:	2204      	movs	r2, #4
 8003b7a:	701a      	strb	r2, [r3, #0]
 8003b7c:	e013      	b.n	8003ba6 <UART_SetConfig+0x1fa>
 8003b7e:	231b      	movs	r3, #27
 8003b80:	2218      	movs	r2, #24
 8003b82:	189b      	adds	r3, r3, r2
 8003b84:	19db      	adds	r3, r3, r7
 8003b86:	2208      	movs	r2, #8
 8003b88:	701a      	strb	r2, [r3, #0]
 8003b8a:	e00c      	b.n	8003ba6 <UART_SetConfig+0x1fa>
 8003b8c:	231b      	movs	r3, #27
 8003b8e:	2218      	movs	r2, #24
 8003b90:	189b      	adds	r3, r3, r2
 8003b92:	19db      	adds	r3, r3, r7
 8003b94:	2210      	movs	r2, #16
 8003b96:	701a      	strb	r2, [r3, #0]
 8003b98:	e005      	b.n	8003ba6 <UART_SetConfig+0x1fa>
 8003b9a:	231b      	movs	r3, #27
 8003b9c:	2218      	movs	r2, #24
 8003b9e:	189b      	adds	r3, r3, r2
 8003ba0:	19db      	adds	r3, r3, r7
 8003ba2:	2210      	movs	r2, #16
 8003ba4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a55      	ldr	r2, [pc, #340]	; (8003d00 <UART_SetConfig+0x354>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d000      	beq.n	8003bb2 <UART_SetConfig+0x206>
 8003bb0:	e084      	b.n	8003cbc <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bb2:	231b      	movs	r3, #27
 8003bb4:	2218      	movs	r2, #24
 8003bb6:	189b      	adds	r3, r3, r2
 8003bb8:	19db      	adds	r3, r3, r7
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d01d      	beq.n	8003bfc <UART_SetConfig+0x250>
 8003bc0:	dc20      	bgt.n	8003c04 <UART_SetConfig+0x258>
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d015      	beq.n	8003bf2 <UART_SetConfig+0x246>
 8003bc6:	dc1d      	bgt.n	8003c04 <UART_SetConfig+0x258>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <UART_SetConfig+0x226>
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d005      	beq.n	8003bdc <UART_SetConfig+0x230>
 8003bd0:	e018      	b.n	8003c04 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd2:	f7fe ff91 	bl	8002af8 <HAL_RCC_GetPCLK1Freq>
 8003bd6:	0003      	movs	r3, r0
 8003bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003bda:	e01c      	b.n	8003c16 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bdc:	4b4b      	ldr	r3, [pc, #300]	; (8003d0c <UART_SetConfig+0x360>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2210      	movs	r2, #16
 8003be2:	4013      	ands	r3, r2
 8003be4:	d002      	beq.n	8003bec <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003be6:	4b4b      	ldr	r3, [pc, #300]	; (8003d14 <UART_SetConfig+0x368>)
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003bea:	e014      	b.n	8003c16 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8003bec:	4b4a      	ldr	r3, [pc, #296]	; (8003d18 <UART_SetConfig+0x36c>)
 8003bee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003bf0:	e011      	b.n	8003c16 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bf2:	f7fe fed1 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 8003bf6:	0003      	movs	r3, r0
 8003bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003bfa:	e00c      	b.n	8003c16 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c02:	e008      	b.n	8003c16 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003c08:	231a      	movs	r3, #26
 8003c0a:	2218      	movs	r2, #24
 8003c0c:	189b      	adds	r3, r3, r2
 8003c0e:	19db      	adds	r3, r3, r7
 8003c10:	2201      	movs	r2, #1
 8003c12:	701a      	strb	r2, [r3, #0]
        break;
 8003c14:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d100      	bne.n	8003c1e <UART_SetConfig+0x272>
 8003c1c:	e132      	b.n	8003e84 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	0013      	movs	r3, r2
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	189b      	adds	r3, r3, r2
 8003c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d305      	bcc.n	8003c3a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d906      	bls.n	8003c48 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8003c3a:	231a      	movs	r3, #26
 8003c3c:	2218      	movs	r2, #24
 8003c3e:	189b      	adds	r3, r3, r2
 8003c40:	19db      	adds	r3, r3, r7
 8003c42:	2201      	movs	r2, #1
 8003c44:	701a      	strb	r2, [r3, #0]
 8003c46:	e11d      	b.n	8003e84 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	6939      	ldr	r1, [r7, #16]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	000b      	movs	r3, r1
 8003c56:	0e1b      	lsrs	r3, r3, #24
 8003c58:	0010      	movs	r0, r2
 8003c5a:	0205      	lsls	r5, r0, #8
 8003c5c:	431d      	orrs	r5, r3
 8003c5e:	000b      	movs	r3, r1
 8003c60:	021c      	lsls	r4, r3, #8
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	085b      	lsrs	r3, r3, #1
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	68b8      	ldr	r0, [r7, #8]
 8003c70:	68f9      	ldr	r1, [r7, #12]
 8003c72:	1900      	adds	r0, r0, r4
 8003c74:	4169      	adcs	r1, r5
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	607b      	str	r3, [r7, #4]
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f7fc fade 	bl	8000244 <__aeabi_uldivmod>
 8003c88:	0002      	movs	r2, r0
 8003c8a:	000b      	movs	r3, r1
 8003c8c:	0013      	movs	r3, r2
 8003c8e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c92:	23c0      	movs	r3, #192	; 0xc0
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d309      	bcc.n	8003cae <UART_SetConfig+0x302>
 8003c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c9c:	2380      	movs	r3, #128	; 0x80
 8003c9e:	035b      	lsls	r3, r3, #13
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d204      	bcs.n	8003cae <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003caa:	60da      	str	r2, [r3, #12]
 8003cac:	e0ea      	b.n	8003e84 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8003cae:	231a      	movs	r3, #26
 8003cb0:	2218      	movs	r2, #24
 8003cb2:	189b      	adds	r3, r3, r2
 8003cb4:	19db      	adds	r3, r3, r7
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	701a      	strb	r2, [r3, #0]
 8003cba:	e0e3      	b.n	8003e84 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	2380      	movs	r3, #128	; 0x80
 8003cc2:	021b      	lsls	r3, r3, #8
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d000      	beq.n	8003cca <UART_SetConfig+0x31e>
 8003cc8:	e085      	b.n	8003dd6 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8003cca:	231b      	movs	r3, #27
 8003ccc:	2218      	movs	r2, #24
 8003cce:	189b      	adds	r3, r3, r2
 8003cd0:	19db      	adds	r3, r3, r7
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d837      	bhi.n	8003d48 <UART_SetConfig+0x39c>
 8003cd8:	009a      	lsls	r2, r3, #2
 8003cda:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <UART_SetConfig+0x370>)
 8003cdc:	18d3      	adds	r3, r2, r3
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ce2:	f7fe ff09 	bl	8002af8 <HAL_RCC_GetPCLK1Freq>
 8003ce6:	0003      	movs	r3, r0
 8003ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003cea:	e036      	b.n	8003d5a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cec:	f7fe ff1a 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003cf4:	e031      	b.n	8003d5a <UART_SetConfig+0x3ae>
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	efff69f3 	.word	0xefff69f3
 8003cfc:	ffffcfff 	.word	0xffffcfff
 8003d00:	40004800 	.word	0x40004800
 8003d04:	fffff4ff 	.word	0xfffff4ff
 8003d08:	40013800 	.word	0x40013800
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	40004400 	.word	0x40004400
 8003d14:	003d0900 	.word	0x003d0900
 8003d18:	00f42400 	.word	0x00f42400
 8003d1c:	08004cd4 	.word	0x08004cd4
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d20:	4b60      	ldr	r3, [pc, #384]	; (8003ea4 <UART_SetConfig+0x4f8>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2210      	movs	r2, #16
 8003d26:	4013      	ands	r3, r2
 8003d28:	d002      	beq.n	8003d30 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003d2a:	4b5f      	ldr	r3, [pc, #380]	; (8003ea8 <UART_SetConfig+0x4fc>)
 8003d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003d2e:	e014      	b.n	8003d5a <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8003d30:	4b5e      	ldr	r3, [pc, #376]	; (8003eac <UART_SetConfig+0x500>)
 8003d32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d34:	e011      	b.n	8003d5a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d36:	f7fe fe2f 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d3e:	e00c      	b.n	8003d5a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d46:	e008      	b.n	8003d5a <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003d4c:	231a      	movs	r3, #26
 8003d4e:	2218      	movs	r2, #24
 8003d50:	189b      	adds	r3, r3, r2
 8003d52:	19db      	adds	r3, r3, r7
 8003d54:	2201      	movs	r2, #1
 8003d56:	701a      	strb	r2, [r3, #0]
        break;
 8003d58:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d100      	bne.n	8003d62 <UART_SetConfig+0x3b6>
 8003d60:	e090      	b.n	8003e84 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d64:	005a      	lsls	r2, r3, #1
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	085b      	lsrs	r3, r3, #1
 8003d6c:	18d2      	adds	r2, r2, r3
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	0019      	movs	r1, r3
 8003d74:	0010      	movs	r0, r2
 8003d76:	f7fc f9d9 	bl	800012c <__udivsi3>
 8003d7a:	0003      	movs	r3, r0
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d80:	2b0f      	cmp	r3, #15
 8003d82:	d921      	bls.n	8003dc8 <UART_SetConfig+0x41c>
 8003d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d86:	2380      	movs	r3, #128	; 0x80
 8003d88:	025b      	lsls	r3, r3, #9
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d21c      	bcs.n	8003dc8 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	200e      	movs	r0, #14
 8003d94:	2418      	movs	r4, #24
 8003d96:	1903      	adds	r3, r0, r4
 8003d98:	19db      	adds	r3, r3, r7
 8003d9a:	210f      	movs	r1, #15
 8003d9c:	438a      	bics	r2, r1
 8003d9e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da2:	085b      	lsrs	r3, r3, #1
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2207      	movs	r2, #7
 8003da8:	4013      	ands	r3, r2
 8003daa:	b299      	uxth	r1, r3
 8003dac:	1903      	adds	r3, r0, r4
 8003dae:	19db      	adds	r3, r3, r7
 8003db0:	1902      	adds	r2, r0, r4
 8003db2:	19d2      	adds	r2, r2, r7
 8003db4:	8812      	ldrh	r2, [r2, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	1902      	adds	r2, r0, r4
 8003dc0:	19d2      	adds	r2, r2, r7
 8003dc2:	8812      	ldrh	r2, [r2, #0]
 8003dc4:	60da      	str	r2, [r3, #12]
 8003dc6:	e05d      	b.n	8003e84 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003dc8:	231a      	movs	r3, #26
 8003dca:	2218      	movs	r2, #24
 8003dcc:	189b      	adds	r3, r3, r2
 8003dce:	19db      	adds	r3, r3, r7
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	701a      	strb	r2, [r3, #0]
 8003dd4:	e056      	b.n	8003e84 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dd6:	231b      	movs	r3, #27
 8003dd8:	2218      	movs	r2, #24
 8003dda:	189b      	adds	r3, r3, r2
 8003ddc:	19db      	adds	r3, r3, r7
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d822      	bhi.n	8003e2a <UART_SetConfig+0x47e>
 8003de4:	009a      	lsls	r2, r3, #2
 8003de6:	4b32      	ldr	r3, [pc, #200]	; (8003eb0 <UART_SetConfig+0x504>)
 8003de8:	18d3      	adds	r3, r2, r3
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dee:	f7fe fe83 	bl	8002af8 <HAL_RCC_GetPCLK1Freq>
 8003df2:	0003      	movs	r3, r0
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003df6:	e021      	b.n	8003e3c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003df8:	f7fe fe94 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e00:	e01c      	b.n	8003e3c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e02:	4b28      	ldr	r3, [pc, #160]	; (8003ea4 <UART_SetConfig+0x4f8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2210      	movs	r2, #16
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d002      	beq.n	8003e12 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003e0c:	4b26      	ldr	r3, [pc, #152]	; (8003ea8 <UART_SetConfig+0x4fc>)
 8003e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003e10:	e014      	b.n	8003e3c <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8003e12:	4b26      	ldr	r3, [pc, #152]	; (8003eac <UART_SetConfig+0x500>)
 8003e14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e16:	e011      	b.n	8003e3c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e18:	f7fe fdbe 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 8003e1c:	0003      	movs	r3, r0
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e20:	e00c      	b.n	8003e3c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e22:	2380      	movs	r3, #128	; 0x80
 8003e24:	021b      	lsls	r3, r3, #8
 8003e26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e28:	e008      	b.n	8003e3c <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003e2e:	231a      	movs	r3, #26
 8003e30:	2218      	movs	r2, #24
 8003e32:	189b      	adds	r3, r3, r2
 8003e34:	19db      	adds	r3, r3, r7
 8003e36:	2201      	movs	r2, #1
 8003e38:	701a      	strb	r2, [r3, #0]
        break;
 8003e3a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d020      	beq.n	8003e84 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	085a      	lsrs	r2, r3, #1
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	18d2      	adds	r2, r2, r3
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	0019      	movs	r1, r3
 8003e52:	0010      	movs	r0, r2
 8003e54:	f7fc f96a 	bl	800012c <__udivsi3>
 8003e58:	0003      	movs	r3, r0
 8003e5a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	2b0f      	cmp	r3, #15
 8003e60:	d90a      	bls.n	8003e78 <UART_SetConfig+0x4cc>
 8003e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	025b      	lsls	r3, r3, #9
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d205      	bcs.n	8003e78 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60da      	str	r2, [r3, #12]
 8003e76:	e005      	b.n	8003e84 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003e78:	231a      	movs	r3, #26
 8003e7a:	2218      	movs	r2, #24
 8003e7c:	189b      	adds	r3, r3, r2
 8003e7e:	19db      	adds	r3, r3, r7
 8003e80:	2201      	movs	r2, #1
 8003e82:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	2200      	movs	r2, #0
 8003e88:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003e90:	231a      	movs	r3, #26
 8003e92:	2218      	movs	r2, #24
 8003e94:	189b      	adds	r3, r3, r2
 8003e96:	19db      	adds	r3, r3, r7
 8003e98:	781b      	ldrb	r3, [r3, #0]
}
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b00e      	add	sp, #56	; 0x38
 8003ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	003d0900 	.word	0x003d0900
 8003eac:	00f42400 	.word	0x00f42400
 8003eb0:	08004cf8 	.word	0x08004cf8

08003eb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d00b      	beq.n	8003ede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	4a4a      	ldr	r2, [pc, #296]	; (8003ff8 <UART_AdvFeatureConfig+0x144>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	0019      	movs	r1, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d00b      	beq.n	8003f00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4a43      	ldr	r2, [pc, #268]	; (8003ffc <UART_AdvFeatureConfig+0x148>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	0019      	movs	r1, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	2204      	movs	r2, #4
 8003f06:	4013      	ands	r3, r2
 8003f08:	d00b      	beq.n	8003f22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4a3b      	ldr	r2, [pc, #236]	; (8004000 <UART_AdvFeatureConfig+0x14c>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	0019      	movs	r1, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	2208      	movs	r2, #8
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d00b      	beq.n	8003f44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	4a34      	ldr	r2, [pc, #208]	; (8004004 <UART_AdvFeatureConfig+0x150>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	0019      	movs	r1, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	2210      	movs	r2, #16
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d00b      	beq.n	8003f66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	4a2c      	ldr	r2, [pc, #176]	; (8004008 <UART_AdvFeatureConfig+0x154>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	0019      	movs	r1, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d00b      	beq.n	8003f88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	4a25      	ldr	r2, [pc, #148]	; (800400c <UART_AdvFeatureConfig+0x158>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	0019      	movs	r1, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	2240      	movs	r2, #64	; 0x40
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d01d      	beq.n	8003fce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	4a1d      	ldr	r2, [pc, #116]	; (8004010 <UART_AdvFeatureConfig+0x15c>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	0019      	movs	r1, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fae:	2380      	movs	r3, #128	; 0x80
 8003fb0:	035b      	lsls	r3, r3, #13
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d10b      	bne.n	8003fce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	4a15      	ldr	r2, [pc, #84]	; (8004014 <UART_AdvFeatureConfig+0x160>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	0019      	movs	r1, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	2280      	movs	r2, #128	; 0x80
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d00b      	beq.n	8003ff0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	4a0e      	ldr	r2, [pc, #56]	; (8004018 <UART_AdvFeatureConfig+0x164>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	0019      	movs	r1, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	605a      	str	r2, [r3, #4]
  }
}
 8003ff0:	46c0      	nop			; (mov r8, r8)
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b002      	add	sp, #8
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	fffdffff 	.word	0xfffdffff
 8003ffc:	fffeffff 	.word	0xfffeffff
 8004000:	fffbffff 	.word	0xfffbffff
 8004004:	ffff7fff 	.word	0xffff7fff
 8004008:	ffffefff 	.word	0xffffefff
 800400c:	ffffdfff 	.word	0xffffdfff
 8004010:	ffefffff 	.word	0xffefffff
 8004014:	ff9fffff 	.word	0xff9fffff
 8004018:	fff7ffff 	.word	0xfff7ffff

0800401c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b092      	sub	sp, #72	; 0x48
 8004020:	af02      	add	r7, sp, #8
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2284      	movs	r2, #132	; 0x84
 8004028:	2100      	movs	r1, #0
 800402a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800402c:	f7fd f976 	bl	800131c <HAL_GetTick>
 8004030:	0003      	movs	r3, r0
 8004032:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2208      	movs	r2, #8
 800403c:	4013      	ands	r3, r2
 800403e:	2b08      	cmp	r3, #8
 8004040:	d12c      	bne.n	800409c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004044:	2280      	movs	r2, #128	; 0x80
 8004046:	0391      	lsls	r1, r2, #14
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	4a46      	ldr	r2, [pc, #280]	; (8004164 <UART_CheckIdleState+0x148>)
 800404c:	9200      	str	r2, [sp, #0]
 800404e:	2200      	movs	r2, #0
 8004050:	f000 f88c 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 8004054:	1e03      	subs	r3, r0, #0
 8004056:	d021      	beq.n	800409c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004058:	f3ef 8310 	mrs	r3, PRIMASK
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004060:	63bb      	str	r3, [r7, #56]	; 0x38
 8004062:	2301      	movs	r3, #1
 8004064:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004068:	f383 8810 	msr	PRIMASK, r3
}
 800406c:	46c0      	nop			; (mov r8, r8)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2180      	movs	r1, #128	; 0x80
 800407a:	438a      	bics	r2, r1
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004080:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004084:	f383 8810 	msr	PRIMASK, r3
}
 8004088:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2278      	movs	r2, #120	; 0x78
 8004094:	2100      	movs	r1, #0
 8004096:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e05f      	b.n	800415c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2204      	movs	r2, #4
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d146      	bne.n	8004138 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ac:	2280      	movs	r2, #128	; 0x80
 80040ae:	03d1      	lsls	r1, r2, #15
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	4a2c      	ldr	r2, [pc, #176]	; (8004164 <UART_CheckIdleState+0x148>)
 80040b4:	9200      	str	r2, [sp, #0]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f000 f858 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 80040bc:	1e03      	subs	r3, r0, #0
 80040be:	d03b      	beq.n	8004138 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c0:	f3ef 8310 	mrs	r3, PRIMASK
 80040c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80040c6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040c8:	637b      	str	r3, [r7, #52]	; 0x34
 80040ca:	2301      	movs	r3, #1
 80040cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f383 8810 	msr	PRIMASK, r3
}
 80040d4:	46c0      	nop			; (mov r8, r8)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4921      	ldr	r1, [pc, #132]	; (8004168 <UART_CheckIdleState+0x14c>)
 80040e2:	400a      	ands	r2, r1
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f383 8810 	msr	PRIMASK, r3
}
 80040f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040f2:	f3ef 8310 	mrs	r3, PRIMASK
 80040f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80040f8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fa:	633b      	str	r3, [r7, #48]	; 0x30
 80040fc:	2301      	movs	r3, #1
 80040fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f383 8810 	msr	PRIMASK, r3
}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2101      	movs	r1, #1
 8004114:	438a      	bics	r2, r1
 8004116:	609a      	str	r2, [r3, #8]
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	f383 8810 	msr	PRIMASK, r3
}
 8004122:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2280      	movs	r2, #128	; 0x80
 8004128:	2120      	movs	r1, #32
 800412a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2278      	movs	r2, #120	; 0x78
 8004130:	2100      	movs	r1, #0
 8004132:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e011      	b.n	800415c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2280      	movs	r2, #128	; 0x80
 8004142:	2120      	movs	r1, #32
 8004144:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2278      	movs	r2, #120	; 0x78
 8004156:	2100      	movs	r1, #0
 8004158:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	0018      	movs	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	b010      	add	sp, #64	; 0x40
 8004162:	bd80      	pop	{r7, pc}
 8004164:	01ffffff 	.word	0x01ffffff
 8004168:	fffffedf 	.word	0xfffffedf

0800416c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	1dfb      	adds	r3, r7, #7
 800417a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800417c:	e04b      	b.n	8004216 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	3301      	adds	r3, #1
 8004182:	d048      	beq.n	8004216 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004184:	f7fd f8ca 	bl	800131c <HAL_GetTick>
 8004188:	0002      	movs	r2, r0
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	429a      	cmp	r2, r3
 8004192:	d302      	bcc.n	800419a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e04b      	b.n	8004236 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2204      	movs	r2, #4
 80041a6:	4013      	ands	r3, r2
 80041a8:	d035      	beq.n	8004216 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	2208      	movs	r2, #8
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d111      	bne.n	80041dc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2208      	movs	r2, #8
 80041be:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	0018      	movs	r0, r3
 80041c4:	f000 f83c 	bl	8004240 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2284      	movs	r2, #132	; 0x84
 80041cc:	2108      	movs	r1, #8
 80041ce:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2278      	movs	r2, #120	; 0x78
 80041d4:	2100      	movs	r1, #0
 80041d6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e02c      	b.n	8004236 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	69da      	ldr	r2, [r3, #28]
 80041e2:	2380      	movs	r3, #128	; 0x80
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	401a      	ands	r2, r3
 80041e8:	2380      	movs	r3, #128	; 0x80
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d112      	bne.n	8004216 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2280      	movs	r2, #128	; 0x80
 80041f6:	0112      	lsls	r2, r2, #4
 80041f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	0018      	movs	r0, r3
 80041fe:	f000 f81f 	bl	8004240 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2284      	movs	r2, #132	; 0x84
 8004206:	2120      	movs	r1, #32
 8004208:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2278      	movs	r2, #120	; 0x78
 800420e:	2100      	movs	r1, #0
 8004210:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e00f      	b.n	8004236 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	4013      	ands	r3, r2
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	425a      	negs	r2, r3
 8004226:	4153      	adcs	r3, r2
 8004228:	b2db      	uxtb	r3, r3
 800422a:	001a      	movs	r2, r3
 800422c:	1dfb      	adds	r3, r7, #7
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d0a4      	beq.n	800417e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	0018      	movs	r0, r3
 8004238:	46bd      	mov	sp, r7
 800423a:	b004      	add	sp, #16
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08e      	sub	sp, #56	; 0x38
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004248:	f3ef 8310 	mrs	r3, PRIMASK
 800424c:	617b      	str	r3, [r7, #20]
  return(result);
 800424e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004250:	637b      	str	r3, [r7, #52]	; 0x34
 8004252:	2301      	movs	r3, #1
 8004254:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	f383 8810 	msr	PRIMASK, r3
}
 800425c:	46c0      	nop			; (mov r8, r8)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4926      	ldr	r1, [pc, #152]	; (8004304 <UART_EndRxTransfer+0xc4>)
 800426a:	400a      	ands	r2, r1
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004270:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f383 8810 	msr	PRIMASK, r3
}
 8004278:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800427a:	f3ef 8310 	mrs	r3, PRIMASK
 800427e:	623b      	str	r3, [r7, #32]
  return(result);
 8004280:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004282:	633b      	str	r3, [r7, #48]	; 0x30
 8004284:	2301      	movs	r3, #1
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	f383 8810 	msr	PRIMASK, r3
}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2101      	movs	r1, #1
 800429c:	438a      	bics	r2, r1
 800429e:	609a      	str	r2, [r3, #8]
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a6:	f383 8810 	msr	PRIMASK, r3
}
 80042aa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d118      	bne.n	80042e6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042b4:	f3ef 8310 	mrs	r3, PRIMASK
 80042b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80042ba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042be:	2301      	movs	r3, #1
 80042c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f383 8810 	msr	PRIMASK, r3
}
 80042c8:	46c0      	nop			; (mov r8, r8)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2110      	movs	r1, #16
 80042d6:	438a      	bics	r2, r1
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f383 8810 	msr	PRIMASK, r3
}
 80042e4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2280      	movs	r2, #128	; 0x80
 80042ea:	2120      	movs	r1, #32
 80042ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	46bd      	mov	sp, r7
 80042fe:	b00e      	add	sp, #56	; 0x38
 8004300:	bd80      	pop	{r7, pc}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	fffffedf 	.word	0xfffffedf

08004308 <siprintf>:
 8004308:	b40e      	push	{r1, r2, r3}
 800430a:	b500      	push	{lr}
 800430c:	490b      	ldr	r1, [pc, #44]	; (800433c <siprintf+0x34>)
 800430e:	b09c      	sub	sp, #112	; 0x70
 8004310:	ab1d      	add	r3, sp, #116	; 0x74
 8004312:	9002      	str	r0, [sp, #8]
 8004314:	9006      	str	r0, [sp, #24]
 8004316:	9107      	str	r1, [sp, #28]
 8004318:	9104      	str	r1, [sp, #16]
 800431a:	4809      	ldr	r0, [pc, #36]	; (8004340 <siprintf+0x38>)
 800431c:	4909      	ldr	r1, [pc, #36]	; (8004344 <siprintf+0x3c>)
 800431e:	cb04      	ldmia	r3!, {r2}
 8004320:	9105      	str	r1, [sp, #20]
 8004322:	6800      	ldr	r0, [r0, #0]
 8004324:	a902      	add	r1, sp, #8
 8004326:	9301      	str	r3, [sp, #4]
 8004328:	f000 f9a2 	bl	8004670 <_svfiprintf_r>
 800432c:	2200      	movs	r2, #0
 800432e:	9b02      	ldr	r3, [sp, #8]
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	b01c      	add	sp, #112	; 0x70
 8004334:	bc08      	pop	{r3}
 8004336:	b003      	add	sp, #12
 8004338:	4718      	bx	r3
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	7fffffff 	.word	0x7fffffff
 8004340:	20000058 	.word	0x20000058
 8004344:	ffff0208 	.word	0xffff0208

08004348 <memset>:
 8004348:	0003      	movs	r3, r0
 800434a:	1882      	adds	r2, r0, r2
 800434c:	4293      	cmp	r3, r2
 800434e:	d100      	bne.n	8004352 <memset+0xa>
 8004350:	4770      	bx	lr
 8004352:	7019      	strb	r1, [r3, #0]
 8004354:	3301      	adds	r3, #1
 8004356:	e7f9      	b.n	800434c <memset+0x4>

08004358 <__errno>:
 8004358:	4b01      	ldr	r3, [pc, #4]	; (8004360 <__errno+0x8>)
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	4770      	bx	lr
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	20000058 	.word	0x20000058

08004364 <__libc_init_array>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	2600      	movs	r6, #0
 8004368:	4c0c      	ldr	r4, [pc, #48]	; (800439c <__libc_init_array+0x38>)
 800436a:	4d0d      	ldr	r5, [pc, #52]	; (80043a0 <__libc_init_array+0x3c>)
 800436c:	1b64      	subs	r4, r4, r5
 800436e:	10a4      	asrs	r4, r4, #2
 8004370:	42a6      	cmp	r6, r4
 8004372:	d109      	bne.n	8004388 <__libc_init_array+0x24>
 8004374:	2600      	movs	r6, #0
 8004376:	f000 fc6d 	bl	8004c54 <_init>
 800437a:	4c0a      	ldr	r4, [pc, #40]	; (80043a4 <__libc_init_array+0x40>)
 800437c:	4d0a      	ldr	r5, [pc, #40]	; (80043a8 <__libc_init_array+0x44>)
 800437e:	1b64      	subs	r4, r4, r5
 8004380:	10a4      	asrs	r4, r4, #2
 8004382:	42a6      	cmp	r6, r4
 8004384:	d105      	bne.n	8004392 <__libc_init_array+0x2e>
 8004386:	bd70      	pop	{r4, r5, r6, pc}
 8004388:	00b3      	lsls	r3, r6, #2
 800438a:	58eb      	ldr	r3, [r5, r3]
 800438c:	4798      	blx	r3
 800438e:	3601      	adds	r6, #1
 8004390:	e7ee      	b.n	8004370 <__libc_init_array+0xc>
 8004392:	00b3      	lsls	r3, r6, #2
 8004394:	58eb      	ldr	r3, [r5, r3]
 8004396:	4798      	blx	r3
 8004398:	3601      	adds	r6, #1
 800439a:	e7f2      	b.n	8004382 <__libc_init_array+0x1e>
 800439c:	08004d58 	.word	0x08004d58
 80043a0:	08004d58 	.word	0x08004d58
 80043a4:	08004d5c 	.word	0x08004d5c
 80043a8:	08004d58 	.word	0x08004d58

080043ac <__retarget_lock_acquire_recursive>:
 80043ac:	4770      	bx	lr

080043ae <__retarget_lock_release_recursive>:
 80043ae:	4770      	bx	lr

080043b0 <_free_r>:
 80043b0:	b570      	push	{r4, r5, r6, lr}
 80043b2:	0005      	movs	r5, r0
 80043b4:	2900      	cmp	r1, #0
 80043b6:	d010      	beq.n	80043da <_free_r+0x2a>
 80043b8:	1f0c      	subs	r4, r1, #4
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	da00      	bge.n	80043c2 <_free_r+0x12>
 80043c0:	18e4      	adds	r4, r4, r3
 80043c2:	0028      	movs	r0, r5
 80043c4:	f000 f8e2 	bl	800458c <__malloc_lock>
 80043c8:	4a1d      	ldr	r2, [pc, #116]	; (8004440 <_free_r+0x90>)
 80043ca:	6813      	ldr	r3, [r2, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d105      	bne.n	80043dc <_free_r+0x2c>
 80043d0:	6063      	str	r3, [r4, #4]
 80043d2:	6014      	str	r4, [r2, #0]
 80043d4:	0028      	movs	r0, r5
 80043d6:	f000 f8e1 	bl	800459c <__malloc_unlock>
 80043da:	bd70      	pop	{r4, r5, r6, pc}
 80043dc:	42a3      	cmp	r3, r4
 80043de:	d908      	bls.n	80043f2 <_free_r+0x42>
 80043e0:	6820      	ldr	r0, [r4, #0]
 80043e2:	1821      	adds	r1, r4, r0
 80043e4:	428b      	cmp	r3, r1
 80043e6:	d1f3      	bne.n	80043d0 <_free_r+0x20>
 80043e8:	6819      	ldr	r1, [r3, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	1809      	adds	r1, r1, r0
 80043ee:	6021      	str	r1, [r4, #0]
 80043f0:	e7ee      	b.n	80043d0 <_free_r+0x20>
 80043f2:	001a      	movs	r2, r3
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <_free_r+0x4e>
 80043fa:	42a3      	cmp	r3, r4
 80043fc:	d9f9      	bls.n	80043f2 <_free_r+0x42>
 80043fe:	6811      	ldr	r1, [r2, #0]
 8004400:	1850      	adds	r0, r2, r1
 8004402:	42a0      	cmp	r0, r4
 8004404:	d10b      	bne.n	800441e <_free_r+0x6e>
 8004406:	6820      	ldr	r0, [r4, #0]
 8004408:	1809      	adds	r1, r1, r0
 800440a:	1850      	adds	r0, r2, r1
 800440c:	6011      	str	r1, [r2, #0]
 800440e:	4283      	cmp	r3, r0
 8004410:	d1e0      	bne.n	80043d4 <_free_r+0x24>
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	1841      	adds	r1, r0, r1
 8004418:	6011      	str	r1, [r2, #0]
 800441a:	6053      	str	r3, [r2, #4]
 800441c:	e7da      	b.n	80043d4 <_free_r+0x24>
 800441e:	42a0      	cmp	r0, r4
 8004420:	d902      	bls.n	8004428 <_free_r+0x78>
 8004422:	230c      	movs	r3, #12
 8004424:	602b      	str	r3, [r5, #0]
 8004426:	e7d5      	b.n	80043d4 <_free_r+0x24>
 8004428:	6820      	ldr	r0, [r4, #0]
 800442a:	1821      	adds	r1, r4, r0
 800442c:	428b      	cmp	r3, r1
 800442e:	d103      	bne.n	8004438 <_free_r+0x88>
 8004430:	6819      	ldr	r1, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	1809      	adds	r1, r1, r0
 8004436:	6021      	str	r1, [r4, #0]
 8004438:	6063      	str	r3, [r4, #4]
 800443a:	6054      	str	r4, [r2, #4]
 800443c:	e7ca      	b.n	80043d4 <_free_r+0x24>
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	2000040c 	.word	0x2000040c

08004444 <sbrk_aligned>:
 8004444:	b570      	push	{r4, r5, r6, lr}
 8004446:	4e0f      	ldr	r6, [pc, #60]	; (8004484 <sbrk_aligned+0x40>)
 8004448:	000d      	movs	r5, r1
 800444a:	6831      	ldr	r1, [r6, #0]
 800444c:	0004      	movs	r4, r0
 800444e:	2900      	cmp	r1, #0
 8004450:	d102      	bne.n	8004458 <sbrk_aligned+0x14>
 8004452:	f000 fba1 	bl	8004b98 <_sbrk_r>
 8004456:	6030      	str	r0, [r6, #0]
 8004458:	0029      	movs	r1, r5
 800445a:	0020      	movs	r0, r4
 800445c:	f000 fb9c 	bl	8004b98 <_sbrk_r>
 8004460:	1c43      	adds	r3, r0, #1
 8004462:	d00a      	beq.n	800447a <sbrk_aligned+0x36>
 8004464:	2303      	movs	r3, #3
 8004466:	1cc5      	adds	r5, r0, #3
 8004468:	439d      	bics	r5, r3
 800446a:	42a8      	cmp	r0, r5
 800446c:	d007      	beq.n	800447e <sbrk_aligned+0x3a>
 800446e:	1a29      	subs	r1, r5, r0
 8004470:	0020      	movs	r0, r4
 8004472:	f000 fb91 	bl	8004b98 <_sbrk_r>
 8004476:	3001      	adds	r0, #1
 8004478:	d101      	bne.n	800447e <sbrk_aligned+0x3a>
 800447a:	2501      	movs	r5, #1
 800447c:	426d      	negs	r5, r5
 800447e:	0028      	movs	r0, r5
 8004480:	bd70      	pop	{r4, r5, r6, pc}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	20000410 	.word	0x20000410

08004488 <_malloc_r>:
 8004488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800448a:	2203      	movs	r2, #3
 800448c:	1ccb      	adds	r3, r1, #3
 800448e:	4393      	bics	r3, r2
 8004490:	3308      	adds	r3, #8
 8004492:	0006      	movs	r6, r0
 8004494:	001f      	movs	r7, r3
 8004496:	2b0c      	cmp	r3, #12
 8004498:	d238      	bcs.n	800450c <_malloc_r+0x84>
 800449a:	270c      	movs	r7, #12
 800449c:	42b9      	cmp	r1, r7
 800449e:	d837      	bhi.n	8004510 <_malloc_r+0x88>
 80044a0:	0030      	movs	r0, r6
 80044a2:	f000 f873 	bl	800458c <__malloc_lock>
 80044a6:	4b38      	ldr	r3, [pc, #224]	; (8004588 <_malloc_r+0x100>)
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	001c      	movs	r4, r3
 80044ae:	2c00      	cmp	r4, #0
 80044b0:	d133      	bne.n	800451a <_malloc_r+0x92>
 80044b2:	0039      	movs	r1, r7
 80044b4:	0030      	movs	r0, r6
 80044b6:	f7ff ffc5 	bl	8004444 <sbrk_aligned>
 80044ba:	0004      	movs	r4, r0
 80044bc:	1c43      	adds	r3, r0, #1
 80044be:	d15e      	bne.n	800457e <_malloc_r+0xf6>
 80044c0:	9b00      	ldr	r3, [sp, #0]
 80044c2:	681c      	ldr	r4, [r3, #0]
 80044c4:	0025      	movs	r5, r4
 80044c6:	2d00      	cmp	r5, #0
 80044c8:	d14e      	bne.n	8004568 <_malloc_r+0xe0>
 80044ca:	2c00      	cmp	r4, #0
 80044cc:	d051      	beq.n	8004572 <_malloc_r+0xea>
 80044ce:	6823      	ldr	r3, [r4, #0]
 80044d0:	0029      	movs	r1, r5
 80044d2:	18e3      	adds	r3, r4, r3
 80044d4:	0030      	movs	r0, r6
 80044d6:	9301      	str	r3, [sp, #4]
 80044d8:	f000 fb5e 	bl	8004b98 <_sbrk_r>
 80044dc:	9b01      	ldr	r3, [sp, #4]
 80044de:	4283      	cmp	r3, r0
 80044e0:	d147      	bne.n	8004572 <_malloc_r+0xea>
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	0030      	movs	r0, r6
 80044e6:	1aff      	subs	r7, r7, r3
 80044e8:	0039      	movs	r1, r7
 80044ea:	f7ff ffab 	bl	8004444 <sbrk_aligned>
 80044ee:	3001      	adds	r0, #1
 80044f0:	d03f      	beq.n	8004572 <_malloc_r+0xea>
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	19db      	adds	r3, r3, r7
 80044f6:	6023      	str	r3, [r4, #0]
 80044f8:	9b00      	ldr	r3, [sp, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d040      	beq.n	8004582 <_malloc_r+0xfa>
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	42a2      	cmp	r2, r4
 8004504:	d133      	bne.n	800456e <_malloc_r+0xe6>
 8004506:	2200      	movs	r2, #0
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	e014      	b.n	8004536 <_malloc_r+0xae>
 800450c:	2b00      	cmp	r3, #0
 800450e:	dac5      	bge.n	800449c <_malloc_r+0x14>
 8004510:	230c      	movs	r3, #12
 8004512:	2500      	movs	r5, #0
 8004514:	6033      	str	r3, [r6, #0]
 8004516:	0028      	movs	r0, r5
 8004518:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800451a:	6821      	ldr	r1, [r4, #0]
 800451c:	1bc9      	subs	r1, r1, r7
 800451e:	d420      	bmi.n	8004562 <_malloc_r+0xda>
 8004520:	290b      	cmp	r1, #11
 8004522:	d918      	bls.n	8004556 <_malloc_r+0xce>
 8004524:	19e2      	adds	r2, r4, r7
 8004526:	6027      	str	r7, [r4, #0]
 8004528:	42a3      	cmp	r3, r4
 800452a:	d112      	bne.n	8004552 <_malloc_r+0xca>
 800452c:	9b00      	ldr	r3, [sp, #0]
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	6863      	ldr	r3, [r4, #4]
 8004532:	6011      	str	r1, [r2, #0]
 8004534:	6053      	str	r3, [r2, #4]
 8004536:	0030      	movs	r0, r6
 8004538:	0025      	movs	r5, r4
 800453a:	f000 f82f 	bl	800459c <__malloc_unlock>
 800453e:	2207      	movs	r2, #7
 8004540:	350b      	adds	r5, #11
 8004542:	1d23      	adds	r3, r4, #4
 8004544:	4395      	bics	r5, r2
 8004546:	1aea      	subs	r2, r5, r3
 8004548:	429d      	cmp	r5, r3
 800454a:	d0e4      	beq.n	8004516 <_malloc_r+0x8e>
 800454c:	1b5b      	subs	r3, r3, r5
 800454e:	50a3      	str	r3, [r4, r2]
 8004550:	e7e1      	b.n	8004516 <_malloc_r+0x8e>
 8004552:	605a      	str	r2, [r3, #4]
 8004554:	e7ec      	b.n	8004530 <_malloc_r+0xa8>
 8004556:	6862      	ldr	r2, [r4, #4]
 8004558:	42a3      	cmp	r3, r4
 800455a:	d1d5      	bne.n	8004508 <_malloc_r+0x80>
 800455c:	9b00      	ldr	r3, [sp, #0]
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	e7e9      	b.n	8004536 <_malloc_r+0xae>
 8004562:	0023      	movs	r3, r4
 8004564:	6864      	ldr	r4, [r4, #4]
 8004566:	e7a2      	b.n	80044ae <_malloc_r+0x26>
 8004568:	002c      	movs	r4, r5
 800456a:	686d      	ldr	r5, [r5, #4]
 800456c:	e7ab      	b.n	80044c6 <_malloc_r+0x3e>
 800456e:	0013      	movs	r3, r2
 8004570:	e7c4      	b.n	80044fc <_malloc_r+0x74>
 8004572:	230c      	movs	r3, #12
 8004574:	0030      	movs	r0, r6
 8004576:	6033      	str	r3, [r6, #0]
 8004578:	f000 f810 	bl	800459c <__malloc_unlock>
 800457c:	e7cb      	b.n	8004516 <_malloc_r+0x8e>
 800457e:	6027      	str	r7, [r4, #0]
 8004580:	e7d9      	b.n	8004536 <_malloc_r+0xae>
 8004582:	605b      	str	r3, [r3, #4]
 8004584:	deff      	udf	#255	; 0xff
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	2000040c 	.word	0x2000040c

0800458c <__malloc_lock>:
 800458c:	b510      	push	{r4, lr}
 800458e:	4802      	ldr	r0, [pc, #8]	; (8004598 <__malloc_lock+0xc>)
 8004590:	f7ff ff0c 	bl	80043ac <__retarget_lock_acquire_recursive>
 8004594:	bd10      	pop	{r4, pc}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	20000408 	.word	0x20000408

0800459c <__malloc_unlock>:
 800459c:	b510      	push	{r4, lr}
 800459e:	4802      	ldr	r0, [pc, #8]	; (80045a8 <__malloc_unlock+0xc>)
 80045a0:	f7ff ff05 	bl	80043ae <__retarget_lock_release_recursive>
 80045a4:	bd10      	pop	{r4, pc}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	20000408 	.word	0x20000408

080045ac <__ssputs_r>:
 80045ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ae:	b085      	sub	sp, #20
 80045b0:	9301      	str	r3, [sp, #4]
 80045b2:	9203      	str	r2, [sp, #12]
 80045b4:	688e      	ldr	r6, [r1, #8]
 80045b6:	9a01      	ldr	r2, [sp, #4]
 80045b8:	0007      	movs	r7, r0
 80045ba:	000c      	movs	r4, r1
 80045bc:	680b      	ldr	r3, [r1, #0]
 80045be:	4296      	cmp	r6, r2
 80045c0:	d831      	bhi.n	8004626 <__ssputs_r+0x7a>
 80045c2:	898a      	ldrh	r2, [r1, #12]
 80045c4:	2190      	movs	r1, #144	; 0x90
 80045c6:	00c9      	lsls	r1, r1, #3
 80045c8:	420a      	tst	r2, r1
 80045ca:	d029      	beq.n	8004620 <__ssputs_r+0x74>
 80045cc:	2003      	movs	r0, #3
 80045ce:	6921      	ldr	r1, [r4, #16]
 80045d0:	1a5b      	subs	r3, r3, r1
 80045d2:	9302      	str	r3, [sp, #8]
 80045d4:	6963      	ldr	r3, [r4, #20]
 80045d6:	4343      	muls	r3, r0
 80045d8:	0fdd      	lsrs	r5, r3, #31
 80045da:	18ed      	adds	r5, r5, r3
 80045dc:	9b01      	ldr	r3, [sp, #4]
 80045de:	9802      	ldr	r0, [sp, #8]
 80045e0:	3301      	adds	r3, #1
 80045e2:	181b      	adds	r3, r3, r0
 80045e4:	106d      	asrs	r5, r5, #1
 80045e6:	42ab      	cmp	r3, r5
 80045e8:	d900      	bls.n	80045ec <__ssputs_r+0x40>
 80045ea:	001d      	movs	r5, r3
 80045ec:	0552      	lsls	r2, r2, #21
 80045ee:	d529      	bpl.n	8004644 <__ssputs_r+0x98>
 80045f0:	0029      	movs	r1, r5
 80045f2:	0038      	movs	r0, r7
 80045f4:	f7ff ff48 	bl	8004488 <_malloc_r>
 80045f8:	1e06      	subs	r6, r0, #0
 80045fa:	d02d      	beq.n	8004658 <__ssputs_r+0xac>
 80045fc:	9a02      	ldr	r2, [sp, #8]
 80045fe:	6921      	ldr	r1, [r4, #16]
 8004600:	f000 fae7 	bl	8004bd2 <memcpy>
 8004604:	89a2      	ldrh	r2, [r4, #12]
 8004606:	4b19      	ldr	r3, [pc, #100]	; (800466c <__ssputs_r+0xc0>)
 8004608:	401a      	ands	r2, r3
 800460a:	2380      	movs	r3, #128	; 0x80
 800460c:	4313      	orrs	r3, r2
 800460e:	81a3      	strh	r3, [r4, #12]
 8004610:	9b02      	ldr	r3, [sp, #8]
 8004612:	6126      	str	r6, [r4, #16]
 8004614:	18f6      	adds	r6, r6, r3
 8004616:	6026      	str	r6, [r4, #0]
 8004618:	6165      	str	r5, [r4, #20]
 800461a:	9e01      	ldr	r6, [sp, #4]
 800461c:	1aed      	subs	r5, r5, r3
 800461e:	60a5      	str	r5, [r4, #8]
 8004620:	9b01      	ldr	r3, [sp, #4]
 8004622:	429e      	cmp	r6, r3
 8004624:	d900      	bls.n	8004628 <__ssputs_r+0x7c>
 8004626:	9e01      	ldr	r6, [sp, #4]
 8004628:	0032      	movs	r2, r6
 800462a:	9903      	ldr	r1, [sp, #12]
 800462c:	6820      	ldr	r0, [r4, #0]
 800462e:	f000 fa9f 	bl	8004b70 <memmove>
 8004632:	2000      	movs	r0, #0
 8004634:	68a3      	ldr	r3, [r4, #8]
 8004636:	1b9b      	subs	r3, r3, r6
 8004638:	60a3      	str	r3, [r4, #8]
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	199b      	adds	r3, r3, r6
 800463e:	6023      	str	r3, [r4, #0]
 8004640:	b005      	add	sp, #20
 8004642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004644:	002a      	movs	r2, r5
 8004646:	0038      	movs	r0, r7
 8004648:	f000 facc 	bl	8004be4 <_realloc_r>
 800464c:	1e06      	subs	r6, r0, #0
 800464e:	d1df      	bne.n	8004610 <__ssputs_r+0x64>
 8004650:	0038      	movs	r0, r7
 8004652:	6921      	ldr	r1, [r4, #16]
 8004654:	f7ff feac 	bl	80043b0 <_free_r>
 8004658:	230c      	movs	r3, #12
 800465a:	2001      	movs	r0, #1
 800465c:	603b      	str	r3, [r7, #0]
 800465e:	89a2      	ldrh	r2, [r4, #12]
 8004660:	3334      	adds	r3, #52	; 0x34
 8004662:	4313      	orrs	r3, r2
 8004664:	81a3      	strh	r3, [r4, #12]
 8004666:	4240      	negs	r0, r0
 8004668:	e7ea      	b.n	8004640 <__ssputs_r+0x94>
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	fffffb7f 	.word	0xfffffb7f

08004670 <_svfiprintf_r>:
 8004670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004672:	b0a1      	sub	sp, #132	; 0x84
 8004674:	9003      	str	r0, [sp, #12]
 8004676:	001d      	movs	r5, r3
 8004678:	898b      	ldrh	r3, [r1, #12]
 800467a:	000f      	movs	r7, r1
 800467c:	0016      	movs	r6, r2
 800467e:	061b      	lsls	r3, r3, #24
 8004680:	d511      	bpl.n	80046a6 <_svfiprintf_r+0x36>
 8004682:	690b      	ldr	r3, [r1, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10e      	bne.n	80046a6 <_svfiprintf_r+0x36>
 8004688:	2140      	movs	r1, #64	; 0x40
 800468a:	f7ff fefd 	bl	8004488 <_malloc_r>
 800468e:	6038      	str	r0, [r7, #0]
 8004690:	6138      	str	r0, [r7, #16]
 8004692:	2800      	cmp	r0, #0
 8004694:	d105      	bne.n	80046a2 <_svfiprintf_r+0x32>
 8004696:	230c      	movs	r3, #12
 8004698:	9a03      	ldr	r2, [sp, #12]
 800469a:	3801      	subs	r0, #1
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	b021      	add	sp, #132	; 0x84
 80046a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046a2:	2340      	movs	r3, #64	; 0x40
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	2300      	movs	r3, #0
 80046a8:	ac08      	add	r4, sp, #32
 80046aa:	6163      	str	r3, [r4, #20]
 80046ac:	3320      	adds	r3, #32
 80046ae:	7663      	strb	r3, [r4, #25]
 80046b0:	3310      	adds	r3, #16
 80046b2:	76a3      	strb	r3, [r4, #26]
 80046b4:	9507      	str	r5, [sp, #28]
 80046b6:	0035      	movs	r5, r6
 80046b8:	782b      	ldrb	r3, [r5, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <_svfiprintf_r+0x52>
 80046be:	2b25      	cmp	r3, #37	; 0x25
 80046c0:	d148      	bne.n	8004754 <_svfiprintf_r+0xe4>
 80046c2:	1bab      	subs	r3, r5, r6
 80046c4:	9305      	str	r3, [sp, #20]
 80046c6:	42b5      	cmp	r5, r6
 80046c8:	d00b      	beq.n	80046e2 <_svfiprintf_r+0x72>
 80046ca:	0032      	movs	r2, r6
 80046cc:	0039      	movs	r1, r7
 80046ce:	9803      	ldr	r0, [sp, #12]
 80046d0:	f7ff ff6c 	bl	80045ac <__ssputs_r>
 80046d4:	3001      	adds	r0, #1
 80046d6:	d100      	bne.n	80046da <_svfiprintf_r+0x6a>
 80046d8:	e0af      	b.n	800483a <_svfiprintf_r+0x1ca>
 80046da:	6963      	ldr	r3, [r4, #20]
 80046dc:	9a05      	ldr	r2, [sp, #20]
 80046de:	189b      	adds	r3, r3, r2
 80046e0:	6163      	str	r3, [r4, #20]
 80046e2:	782b      	ldrb	r3, [r5, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d100      	bne.n	80046ea <_svfiprintf_r+0x7a>
 80046e8:	e0a7      	b.n	800483a <_svfiprintf_r+0x1ca>
 80046ea:	2201      	movs	r2, #1
 80046ec:	2300      	movs	r3, #0
 80046ee:	4252      	negs	r2, r2
 80046f0:	6062      	str	r2, [r4, #4]
 80046f2:	a904      	add	r1, sp, #16
 80046f4:	3254      	adds	r2, #84	; 0x54
 80046f6:	1852      	adds	r2, r2, r1
 80046f8:	1c6e      	adds	r6, r5, #1
 80046fa:	6023      	str	r3, [r4, #0]
 80046fc:	60e3      	str	r3, [r4, #12]
 80046fe:	60a3      	str	r3, [r4, #8]
 8004700:	7013      	strb	r3, [r2, #0]
 8004702:	65a3      	str	r3, [r4, #88]	; 0x58
 8004704:	4b55      	ldr	r3, [pc, #340]	; (800485c <_svfiprintf_r+0x1ec>)
 8004706:	2205      	movs	r2, #5
 8004708:	0018      	movs	r0, r3
 800470a:	7831      	ldrb	r1, [r6, #0]
 800470c:	9305      	str	r3, [sp, #20]
 800470e:	f000 fa55 	bl	8004bbc <memchr>
 8004712:	1c75      	adds	r5, r6, #1
 8004714:	2800      	cmp	r0, #0
 8004716:	d11f      	bne.n	8004758 <_svfiprintf_r+0xe8>
 8004718:	6822      	ldr	r2, [r4, #0]
 800471a:	06d3      	lsls	r3, r2, #27
 800471c:	d504      	bpl.n	8004728 <_svfiprintf_r+0xb8>
 800471e:	2353      	movs	r3, #83	; 0x53
 8004720:	a904      	add	r1, sp, #16
 8004722:	185b      	adds	r3, r3, r1
 8004724:	2120      	movs	r1, #32
 8004726:	7019      	strb	r1, [r3, #0]
 8004728:	0713      	lsls	r3, r2, #28
 800472a:	d504      	bpl.n	8004736 <_svfiprintf_r+0xc6>
 800472c:	2353      	movs	r3, #83	; 0x53
 800472e:	a904      	add	r1, sp, #16
 8004730:	185b      	adds	r3, r3, r1
 8004732:	212b      	movs	r1, #43	; 0x2b
 8004734:	7019      	strb	r1, [r3, #0]
 8004736:	7833      	ldrb	r3, [r6, #0]
 8004738:	2b2a      	cmp	r3, #42	; 0x2a
 800473a:	d016      	beq.n	800476a <_svfiprintf_r+0xfa>
 800473c:	0035      	movs	r5, r6
 800473e:	2100      	movs	r1, #0
 8004740:	200a      	movs	r0, #10
 8004742:	68e3      	ldr	r3, [r4, #12]
 8004744:	782a      	ldrb	r2, [r5, #0]
 8004746:	1c6e      	adds	r6, r5, #1
 8004748:	3a30      	subs	r2, #48	; 0x30
 800474a:	2a09      	cmp	r2, #9
 800474c:	d94e      	bls.n	80047ec <_svfiprintf_r+0x17c>
 800474e:	2900      	cmp	r1, #0
 8004750:	d111      	bne.n	8004776 <_svfiprintf_r+0x106>
 8004752:	e017      	b.n	8004784 <_svfiprintf_r+0x114>
 8004754:	3501      	adds	r5, #1
 8004756:	e7af      	b.n	80046b8 <_svfiprintf_r+0x48>
 8004758:	9b05      	ldr	r3, [sp, #20]
 800475a:	6822      	ldr	r2, [r4, #0]
 800475c:	1ac0      	subs	r0, r0, r3
 800475e:	2301      	movs	r3, #1
 8004760:	4083      	lsls	r3, r0
 8004762:	4313      	orrs	r3, r2
 8004764:	002e      	movs	r6, r5
 8004766:	6023      	str	r3, [r4, #0]
 8004768:	e7cc      	b.n	8004704 <_svfiprintf_r+0x94>
 800476a:	9b07      	ldr	r3, [sp, #28]
 800476c:	1d19      	adds	r1, r3, #4
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	9107      	str	r1, [sp, #28]
 8004772:	2b00      	cmp	r3, #0
 8004774:	db01      	blt.n	800477a <_svfiprintf_r+0x10a>
 8004776:	930b      	str	r3, [sp, #44]	; 0x2c
 8004778:	e004      	b.n	8004784 <_svfiprintf_r+0x114>
 800477a:	425b      	negs	r3, r3
 800477c:	60e3      	str	r3, [r4, #12]
 800477e:	2302      	movs	r3, #2
 8004780:	4313      	orrs	r3, r2
 8004782:	6023      	str	r3, [r4, #0]
 8004784:	782b      	ldrb	r3, [r5, #0]
 8004786:	2b2e      	cmp	r3, #46	; 0x2e
 8004788:	d10a      	bne.n	80047a0 <_svfiprintf_r+0x130>
 800478a:	786b      	ldrb	r3, [r5, #1]
 800478c:	2b2a      	cmp	r3, #42	; 0x2a
 800478e:	d135      	bne.n	80047fc <_svfiprintf_r+0x18c>
 8004790:	9b07      	ldr	r3, [sp, #28]
 8004792:	3502      	adds	r5, #2
 8004794:	1d1a      	adds	r2, r3, #4
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	9207      	str	r2, [sp, #28]
 800479a:	2b00      	cmp	r3, #0
 800479c:	db2b      	blt.n	80047f6 <_svfiprintf_r+0x186>
 800479e:	9309      	str	r3, [sp, #36]	; 0x24
 80047a0:	4e2f      	ldr	r6, [pc, #188]	; (8004860 <_svfiprintf_r+0x1f0>)
 80047a2:	2203      	movs	r2, #3
 80047a4:	0030      	movs	r0, r6
 80047a6:	7829      	ldrb	r1, [r5, #0]
 80047a8:	f000 fa08 	bl	8004bbc <memchr>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	d006      	beq.n	80047be <_svfiprintf_r+0x14e>
 80047b0:	2340      	movs	r3, #64	; 0x40
 80047b2:	1b80      	subs	r0, r0, r6
 80047b4:	4083      	lsls	r3, r0
 80047b6:	6822      	ldr	r2, [r4, #0]
 80047b8:	3501      	adds	r5, #1
 80047ba:	4313      	orrs	r3, r2
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	7829      	ldrb	r1, [r5, #0]
 80047c0:	2206      	movs	r2, #6
 80047c2:	4828      	ldr	r0, [pc, #160]	; (8004864 <_svfiprintf_r+0x1f4>)
 80047c4:	1c6e      	adds	r6, r5, #1
 80047c6:	7621      	strb	r1, [r4, #24]
 80047c8:	f000 f9f8 	bl	8004bbc <memchr>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d03c      	beq.n	800484a <_svfiprintf_r+0x1da>
 80047d0:	4b25      	ldr	r3, [pc, #148]	; (8004868 <_svfiprintf_r+0x1f8>)
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d125      	bne.n	8004822 <_svfiprintf_r+0x1b2>
 80047d6:	2207      	movs	r2, #7
 80047d8:	9b07      	ldr	r3, [sp, #28]
 80047da:	3307      	adds	r3, #7
 80047dc:	4393      	bics	r3, r2
 80047de:	3308      	adds	r3, #8
 80047e0:	9307      	str	r3, [sp, #28]
 80047e2:	6963      	ldr	r3, [r4, #20]
 80047e4:	9a04      	ldr	r2, [sp, #16]
 80047e6:	189b      	adds	r3, r3, r2
 80047e8:	6163      	str	r3, [r4, #20]
 80047ea:	e764      	b.n	80046b6 <_svfiprintf_r+0x46>
 80047ec:	4343      	muls	r3, r0
 80047ee:	0035      	movs	r5, r6
 80047f0:	2101      	movs	r1, #1
 80047f2:	189b      	adds	r3, r3, r2
 80047f4:	e7a6      	b.n	8004744 <_svfiprintf_r+0xd4>
 80047f6:	2301      	movs	r3, #1
 80047f8:	425b      	negs	r3, r3
 80047fa:	e7d0      	b.n	800479e <_svfiprintf_r+0x12e>
 80047fc:	2300      	movs	r3, #0
 80047fe:	200a      	movs	r0, #10
 8004800:	001a      	movs	r2, r3
 8004802:	3501      	adds	r5, #1
 8004804:	6063      	str	r3, [r4, #4]
 8004806:	7829      	ldrb	r1, [r5, #0]
 8004808:	1c6e      	adds	r6, r5, #1
 800480a:	3930      	subs	r1, #48	; 0x30
 800480c:	2909      	cmp	r1, #9
 800480e:	d903      	bls.n	8004818 <_svfiprintf_r+0x1a8>
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0c5      	beq.n	80047a0 <_svfiprintf_r+0x130>
 8004814:	9209      	str	r2, [sp, #36]	; 0x24
 8004816:	e7c3      	b.n	80047a0 <_svfiprintf_r+0x130>
 8004818:	4342      	muls	r2, r0
 800481a:	0035      	movs	r5, r6
 800481c:	2301      	movs	r3, #1
 800481e:	1852      	adds	r2, r2, r1
 8004820:	e7f1      	b.n	8004806 <_svfiprintf_r+0x196>
 8004822:	aa07      	add	r2, sp, #28
 8004824:	9200      	str	r2, [sp, #0]
 8004826:	0021      	movs	r1, r4
 8004828:	003a      	movs	r2, r7
 800482a:	4b10      	ldr	r3, [pc, #64]	; (800486c <_svfiprintf_r+0x1fc>)
 800482c:	9803      	ldr	r0, [sp, #12]
 800482e:	e000      	b.n	8004832 <_svfiprintf_r+0x1c2>
 8004830:	bf00      	nop
 8004832:	9004      	str	r0, [sp, #16]
 8004834:	9b04      	ldr	r3, [sp, #16]
 8004836:	3301      	adds	r3, #1
 8004838:	d1d3      	bne.n	80047e2 <_svfiprintf_r+0x172>
 800483a:	89bb      	ldrh	r3, [r7, #12]
 800483c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800483e:	065b      	lsls	r3, r3, #25
 8004840:	d400      	bmi.n	8004844 <_svfiprintf_r+0x1d4>
 8004842:	e72c      	b.n	800469e <_svfiprintf_r+0x2e>
 8004844:	2001      	movs	r0, #1
 8004846:	4240      	negs	r0, r0
 8004848:	e729      	b.n	800469e <_svfiprintf_r+0x2e>
 800484a:	aa07      	add	r2, sp, #28
 800484c:	9200      	str	r2, [sp, #0]
 800484e:	0021      	movs	r1, r4
 8004850:	003a      	movs	r2, r7
 8004852:	4b06      	ldr	r3, [pc, #24]	; (800486c <_svfiprintf_r+0x1fc>)
 8004854:	9803      	ldr	r0, [sp, #12]
 8004856:	f000 f87b 	bl	8004950 <_printf_i>
 800485a:	e7ea      	b.n	8004832 <_svfiprintf_r+0x1c2>
 800485c:	08004d1c 	.word	0x08004d1c
 8004860:	08004d22 	.word	0x08004d22
 8004864:	08004d26 	.word	0x08004d26
 8004868:	00000000 	.word	0x00000000
 800486c:	080045ad 	.word	0x080045ad

08004870 <_printf_common>:
 8004870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004872:	0016      	movs	r6, r2
 8004874:	9301      	str	r3, [sp, #4]
 8004876:	688a      	ldr	r2, [r1, #8]
 8004878:	690b      	ldr	r3, [r1, #16]
 800487a:	000c      	movs	r4, r1
 800487c:	9000      	str	r0, [sp, #0]
 800487e:	4293      	cmp	r3, r2
 8004880:	da00      	bge.n	8004884 <_printf_common+0x14>
 8004882:	0013      	movs	r3, r2
 8004884:	0022      	movs	r2, r4
 8004886:	6033      	str	r3, [r6, #0]
 8004888:	3243      	adds	r2, #67	; 0x43
 800488a:	7812      	ldrb	r2, [r2, #0]
 800488c:	2a00      	cmp	r2, #0
 800488e:	d001      	beq.n	8004894 <_printf_common+0x24>
 8004890:	3301      	adds	r3, #1
 8004892:	6033      	str	r3, [r6, #0]
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	069b      	lsls	r3, r3, #26
 8004898:	d502      	bpl.n	80048a0 <_printf_common+0x30>
 800489a:	6833      	ldr	r3, [r6, #0]
 800489c:	3302      	adds	r3, #2
 800489e:	6033      	str	r3, [r6, #0]
 80048a0:	6822      	ldr	r2, [r4, #0]
 80048a2:	2306      	movs	r3, #6
 80048a4:	0015      	movs	r5, r2
 80048a6:	401d      	ands	r5, r3
 80048a8:	421a      	tst	r2, r3
 80048aa:	d027      	beq.n	80048fc <_printf_common+0x8c>
 80048ac:	0023      	movs	r3, r4
 80048ae:	3343      	adds	r3, #67	; 0x43
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	1e5a      	subs	r2, r3, #1
 80048b4:	4193      	sbcs	r3, r2
 80048b6:	6822      	ldr	r2, [r4, #0]
 80048b8:	0692      	lsls	r2, r2, #26
 80048ba:	d430      	bmi.n	800491e <_printf_common+0xae>
 80048bc:	0022      	movs	r2, r4
 80048be:	9901      	ldr	r1, [sp, #4]
 80048c0:	9800      	ldr	r0, [sp, #0]
 80048c2:	9d08      	ldr	r5, [sp, #32]
 80048c4:	3243      	adds	r2, #67	; 0x43
 80048c6:	47a8      	blx	r5
 80048c8:	3001      	adds	r0, #1
 80048ca:	d025      	beq.n	8004918 <_printf_common+0xa8>
 80048cc:	2206      	movs	r2, #6
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	2500      	movs	r5, #0
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d105      	bne.n	80048e4 <_printf_common+0x74>
 80048d8:	6833      	ldr	r3, [r6, #0]
 80048da:	68e5      	ldr	r5, [r4, #12]
 80048dc:	1aed      	subs	r5, r5, r3
 80048de:	43eb      	mvns	r3, r5
 80048e0:	17db      	asrs	r3, r3, #31
 80048e2:	401d      	ands	r5, r3
 80048e4:	68a3      	ldr	r3, [r4, #8]
 80048e6:	6922      	ldr	r2, [r4, #16]
 80048e8:	4293      	cmp	r3, r2
 80048ea:	dd01      	ble.n	80048f0 <_printf_common+0x80>
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	18ed      	adds	r5, r5, r3
 80048f0:	2600      	movs	r6, #0
 80048f2:	42b5      	cmp	r5, r6
 80048f4:	d120      	bne.n	8004938 <_printf_common+0xc8>
 80048f6:	2000      	movs	r0, #0
 80048f8:	e010      	b.n	800491c <_printf_common+0xac>
 80048fa:	3501      	adds	r5, #1
 80048fc:	68e3      	ldr	r3, [r4, #12]
 80048fe:	6832      	ldr	r2, [r6, #0]
 8004900:	1a9b      	subs	r3, r3, r2
 8004902:	42ab      	cmp	r3, r5
 8004904:	ddd2      	ble.n	80048ac <_printf_common+0x3c>
 8004906:	0022      	movs	r2, r4
 8004908:	2301      	movs	r3, #1
 800490a:	9901      	ldr	r1, [sp, #4]
 800490c:	9800      	ldr	r0, [sp, #0]
 800490e:	9f08      	ldr	r7, [sp, #32]
 8004910:	3219      	adds	r2, #25
 8004912:	47b8      	blx	r7
 8004914:	3001      	adds	r0, #1
 8004916:	d1f0      	bne.n	80048fa <_printf_common+0x8a>
 8004918:	2001      	movs	r0, #1
 800491a:	4240      	negs	r0, r0
 800491c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800491e:	2030      	movs	r0, #48	; 0x30
 8004920:	18e1      	adds	r1, r4, r3
 8004922:	3143      	adds	r1, #67	; 0x43
 8004924:	7008      	strb	r0, [r1, #0]
 8004926:	0021      	movs	r1, r4
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	3145      	adds	r1, #69	; 0x45
 800492c:	7809      	ldrb	r1, [r1, #0]
 800492e:	18a2      	adds	r2, r4, r2
 8004930:	3243      	adds	r2, #67	; 0x43
 8004932:	3302      	adds	r3, #2
 8004934:	7011      	strb	r1, [r2, #0]
 8004936:	e7c1      	b.n	80048bc <_printf_common+0x4c>
 8004938:	0022      	movs	r2, r4
 800493a:	2301      	movs	r3, #1
 800493c:	9901      	ldr	r1, [sp, #4]
 800493e:	9800      	ldr	r0, [sp, #0]
 8004940:	9f08      	ldr	r7, [sp, #32]
 8004942:	321a      	adds	r2, #26
 8004944:	47b8      	blx	r7
 8004946:	3001      	adds	r0, #1
 8004948:	d0e6      	beq.n	8004918 <_printf_common+0xa8>
 800494a:	3601      	adds	r6, #1
 800494c:	e7d1      	b.n	80048f2 <_printf_common+0x82>
	...

08004950 <_printf_i>:
 8004950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004952:	b08b      	sub	sp, #44	; 0x2c
 8004954:	9206      	str	r2, [sp, #24]
 8004956:	000a      	movs	r2, r1
 8004958:	3243      	adds	r2, #67	; 0x43
 800495a:	9307      	str	r3, [sp, #28]
 800495c:	9005      	str	r0, [sp, #20]
 800495e:	9204      	str	r2, [sp, #16]
 8004960:	7e0a      	ldrb	r2, [r1, #24]
 8004962:	000c      	movs	r4, r1
 8004964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004966:	2a78      	cmp	r2, #120	; 0x78
 8004968:	d809      	bhi.n	800497e <_printf_i+0x2e>
 800496a:	2a62      	cmp	r2, #98	; 0x62
 800496c:	d80b      	bhi.n	8004986 <_printf_i+0x36>
 800496e:	2a00      	cmp	r2, #0
 8004970:	d100      	bne.n	8004974 <_printf_i+0x24>
 8004972:	e0be      	b.n	8004af2 <_printf_i+0x1a2>
 8004974:	497c      	ldr	r1, [pc, #496]	; (8004b68 <_printf_i+0x218>)
 8004976:	9103      	str	r1, [sp, #12]
 8004978:	2a58      	cmp	r2, #88	; 0x58
 800497a:	d100      	bne.n	800497e <_printf_i+0x2e>
 800497c:	e093      	b.n	8004aa6 <_printf_i+0x156>
 800497e:	0026      	movs	r6, r4
 8004980:	3642      	adds	r6, #66	; 0x42
 8004982:	7032      	strb	r2, [r6, #0]
 8004984:	e022      	b.n	80049cc <_printf_i+0x7c>
 8004986:	0010      	movs	r0, r2
 8004988:	3863      	subs	r0, #99	; 0x63
 800498a:	2815      	cmp	r0, #21
 800498c:	d8f7      	bhi.n	800497e <_printf_i+0x2e>
 800498e:	f7fb fbc3 	bl	8000118 <__gnu_thumb1_case_shi>
 8004992:	0016      	.short	0x0016
 8004994:	fff6001f 	.word	0xfff6001f
 8004998:	fff6fff6 	.word	0xfff6fff6
 800499c:	001ffff6 	.word	0x001ffff6
 80049a0:	fff6fff6 	.word	0xfff6fff6
 80049a4:	fff6fff6 	.word	0xfff6fff6
 80049a8:	003600a3 	.word	0x003600a3
 80049ac:	fff60083 	.word	0xfff60083
 80049b0:	00b4fff6 	.word	0x00b4fff6
 80049b4:	0036fff6 	.word	0x0036fff6
 80049b8:	fff6fff6 	.word	0xfff6fff6
 80049bc:	0087      	.short	0x0087
 80049be:	0026      	movs	r6, r4
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	3642      	adds	r6, #66	; 0x42
 80049c4:	1d11      	adds	r1, r2, #4
 80049c6:	6019      	str	r1, [r3, #0]
 80049c8:	6813      	ldr	r3, [r2, #0]
 80049ca:	7033      	strb	r3, [r6, #0]
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0a2      	b.n	8004b16 <_printf_i+0x1c6>
 80049d0:	6818      	ldr	r0, [r3, #0]
 80049d2:	6809      	ldr	r1, [r1, #0]
 80049d4:	1d02      	adds	r2, r0, #4
 80049d6:	060d      	lsls	r5, r1, #24
 80049d8:	d50b      	bpl.n	80049f2 <_printf_i+0xa2>
 80049da:	6805      	ldr	r5, [r0, #0]
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	2d00      	cmp	r5, #0
 80049e0:	da03      	bge.n	80049ea <_printf_i+0x9a>
 80049e2:	232d      	movs	r3, #45	; 0x2d
 80049e4:	9a04      	ldr	r2, [sp, #16]
 80049e6:	426d      	negs	r5, r5
 80049e8:	7013      	strb	r3, [r2, #0]
 80049ea:	4b5f      	ldr	r3, [pc, #380]	; (8004b68 <_printf_i+0x218>)
 80049ec:	270a      	movs	r7, #10
 80049ee:	9303      	str	r3, [sp, #12]
 80049f0:	e01b      	b.n	8004a2a <_printf_i+0xda>
 80049f2:	6805      	ldr	r5, [r0, #0]
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	0649      	lsls	r1, r1, #25
 80049f8:	d5f1      	bpl.n	80049de <_printf_i+0x8e>
 80049fa:	b22d      	sxth	r5, r5
 80049fc:	e7ef      	b.n	80049de <_printf_i+0x8e>
 80049fe:	680d      	ldr	r5, [r1, #0]
 8004a00:	6819      	ldr	r1, [r3, #0]
 8004a02:	1d08      	adds	r0, r1, #4
 8004a04:	6018      	str	r0, [r3, #0]
 8004a06:	062e      	lsls	r6, r5, #24
 8004a08:	d501      	bpl.n	8004a0e <_printf_i+0xbe>
 8004a0a:	680d      	ldr	r5, [r1, #0]
 8004a0c:	e003      	b.n	8004a16 <_printf_i+0xc6>
 8004a0e:	066d      	lsls	r5, r5, #25
 8004a10:	d5fb      	bpl.n	8004a0a <_printf_i+0xba>
 8004a12:	680d      	ldr	r5, [r1, #0]
 8004a14:	b2ad      	uxth	r5, r5
 8004a16:	4b54      	ldr	r3, [pc, #336]	; (8004b68 <_printf_i+0x218>)
 8004a18:	2708      	movs	r7, #8
 8004a1a:	9303      	str	r3, [sp, #12]
 8004a1c:	2a6f      	cmp	r2, #111	; 0x6f
 8004a1e:	d000      	beq.n	8004a22 <_printf_i+0xd2>
 8004a20:	3702      	adds	r7, #2
 8004a22:	0023      	movs	r3, r4
 8004a24:	2200      	movs	r2, #0
 8004a26:	3343      	adds	r3, #67	; 0x43
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	6863      	ldr	r3, [r4, #4]
 8004a2c:	60a3      	str	r3, [r4, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	db03      	blt.n	8004a3a <_printf_i+0xea>
 8004a32:	2104      	movs	r1, #4
 8004a34:	6822      	ldr	r2, [r4, #0]
 8004a36:	438a      	bics	r2, r1
 8004a38:	6022      	str	r2, [r4, #0]
 8004a3a:	2d00      	cmp	r5, #0
 8004a3c:	d102      	bne.n	8004a44 <_printf_i+0xf4>
 8004a3e:	9e04      	ldr	r6, [sp, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00c      	beq.n	8004a5e <_printf_i+0x10e>
 8004a44:	9e04      	ldr	r6, [sp, #16]
 8004a46:	0028      	movs	r0, r5
 8004a48:	0039      	movs	r1, r7
 8004a4a:	f7fb fbf5 	bl	8000238 <__aeabi_uidivmod>
 8004a4e:	9b03      	ldr	r3, [sp, #12]
 8004a50:	3e01      	subs	r6, #1
 8004a52:	5c5b      	ldrb	r3, [r3, r1]
 8004a54:	7033      	strb	r3, [r6, #0]
 8004a56:	002b      	movs	r3, r5
 8004a58:	0005      	movs	r5, r0
 8004a5a:	429f      	cmp	r7, r3
 8004a5c:	d9f3      	bls.n	8004a46 <_printf_i+0xf6>
 8004a5e:	2f08      	cmp	r7, #8
 8004a60:	d109      	bne.n	8004a76 <_printf_i+0x126>
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	07db      	lsls	r3, r3, #31
 8004a66:	d506      	bpl.n	8004a76 <_printf_i+0x126>
 8004a68:	6862      	ldr	r2, [r4, #4]
 8004a6a:	6923      	ldr	r3, [r4, #16]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	dc02      	bgt.n	8004a76 <_printf_i+0x126>
 8004a70:	2330      	movs	r3, #48	; 0x30
 8004a72:	3e01      	subs	r6, #1
 8004a74:	7033      	strb	r3, [r6, #0]
 8004a76:	9b04      	ldr	r3, [sp, #16]
 8004a78:	1b9b      	subs	r3, r3, r6
 8004a7a:	6123      	str	r3, [r4, #16]
 8004a7c:	9b07      	ldr	r3, [sp, #28]
 8004a7e:	0021      	movs	r1, r4
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	9805      	ldr	r0, [sp, #20]
 8004a84:	9b06      	ldr	r3, [sp, #24]
 8004a86:	aa09      	add	r2, sp, #36	; 0x24
 8004a88:	f7ff fef2 	bl	8004870 <_printf_common>
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	d147      	bne.n	8004b20 <_printf_i+0x1d0>
 8004a90:	2001      	movs	r0, #1
 8004a92:	4240      	negs	r0, r0
 8004a94:	b00b      	add	sp, #44	; 0x2c
 8004a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a98:	2220      	movs	r2, #32
 8004a9a:	6809      	ldr	r1, [r1, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	6022      	str	r2, [r4, #0]
 8004aa0:	2278      	movs	r2, #120	; 0x78
 8004aa2:	4932      	ldr	r1, [pc, #200]	; (8004b6c <_printf_i+0x21c>)
 8004aa4:	9103      	str	r1, [sp, #12]
 8004aa6:	0021      	movs	r1, r4
 8004aa8:	3145      	adds	r1, #69	; 0x45
 8004aaa:	700a      	strb	r2, [r1, #0]
 8004aac:	6819      	ldr	r1, [r3, #0]
 8004aae:	6822      	ldr	r2, [r4, #0]
 8004ab0:	c920      	ldmia	r1!, {r5}
 8004ab2:	0610      	lsls	r0, r2, #24
 8004ab4:	d402      	bmi.n	8004abc <_printf_i+0x16c>
 8004ab6:	0650      	lsls	r0, r2, #25
 8004ab8:	d500      	bpl.n	8004abc <_printf_i+0x16c>
 8004aba:	b2ad      	uxth	r5, r5
 8004abc:	6019      	str	r1, [r3, #0]
 8004abe:	07d3      	lsls	r3, r2, #31
 8004ac0:	d502      	bpl.n	8004ac8 <_printf_i+0x178>
 8004ac2:	2320      	movs	r3, #32
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	6023      	str	r3, [r4, #0]
 8004ac8:	2710      	movs	r7, #16
 8004aca:	2d00      	cmp	r5, #0
 8004acc:	d1a9      	bne.n	8004a22 <_printf_i+0xd2>
 8004ace:	2220      	movs	r2, #32
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	4393      	bics	r3, r2
 8004ad4:	6023      	str	r3, [r4, #0]
 8004ad6:	e7a4      	b.n	8004a22 <_printf_i+0xd2>
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	680d      	ldr	r5, [r1, #0]
 8004adc:	1d10      	adds	r0, r2, #4
 8004ade:	6949      	ldr	r1, [r1, #20]
 8004ae0:	6018      	str	r0, [r3, #0]
 8004ae2:	6813      	ldr	r3, [r2, #0]
 8004ae4:	062e      	lsls	r6, r5, #24
 8004ae6:	d501      	bpl.n	8004aec <_printf_i+0x19c>
 8004ae8:	6019      	str	r1, [r3, #0]
 8004aea:	e002      	b.n	8004af2 <_printf_i+0x1a2>
 8004aec:	066d      	lsls	r5, r5, #25
 8004aee:	d5fb      	bpl.n	8004ae8 <_printf_i+0x198>
 8004af0:	8019      	strh	r1, [r3, #0]
 8004af2:	2300      	movs	r3, #0
 8004af4:	9e04      	ldr	r6, [sp, #16]
 8004af6:	6123      	str	r3, [r4, #16]
 8004af8:	e7c0      	b.n	8004a7c <_printf_i+0x12c>
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	1d11      	adds	r1, r2, #4
 8004afe:	6019      	str	r1, [r3, #0]
 8004b00:	6816      	ldr	r6, [r2, #0]
 8004b02:	2100      	movs	r1, #0
 8004b04:	0030      	movs	r0, r6
 8004b06:	6862      	ldr	r2, [r4, #4]
 8004b08:	f000 f858 	bl	8004bbc <memchr>
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	d001      	beq.n	8004b14 <_printf_i+0x1c4>
 8004b10:	1b80      	subs	r0, r0, r6
 8004b12:	6060      	str	r0, [r4, #4]
 8004b14:	6863      	ldr	r3, [r4, #4]
 8004b16:	6123      	str	r3, [r4, #16]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	9a04      	ldr	r2, [sp, #16]
 8004b1c:	7013      	strb	r3, [r2, #0]
 8004b1e:	e7ad      	b.n	8004a7c <_printf_i+0x12c>
 8004b20:	0032      	movs	r2, r6
 8004b22:	6923      	ldr	r3, [r4, #16]
 8004b24:	9906      	ldr	r1, [sp, #24]
 8004b26:	9805      	ldr	r0, [sp, #20]
 8004b28:	9d07      	ldr	r5, [sp, #28]
 8004b2a:	47a8      	blx	r5
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d0af      	beq.n	8004a90 <_printf_i+0x140>
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	079b      	lsls	r3, r3, #30
 8004b34:	d415      	bmi.n	8004b62 <_printf_i+0x212>
 8004b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b38:	68e0      	ldr	r0, [r4, #12]
 8004b3a:	4298      	cmp	r0, r3
 8004b3c:	daaa      	bge.n	8004a94 <_printf_i+0x144>
 8004b3e:	0018      	movs	r0, r3
 8004b40:	e7a8      	b.n	8004a94 <_printf_i+0x144>
 8004b42:	0022      	movs	r2, r4
 8004b44:	2301      	movs	r3, #1
 8004b46:	9906      	ldr	r1, [sp, #24]
 8004b48:	9805      	ldr	r0, [sp, #20]
 8004b4a:	9e07      	ldr	r6, [sp, #28]
 8004b4c:	3219      	adds	r2, #25
 8004b4e:	47b0      	blx	r6
 8004b50:	3001      	adds	r0, #1
 8004b52:	d09d      	beq.n	8004a90 <_printf_i+0x140>
 8004b54:	3501      	adds	r5, #1
 8004b56:	68e3      	ldr	r3, [r4, #12]
 8004b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b5a:	1a9b      	subs	r3, r3, r2
 8004b5c:	42ab      	cmp	r3, r5
 8004b5e:	dcf0      	bgt.n	8004b42 <_printf_i+0x1f2>
 8004b60:	e7e9      	b.n	8004b36 <_printf_i+0x1e6>
 8004b62:	2500      	movs	r5, #0
 8004b64:	e7f7      	b.n	8004b56 <_printf_i+0x206>
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	08004d2d 	.word	0x08004d2d
 8004b6c:	08004d3e 	.word	0x08004d3e

08004b70 <memmove>:
 8004b70:	b510      	push	{r4, lr}
 8004b72:	4288      	cmp	r0, r1
 8004b74:	d902      	bls.n	8004b7c <memmove+0xc>
 8004b76:	188b      	adds	r3, r1, r2
 8004b78:	4298      	cmp	r0, r3
 8004b7a:	d303      	bcc.n	8004b84 <memmove+0x14>
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	e007      	b.n	8004b90 <memmove+0x20>
 8004b80:	5c8b      	ldrb	r3, [r1, r2]
 8004b82:	5483      	strb	r3, [r0, r2]
 8004b84:	3a01      	subs	r2, #1
 8004b86:	d2fb      	bcs.n	8004b80 <memmove+0x10>
 8004b88:	bd10      	pop	{r4, pc}
 8004b8a:	5ccc      	ldrb	r4, [r1, r3]
 8004b8c:	54c4      	strb	r4, [r0, r3]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d1fa      	bne.n	8004b8a <memmove+0x1a>
 8004b94:	e7f8      	b.n	8004b88 <memmove+0x18>
	...

08004b98 <_sbrk_r>:
 8004b98:	2300      	movs	r3, #0
 8004b9a:	b570      	push	{r4, r5, r6, lr}
 8004b9c:	4d06      	ldr	r5, [pc, #24]	; (8004bb8 <_sbrk_r+0x20>)
 8004b9e:	0004      	movs	r4, r0
 8004ba0:	0008      	movs	r0, r1
 8004ba2:	602b      	str	r3, [r5, #0]
 8004ba4:	f7fc faee 	bl	8001184 <_sbrk>
 8004ba8:	1c43      	adds	r3, r0, #1
 8004baa:	d103      	bne.n	8004bb4 <_sbrk_r+0x1c>
 8004bac:	682b      	ldr	r3, [r5, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d000      	beq.n	8004bb4 <_sbrk_r+0x1c>
 8004bb2:	6023      	str	r3, [r4, #0]
 8004bb4:	bd70      	pop	{r4, r5, r6, pc}
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	20000404 	.word	0x20000404

08004bbc <memchr>:
 8004bbc:	b2c9      	uxtb	r1, r1
 8004bbe:	1882      	adds	r2, r0, r2
 8004bc0:	4290      	cmp	r0, r2
 8004bc2:	d101      	bne.n	8004bc8 <memchr+0xc>
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	4770      	bx	lr
 8004bc8:	7803      	ldrb	r3, [r0, #0]
 8004bca:	428b      	cmp	r3, r1
 8004bcc:	d0fb      	beq.n	8004bc6 <memchr+0xa>
 8004bce:	3001      	adds	r0, #1
 8004bd0:	e7f6      	b.n	8004bc0 <memchr+0x4>

08004bd2 <memcpy>:
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	b510      	push	{r4, lr}
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d100      	bne.n	8004bdc <memcpy+0xa>
 8004bda:	bd10      	pop	{r4, pc}
 8004bdc:	5ccc      	ldrb	r4, [r1, r3]
 8004bde:	54c4      	strb	r4, [r0, r3]
 8004be0:	3301      	adds	r3, #1
 8004be2:	e7f8      	b.n	8004bd6 <memcpy+0x4>

08004be4 <_realloc_r>:
 8004be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004be6:	0007      	movs	r7, r0
 8004be8:	000e      	movs	r6, r1
 8004bea:	0014      	movs	r4, r2
 8004bec:	2900      	cmp	r1, #0
 8004bee:	d105      	bne.n	8004bfc <_realloc_r+0x18>
 8004bf0:	0011      	movs	r1, r2
 8004bf2:	f7ff fc49 	bl	8004488 <_malloc_r>
 8004bf6:	0005      	movs	r5, r0
 8004bf8:	0028      	movs	r0, r5
 8004bfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004bfc:	2a00      	cmp	r2, #0
 8004bfe:	d103      	bne.n	8004c08 <_realloc_r+0x24>
 8004c00:	f7ff fbd6 	bl	80043b0 <_free_r>
 8004c04:	0025      	movs	r5, r4
 8004c06:	e7f7      	b.n	8004bf8 <_realloc_r+0x14>
 8004c08:	f000 f81b 	bl	8004c42 <_malloc_usable_size_r>
 8004c0c:	9001      	str	r0, [sp, #4]
 8004c0e:	4284      	cmp	r4, r0
 8004c10:	d803      	bhi.n	8004c1a <_realloc_r+0x36>
 8004c12:	0035      	movs	r5, r6
 8004c14:	0843      	lsrs	r3, r0, #1
 8004c16:	42a3      	cmp	r3, r4
 8004c18:	d3ee      	bcc.n	8004bf8 <_realloc_r+0x14>
 8004c1a:	0021      	movs	r1, r4
 8004c1c:	0038      	movs	r0, r7
 8004c1e:	f7ff fc33 	bl	8004488 <_malloc_r>
 8004c22:	1e05      	subs	r5, r0, #0
 8004c24:	d0e8      	beq.n	8004bf8 <_realloc_r+0x14>
 8004c26:	9b01      	ldr	r3, [sp, #4]
 8004c28:	0022      	movs	r2, r4
 8004c2a:	429c      	cmp	r4, r3
 8004c2c:	d900      	bls.n	8004c30 <_realloc_r+0x4c>
 8004c2e:	001a      	movs	r2, r3
 8004c30:	0031      	movs	r1, r6
 8004c32:	0028      	movs	r0, r5
 8004c34:	f7ff ffcd 	bl	8004bd2 <memcpy>
 8004c38:	0031      	movs	r1, r6
 8004c3a:	0038      	movs	r0, r7
 8004c3c:	f7ff fbb8 	bl	80043b0 <_free_r>
 8004c40:	e7da      	b.n	8004bf8 <_realloc_r+0x14>

08004c42 <_malloc_usable_size_r>:
 8004c42:	1f0b      	subs	r3, r1, #4
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	1f18      	subs	r0, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	da01      	bge.n	8004c50 <_malloc_usable_size_r+0xe>
 8004c4c:	580b      	ldr	r3, [r1, r0]
 8004c4e:	18c0      	adds	r0, r0, r3
 8004c50:	4770      	bx	lr
	...

08004c54 <_init>:
 8004c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5a:	bc08      	pop	{r3}
 8004c5c:	469e      	mov	lr, r3
 8004c5e:	4770      	bx	lr

08004c60 <_fini>:
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c66:	bc08      	pop	{r3}
 8004c68:	469e      	mov	lr, r3
 8004c6a:	4770      	bx	lr
